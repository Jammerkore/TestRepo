using System;
using System.Collections;
using MIDRetail.Common;
using MIDRetail.DataCommon;
using MIDRetail.Data;
using MIDRetail.Business;
// 
// GENERATED:                12/10/2020 11:18:43 AM
// Logility - RO PCF VERSION Version:3.5.6165.11347  Compiled:2016-11-17T06:18:14
// SOURCE DB SERVER:         MIDRetail14
// SOURCE DATABASE:          MID_PCF_Dev
// SOURCE CLIENT:            Logility Base Cost
// LAST CHANGED BY:          LOGILITY\ROPCF  ON: 12/10/2020 11:16:19 AM
// CODEGEN COMPUTER:         MIDPCFVS2017
// VARIABLE COUNT:           600
// BUILD VERSION:            30319
// TARGET VERSION:           5.0
// 
namespace MIDRetail.ForecastComputations
{
    
    /// <summary>
    /// The ComputationsCollection class creates a collection for Computations objects.
    /// </summary>
    public class PlanComputationsCollection : BasePlanComputationsCollection
    {
        // =======
        //  FIELDS
        // =======
        // =============
        //  CONSTRUCTORS
        // =============
        public PlanComputationsCollection()
        {
            try
            {
                AddComputation(new DefaultComputations(), true);
            }
            catch (Exception )
            {
                throw;
            }
        }
    }
    /// <summary>
    /// The PlanComputationWorkArea class stores PlanCubeGroup-level work fields.
    /// </summary>
    public class PlanComputationWorkArea
    {
    }
    /// <summary>
    /// The DefaultComputations class creates most of the pieces required by the computation process.
    /// </summary>
    public class DefaultComputations : BasePlanComputations
    {
        // =======
        //  FIELDS
        // =======
        // =============
        //  CONSTRUCTORS
        // =============
        /// <summary>
        /// Creates a new instance of Computations.
        /// </summary>
        public DefaultComputations() : 
                base()
        {
            _basePlanVariables = new PlanVariables();
            _basePlanTimeTotalVariables = new PlanTimeTotalVariables();
            _basePlanQuantityVariables = new PlanQuantityVariables();
            _basePlanFormulasAndSpreads = new DefaultPlanFormulasAndSpreads(this);
            _basePlanChangeMethods = new DefaultPlanChangeMethods(this);
            _basePlanVariableInitialization = new DefaultPlanVariableInitialization(this);
            _basePlanCubeInitialization = new DefaultPlanCubeInitialization(this);
            _basePlanToolBox = new DefaultPlanToolBox(this);

            _basePlanVariables.Initialize(_basePlanTimeTotalVariables);
            _basePlanTimeTotalVariables.Initialize(_basePlanVariables);
            _basePlanQuantityVariables.Initialize();
        }
        // ===========
        //  PROPERTIES
        // ===========
        /// <summary>
        /// Gets the name of this Computations object.
        /// </summary>
        public override string Name
        {
            get
            {
                return "Default";
            }
        }
    }
    /// <summary>
    /// The PlanVariables class is where the variables are defined.
    /// </summary>
    /// <remarks>
    /// This class is where the variables are defined.
    /// </remarks>
    public class PlanVariables : BasePlanVariables
    {
        public VariableProfile TotStrBinvDlr;
        public VariableProfile TotBinvAUC;
        public VariableProfile RegStrBinvAUR;
        public VariableProfile RegStrBinvDlr;
        public VariableProfile ClearStrBinvAUR;
        public VariableProfile ClearStrBinvDlr;
        public VariableProfile RegStrBinvPctTtlDlr;
        public VariableProfile RegStrBinvPctTtlUnits;
        public VariableProfile ClearStrBinvPctTtlDlr;
        public VariableProfile ClearStrBinvPctTtlUnits;
        public VariableProfile TotStrSalesDlr;
        public VariableProfile StrRegSalesAUR;
        public VariableProfile SalesRegDlr;
        public VariableProfile TotStrSalesAUR;
        public VariableProfile StrSalesClearDlr;
        public VariableProfile StrSalesClearAUR;
        public VariableProfile SalesRegPctTtlDlr;
        public VariableProfile SalesRegPctTtlUnits;
        public VariableProfile StrSalesClearPctTtlDlr;
        public VariableProfile StrSalesClearPctTtlUnits;
        public VariableProfile CompPctTtl;
        public VariableProfile NonCompPctTtl;
        public VariableProfile TotRecUnit;
        public VariableProfile ReceiptAUR;
        public VariableProfile TotRecCostDlr;
        public VariableProfile TotMDDlr;
        public VariableProfile TotMDPct;
        public VariableProfile AdjUnitsTot;
        public VariableProfile ShrinkDlr;
        public VariableProfile ShrinkPctTot;
        public VariableProfile FWOSTotDlr;
        public VariableProfile ForwardWOSReglDlr;
        public VariableProfile ForwardWOSClearlDlr;
        public VariableProfile NoOfRacks;
        public VariableProfile TotSalesAUC;
        public VariableProfile TotStrSalesCostDlr;
        public VariableProfile SalesMargin;
        public VariableProfile TotStrBinvAUC;
        public VariableProfile TotBinvCostDlr;
        public VariableProfile ReceiptAUCTot;
        public VariableProfile ReceiptMUPct;
        public VariableProfile TotIMUPct;
        public VariableProfile GrossMarginTotDlr;
        public VariableProfile GrossMarginPctTot;
        public VariableProfile CummMUPct;
        public VariableProfile COGS;
        public VariableProfile GMROI;
        public VariableProfile OTBCostDlr;
        public VariableProfile OTBUnit;
        public VariableProfile OTBAUR;
        public VariableProfile OTBAUC;
        public VariableProfile OTBIMU;
        public VariableProfile OTBCost;
        public VariableProfile OnOrderDlr;
        public VariableProfile OnOrderAUC;
        public VariableProfile OnOrderAUR;
        public VariableProfile OnOrderCostDlr;
        public VariableProfile OnOrderIMU;
        public VariableProfile OnOrderUnit;
        public VariableProfile BINVMgnPct;
        public VariableProfile TotMDCost;
        public VariableProfile ShrinkCost;
        public VariableProfile ShrinkUnitsTot;
        public VariableProfile AdjDollars;
        public VariableProfile AdjCost;
        public VariableProfile TotStrEinvDlr;
        public VariableProfile TotStrEinvCost;
        public VariableProfile TotEinvUnits;
        public VariableProfile PermMDDlr;
        public VariableProfile PermMDCost;
        public VariableProfile PermMDDlrPct;
        public VariableProfile PosMDDlr;
        public VariableProfile PosMDCost;
        public VariableProfile PosMDDlrPct;
        public VariableProfile AdjUntiPctTot;
        public VariableProfile MaintInvDlr;
        public VariableProfile MaintInvCost;
        public VariableProfile MMUPct;
        public VariableProfile PermMDDlrPctToMD;
        public VariableProfile OTBCostDlrCum;
        public VariableProfile OTBUnitCum;
        public VariableProfile SellThruUnitPctTot;
        public VariableProfile StockSalesDlr;
        public VariableProfile StockSalesRatioTot;
        public VariableProfile TotStrSalesAUC;
        public VariableProfile TotSalesAUR;
        public VariableProfile TotSalesDlr;
        public VariableProfile TotSalesCostDlr;
        public VariableProfile TotSalesUnit;
        public VariableProfile GrossMarginPctStr;
        public VariableProfile GrossMarginTotStr;
        public VariableProfile StrCostDlr;
        public VariableProfile CompSlsDlr;
        public VariableProfile NonCompSlsDlr;
        public VariableProfile NewStores;
        public VariableProfile OpenStores;
        public VariableProfile AvgStrSlsUnit;
        public VariableProfile AvgStrSlsDlr;
        public VariableProfile TotBINVUnit;
        public VariableProfile TotStrEinvUnits;
        public VariableProfile TotStrBinvPctTtlUnits;
        public VariableProfile ShrinkUnitsStr;
        public VariableProfile ShrinkPctStr;
        public VariableProfile AdjUnitsStr;
        public VariableProfile AdjUntiPctStr;
        public VariableProfile TotStrAvgINVUnit;
        public VariableProfile TotAvgINVUnit;
        public VariableProfile TotFWOSUnit;
        public VariableProfile StrIMUPct;
        public VariableProfile SalesUnitPerRack;
        public VariableProfile SalesDlrPerRack;
        public VariableProfile DTCRtnUnit;
        public VariableProfile DTCBODlr;
        public VariableProfile DTCBOCostDlr;
        public VariableProfile DTCBOPct;
        public VariableProfile DTCCancelUnit;
        public VariableProfile DTCCancelDlr;
        public VariableProfile DTCCancelPct;
        public VariableProfile DTCCancelCostDlr;
        public VariableProfile DTCDamageRtnCostDlr;
        public VariableProfile DTCSaleableRtnCostDlr;
        public VariableProfile DTCGrossDmdUnit;
        public VariableProfile DTCGrossDmdDlr;
        public VariableProfile DTCGrossDmdAUR;
        public VariableProfile DTCGrossDmdAUC;
        public VariableProfile DTCGrossDmdCostDlr;
        public VariableProfile DTCNetDmdUnit;
        public VariableProfile DTCNetDmdDlr;
        public VariableProfile DTCNetDmdCostDlr;
        public VariableProfile DTCNetDmdPct;
        public VariableProfile DTCNetDmdAUR;
        public VariableProfile DTCNetDmdAUC;
        public VariableProfile DTCNetDmdGMDlr;
        public VariableProfile DTCNetDmdGMPct;
        public VariableProfile DTCRtnDlr;
        public VariableProfile DTCRtnCostDlr;
        public VariableProfile DTCRtnPct;
        public VariableProfile DTCAvgOrder;
        public VariableProfile DTCFWOSUnit;
        public VariableProfile DTCIMUPct;
        public VariableProfile DTCNoOfOrders;
        public VariableProfile DTCVisits;
        public VariableProfile DTCPlacement;
        public VariableProfile DTCSlsStkRatio;
        public VariableProfile DTCSellThru;
        public VariableProfile DTCSpace;
        public VariableProfile DTCAdjUnit;
        public VariableProfile DTCAdjPct;
        public VariableProfile DTCAvgInvUnit;
        public VariableProfile DTCBINVUnit;
        public VariableProfile DTCEINVUnit;
        public VariableProfile DTCBINVUnitPct;
        public VariableProfile DTCShrinkUnit;
        public VariableProfile DTCShrinkPct;
        public VariableProfile DTCBOUnit;
        public VariableProfile TotStrSalesUnitPctTTL;
        public VariableProfile TotStrSalesCostDlrPctTTL;
        public VariableProfile TotDTCSalesUnitPctTTL;
        public VariableProfile TotDTCSalesCostDlrPctTTL;
        public VariableProfile AdjCostDlrTot;
        public VariableProfile ShrinkCostDlrTot;
        public VariableProfile TotEinvCostDlr;
        public VariableProfile DTCGrossDmdGMDlr;
        public VariableProfile DTCGrsDmdGMPct;
        public VariableProfile DiscountPct;
        public VariableProfile DiscountDlr;
        public VariableProfile AfterDiscountDlr;
        public VariableProfile AfterDiscountAUR;
        public VariableProfile FreightCostPerUnit;
        public VariableProfile TotFreightCostDlr;
        public VariableProfile AfterDiscGMDlr;
        public VariableProfile VATPct;
        public VariableProfile VATDlr;
        public VariableProfile CurrXchgPct;
        public VariableProfile ConvertedSalesDlr;
        public VariableProfile SaleswithoutVATDlr;
        public VariableProfile TotStrAvgEndINVUnit;
        public VariableProfile TotEinvAUC;
        public VariableProfile Commit1Unit;
        public VariableProfile Commit1CostDlr;
        public VariableProfile Commit1AUC;
        public VariableProfile Commit2Unit;
        public VariableProfile Commit2CostDlr;
        public VariableProfile Commit2AUC;
        public VariableProfile Commit3Unit;
        public VariableProfile Commit3AUC;
        public VariableProfile Commit3CostDlr;
        public VariableProfile SquareSpace;
        public VariableProfile LinearSpace;
        public VariableProfile FloorSpace;
        public VariableProfile DTCTransactions;
        public VariableProfile SpaceConvPct;
        public VariableProfile SalesUperSqSpace;
        public VariableProfile SalesUperLinearSpace;
        public VariableProfile DensityU;
        public VariableProfile SalesperSpaceU;
        public VariableProfile TotStrSalesCDlrperSqSpace;
        public VariableProfile TotStrSalesDlrperSqSpace;
        public VariableProfile TotStrSalesCDlrperLinearSpace;
        public VariableProfile TotStrSalesDlrperLinearSpace;
        public VariableProfile DTCPlacedOrdersDlr;
        public VariableProfile DTCConvPct;
        public PlanVariables() : 
                base(true)
        {
            ForwardWOSTotalAllStoreIndex = new VariableProfile(ForwardWOSTotalAllStoreIndex.Key, "All Str Tot FWOS # IDX", eVariableCategory.Store, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Dynamic, eVariableSpreadType.None, eVariableWeekType.EOW, eEligibilityType.Stock, eSimilarStoreDateType.None, eVariableTimeTotalType.First, eVariableForecastType.None, eValueFormatType.GenericNumeric, 2, false, false, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, 37, "Other");
            ForwardWOSMarkdownAllStoreIndex = new VariableProfile(ForwardWOSMarkdownAllStoreIndex.Key, "All Str Clear FWOS # IDX", eVariableCategory.Store, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Dynamic, eVariableSpreadType.None, eVariableWeekType.EOW, eEligibilityType.Stock, eSimilarStoreDateType.None, eVariableTimeTotalType.First, eVariableForecastType.None, eValueFormatType.GenericNumeric, 2, false, false, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, 39, "Other");
            ForwardWOSRegPromoAllStoreIndex = new VariableProfile(ForwardWOSRegPromoAllStoreIndex.Key, "All Str Reg FWOS # IDX", eVariableCategory.Store, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Dynamic, eVariableSpreadType.None, eVariableWeekType.EOW, eEligibilityType.Stock, eSimilarStoreDateType.None, eVariableTimeTotalType.First, eVariableForecastType.None, eValueFormatType.GenericNumeric, 2, false, false, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, 38, "Other");
            SalesTotalAllStoreIndex = new VariableProfile(SalesTotalAllStoreIndex.Key, "All Sales # IDX", eVariableCategory.Store, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.Editable, eVariableScope.Dynamic, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eEligibilityType.Sales, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 2, false, false, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, 11, "Sales");
            SalesMarkdownAllStoreIndex = new VariableProfile(SalesMarkdownAllStoreIndex.Key, "All Sales MD # IDX", eVariableCategory.Store, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Dynamic, eVariableSpreadType.None, eVariableWeekType.EOW, eEligibilityType.Sales, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 2, false, false, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, 15, "Sales");
            SalesPromoAllStoreIndex = new VariableProfile(SalesPromoAllStoreIndex.Key, "All Sales Promo # IDX", eVariableCategory.Store, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.Editable, eVariableScope.Dynamic, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eEligibilityType.Sales, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 2, false, false, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, 13, "Sales");
            SalesRegPromoAllStoreIndex = new VariableProfile(SalesRegPromoAllStoreIndex.Key, "All Sales R/P # IDX", eVariableCategory.Store, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Dynamic, eVariableSpreadType.None, eVariableWeekType.EOW, eEligibilityType.Sales, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 2, false, false, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, 14, "Sales");
            SalesRegularAllStoreIndex = new VariableProfile(SalesRegularAllStoreIndex.Key, "All Sales Reg # IDX", eVariableCategory.Store, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.Editable, eVariableScope.Dynamic, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eEligibilityType.Sales, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 2, false, false, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, 12, "Sales");
            SellThruPctTotalAllStoreIndex = new VariableProfile(SellThruPctTotalAllStoreIndex.Key, "All Sell Thru % # IDX", eVariableCategory.Store, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Dynamic, eVariableSpreadType.None, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 2, false, false, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, 46, "Other");
            SellThruPctMarkdownAllStoreIndex = new VariableProfile(SellThruPctMarkdownAllStoreIndex.Key, "All Sell Thru % MD # IDX", eVariableCategory.Store, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Dynamic, eVariableSpreadType.None, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 2, false, false, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, 48, "Other");
            SellThruPctRegPromoAllStoreIndex = new VariableProfile(SellThruPctRegPromoAllStoreIndex.Key, "All Sell Thru % R/P # IDX", eVariableCategory.Store, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Dynamic, eVariableSpreadType.None, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 2, false, false, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, 47, "Other");
            InventoryTotalAllStoreIndex = new VariableProfile(InventoryTotalAllStoreIndex.Key, "All Str BINV # IDX", eVariableCategory.Store, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.Editable, eVariableScope.Dynamic, eVariableSpreadType.PctChange, eVariableWeekType.BOW, eEligibilityType.Stock, eSimilarStoreDateType.None, eVariableTimeTotalType.First, eVariableForecastType.None, eValueFormatType.GenericNumeric, 2, false, false, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, 22, "Stock");
            InventoryMarkdownAllStoreIndex = new VariableProfile(InventoryMarkdownAllStoreIndex.Key, "All Str BINV MD # IDX", eVariableCategory.Store, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Dynamic, eVariableSpreadType.None, eVariableWeekType.BOW, eEligibilityType.Stock, eSimilarStoreDateType.None, eVariableTimeTotalType.First, eVariableForecastType.None, eValueFormatType.GenericNumeric, 2, false, false, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, 24, "Stock");
            InventoryRegularAllStoreIndex = new VariableProfile(InventoryRegularAllStoreIndex.Key, "All Str BINV Reg # IDX", eVariableCategory.Store, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.Editable, eVariableScope.Dynamic, eVariableSpreadType.PctChange, eVariableWeekType.BOW, eEligibilityType.Stock, eSimilarStoreDateType.None, eVariableTimeTotalType.First, eVariableForecastType.None, eValueFormatType.GenericNumeric, 2, false, false, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, 23, "Stock");
            WOSTotal = new VariableProfile(WOSTotal.Key, "Fcst WOS #", eVariableCategory.Chain, eVariableType.FWOS, "WOS", eVariableDatabaseType.Real, eVariableDatabaseType.Real, eVariableStyle.Percentage, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.Plug, eVariableWeekType.EOW, eEligibilityType.Stock, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 2, false, false, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, 53, "Other");
            WOSRegPromo = new VariableProfile(WOSRegPromo.Key, "Fcst WOS R/P #", eVariableCategory.Chain, eVariableType.FWOS, "WOS_REGPROMO", eVariableDatabaseType.Real, eVariableDatabaseType.Real, eVariableStyle.Percentage, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.Plug, eVariableWeekType.EOW, eEligibilityType.Stock, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 2, false, false, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, 54, "Other");
            ForwardWOSTotal = new VariableProfile(ForwardWOSTotal.Key, "Str Tot # FWOS", eVariableCategory.Both, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.None, eVariableWeekType.EOW, eEligibilityType.Stock, eSimilarStoreDateType.None, eVariableTimeTotalType.First, eVariableForecastType.None, eValueFormatType.GenericNumeric, 2, false, false, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, 31, "Other");
            ForwardWOSMarkdown = new VariableProfile(ForwardWOSMarkdown.Key, "Str Clear # FWOS", eVariableCategory.Both, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.None, eVariableWeekType.EOW, eEligibilityType.Stock, eSimilarStoreDateType.None, eVariableTimeTotalType.First, eVariableForecastType.None, eValueFormatType.GenericNumeric, 2, false, false, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, 33, "Other");
            ForwardWOSRegPromo = new VariableProfile(ForwardWOSRegPromo.Key, "Str Reg # FWOS", eVariableCategory.Both, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.None, eVariableWeekType.EOW, eEligibilityType.Stock, eSimilarStoreDateType.None, eVariableTimeTotalType.First, eVariableForecastType.None, eValueFormatType.GenericNumeric, 2, false, false, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, 32, "Other");
            ReceiptTotalUnits = new VariableProfile(ReceiptTotalUnits.Key, "Receipts #", eVariableCategory.Both, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Units, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.None, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 0, false, false, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, 25, "Receipt");
            ReceiptMarkdownUnits = new VariableProfile(ReceiptMarkdownUnits.Key, "Receipts MD #", eVariableCategory.Both, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Units, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.None, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 0, false, false, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, 27, "Receipt");
            ReceiptRegularUnits = new VariableProfile(ReceiptRegularUnits.Key, "Receipts Reg #", eVariableCategory.Both, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Units, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.None, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 0, false, false, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, 26, "Receipt");
            SalesStockRatioTotal = new VariableProfile(SalesStockRatioTotal.Key, "Str S/S Ratio", eVariableCategory.Both, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.None, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 2, false, false, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, 28, "KPI");
            SalesStockRatioMarkdown = new VariableProfile(SalesStockRatioMarkdown.Key, "Str S/S Ratio MD", eVariableCategory.Both, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.None, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 2, false, false, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, 30, "KPI");
            SalesStockRatioRegPromo = new VariableProfile(SalesStockRatioRegPromo.Key, "Str S/S Ratio R/P", eVariableCategory.Both, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.None, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 2, false, false, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, 29, "KPI");
            SalesTotalUnits = new VariableProfile(SalesTotalUnits.Key, "Tot Sales #", eVariableCategory.Both, eVariableType.Sales, "SALES", eVariableDatabaseType.Integer, eVariableDatabaseType.Integer, eVariableStyle.Units, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eEligibilityType.Sales, eSimilarStoreDateType.Sales, eVariableTimeTotalType.All, eVariableForecastType.Sales, eValueFormatType.GenericNumeric, 0, true, true, false, eLevelRollType.Sum, eDayToWeekRollType.None, eStoreToChainRollType.Sum, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 1, "Sales");
            SalesMarkdownUnits = new VariableProfile(SalesMarkdownUnits.Key, "Str Clear Sales #", eVariableCategory.Both, eVariableType.Sales, "SALES_MKDN", eVariableDatabaseType.Integer, eVariableDatabaseType.Integer, eVariableStyle.Units, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eEligibilityType.Sales, eSimilarStoreDateType.Sales, eVariableTimeTotalType.All, eVariableForecastType.Sales, eValueFormatType.GenericNumeric, 0, false, false, false, eLevelRollType.Sum, eDayToWeekRollType.Sum, eStoreToChainRollType.Sum, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 5, "Sales");
            SalesPromoUnits = new VariableProfile(SalesPromoUnits.Key, "Str Promo Sales #", eVariableCategory.Both, eVariableType.Sales, "SALES_PROMO", eVariableDatabaseType.Integer, eVariableDatabaseType.Integer, eVariableStyle.Units, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eEligibilityType.Sales, eSimilarStoreDateType.Sales, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 0, true, true, false, eLevelRollType.Sum, eDayToWeekRollType.Sum, eStoreToChainRollType.Sum, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 3, "Sales");
            SalesRegPromoUnits = new VariableProfile(SalesRegPromoUnits.Key, "Str R/P Sales #", eVariableCategory.Both, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Units, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eEligibilityType.Sales, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 0, false, false, false, eLevelRollType.Sum, eDayToWeekRollType.Sum, eStoreToChainRollType.Sum, 0, 0, 0, 0, 0, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, 4, "Sales");
            SalesRegularUnits = new VariableProfile(SalesRegularUnits.Key, "Str Reg Sales #", eVariableCategory.Both, eVariableType.Sales, "SALES_REG", eVariableDatabaseType.Integer, eVariableDatabaseType.Integer, eVariableStyle.Units, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eEligibilityType.Sales, eSimilarStoreDateType.Sales, eVariableTimeTotalType.All, eVariableForecastType.Sales, eValueFormatType.GenericNumeric, 0, true, true, false, eLevelRollType.Sum, eDayToWeekRollType.Sum, eStoreToChainRollType.Sum, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 2, "Sales");
            SellThruPctTotal = new VariableProfile(SellThruPctTotal.Key, "Str Sell Thru", eVariableCategory.Both, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.None, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 2, false, false, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, 40, "KPI");
            SellThruPctMarkdown = new VariableProfile(SellThruPctMarkdown.Key, "Str Sell Thru Clear", eVariableCategory.Both, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.None, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 2, false, false, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, 42, "KPI");
            SellThruPctRegPromo = new VariableProfile(SellThruPctRegPromo.Key, "Str Sell Thru R/P", eVariableCategory.Both, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.None, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 2, false, false, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, 41, "KPI");
            ForwardWOSTotalSetIndex = new VariableProfile(ForwardWOSTotalSetIndex.Key, "Set Str Tot FWOS # IDX ", eVariableCategory.Store, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Dynamic, eVariableSpreadType.None, eVariableWeekType.EOW, eEligibilityType.Stock, eSimilarStoreDateType.None, eVariableTimeTotalType.First, eVariableForecastType.None, eValueFormatType.GenericNumeric, 2, false, false, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, 34, "Other");
            ForwardWOSMarkdownSetIndex = new VariableProfile(ForwardWOSMarkdownSetIndex.Key, "Set Str Clear FWOS # IDX", eVariableCategory.Store, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Dynamic, eVariableSpreadType.None, eVariableWeekType.EOW, eEligibilityType.Stock, eSimilarStoreDateType.None, eVariableTimeTotalType.First, eVariableForecastType.None, eValueFormatType.GenericNumeric, 2, false, false, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, 36, "Other");
            ForwardWOSRegPromoSetIndex = new VariableProfile(ForwardWOSRegPromoSetIndex.Key, "Set Str Reg FWOS # IDX", eVariableCategory.Store, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Dynamic, eVariableSpreadType.None, eVariableWeekType.EOW, eEligibilityType.Stock, eSimilarStoreDateType.None, eVariableTimeTotalType.First, eVariableForecastType.None, eValueFormatType.GenericNumeric, 2, false, false, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, 35, "Other");
            SalesTotalSetIndex = new VariableProfile(SalesTotalSetIndex.Key, "Set Sales # IDX", eVariableCategory.Store, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.Editable, eVariableScope.Dynamic, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eEligibilityType.Sales, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 2, false, false, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, 6, "Sales");
            SalesMarkdownSetIndex = new VariableProfile(SalesMarkdownSetIndex.Key, "Set Sales MD # IDX", eVariableCategory.Store, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Dynamic, eVariableSpreadType.None, eVariableWeekType.EOW, eEligibilityType.Sales, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 2, false, false, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, 10, "Sales");
            SalesPromoSetIndex = new VariableProfile(SalesPromoSetIndex.Key, "Set Sales Promo # IDX", eVariableCategory.Store, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.Editable, eVariableScope.Dynamic, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eEligibilityType.Sales, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 2, false, false, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, 8, "Sales");
            SalesRegPromoSetIndex = new VariableProfile(SalesRegPromoSetIndex.Key, "Set Sales R/P # IDX", eVariableCategory.Store, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Dynamic, eVariableSpreadType.None, eVariableWeekType.EOW, eEligibilityType.Sales, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 2, false, false, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, 9, "Sales");
            SalesRegularSetIndex = new VariableProfile(SalesRegularSetIndex.Key, "Set Sales Reg # IDX", eVariableCategory.Store, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.Editable, eVariableScope.Dynamic, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eEligibilityType.Sales, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 2, false, false, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, 7, "Sales");
            SellThruPctTotalSetIndex = new VariableProfile(SellThruPctTotalSetIndex.Key, "Set Sell Thru % # IDX", eVariableCategory.Store, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Dynamic, eVariableSpreadType.None, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 2, false, false, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, 43, "Other");
            SellThruPctMarkdownSetIndex = new VariableProfile(SellThruPctMarkdownSetIndex.Key, "Set Sell Thru % MD # IDX", eVariableCategory.Store, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Dynamic, eVariableSpreadType.None, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 2, false, false, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, 45, "Other");
            SellThruPctRegPromoSetIndex = new VariableProfile(SellThruPctRegPromoSetIndex.Key, "Set Sell Thru % R/P # IDX", eVariableCategory.Store, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Dynamic, eVariableSpreadType.None, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 2, false, false, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, 44, "Other");
            InventoryTotalSetIndex = new VariableProfile(InventoryTotalSetIndex.Key, "Set Str BINV # IDX", eVariableCategory.Store, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.Editable, eVariableScope.Dynamic, eVariableSpreadType.PctChange, eVariableWeekType.BOW, eEligibilityType.Stock, eSimilarStoreDateType.None, eVariableTimeTotalType.First, eVariableForecastType.None, eValueFormatType.GenericNumeric, 2, false, false, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, 19, "Stock");
            InventoryMarkdownSetIndex = new VariableProfile(InventoryMarkdownSetIndex.Key, "Set Str BINV MD # IDX", eVariableCategory.Store, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Dynamic, eVariableSpreadType.None, eVariableWeekType.BOW, eEligibilityType.Stock, eSimilarStoreDateType.None, eVariableTimeTotalType.First, eVariableForecastType.None, eValueFormatType.GenericNumeric, 2, false, false, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, 21, "Stock");
            InventoryRegularSetIndex = new VariableProfile(InventoryRegularSetIndex.Key, "Set Str BINV Reg # IDX", eVariableCategory.Store, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.Editable, eVariableScope.Dynamic, eVariableSpreadType.PctChange, eVariableWeekType.BOW, eEligibilityType.Stock, eSimilarStoreDateType.None, eVariableTimeTotalType.First, eVariableForecastType.None, eValueFormatType.GenericNumeric, 2, false, false, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, 20, "Stock");
            InventoryTotalUnits = new VariableProfile(InventoryTotalUnits.Key, "Tot BINV #", eVariableCategory.Both, eVariableType.BegStock, "STOCK", eVariableDatabaseType.Integer, eVariableDatabaseType.Integer, eVariableStyle.Units, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.BOW, eEligibilityType.Stock, eSimilarStoreDateType.Stock, eVariableTimeTotalType.First, eVariableForecastType.Stock, eValueFormatType.GenericNumeric, 0, true, true, false, eLevelRollType.Sum, eDayToWeekRollType.First, eStoreToChainRollType.Sum, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 16, "Stock");
            InventoryMarkdownUnits = new VariableProfile(InventoryMarkdownUnits.Key, "Str Clear BINV #", eVariableCategory.Both, eVariableType.BegStock, "STOCK_MKDN", eVariableDatabaseType.Integer, eVariableDatabaseType.Integer, eVariableStyle.Units, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.BOW, eEligibilityType.Stock, eSimilarStoreDateType.Stock, eVariableTimeTotalType.First, eVariableForecastType.Stock, eValueFormatType.GenericNumeric, 0, false, true, false, eLevelRollType.Sum, eDayToWeekRollType.First, eStoreToChainRollType.Sum, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 18, "Stock");
            InventoryRegularUnits = new VariableProfile(InventoryRegularUnits.Key, "Str Reg BINV #", eVariableCategory.Both, eVariableType.BegStock, "STOCK_REG", eVariableDatabaseType.Integer, eVariableDatabaseType.Integer, eVariableStyle.Units, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.BOW, eEligibilityType.Stock, eSimilarStoreDateType.Stock, eVariableTimeTotalType.First, eVariableForecastType.Stock, eValueFormatType.GenericNumeric, 0, true, true, false, eLevelRollType.Sum, eDayToWeekRollType.First, eStoreToChainRollType.Sum, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 17, "Stock");
            TotStrBinvDlr = new VariableProfile(NextSequence, "BINV Rtl", eVariableCategory.Both, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Dollar, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.BOW, eEligibilityType.Stock, eSimilarStoreDateType.Stock, eVariableTimeTotalType.First, eVariableForecastType.Stock, eValueFormatType.GenericNumeric, 0, true, true, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Stock");
            TotBinvAUC = new VariableProfile(NextSequence, "Tot BINV AUC", eVariableCategory.Chain, eVariableType.BegStock, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.BOW, eEligibilityType.Stock, eSimilarStoreDateType.Stock, eVariableTimeTotalType.First, eVariableForecastType.None, eValueFormatType.GenericNumeric, 2, false, false, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Stock");
            RegStrBinvAUR = new VariableProfile(NextSequence, "BINV Reg AUR", eVariableCategory.Both, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.BOW, eEligibilityType.Stock, eSimilarStoreDateType.Stock, eVariableTimeTotalType.First, eVariableForecastType.None, eValueFormatType.GenericNumeric, 2, false, false, false, eLevelRollType.Sum, eDayToWeekRollType.None, eStoreToChainRollType.Sum, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Stock");
            RegStrBinvDlr = new VariableProfile(NextSequence, "BINV Reg $", eVariableCategory.Both, eVariableType.BegStock, "STOCK_REG_DLR", eVariableDatabaseType.Integer, eVariableDatabaseType.Integer, eVariableStyle.Dollar, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.BOW, eEligibilityType.Stock, eSimilarStoreDateType.Stock, eVariableTimeTotalType.First, eVariableForecastType.Stock, eValueFormatType.GenericNumeric, 0, true, true, false, eLevelRollType.Sum, eDayToWeekRollType.None, eStoreToChainRollType.Sum, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Stock");
            ClearStrBinvAUR = new VariableProfile(NextSequence, "BINV MD AUR", eVariableCategory.Both, eVariableType.Other, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.BOW, eEligibilityType.Stock, eSimilarStoreDateType.Stock, eVariableTimeTotalType.First, eVariableForecastType.None, eValueFormatType.GenericNumeric, 2, false, false, false, eLevelRollType.Sum, eDayToWeekRollType.None, eStoreToChainRollType.Sum, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Stock");
            ClearStrBinvDlr = new VariableProfile(NextSequence, "BINV MD $", eVariableCategory.Both, eVariableType.BegStock, "STOCK_MKDN_DLR", eVariableDatabaseType.Integer, eVariableDatabaseType.Integer, eVariableStyle.Dollar, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.BOW, eEligibilityType.Stock, eSimilarStoreDateType.Stock, eVariableTimeTotalType.First, eVariableForecastType.None, eValueFormatType.GenericNumeric, 0, false, false, false, eLevelRollType.Sum, eDayToWeekRollType.First, eStoreToChainRollType.Sum, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Stock");
            RegStrBinvPctTtlDlr = new VariableProfile(NextSequence, "BINV Reg $ % TTL", eVariableCategory.Both, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.BOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.First, eVariableForecastType.None, eValueFormatType.GenericNumeric, 2, false, false, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Stock");
            RegStrBinvPctTtlUnits = new VariableProfile(NextSequence, "Str Reg BINV # % TTL", eVariableCategory.Chain, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.BOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.First, eVariableForecastType.None, eValueFormatType.GenericNumeric, 2, false, false, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Stock");
            ClearStrBinvPctTtlDlr = new VariableProfile(NextSequence, "BINV MD $ % TTL", eVariableCategory.Both, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.BOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.First, eVariableForecastType.None, eValueFormatType.GenericNumeric, 2, false, false, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Stock");
            ClearStrBinvPctTtlUnits = new VariableProfile(NextSequence, "Str Clear BINV # % TTL", eVariableCategory.Chain, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.BOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.First, eVariableForecastType.None, eValueFormatType.GenericNumeric, 2, false, false, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Stock");
            TotStrSalesDlr = new VariableProfile(NextSequence, "Tot Str Sales $", eVariableCategory.Chain, eVariableType.None, "TOT_STR_SALES_DLR", eVariableDatabaseType.Integer, eVariableDatabaseType.Integer, eVariableStyle.Dollar, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eEligibilityType.Sales, eSimilarStoreDateType.Sales, eVariableTimeTotalType.All, eVariableForecastType.Sales, eValueFormatType.GenericNumeric, 0, true, true, false, eLevelRollType.Sum, eDayToWeekRollType.None, eStoreToChainRollType.Sum, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Sales");
            StrRegSalesAUR = new VariableProfile(NextSequence, "Str Reg Sales AUR", eVariableCategory.Chain, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 2, false, false, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Sales");
            SalesRegDlr = new VariableProfile(NextSequence, "Str Reg Sales $", eVariableCategory.Chain, eVariableType.Sales, "SALES_REG_DLR", eVariableDatabaseType.Integer, eVariableDatabaseType.Integer, eVariableStyle.Dollar, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eEligibilityType.Sales, eSimilarStoreDateType.Sales, eVariableTimeTotalType.All, eVariableForecastType.Sales, eValueFormatType.GenericNumeric, 0, true, true, false, eLevelRollType.Sum, eDayToWeekRollType.None, eStoreToChainRollType.Sum, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Sales");
            TotStrSalesAUR = new VariableProfile(NextSequence, "Tot Str Sales AUR", eVariableCategory.Chain, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eEligibilityType.Sales, eSimilarStoreDateType.Sales, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 2, false, false, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Sales");
            StrSalesClearDlr = new VariableProfile(NextSequence, "Str Clear Sales $", eVariableCategory.Chain, eVariableType.Sales, "STR_SALES_MKDN_DLR", eVariableDatabaseType.Integer, eVariableDatabaseType.Integer, eVariableStyle.Dollar, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eEligibilityType.Sales, eSimilarStoreDateType.Sales, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 0, false, false, false, eLevelRollType.Sum, eDayToWeekRollType.None, eStoreToChainRollType.Sum, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Sales");
            StrSalesClearAUR = new VariableProfile(NextSequence, "Str Clear Sales AUR", eVariableCategory.Chain, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eEligibilityType.Sales, eSimilarStoreDateType.Sales, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 2, false, false, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Sales");
            SalesRegPctTtlDlr = new VariableProfile(NextSequence, "Str Reg Sales $ % TTL", eVariableCategory.Chain, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 2, false, false, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Sales");
            SalesRegPctTtlUnits = new VariableProfile(NextSequence, "Str Reg Sales # % TTL", eVariableCategory.Chain, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 2, false, false, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Sales");
            StrSalesClearPctTtlDlr = new VariableProfile(NextSequence, "Str Clear Sales $ % TTL", eVariableCategory.Chain, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 2, false, false, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Sales");
            StrSalesClearPctTtlUnits = new VariableProfile(NextSequence, "Str Clear Sales # % TTL", eVariableCategory.Chain, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 2, false, false, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Sales");
            CompPctTtl = new VariableProfile(NextSequence, "% Comp Tot", eVariableCategory.Chain, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 2, false, false, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Sales");
            NonCompPctTtl = new VariableProfile(NextSequence, "% Non Comp Tot", eVariableCategory.Chain, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 2, false, false, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Sales");
            TotRecUnit = new VariableProfile(NextSequence, "Tot Rec #", eVariableCategory.Both, eVariableType.Other, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Units, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 0, false, false, false, eLevelRollType.Sum, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Receipt");
            ReceiptAUR = new VariableProfile(NextSequence, "Rec AUR", eVariableCategory.Both, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 2, false, false, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Receipt");
            TotRecCostDlr = new VariableProfile(NextSequence, "Tot Rec C$", eVariableCategory.Both, eVariableType.Other, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Dollar, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 0, false, false, false, eLevelRollType.Sum, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Receipt");
            TotMDDlr = new VariableProfile(NextSequence, "Tot MD Rtl", eVariableCategory.Both, eVariableType.None, "MD_DLR", eVariableDatabaseType.Integer, eVariableDatabaseType.Integer, eVariableStyle.Dollar, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 0, false, false, false, eLevelRollType.None, eDayToWeekRollType.Sum, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Markdown");
            TotMDPct = new VariableProfile(NextSequence, "Tot MD Rtl Pct", eVariableCategory.Both, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 2, false, false, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Markdown");
            AdjUnitsTot = new VariableProfile(NextSequence, "Tot Adj #", eVariableCategory.Chain, eVariableType.Other, "ADJ_UNITS", eVariableDatabaseType.Integer, eVariableDatabaseType.Integer, eVariableStyle.Units, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 0, false, false, false, eLevelRollType.Sum, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Stock");
            ShrinkDlr = new VariableProfile(NextSequence, "Shr Rtl", eVariableCategory.Both, eVariableType.None, "SHRINK_DLR", eVariableDatabaseType.Integer, eVariableDatabaseType.Integer, eVariableStyle.Dollar, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 0, false, false, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Other");
            ShrinkPctTot = new VariableProfile(NextSequence, "Tot Shrink C$ %", eVariableCategory.Chain, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 2, false, false, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Stock");
            FWOSTotDlr = new VariableProfile(NextSequence, "WOS Rtl", eVariableCategory.Both, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.First, eVariableForecastType.None, eValueFormatType.GenericNumeric, 2, false, false, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Other");
            ForwardWOSReglDlr = new VariableProfile(NextSequence, "Reg $ FWOS", eVariableCategory.Both, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.None, eVariableWeekType.EOW, eEligibilityType.Stock, eSimilarStoreDateType.None, eVariableTimeTotalType.First, eVariableForecastType.None, eValueFormatType.GenericNumeric, 2, false, false, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Other");
            ForwardWOSClearlDlr = new VariableProfile(NextSequence, "MD $ FWOS", eVariableCategory.Both, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.None, eVariableWeekType.EOW, eEligibilityType.Stock, eSimilarStoreDateType.None, eVariableTimeTotalType.First, eVariableForecastType.None, eValueFormatType.GenericNumeric, 2, false, false, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Other");
            NoOfRacks = new VariableProfile(NextSequence, "# of Racks", eVariableCategory.Both, eVariableType.Other, "NO_RACKS", eVariableDatabaseType.Integer, eVariableDatabaseType.Integer, eVariableStyle.Units, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.None, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 0, false, false, false, eLevelRollType.Average, eDayToWeekRollType.Average, eStoreToChainRollType.Average, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "KPI");
            TotSalesAUC = new VariableProfile(NextSequence, "Tot Sales AUC", eVariableCategory.Chain, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 2, false, false, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Sales");
            TotStrSalesCostDlr = new VariableProfile(NextSequence, "Tot Str Sales C$", eVariableCategory.Chain, eVariableType.None, "TOT_STR_SALES_COST_DLR", eVariableDatabaseType.Integer, eVariableDatabaseType.Integer, eVariableStyle.Dollar, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eEligibilityType.Sales, eSimilarStoreDateType.Sales, eVariableTimeTotalType.All, eVariableForecastType.Sales, eValueFormatType.GenericNumeric, 0, true, true, false, eLevelRollType.Sum, eDayToWeekRollType.None, eStoreToChainRollType.Sum, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Sales");
            SalesMargin = new VariableProfile(NextSequence, "Sales Margin", eVariableCategory.Both, eVariableType.None, "SALES_MARGIN", eVariableDatabaseType.Integer, eVariableDatabaseType.Integer, eVariableStyle.Dollar, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eEligibilityType.Sales, eSimilarStoreDateType.Sales, eVariableTimeTotalType.All, eVariableForecastType.Sales, eValueFormatType.GenericNumeric, 0, true, true, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Sales");
            TotStrBinvAUC = new VariableProfile(NextSequence, "BINV Tot AUC", eVariableCategory.Both, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.BOW, eEligibilityType.Stock, eSimilarStoreDateType.Stock, eVariableTimeTotalType.First, eVariableForecastType.None, eValueFormatType.GenericNumeric, 2, false, false, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Stock");
            TotBinvCostDlr = new VariableProfile(NextSequence, "Tot BINV C$", eVariableCategory.Both, eVariableType.BegStock, "BINV_TOT_COST_DLR", eVariableDatabaseType.Integer, eVariableDatabaseType.Integer, eVariableStyle.Dollar, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.BOW, eEligibilityType.Stock, eSimilarStoreDateType.Stock, eVariableTimeTotalType.First, eVariableForecastType.Stock, eValueFormatType.GenericNumeric, 0, true, true, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Stock");
            ReceiptAUCTot = new VariableProfile(NextSequence, "Tot Rec AUC", eVariableCategory.Chain, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 2, false, false, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Receipt");
            ReceiptMUPct = new VariableProfile(NextSequence, "RMU %", eVariableCategory.Both, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 2, false, false, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Receipt");
            TotIMUPct = new VariableProfile(NextSequence, "Tot IMU %", eVariableCategory.Chain, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 2, false, false, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Receipt");
            GrossMarginTotDlr = new VariableProfile(NextSequence, "Tot GM $", eVariableCategory.Both, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Dollar, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eEligibilityType.Sales, eSimilarStoreDateType.Sales, eVariableTimeTotalType.All, eVariableForecastType.Sales, eValueFormatType.GenericNumeric, 0, true, true, false, eLevelRollType.Sum, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Sales");
            GrossMarginPctTot = new VariableProfile(NextSequence, "Tot GM %", eVariableCategory.Both, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eEligibilityType.Sales, eSimilarStoreDateType.Sales, eVariableTimeTotalType.All, eVariableForecastType.Sales, eValueFormatType.GenericNumeric, 2, true, true, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Sales");
            CummMUPct = new VariableProfile(NextSequence, "CMU %", eVariableCategory.Both, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 2, false, false, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Receipt");
            COGS = new VariableProfile(NextSequence, "COGS", eVariableCategory.Both, eVariableType.None, "COGS", eVariableDatabaseType.Integer, eVariableDatabaseType.Integer, eVariableStyle.Dollar, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eEligibilityType.Sales, eSimilarStoreDateType.Sales, eVariableTimeTotalType.All, eVariableForecastType.Sales, eValueFormatType.GenericNumeric, 0, true, true, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Sales");
            GMROI = new VariableProfile(NextSequence, "GMROI Rtl", eVariableCategory.Both, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Dollar, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eEligibilityType.Sales, eSimilarStoreDateType.Sales, eVariableTimeTotalType.All, eVariableForecastType.Sales, eValueFormatType.GenericNumeric, 0, true, true, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Sales");
            OTBCostDlr = new VariableProfile(NextSequence, "Tot OTB C$", eVariableCategory.Chain, eVariableType.Other, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Dollar, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 0, false, false, false, eLevelRollType.Sum, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Receipt");
            OTBUnit = new VariableProfile(NextSequence, "Tot OTB #", eVariableCategory.Chain, eVariableType.Other, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Units, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 0, false, false, false, eLevelRollType.Sum, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Receipt");
            OTBAUR = new VariableProfile(NextSequence, "OTB AUR", eVariableCategory.Chain, eVariableType.Other, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 2, false, false, false, eLevelRollType.Sum, eDayToWeekRollType.Sum, eStoreToChainRollType.Sum, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Receipt");
            OTBAUC = new VariableProfile(NextSequence, "OTB AUC", eVariableCategory.Chain, eVariableType.Other, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 2, false, false, false, eLevelRollType.Sum, eDayToWeekRollType.Sum, eStoreToChainRollType.Sum, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Receipt");
            OTBIMU = new VariableProfile(NextSequence, "OTB IMU %", eVariableCategory.Chain, eVariableType.Other, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 2, false, false, false, eLevelRollType.Sum, eDayToWeekRollType.Sum, eStoreToChainRollType.Sum, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Receipt");
            OTBCost = new VariableProfile(NextSequence, "OTB Cost", eVariableCategory.Chain, eVariableType.Other, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Dollar, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 0, false, false, false, eLevelRollType.Sum, eDayToWeekRollType.Sum, eStoreToChainRollType.Sum, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Receipt");
            OnOrderDlr = new VariableProfile(NextSequence, "Tot On Order $", eVariableCategory.Chain, eVariableType.Other, "ONORDER_DLR", eVariableDatabaseType.Integer, eVariableDatabaseType.Integer, eVariableStyle.Dollar, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 0, false, false, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Receipt");
            OnOrderAUC = new VariableProfile(NextSequence, "Tot On Order AUC", eVariableCategory.Chain, eVariableType.Other, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 2, false, false, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Receipt");
            OnOrderAUR = new VariableProfile(NextSequence, "Tot On Order AUR", eVariableCategory.Chain, eVariableType.Other, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 2, false, false, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Receipt");
            OnOrderCostDlr = new VariableProfile(NextSequence, "Tot On Order C$", eVariableCategory.Chain, eVariableType.Other, "ONORDER_COST_DLR", eVariableDatabaseType.Integer, eVariableDatabaseType.Integer, eVariableStyle.Dollar, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 0, false, false, false, eLevelRollType.Sum, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Receipt");
            OnOrderIMU = new VariableProfile(NextSequence, "On Order IMU %", eVariableCategory.Chain, eVariableType.Other, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 2, false, false, false, eLevelRollType.Sum, eDayToWeekRollType.Sum, eStoreToChainRollType.Sum, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Receipt");
            OnOrderUnit = new VariableProfile(NextSequence, "Tot On Order #", eVariableCategory.Chain, eVariableType.Other, "ONORDER_UNIT", eVariableDatabaseType.Integer, eVariableDatabaseType.Integer, eVariableStyle.Units, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 0, false, false, false, eLevelRollType.Sum, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Receipt");
            BINVMgnPct = new VariableProfile(NextSequence, "BINV Mgn Pct", eVariableCategory.Both, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.BOW, eEligibilityType.Stock, eSimilarStoreDateType.Stock, eVariableTimeTotalType.First, eVariableForecastType.None, eValueFormatType.GenericNumeric, 2, false, false, false, eLevelRollType.Sum, eDayToWeekRollType.None, eStoreToChainRollType.Sum, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Stock");
            TotMDCost = new VariableProfile(NextSequence, "Tot MD Cost", eVariableCategory.Both, eVariableType.None, "MD_COST", eVariableDatabaseType.Integer, eVariableDatabaseType.Integer, eVariableStyle.Dollar, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 0, false, false, false, eLevelRollType.None, eDayToWeekRollType.Sum, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Markdown");
            ShrinkCost = new VariableProfile(NextSequence, "Shr Cost", eVariableCategory.Both, eVariableType.None, "SHRINK_COST", eVariableDatabaseType.Integer, eVariableDatabaseType.Integer, eVariableStyle.Dollar, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 0, false, false, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Other");
            ShrinkUnitsTot = new VariableProfile(NextSequence, "Tot Shrink #", eVariableCategory.Chain, eVariableType.None, "TOT_SHRINK_UNIT", eVariableDatabaseType.Integer, eVariableDatabaseType.Integer, eVariableStyle.Units, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 0, false, false, false, eLevelRollType.Sum, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Stock");
            AdjDollars = new VariableProfile(NextSequence, "Adj Rtl", eVariableCategory.Both, eVariableType.None, "ADJ_DLR", eVariableDatabaseType.Integer, eVariableDatabaseType.Integer, eVariableStyle.Dollar, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eEligibilityType.Stock, eSimilarStoreDateType.Stock, eVariableTimeTotalType.All, eVariableForecastType.Stock, eValueFormatType.GenericNumeric, 0, true, true, false, eLevelRollType.Sum, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Other");
            AdjCost = new VariableProfile(NextSequence, "Adj Cost", eVariableCategory.Both, eVariableType.None, "ADJ_COST", eVariableDatabaseType.Integer, eVariableDatabaseType.Integer, eVariableStyle.Dollar, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eEligibilityType.Stock, eSimilarStoreDateType.Stock, eVariableTimeTotalType.All, eVariableForecastType.Stock, eValueFormatType.GenericNumeric, 0, true, true, false, eLevelRollType.Sum, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Other");
            TotStrEinvDlr = new VariableProfile(NextSequence, "EINV Rtl", eVariableCategory.Both, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Dollar, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eEligibilityType.Stock, eSimilarStoreDateType.Stock, eVariableTimeTotalType.First, eVariableForecastType.Stock, eValueFormatType.GenericNumeric, 0, true, true, false, eLevelRollType.Sum, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Stock");
            TotStrEinvCost = new VariableProfile(NextSequence, "EINV Cost", eVariableCategory.Both, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Dollar, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eEligibilityType.Stock, eSimilarStoreDateType.Stock, eVariableTimeTotalType.First, eVariableForecastType.Stock, eValueFormatType.GenericNumeric, 0, true, true, false, eLevelRollType.Sum, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Stock");
            TotEinvUnits = new VariableProfile(NextSequence, "Tot EINV #", eVariableCategory.Chain, eVariableType.None, "TOT_EINV_UNIT", eVariableDatabaseType.Integer, eVariableDatabaseType.Integer, eVariableStyle.Units, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eEligibilityType.Stock, eSimilarStoreDateType.Stock, eVariableTimeTotalType.Last, eVariableForecastType.Stock, eValueFormatType.GenericNumeric, 0, true, true, false, eLevelRollType.Sum, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Stock");
            PermMDDlr = new VariableProfile(NextSequence, "PMD Rtl", eVariableCategory.Both, eVariableType.None, "PERM_MD_DLR", eVariableDatabaseType.Integer, eVariableDatabaseType.Integer, eVariableStyle.Dollar, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 0, false, false, false, eLevelRollType.None, eDayToWeekRollType.Sum, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Markdown");
            PermMDCost = new VariableProfile(NextSequence, "PMD Cost", eVariableCategory.Both, eVariableType.None, "PERM_MD_COST", eVariableDatabaseType.Integer, eVariableDatabaseType.Integer, eVariableStyle.Dollar, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 0, false, false, false, eLevelRollType.None, eDayToWeekRollType.Sum, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Markdown");
            PermMDDlrPct = new VariableProfile(NextSequence, "PMD Rtl Pct", eVariableCategory.Both, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 2, false, false, false, eLevelRollType.None, eDayToWeekRollType.Sum, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Markdown");
            PosMDDlr = new VariableProfile(NextSequence, "Pos MD Rtl", eVariableCategory.Both, eVariableType.None, "POS_MD_DLR", eVariableDatabaseType.Integer, eVariableDatabaseType.Integer, eVariableStyle.Dollar, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 0, false, false, false, eLevelRollType.None, eDayToWeekRollType.Sum, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Markdown");
            PosMDCost = new VariableProfile(NextSequence, "Pos MD Cost", eVariableCategory.Both, eVariableType.None, "POS_MD_COST", eVariableDatabaseType.Integer, eVariableDatabaseType.Integer, eVariableStyle.Dollar, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 0, false, false, false, eLevelRollType.None, eDayToWeekRollType.Sum, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Markdown");
            PosMDDlrPct = new VariableProfile(NextSequence, "Pos MD Rtl Pct", eVariableCategory.Both, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 2, false, false, false, eLevelRollType.None, eDayToWeekRollType.Sum, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Markdown");
            AdjUntiPctTot = new VariableProfile(NextSequence, "Tot Adj C$ %", eVariableCategory.Chain, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eEligibilityType.Stock, eSimilarStoreDateType.Stock, eVariableTimeTotalType.All, eVariableForecastType.Stock, eValueFormatType.GenericNumeric, 2, true, true, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Stock");
            MaintInvDlr = new VariableProfile(NextSequence, "Maint Inv Rtl", eVariableCategory.Both, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Dollar, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eEligibilityType.Stock, eSimilarStoreDateType.Stock, eVariableTimeTotalType.First, eVariableForecastType.Stock, eValueFormatType.GenericNumeric, 0, true, true, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Stock");
            MaintInvCost = new VariableProfile(NextSequence, "Maint Inv Cost", eVariableCategory.Both, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Dollar, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eEligibilityType.Stock, eSimilarStoreDateType.Stock, eVariableTimeTotalType.First, eVariableForecastType.Stock, eValueFormatType.GenericNumeric, 0, true, true, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Stock");
            MMUPct = new VariableProfile(NextSequence, "MMU Rtl Pct", eVariableCategory.Both, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 2, false, false, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Receipt");
            PermMDDlrPctToMD = new VariableProfile(NextSequence, "PMD Pct Tot MD Rtl", eVariableCategory.Both, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 2, false, false, false, eLevelRollType.None, eDayToWeekRollType.Sum, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Markdown");
            OTBCostDlrCum = new VariableProfile(NextSequence, "Tot Cum OTB C$", eVariableCategory.Chain, eVariableType.Other, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Dollar, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.Last, eVariableForecastType.None, eValueFormatType.GenericNumeric, 0, false, false, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Receipt");
            OTBUnitCum = new VariableProfile(NextSequence, "Tot Cum OTB #", eVariableCategory.Chain, eVariableType.Other, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Units, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.Last, eVariableForecastType.None, eValueFormatType.GenericNumeric, 0, false, false, false, eLevelRollType.Sum, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Receipt");
            SellThruUnitPctTot = new VariableProfile(NextSequence, "Tot Sell Thru #", eVariableCategory.Chain, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.None, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 2, false, false, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, 0, "KPI");
            StockSalesDlr = new VariableProfile(NextSequence, "StkSls Rtl", eVariableCategory.Both, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.None, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 2, false, false, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, 0, "Other");
            StockSalesRatioTot = new VariableProfile(NextSequence, "Tot S/S Ratio", eVariableCategory.Chain, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.None, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 2, false, false, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, eVariableDatabaseModelType.None, 0, "KPI");
            TotStrSalesAUC = new VariableProfile(NextSequence, "Tot Str Sales AUC", eVariableCategory.Chain, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 2, false, false, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Sales");
            TotSalesAUR = new VariableProfile(NextSequence, "Tot Sales AUR", eVariableCategory.Chain, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 2, false, false, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Sales");
            TotSalesDlr = new VariableProfile(NextSequence, "Tot Sales $", eVariableCategory.Both, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Dollar, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eEligibilityType.Sales, eSimilarStoreDateType.Sales, eVariableTimeTotalType.All, eVariableForecastType.Sales, eValueFormatType.GenericNumeric, 0, true, true, false, eLevelRollType.Sum, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Sales");
            TotSalesCostDlr = new VariableProfile(NextSequence, "Tot Sales C$", eVariableCategory.Both, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Dollar, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eEligibilityType.Sales, eSimilarStoreDateType.Sales, eVariableTimeTotalType.All, eVariableForecastType.Sales, eValueFormatType.GenericNumeric, 0, true, true, false, eLevelRollType.Sum, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Sales");
            TotSalesUnit = new VariableProfile(NextSequence, "Tot Str Sales #", eVariableCategory.Chain, eVariableType.None, "TOT_SALES_U_STORE", eVariableDatabaseType.Integer, eVariableDatabaseType.Integer, eVariableStyle.Units, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eEligibilityType.Sales, eSimilarStoreDateType.Sales, eVariableTimeTotalType.All, eVariableForecastType.Sales, eValueFormatType.GenericNumeric, 0, true, true, false, eLevelRollType.Sum, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Sales");
            GrossMarginPctStr = new VariableProfile(NextSequence, "Tot Str GM %", eVariableCategory.Chain, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eEligibilityType.Sales, eSimilarStoreDateType.Sales, eVariableTimeTotalType.All, eVariableForecastType.Sales, eValueFormatType.GenericNumeric, 2, true, true, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Sales");
            GrossMarginTotStr = new VariableProfile(NextSequence, "Tot Str GM $", eVariableCategory.Chain, eVariableType.None, "GROSS_MARGIN_STR", eVariableDatabaseType.Integer, eVariableDatabaseType.Integer, eVariableStyle.Dollar, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eEligibilityType.Sales, eSimilarStoreDateType.Sales, eVariableTimeTotalType.All, eVariableForecastType.Sales, eValueFormatType.GenericNumeric, 0, true, true, false, eLevelRollType.Sum, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Sales");
            StrCostDlr = new VariableProfile(NextSequence, "Str C$", eVariableCategory.Chain, eVariableType.None, "STR_COST_DLR", eVariableDatabaseType.Integer, eVariableDatabaseType.Integer, eVariableStyle.Dollar, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eEligibilityType.Sales, eSimilarStoreDateType.Sales, eVariableTimeTotalType.All, eVariableForecastType.Sales, eValueFormatType.GenericNumeric, 0, true, true, false, eLevelRollType.Sum, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Sales");
            CompSlsDlr = new VariableProfile(NextSequence, "Comp Sales $", eVariableCategory.Chain, eVariableType.None, "COMP_SALES_DLR", eVariableDatabaseType.Integer, eVariableDatabaseType.Integer, eVariableStyle.Dollar, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eEligibilityType.Sales, eSimilarStoreDateType.Sales, eVariableTimeTotalType.All, eVariableForecastType.Sales, eValueFormatType.GenericNumeric, 0, true, true, false, eLevelRollType.Sum, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Sales");
            NonCompSlsDlr = new VariableProfile(NextSequence, "Non Comp Sales $", eVariableCategory.Chain, eVariableType.None, "NON_COMP_SALES_DLR", eVariableDatabaseType.Integer, eVariableDatabaseType.Integer, eVariableStyle.Dollar, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eEligibilityType.Sales, eSimilarStoreDateType.Sales, eVariableTimeTotalType.All, eVariableForecastType.Sales, eValueFormatType.GenericNumeric, 0, true, true, false, eLevelRollType.Sum, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Sales");
            NewStores = new VariableProfile(NextSequence, "New Stores", eVariableCategory.Chain, eVariableType.Other, "NEW_STORES", eVariableDatabaseType.Integer, eVariableDatabaseType.Integer, eVariableStyle.Units, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 0, false, false, false, eLevelRollType.Average, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Sales");
            OpenStores = new VariableProfile(NextSequence, "Open Stores", eVariableCategory.Chain, eVariableType.Other, "OPEN_STORES", eVariableDatabaseType.Integer, eVariableDatabaseType.Integer, eVariableStyle.Units, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 0, false, false, false, eLevelRollType.Average, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Sales");
            AvgStrSlsUnit = new VariableProfile(NextSequence, "Avg Str Tot Str Sales #", eVariableCategory.Chain, eVariableType.Other, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.None, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 0, false, false, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Sales");
            AvgStrSlsDlr = new VariableProfile(NextSequence, "Avg Str Tot Str Sales $", eVariableCategory.Chain, eVariableType.Other, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.None, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 0, false, false, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Sales");
            TotBINVUnit = new VariableProfile(NextSequence, "Tot BINV #", eVariableCategory.Chain, eVariableType.BegStock, "TOT_BINV_UNIT", eVariableDatabaseType.Integer, eVariableDatabaseType.Integer, eVariableStyle.Units, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.BOW, eEligibilityType.Stock, eSimilarStoreDateType.Stock, eVariableTimeTotalType.First, eVariableForecastType.None, eValueFormatType.GenericNumeric, 0, false, false, false, eLevelRollType.Sum, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Stock");
            TotStrEinvUnits = new VariableProfile(NextSequence, "Tot Str EINV #", eVariableCategory.Chain, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Units, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eEligibilityType.Stock, eSimilarStoreDateType.Stock, eVariableTimeTotalType.First, eVariableForecastType.Stock, eValueFormatType.GenericNumeric, 0, true, true, false, eLevelRollType.Sum, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Stock");
            TotStrBinvPctTtlUnits = new VariableProfile(NextSequence, "Tot Str BINV # % TTL", eVariableCategory.Chain, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.BOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.First, eVariableForecastType.None, eValueFormatType.GenericNumeric, 2, false, false, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Stock");
            ShrinkUnitsStr = new VariableProfile(NextSequence, "Str Shrink #", eVariableCategory.Chain, eVariableType.None, "SHRINK_UNITS_STR", eVariableDatabaseType.Integer, eVariableDatabaseType.Integer, eVariableStyle.Units, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 0, false, false, false, eLevelRollType.Sum, eDayToWeekRollType.None, eStoreToChainRollType.Sum, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Stock");
            ShrinkPctStr = new VariableProfile(NextSequence, "Str Shrink %", eVariableCategory.Chain, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 2, false, false, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Stock");
            AdjUnitsStr = new VariableProfile(NextSequence, "Str Adj #", eVariableCategory.Chain, eVariableType.Other, "ADJ_UNITS_STR", eVariableDatabaseType.Integer, eVariableDatabaseType.Integer, eVariableStyle.Units, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.None, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 0, false, false, false, eLevelRollType.Sum, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Stock");
            AdjUntiPctStr = new VariableProfile(NextSequence, "Str Adj %", eVariableCategory.Chain, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eEligibilityType.Stock, eSimilarStoreDateType.Stock, eVariableTimeTotalType.All, eVariableForecastType.Stock, eValueFormatType.GenericNumeric, 2, true, true, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Stock");
            TotStrAvgINVUnit = new VariableProfile(NextSequence, "Avg Str Tot BINV #", eVariableCategory.Chain, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.BOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.First, eVariableForecastType.None, eValueFormatType.GenericNumeric, 0, false, false, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Stock");
            TotAvgINVUnit = new VariableProfile(NextSequence, "Tot Avg Inv #", eVariableCategory.Chain, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.BOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.First, eVariableForecastType.None, eValueFormatType.GenericNumeric, 2, false, false, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Stock");
            TotFWOSUnit = new VariableProfile(NextSequence, "Tot FWOS #", eVariableCategory.Chain, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.None, eVariableWeekType.EOW, eEligibilityType.Stock, eSimilarStoreDateType.None, eVariableTimeTotalType.First, eVariableForecastType.None, eValueFormatType.GenericNumeric, 2, false, false, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Other");
            StrIMUPct = new VariableProfile(NextSequence, "Str IMU %", eVariableCategory.Chain, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 2, false, false, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Receipt");
            SalesUnitPerRack = new VariableProfile(NextSequence, "Sales # per Rack", eVariableCategory.Both, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 2, false, false, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "KPI");
            SalesDlrPerRack = new VariableProfile(NextSequence, "Sales $ per Rack", eVariableCategory.Both, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 2, false, false, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "KPI");
            DTCRtnUnit = new VariableProfile(NextSequence, "DTC Rtn #", eVariableCategory.Chain, eVariableType.Sales, "DTC_RTN_UNIT", eVariableDatabaseType.Integer, eVariableDatabaseType.Integer, eVariableStyle.Units, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.Sales, eValueFormatType.GenericNumeric, 0, true, true, false, eLevelRollType.Sum, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Demand");
            DTCBODlr = new VariableProfile(NextSequence, "DTC Back Order $", eVariableCategory.Chain, eVariableType.Sales, "DTC_BACK_ORDER_DLR", eVariableDatabaseType.Integer, eVariableDatabaseType.Integer, eVariableStyle.Dollar, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eEligibilityType.Sales, eSimilarStoreDateType.Sales, eVariableTimeTotalType.All, eVariableForecastType.Sales, eValueFormatType.GenericNumeric, 0, true, true, false, eLevelRollType.Sum, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Demand");
            DTCBOCostDlr = new VariableProfile(NextSequence, "DTC Back Order C$", eVariableCategory.Chain, eVariableType.Sales, "DTC_BACK_ORDER_COST_DLR", eVariableDatabaseType.Integer, eVariableDatabaseType.Integer, eVariableStyle.Dollar, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eEligibilityType.Sales, eSimilarStoreDateType.Sales, eVariableTimeTotalType.All, eVariableForecastType.Sales, eValueFormatType.GenericNumeric, 0, true, true, false, eLevelRollType.Sum, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Demand");
            DTCBOPct = new VariableProfile(NextSequence, "DTC Back Order C$ %", eVariableCategory.Chain, eVariableType.Sales, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 2, false, false, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Demand");
            DTCCancelUnit = new VariableProfile(NextSequence, "DTC Cancel #", eVariableCategory.Chain, eVariableType.None, "DTC_CANCEL_UNIT", eVariableDatabaseType.Integer, eVariableDatabaseType.Integer, eVariableStyle.Units, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.Sales, eValueFormatType.GenericNumeric, 0, true, true, false, eLevelRollType.Sum, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Demand");
            DTCCancelDlr = new VariableProfile(NextSequence, "DTC Cancel $", eVariableCategory.Chain, eVariableType.Sales, "DTC_CANCEL_DLR", eVariableDatabaseType.Integer, eVariableDatabaseType.Integer, eVariableStyle.Dollar, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eEligibilityType.Sales, eSimilarStoreDateType.Sales, eVariableTimeTotalType.All, eVariableForecastType.Sales, eValueFormatType.GenericNumeric, 0, true, true, false, eLevelRollType.Sum, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Demand");
            DTCCancelPct = new VariableProfile(NextSequence, "DTC Cancel C$ %", eVariableCategory.Chain, eVariableType.Sales, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 2, false, false, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Demand");
            DTCCancelCostDlr = new VariableProfile(NextSequence, "DTC Cancel C$", eVariableCategory.Chain, eVariableType.Sales, "DTC_CANCEL_COST_DLR", eVariableDatabaseType.Integer, eVariableDatabaseType.Integer, eVariableStyle.Dollar, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eEligibilityType.Sales, eSimilarStoreDateType.Sales, eVariableTimeTotalType.All, eVariableForecastType.Sales, eValueFormatType.GenericNumeric, 0, true, true, false, eLevelRollType.Sum, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Demand");
            DTCDamageRtnCostDlr = new VariableProfile(NextSequence, "DTC Damaged Rtn C$", eVariableCategory.Chain, eVariableType.Sales, "DTC_DAMAGE_RTN_DLR", eVariableDatabaseType.Integer, eVariableDatabaseType.Integer, eVariableStyle.Dollar, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eEligibilityType.Sales, eSimilarStoreDateType.Sales, eVariableTimeTotalType.All, eVariableForecastType.Sales, eValueFormatType.GenericNumeric, 0, true, true, false, eLevelRollType.Sum, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Demand");
            DTCSaleableRtnCostDlr = new VariableProfile(NextSequence, "DTC Saleable Rtn C$", eVariableCategory.Chain, eVariableType.Sales, "DTC_SALEABLE_RTN_COST_DLR", eVariableDatabaseType.Integer, eVariableDatabaseType.Integer, eVariableStyle.Dollar, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eEligibilityType.Sales, eSimilarStoreDateType.Sales, eVariableTimeTotalType.All, eVariableForecastType.Sales, eValueFormatType.GenericNumeric, 0, true, true, false, eLevelRollType.Sum, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Demand");
            DTCGrossDmdUnit = new VariableProfile(NextSequence, "DTC Grs Dmd #", eVariableCategory.Chain, eVariableType.Sales, "DTC_GROSS_DMD_UNIT", eVariableDatabaseType.Integer, eVariableDatabaseType.Integer, eVariableStyle.Units, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.Sales, eValueFormatType.GenericNumeric, 0, true, true, false, eLevelRollType.Sum, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Demand");
            DTCGrossDmdDlr = new VariableProfile(NextSequence, "DTC Grs Dmd $", eVariableCategory.Chain, eVariableType.Sales, "DTC_GROSS_DMD_DLR", eVariableDatabaseType.Integer, eVariableDatabaseType.Integer, eVariableStyle.Dollar, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eEligibilityType.Sales, eSimilarStoreDateType.Sales, eVariableTimeTotalType.All, eVariableForecastType.Sales, eValueFormatType.GenericNumeric, 0, true, true, false, eLevelRollType.Sum, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Demand");
            DTCGrossDmdAUR = new VariableProfile(NextSequence, "DTC Grs Dmd AUR", eVariableCategory.Chain, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 2, false, false, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Demand");
            DTCGrossDmdAUC = new VariableProfile(NextSequence, "DTC Grs Dmd AUC", eVariableCategory.Chain, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 2, false, false, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Demand");
            DTCGrossDmdCostDlr = new VariableProfile(NextSequence, "DTC Grs Dmd C$", eVariableCategory.Chain, eVariableType.Sales, "DTC_GROSS_DMD_COST_DLR", eVariableDatabaseType.Integer, eVariableDatabaseType.Integer, eVariableStyle.Dollar, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eEligibilityType.Sales, eSimilarStoreDateType.Sales, eVariableTimeTotalType.All, eVariableForecastType.Sales, eValueFormatType.GenericNumeric, 0, true, true, false, eLevelRollType.Sum, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Demand");
            DTCNetDmdUnit = new VariableProfile(NextSequence, "DTC Net Dmd #", eVariableCategory.Chain, eVariableType.Sales, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Units, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eEligibilityType.Sales, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.Sales, eValueFormatType.GenericNumeric, 0, true, true, false, eLevelRollType.Sum, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Demand");
            DTCNetDmdDlr = new VariableProfile(NextSequence, "DTC Net Dmd $", eVariableCategory.Chain, eVariableType.Sales, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Dollar, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eEligibilityType.Sales, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.Sales, eValueFormatType.GenericNumeric, 0, true, true, false, eLevelRollType.Sum, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Demand");
            DTCNetDmdCostDlr = new VariableProfile(NextSequence, "DTC Net Dmd C$", eVariableCategory.Chain, eVariableType.Sales, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Dollar, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eEligibilityType.Sales, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.Sales, eValueFormatType.GenericNumeric, 0, true, true, false, eLevelRollType.Sum, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Demand");
            DTCNetDmdPct = new VariableProfile(NextSequence, "DTC Net Dmd C$ %", eVariableCategory.Chain, eVariableType.Sales, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eEligibilityType.Sales, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.Sales, eValueFormatType.GenericNumeric, 2, true, true, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Demand");
            DTCNetDmdAUR = new VariableProfile(NextSequence, "DTC Net Dmd AUR", eVariableCategory.Chain, eVariableType.Sales, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eEligibilityType.Sales, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.Sales, eValueFormatType.GenericNumeric, 2, true, true, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Demand");
            DTCNetDmdAUC = new VariableProfile(NextSequence, "DTC Net Dmd AUC", eVariableCategory.Chain, eVariableType.Sales, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eEligibilityType.Sales, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.Sales, eValueFormatType.GenericNumeric, 2, true, true, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Demand");
            DTCNetDmdGMDlr = new VariableProfile(NextSequence, "DTC Net Dmd GM $", eVariableCategory.Chain, eVariableType.Sales, "DTC_NETDMD_GM_DLR", eVariableDatabaseType.Integer, eVariableDatabaseType.Integer, eVariableStyle.Dollar, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eEligibilityType.Sales, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.Sales, eValueFormatType.GenericNumeric, 0, true, true, false, eLevelRollType.Sum, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Demand");
            DTCNetDmdGMPct = new VariableProfile(NextSequence, "DTC Net Dmd GM %", eVariableCategory.Chain, eVariableType.Sales, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eEligibilityType.Sales, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.Sales, eValueFormatType.GenericNumeric, 2, true, true, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Demand");
            DTCRtnDlr = new VariableProfile(NextSequence, "DTC Rtn $", eVariableCategory.Chain, eVariableType.Sales, "DTC_RTN_DLR", eVariableDatabaseType.Integer, eVariableDatabaseType.Integer, eVariableStyle.Dollar, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.Sales, eValueFormatType.GenericNumeric, 0, true, true, false, eLevelRollType.Sum, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Demand");
            DTCRtnCostDlr = new VariableProfile(NextSequence, "DTC Rtn C$", eVariableCategory.Chain, eVariableType.Sales, "DTC_RTN_COST_DLR", eVariableDatabaseType.Integer, eVariableDatabaseType.Integer, eVariableStyle.Dollar, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.Sales, eValueFormatType.GenericNumeric, 0, true, true, false, eLevelRollType.Sum, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Demand");
            DTCRtnPct = new VariableProfile(NextSequence, "DTC Rtn C$ %", eVariableCategory.Chain, eVariableType.Sales, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.Sales, eValueFormatType.GenericNumeric, 2, true, true, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Demand");
            DTCAvgOrder = new VariableProfile(NextSequence, "DTC Avg Order", eVariableCategory.Chain, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 0, false, false, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "KPI");
            DTCFWOSUnit = new VariableProfile(NextSequence, "DTC FWOS #", eVariableCategory.Chain, eVariableType.Sales, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.Sales, eValueFormatType.GenericNumeric, 2, true, true, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "KPI");
            DTCIMUPct = new VariableProfile(NextSequence, "DTC IMU %", eVariableCategory.Chain, eVariableType.Sales, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 2, false, false, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Receipt");
            DTCNoOfOrders = new VariableProfile(NextSequence, "DTC No of Orders", eVariableCategory.Chain, eVariableType.None, "DTC_NO_OF_ORDERS", eVariableDatabaseType.Integer, eVariableDatabaseType.Integer, eVariableStyle.Units, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.Sales, eValueFormatType.GenericNumeric, 0, true, true, false, eLevelRollType.Sum, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "KPI");
            DTCVisits = new VariableProfile(NextSequence, "DTC Visits", eVariableCategory.Chain, eVariableType.None, "DTC_VISITS", eVariableDatabaseType.Integer, eVariableDatabaseType.Integer, eVariableStyle.Units, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.Sales, eValueFormatType.GenericNumeric, 0, true, true, false, eLevelRollType.Sum, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "KPI");
            DTCPlacement = new VariableProfile(NextSequence, "DTC Placement", eVariableCategory.Chain, eVariableType.Sales, "DTC_PLACEMENT", eVariableDatabaseType.Real, eVariableDatabaseType.Real, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.Sales, eValueFormatType.GenericNumeric, 2, true, true, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "KPI");
            DTCSlsStkRatio = new VariableProfile(NextSequence, "DTC S/S Ratio", eVariableCategory.Chain, eVariableType.Sales, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.Sales, eValueFormatType.GenericNumeric, 2, true, true, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "KPI");
            DTCSellThru = new VariableProfile(NextSequence, "DTC Sell Thru", eVariableCategory.Chain, eVariableType.Sales, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.Sales, eValueFormatType.GenericNumeric, 2, true, true, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "KPI");
            DTCSpace = new VariableProfile(NextSequence, "DTC Space", eVariableCategory.Chain, eVariableType.Sales, "DTC_SPACE", eVariableDatabaseType.Integer, eVariableDatabaseType.Integer, eVariableStyle.Units, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.Sales, eValueFormatType.GenericNumeric, 0, true, true, false, eLevelRollType.Sum, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "KPI");
            DTCAdjUnit = new VariableProfile(NextSequence, "DTC Adj #", eVariableCategory.Chain, eVariableType.None, "DTC_ADJ_UNIT", eVariableDatabaseType.Integer, eVariableDatabaseType.Integer, eVariableStyle.Units, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.Sales, eValueFormatType.GenericNumeric, 0, true, true, false, eLevelRollType.Sum, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Stock");
            DTCAdjPct = new VariableProfile(NextSequence, "DTC Adj %", eVariableCategory.Chain, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.Sales, eValueFormatType.GenericNumeric, 2, true, true, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Stock");
            DTCAvgInvUnit = new VariableProfile(NextSequence, "DTC Avg Inv #", eVariableCategory.Chain, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 2, false, false, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Stock");
            DTCBINVUnit = new VariableProfile(NextSequence, "DTC BINV #", eVariableCategory.Chain, eVariableType.BegStock, "DTC_BINV_UNIT", eVariableDatabaseType.Integer, eVariableDatabaseType.Integer, eVariableStyle.Units, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.BOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.Stock, eValueFormatType.GenericNumeric, 0, true, true, false, eLevelRollType.Sum, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Stock");
            DTCEINVUnit = new VariableProfile(NextSequence, "DTC EINV #", eVariableCategory.Chain, eVariableType.EndStock, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Units, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.Stock, eValueFormatType.GenericNumeric, 0, true, true, false, eLevelRollType.Sum, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Stock");
            DTCBINVUnitPct = new VariableProfile(NextSequence, "DTC BINV # % TTL", eVariableCategory.Chain, eVariableType.BegStock, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.BOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 2, false, false, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Stock");
            DTCShrinkUnit = new VariableProfile(NextSequence, "DTC Shrink #", eVariableCategory.Chain, eVariableType.None, "DTC_SHRINK_UNIT", eVariableDatabaseType.Integer, eVariableDatabaseType.Integer, eVariableStyle.Units, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.Stock, eValueFormatType.GenericNumeric, 0, true, true, false, eLevelRollType.Sum, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Stock");
            DTCShrinkPct = new VariableProfile(NextSequence, "DTC Shrink %", eVariableCategory.Chain, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 2, false, false, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Stock");
            DTCBOUnit = new VariableProfile(NextSequence, "DTC Back Order #", eVariableCategory.Chain, eVariableType.Sales, "DTC_BACK_ORDER_UNIT", eVariableDatabaseType.Integer, eVariableDatabaseType.Integer, eVariableStyle.Units, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eEligibilityType.Sales, eSimilarStoreDateType.Sales, eVariableTimeTotalType.All, eVariableForecastType.Sales, eValueFormatType.GenericNumeric, 0, true, true, false, eLevelRollType.Sum, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Demand");
            TotStrSalesUnitPctTTL = new VariableProfile(NextSequence, "Tot Str Sales # % TTL", eVariableCategory.Chain, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 2, false, false, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Sales");
            TotStrSalesCostDlrPctTTL = new VariableProfile(NextSequence, "Tot Str Sales C$ % TTL", eVariableCategory.Chain, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 2, false, false, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Sales");
            TotDTCSalesUnitPctTTL = new VariableProfile(NextSequence, "Tot DTC Sales # % TTL", eVariableCategory.Chain, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 2, false, false, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Demand");
            TotDTCSalesCostDlrPctTTL = new VariableProfile(NextSequence, "Tot DTC Sales C$ % TTL", eVariableCategory.Chain, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 2, false, false, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Demand");
            AdjCostDlrTot = new VariableProfile(NextSequence, "Tot Adj C$", eVariableCategory.Chain, eVariableType.Other, "ADJ_COST_DLR", eVariableDatabaseType.Integer, eVariableDatabaseType.Integer, eVariableStyle.Dollar, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 0, false, false, false, eLevelRollType.Sum, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Stock");
            ShrinkCostDlrTot = new VariableProfile(NextSequence, "Tot Shrink C$", eVariableCategory.Chain, eVariableType.None, "TOT_SHRINK_COST_DLR", eVariableDatabaseType.Integer, eVariableDatabaseType.Integer, eVariableStyle.Dollar, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 0, false, false, false, eLevelRollType.Sum, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Stock");
            TotEinvCostDlr = new VariableProfile(NextSequence, "Tot EINV C$", eVariableCategory.Chain, eVariableType.None, "TOT_EINV_C_DLR", eVariableDatabaseType.Integer, eVariableDatabaseType.Integer, eVariableStyle.Units, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eEligibilityType.Stock, eSimilarStoreDateType.Stock, eVariableTimeTotalType.Last, eVariableForecastType.Stock, eValueFormatType.GenericNumeric, 0, true, true, false, eLevelRollType.Sum, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Stock");
            DTCGrossDmdGMDlr = new VariableProfile(NextSequence, "DTC Grs Dmd GM $", eVariableCategory.Chain, eVariableType.Sales, "DTC_GRSDMD_GM_DLR", eVariableDatabaseType.Integer, eVariableDatabaseType.Integer, eVariableStyle.Dollar, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eEligibilityType.Sales, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.Sales, eValueFormatType.GenericNumeric, 0, true, true, false, eLevelRollType.Sum, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Demand");
            DTCGrsDmdGMPct = new VariableProfile(NextSequence, "DTC Grs Dmd GM %", eVariableCategory.Chain, eVariableType.Sales, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eEligibilityType.Sales, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.Sales, eValueFormatType.GenericNumeric, 2, true, true, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Demand");
            DiscountPct = new VariableProfile(NextSequence, "Discount %", eVariableCategory.Both, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.Plug, eVariableWeekType.EOW, eEligibilityType.Stock, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.Stock, eValueFormatType.GenericNumeric, 2, true, true, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Sales");
            DiscountDlr = new VariableProfile(NextSequence, "Discount $", eVariableCategory.Both, eVariableType.None, "DISCOUNT_DLR", eVariableDatabaseType.Integer, eVariableDatabaseType.Integer, eVariableStyle.Dollar, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 0, false, false, false, eLevelRollType.Sum, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Sales");
            AfterDiscountDlr = new VariableProfile(NextSequence, "After Discount $", eVariableCategory.Both, eVariableType.None, "AFTER_DISCOUNT_DLR", eVariableDatabaseType.Integer, eVariableDatabaseType.Integer, eVariableStyle.Dollar, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 0, false, false, false, eLevelRollType.Sum, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Sales");
            AfterDiscountAUR = new VariableProfile(NextSequence, "After Discount AUR", eVariableCategory.Chain, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 2, false, false, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Sales");
            FreightCostPerUnit = new VariableProfile(NextSequence, "Freight C$/#", eVariableCategory.Chain, eVariableType.Sales, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.Sales, eValueFormatType.GenericNumeric, 2, true, true, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Sales");
            TotFreightCostDlr = new VariableProfile(NextSequence, "Tot Freight C$", eVariableCategory.Chain, eVariableType.None, "TOT_FREIGHT_COST_DLR", eVariableDatabaseType.Integer, eVariableDatabaseType.Integer, eVariableStyle.Dollar, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 0, false, false, false, eLevelRollType.Sum, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Sales");
            AfterDiscGMDlr = new VariableProfile(NextSequence, "After Discount GM $", eVariableCategory.Chain, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Dollar, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 0, false, false, false, eLevelRollType.Sum, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Sales");
            VATPct = new VariableProfile(NextSequence, "VAT %", eVariableCategory.Both, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.Plug, eVariableWeekType.EOW, eEligibilityType.Stock, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.Stock, eValueFormatType.GenericNumeric, 2, true, true, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Sales");
            VATDlr = new VariableProfile(NextSequence, "VAT $", eVariableCategory.Both, eVariableType.None, "VAT_DLR", eVariableDatabaseType.Integer, eVariableDatabaseType.Integer, eVariableStyle.Dollar, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 0, false, false, false, eLevelRollType.Sum, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Sales");
            CurrXchgPct = new VariableProfile(NextSequence, "Currency Xchg %", eVariableCategory.Both, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.Plug, eVariableWeekType.EOW, eEligibilityType.Stock, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.Stock, eValueFormatType.GenericNumeric, 2, true, true, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Sales");
            ConvertedSalesDlr = new VariableProfile(NextSequence, "Converted Sales $", eVariableCategory.Both, eVariableType.None, "CONVERTED_SALES_DLR", eVariableDatabaseType.Integer, eVariableDatabaseType.Integer, eVariableStyle.Dollar, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 0, false, false, false, eLevelRollType.Sum, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Sales");
            SaleswithoutVATDlr = new VariableProfile(NextSequence, "Sales w/out VAT", eVariableCategory.Both, eVariableType.None, "SALES_WITHOUT_VAT", eVariableDatabaseType.Integer, eVariableDatabaseType.Integer, eVariableStyle.Dollar, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 0, false, false, false, eLevelRollType.Sum, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Sales");
            TotStrAvgEndINVUnit = new VariableProfile(NextSequence, "Avg Str Tot EINV #", eVariableCategory.Chain, eVariableType.None, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.Last, eVariableForecastType.None, eValueFormatType.GenericNumeric, 0, false, false, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Stock");
            TotEinvAUC = new VariableProfile(NextSequence, "Tot EINV AUC", eVariableCategory.Chain, eVariableType.EndStock, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eEligibilityType.Stock, eSimilarStoreDateType.Stock, eVariableTimeTotalType.First, eVariableForecastType.None, eValueFormatType.GenericNumeric, 2, false, false, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Stock");
            Commit1Unit = new VariableProfile(NextSequence, "Commit1 #", eVariableCategory.Chain, eVariableType.Other, "COMMIT_ONE_UNIT", eVariableDatabaseType.Integer, eVariableDatabaseType.Integer, eVariableStyle.Units, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 0, false, false, false, eLevelRollType.Sum, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Receipt");
            Commit1CostDlr = new VariableProfile(NextSequence, "Commit1 C$", eVariableCategory.Chain, eVariableType.Other, "COMMIT_ONE_COST_DLR", eVariableDatabaseType.Integer, eVariableDatabaseType.Integer, eVariableStyle.Dollar, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 0, false, false, false, eLevelRollType.Sum, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Receipt");
            Commit1AUC = new VariableProfile(NextSequence, "Commit1 AUC", eVariableCategory.Chain, eVariableType.Other, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 2, false, false, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Receipt");
            Commit2Unit = new VariableProfile(NextSequence, "Commit2 #", eVariableCategory.Chain, eVariableType.Other, "COMMIT_TWO_UNIT", eVariableDatabaseType.Integer, eVariableDatabaseType.Integer, eVariableStyle.Units, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 0, false, false, false, eLevelRollType.Sum, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Receipt");
            Commit2CostDlr = new VariableProfile(NextSequence, "Commit2 C$", eVariableCategory.Chain, eVariableType.Other, "COMMIT_TWO_COST_DLR", eVariableDatabaseType.Integer, eVariableDatabaseType.Integer, eVariableStyle.Dollar, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 0, false, false, false, eLevelRollType.Sum, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Receipt");
            Commit2AUC = new VariableProfile(NextSequence, "Commit2 AUC", eVariableCategory.Chain, eVariableType.Other, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 2, false, false, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Receipt");
            Commit3Unit = new VariableProfile(NextSequence, "Commit3 #", eVariableCategory.Chain, eVariableType.Other, "COMMIT_THREE_UNIT", eVariableDatabaseType.Integer, eVariableDatabaseType.Integer, eVariableStyle.Units, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 0, false, false, false, eLevelRollType.Sum, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Receipt");
            Commit3AUC = new VariableProfile(NextSequence, "Commit3 AUC", eVariableCategory.Chain, eVariableType.Other, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 2, false, false, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Receipt");
            Commit3CostDlr = new VariableProfile(NextSequence, "Commit3 C$", eVariableCategory.Chain, eVariableType.Other, "COMMIT_THREE_COST_DLR", eVariableDatabaseType.Integer, eVariableDatabaseType.Integer, eVariableStyle.Dollar, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.None, eValueFormatType.GenericNumeric, 0, false, false, false, eLevelRollType.Sum, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "Receipt");
            SquareSpace = new VariableProfile(NextSequence, "Square Space", eVariableCategory.Both, eVariableType.Sales, "SQUARE_SPACE", eVariableDatabaseType.Integer, eVariableDatabaseType.Integer, eVariableStyle.Units, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.Plug, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.Sales, eValueFormatType.GenericNumeric, 0, true, true, false, eLevelRollType.Sum, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "KPI");
            LinearSpace = new VariableProfile(NextSequence, "Linear Space", eVariableCategory.Both, eVariableType.Sales, "LINEAR_SPACE", eVariableDatabaseType.Integer, eVariableDatabaseType.Integer, eVariableStyle.Units, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.Plug, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.Sales, eValueFormatType.GenericNumeric, 0, true, true, false, eLevelRollType.Sum, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "KPI");
            FloorSpace = new VariableProfile(NextSequence, "Floor Space", eVariableCategory.Both, eVariableType.Sales, "FLOOR_SPACE", eVariableDatabaseType.Integer, eVariableDatabaseType.Integer, eVariableStyle.Units, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.Plug, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.Sales, eValueFormatType.GenericNumeric, 0, true, true, false, eLevelRollType.Sum, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "KPI");
            DTCTransactions = new VariableProfile(NextSequence, "DTC Transactions", eVariableCategory.Chain, eVariableType.None, "DTC_TRANSACTIONS", eVariableDatabaseType.Integer, eVariableDatabaseType.Integer, eVariableStyle.Units, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.Sales, eValueFormatType.GenericNumeric, 0, true, true, false, eLevelRollType.Sum, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "KPI");
            SpaceConvPct = new VariableProfile(NextSequence, "Space Conv %", eVariableCategory.Both, eVariableType.Sales, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.Sales, eValueFormatType.GenericNumeric, 2, true, true, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "KPI");
            SalesUperSqSpace = new VariableProfile(NextSequence, "Sales # per Sq Space", eVariableCategory.Both, eVariableType.Sales, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.Sales, eValueFormatType.GenericNumeric, 2, true, true, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "KPI");
            SalesUperLinearSpace = new VariableProfile(NextSequence, "Sales # per Lin Space", eVariableCategory.Both, eVariableType.Sales, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.Sales, eValueFormatType.GenericNumeric, 2, true, true, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "KPI");
            DensityU = new VariableProfile(NextSequence, "Density #", eVariableCategory.Both, eVariableType.Sales, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.Sales, eValueFormatType.GenericNumeric, 2, true, true, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "KPI");
            SalesperSpaceU = new VariableProfile(NextSequence, "Sales per Space #", eVariableCategory.Both, eVariableType.Sales, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.Sales, eValueFormatType.GenericNumeric, 2, true, true, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "KPI");
            TotStrSalesCDlrperSqSpace = new VariableProfile(NextSequence, "Tot Str Sales C$ per Sq Space", eVariableCategory.Chain, eVariableType.Sales, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.Sales, eValueFormatType.GenericNumeric, 2, true, true, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "KPI");
            TotStrSalesDlrperSqSpace = new VariableProfile(NextSequence, "Tot Str Sales $ per Sq Space", eVariableCategory.Chain, eVariableType.Sales, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.Sales, eValueFormatType.GenericNumeric, 2, true, true, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "KPI");
            TotStrSalesCDlrperLinearSpace = new VariableProfile(NextSequence, "Tot Str Sales C$ per Lin Space", eVariableCategory.Chain, eVariableType.Sales, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.Sales, eValueFormatType.GenericNumeric, 2, true, true, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "KPI");
            TotStrSalesDlrperLinearSpace = new VariableProfile(NextSequence, "Tot Str Sales $ per Lin Space", eVariableCategory.Chain, eVariableType.Sales, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.Sales, eValueFormatType.GenericNumeric, 2, true, true, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "KPI");
            DTCPlacedOrdersDlr = new VariableProfile(NextSequence, "DTC Placed Orders $", eVariableCategory.Chain, eVariableType.Sales, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.Sales, eValueFormatType.GenericNumeric, 2, true, true, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "KPI");
            DTCConvPct = new VariableProfile(NextSequence, "DTC Conv %", eVariableCategory.Chain, eVariableType.Sales, null, eVariableDatabaseType.None, eVariableDatabaseType.None, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eEligibilityType.None, eSimilarStoreDateType.None, eVariableTimeTotalType.All, eVariableForecastType.Sales, eValueFormatType.GenericNumeric, 2, true, true, false, eLevelRollType.None, eDayToWeekRollType.None, eStoreToChainRollType.None, 0, 0, 0, 0, 0, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, eVariableDatabaseModelType.All, 0, "KPI");
            _variableGroupings = new ArrayList();
            _variableGroupings.Add("Sales");
            _variableGroupings.Add("Stock");
            _variableGroupings.Add("Receipt");
            _variableGroupings.Add("Markdown");
            _variableGroupings.Add("Other");
            _variableGroupings.Add("Not Used");
            _variableGroupings.Add("KPI");
            _variableGroupings.Add("Demand");
        }
        protected override void InitializeVariables(BasePlanTimeTotalVariables aBasePlanTimeTotalVariables)
        {
            base.InitializeVariables(aBasePlanTimeTotalVariables);
            PlanTimeTotalVariables PlanTimeTotals = (PlanTimeTotalVariables)aBasePlanTimeTotalVariables;
            InventoryTotalUnits.AddTimeTotalVariable(PlanTimeTotals.InventoryTotalUnitsT4);

            // VariableProfileList.Add(TotStrBinvDlr)
            // TotStrBinvDlr.AddTimeTotalVariable(PlanTimeTotals.TotStrBinvDlrT1);

            // TotStrBinvDlr.AddTimeTotalVariable(PlanTimeTotals.TotStrBinvDlrT2);

            // TotStrBinvDlr.AddTimeTotalVariable(PlanTimeTotals.TotStrBinvDlrT3);

            // TotStrBinvDlr.AddTimeTotalVariable(PlanTimeTotals.TotStrBinvDlrT4);

            VariableProfileList.Add(TotBinvAUC);
            TotBinvAUC.AddTimeTotalVariable(PlanTimeTotals.TotBinvAUCT1);

            TotBinvAUC.AddTimeTotalVariable(PlanTimeTotals.TotBinvAUCT2);

            TotBinvAUC.AddTimeTotalVariable(PlanTimeTotals.TotBinvAUCT3);

            // VariableProfileList.Add(RegStrBinvAUR)
            // RegStrBinvAUR.AddTimeTotalVariable(PlanTimeTotals.RegStrBinvAURT1);

            // RegStrBinvAUR.AddTimeTotalVariable(PlanTimeTotals.RegStrBinvAURT2);

            // RegStrBinvAUR.AddTimeTotalVariable(PlanTimeTotals.RegStrBinvAURT3);

            // VariableProfileList.Add(RegStrBinvDlr)
            // RegStrBinvDlr.AddTimeTotalVariable(PlanTimeTotals.RegStrBinvDlrT1);

            // RegStrBinvDlr.AddTimeTotalVariable(PlanTimeTotals.RegStrBinvDlrT2);

            // RegStrBinvDlr.AddTimeTotalVariable(PlanTimeTotals.RegStrBinvDlrT3);

            // RegStrBinvDlr.AddTimeTotalVariable(PlanTimeTotals.RegStrBinvDlrT4);

            // VariableProfileList.Add(ClearStrBinvAUR)
            // ClearStrBinvAUR.AddTimeTotalVariable(PlanTimeTotals.ClearStrBinvAURT1);

            // ClearStrBinvAUR.AddTimeTotalVariable(PlanTimeTotals.ClearStrBinvAURT2);

            // ClearStrBinvAUR.AddTimeTotalVariable(PlanTimeTotals.ClearStrBinvAURT3);

            // VariableProfileList.Add(ClearStrBinvDlr)
            // ClearStrBinvDlr.AddTimeTotalVariable(PlanTimeTotals.ClearStrBinvDlrT1);

            // ClearStrBinvDlr.AddTimeTotalVariable(PlanTimeTotals.ClearStrBinvDlrT2);

            // ClearStrBinvDlr.AddTimeTotalVariable(PlanTimeTotals.ClearStrBinvDlrT3);

            // VariableProfileList.Add(RegStrBinvPctTtlDlr)
            // RegStrBinvPctTtlDlr.AddTimeTotalVariable(PlanTimeTotals.RegStrBinvPctTtlDlrT1);

            // RegStrBinvPctTtlDlr.AddTimeTotalVariable(PlanTimeTotals.RegStrBinvPctTtlDlrT2);

            // RegStrBinvPctTtlDlr.AddTimeTotalVariable(PlanTimeTotals.RegStrBinvPctTtlDlrT3);

            // VariableProfileList.Add(RegStrBinvPctTtlUnits)
            // RegStrBinvPctTtlUnits.AddTimeTotalVariable(PlanTimeTotals.RegStrBinvPctTtlUnitsT1);

            // RegStrBinvPctTtlUnits.AddTimeTotalVariable(PlanTimeTotals.RegStrBinvPctTtlUnitsT2);

            // RegStrBinvPctTtlUnits.AddTimeTotalVariable(PlanTimeTotals.RegStrBinvPctTtlUnitsT3);

            // VariableProfileList.Add(ClearStrBinvPctTtlDlr)
            // ClearStrBinvPctTtlDlr.AddTimeTotalVariable(PlanTimeTotals.ClearStrBinvPctTtlDlrT1);

            // ClearStrBinvPctTtlDlr.AddTimeTotalVariable(PlanTimeTotals.ClearStrBinvPctTtlDlrT2);

            // ClearStrBinvPctTtlDlr.AddTimeTotalVariable(PlanTimeTotals.ClearStrBinvPctTtlDlrT3);

            // VariableProfileList.Add(ClearStrBinvPctTtlUnits)
            // ClearStrBinvPctTtlUnits.AddTimeTotalVariable(PlanTimeTotals.ClearStrBinvPctTtlUnitsT1);

            // ClearStrBinvPctTtlUnits.AddTimeTotalVariable(PlanTimeTotals.ClearStrBinvPctTtlUnitsT2);
            // ClearStrBinvPctTtlUnits.AverageTimeTotalVariableProfile = PlanTimeTotals.ClearStrBinvPctTtlUnitsT2;

            // ClearStrBinvPctTtlUnits.AddTimeTotalVariable(PlanTimeTotals.ClearStrBinvPctTtlUnitsT3);

            VariableProfileList.Add(TotStrSalesDlr);
            TotStrSalesDlr.AddTimeTotalVariable(PlanTimeTotals.SalesDlrT1);
            TotStrSalesDlr.TotalTimeTotalVariableProfile = PlanTimeTotals.SalesDlrT1;

            TotStrSalesDlr.AddTimeTotalVariable(PlanTimeTotals.SalesDlrT2);
            TotStrSalesDlr.AverageTimeTotalVariableProfile = PlanTimeTotals.SalesDlrT2;

            // VariableProfileList.Add(StrRegSalesAUR)
            // StrRegSalesAUR.AddTimeTotalVariable(PlanTimeTotals.SalesAURT1);

            // StrRegSalesAUR.AddTimeTotalVariable(PlanTimeTotals.SalesAURT2);

            // VariableProfileList.Add(SalesRegDlr)
            // SalesRegDlr.AddTimeTotalVariable(PlanTimeTotals.SalesRegDlrT1);
            // SalesRegDlr.TotalTimeTotalVariableProfile = PlanTimeTotals.SalesRegDlrT1;

            // SalesRegDlr.AddTimeTotalVariable(PlanTimeTotals.SalesRegDlrT2);
            // SalesRegDlr.AverageTimeTotalVariableProfile = PlanTimeTotals.SalesRegDlrT2;

            VariableProfileList.Add(TotStrSalesAUR);
            // TotStrSalesAUR.AddTimeTotalVariable(PlanTimeTotals.SalesRegAURT1);

            TotStrSalesAUR.AddTimeTotalVariable(PlanTimeTotals.TotStrSalesAURT1);

            // VariableProfileList.Add(StrSalesClearDlr)
            // StrSalesClearDlr.AddTimeTotalVariable(PlanTimeTotals.SalesClearDlrT1);
            // StrSalesClearDlr.TotalTimeTotalVariableProfile = PlanTimeTotals.SalesClearDlrT1;

            // StrSalesClearDlr.AddTimeTotalVariable(PlanTimeTotals.SalesClearDlrT2);
            // StrSalesClearDlr.AverageTimeTotalVariableProfile = PlanTimeTotals.SalesClearDlrT2;

            // VariableProfileList.Add(StrSalesClearAUR)
            // StrSalesClearAUR.AddTimeTotalVariable(PlanTimeTotals.SalesClearAURT1);

            // VariableProfileList.Add(SalesRegPctTtlDlr)
            // SalesRegPctTtlDlr.AddTimeTotalVariable(PlanTimeTotals.SalesRegPctTtlDlrT1);

            // VariableProfileList.Add(SalesRegPctTtlUnits)
            // SalesRegPctTtlUnits.AddTimeTotalVariable(PlanTimeTotals.SalesRegPctTtlUnitsT1);

            // VariableProfileList.Add(StrSalesClearPctTtlDlr)
            // StrSalesClearPctTtlDlr.AddTimeTotalVariable(PlanTimeTotals.SalesClearPctTtlDlrT1);

            // VariableProfileList.Add(StrSalesClearPctTtlUnits)
            // StrSalesClearPctTtlUnits.AddTimeTotalVariable(PlanTimeTotals.SalesClearPctTtlUnitsT1);

            VariableProfileList.Add(CompPctTtl);
            CompPctTtl.AddTimeTotalVariable(PlanTimeTotals.CompPctTtlT1);

            VariableProfileList.Add(NonCompPctTtl);
            NonCompPctTtl.AddTimeTotalVariable(PlanTimeTotals.NonCompPctTtlT1);

            VariableProfileList.Add(TotRecUnit);
            TotRecUnit.AddTimeTotalVariable(PlanTimeTotals.ReceiptUnitT1);
            TotRecUnit.TotalTimeTotalVariableProfile = PlanTimeTotals.ReceiptUnitT1;

            // VariableProfileList.Add(ReceiptAUR)
            // ReceiptAUR.AddTimeTotalVariable(PlanTimeTotals.ReceiptAURT1);

            VariableProfileList.Add(TotRecCostDlr);
            TotRecCostDlr.AddTimeTotalVariable(PlanTimeTotals.ReceiptCostT1);
            TotRecCostDlr.TotalTimeTotalVariableProfile = PlanTimeTotals.ReceiptCostT1;

            // VariableProfileList.Add(TotMDDlr)
            // TotMDDlr.AddTimeTotalVariable(PlanTimeTotals.TotMDDlrT1);
            // TotMDDlr.TotalTimeTotalVariableProfile = PlanTimeTotals.TotMDDlrT1;

            // VariableProfileList.Add(TotMDPct)
            // TotMDPct.AddTimeTotalVariable(PlanTimeTotals.TotMDPctT1);

            VariableProfileList.Add(AdjUnitsTot);
            AdjUnitsTot.AddTimeTotalVariable(PlanTimeTotals.AdjUnitsT1);
            AdjUnitsTot.TotalTimeTotalVariableProfile = PlanTimeTotals.AdjUnitsT1;

            // VariableProfileList.Add(ShrinkDlr)
            // ShrinkDlr.AddTimeTotalVariable(PlanTimeTotals.ShrinkDlrT1);
            // ShrinkDlr.TotalTimeTotalVariableProfile = PlanTimeTotals.ShrinkDlrT1;

            VariableProfileList.Add(ShrinkPctTot);
            // ShrinkPctTot.AddTimeTotalVariable(PlanTimeTotals.ShrinkPctT1);

            ShrinkPctTot.AddTimeTotalVariable(PlanTimeTotals.ShrinkPctTotT1);

            // VariableProfileList.Add(FWOSTotDlr)
            // FWOSTotDlr.AddTimeTotalVariable(PlanTimeTotals.FWOSTotDlrT1);

            // FWOSTotDlr.AddTimeTotalVariable(PlanTimeTotals.FWOSTotDlrT2);

            // FWOSTotDlr.AddTimeTotalVariable(PlanTimeTotals.ForwardWOSTotalT2);

            // VariableProfileList.Add(ForwardWOSReglDlr)
            // ForwardWOSReglDlr.AddTimeTotalVariable(PlanTimeTotals.ForwardWOSReglDlrT1);

            // ForwardWOSReglDlr.AddTimeTotalVariable(PlanTimeTotals.ForwardWOSReglDlrT2);

            // VariableProfileList.Add(ForwardWOSClearlDlr)
            // ForwardWOSClearlDlr.AddTimeTotalVariable(PlanTimeTotals.ForwardWOSClearlDlrT1);

            // ForwardWOSClearlDlr.AddTimeTotalVariable(PlanTimeTotals.ForwardWOSClearlDlrT2);

            // VariableProfileList.Add(NoOfRacks)
            // NoOfRacks.AddTimeTotalVariable(PlanTimeTotals.NoOfRacksT1);
            // NoOfRacks.AverageTimeTotalVariableProfile = PlanTimeTotals.NoOfRacksT1;

            VariableProfileList.Add(TotSalesAUC);
            // TotSalesAUC.AddTimeTotalVariable(PlanTimeTotals.SalesAUCT1);

            TotSalesAUC.AddTimeTotalVariable(PlanTimeTotals.TotSalesAUCT1);

            VariableProfileList.Add(TotStrSalesCostDlr);
            // TotStrSalesCostDlr.AddTimeTotalVariable(PlanTimeTotals.SalesCostT1);
            // TotStrSalesCostDlr.TotalTimeTotalVariableProfile = PlanTimeTotals.SalesCostT1;

            TotStrSalesCostDlr.AddTimeTotalVariable(PlanTimeTotals.SalesCostT2);
            TotStrSalesCostDlr.TotalTimeTotalVariableProfile = PlanTimeTotals.SalesCostT2;

            TotStrSalesCostDlr.AddTimeTotalVariable(PlanTimeTotals.TotStrSalesCostDlrT1);
            TotStrSalesCostDlr.TotalTimeTotalVariableProfile = PlanTimeTotals.TotStrSalesCostDlrT1;

            // VariableProfileList.Add(SalesMargin)
            // SalesMargin.AddTimeTotalVariable(PlanTimeTotals.SalesMarginT1);
            // SalesMargin.TotalTimeTotalVariableProfile = PlanTimeTotals.SalesMarginT1;

            // VariableProfileList.Add(TotStrBinvAUC)
            // TotStrBinvAUC.AddTimeTotalVariable(PlanTimeTotals.TotStrBinvAUCT1);

            // TotStrBinvAUC.AddTimeTotalVariable(PlanTimeTotals.TotStrBinvAUCT2);

            // TotStrBinvAUC.AddTimeTotalVariable(PlanTimeTotals.TotStrBinvAUCT3);

            VariableProfileList.Add(TotBinvCostDlr);
            TotBinvCostDlr.AddTimeTotalVariable(PlanTimeTotals.TotBinvCostDlrT1);

            TotBinvCostDlr.AddTimeTotalVariable(PlanTimeTotals.TotBinvCostDlrT2);

            TotBinvCostDlr.AddTimeTotalVariable(PlanTimeTotals.TotBinvCostDlrT3);

            VariableProfileList.Add(ReceiptAUCTot);
            // ReceiptAUCTot.AddTimeTotalVariable(PlanTimeTotals.ReceiptAUCT1);

            ReceiptAUCTot.AddTimeTotalVariable(PlanTimeTotals.ReceiptAUCTotT1);

            // VariableProfileList.Add(ReceiptMUPct)
            // ReceiptMUPct.AddTimeTotalVariable(PlanTimeTotals.ReceiptMUPctT1);

            VariableProfileList.Add(TotIMUPct);
            TotIMUPct.AddTimeTotalVariable(PlanTimeTotals.InitialMUPctT1);

            VariableProfileList.Add(GrossMarginTotDlr);
            GrossMarginTotDlr.AddTimeTotalVariable(PlanTimeTotals.GrossMarginT1);
            GrossMarginTotDlr.TotalTimeTotalVariableProfile = PlanTimeTotals.GrossMarginT1;

            VariableProfileList.Add(GrossMarginPctTot);
            GrossMarginPctTot.AddTimeTotalVariable(PlanTimeTotals.GrossMarginPctT1);

            // VariableProfileList.Add(CummMUPct)
            // CummMUPct.AddTimeTotalVariable(PlanTimeTotals.CummMUPctT1);

            // VariableProfileList.Add(COGS)
            // COGS.AddTimeTotalVariable(PlanTimeTotals.COGST1);
            // COGS.TotalTimeTotalVariableProfile = PlanTimeTotals.COGST1;

            // VariableProfileList.Add(GMROI)
            // GMROI.AddTimeTotalVariable(PlanTimeTotals.GMROIT1);

            VariableProfileList.Add(OTBCostDlr);
            OTBCostDlr.AddTimeTotalVariable(PlanTimeTotals.OTBCostDlrT1);
            OTBCostDlr.TotalTimeTotalVariableProfile = PlanTimeTotals.OTBCostDlrT1;

            VariableProfileList.Add(OTBUnit);
            OTBUnit.AddTimeTotalVariable(PlanTimeTotals.OTBUnitT1);
            OTBUnit.TotalTimeTotalVariableProfile = PlanTimeTotals.OTBUnitT1;

            // VariableProfileList.Add(OTBAUR)
            // VariableProfileList.Add(OTBAUC)
            // VariableProfileList.Add(OTBIMU)
            // VariableProfileList.Add(OTBCost)
            VariableProfileList.Add(OnOrderDlr);
            OnOrderDlr.AddTimeTotalVariable(PlanTimeTotals.OnOrderDlrT1);
            OnOrderDlr.TotalTimeTotalVariableProfile = PlanTimeTotals.OnOrderDlrT1;

            VariableProfileList.Add(OnOrderAUC);
            OnOrderAUC.AddTimeTotalVariable(PlanTimeTotals.OnOrderAUCT1);

            VariableProfileList.Add(OnOrderAUR);
            OnOrderAUR.AddTimeTotalVariable(PlanTimeTotals.OnOrderAURT1);

            VariableProfileList.Add(OnOrderCostDlr);
            OnOrderCostDlr.AddTimeTotalVariable(PlanTimeTotals.OnOrderCostT1);
            OnOrderCostDlr.TotalTimeTotalVariableProfile = PlanTimeTotals.OnOrderCostT1;

            // VariableProfileList.Add(OnOrderIMU)
            // OnOrderIMU.AddTimeTotalVariable(PlanTimeTotals.OnOrderIMUT1);

            VariableProfileList.Add(OnOrderUnit);
            OnOrderUnit.AddTimeTotalVariable(PlanTimeTotals.OnOrderUnitT1);
            OnOrderUnit.TotalTimeTotalVariableProfile = PlanTimeTotals.OnOrderUnitT1;

            // VariableProfileList.Add(BINVMgnPct)
            // BINVMgnPct.AddTimeTotalVariable(PlanTimeTotals.BINVMgnPctT1);

            // VariableProfileList.Add(TotMDCost)
            // TotMDCost.AddTimeTotalVariable(PlanTimeTotals.TotMDCostT1);
            // TotMDCost.TotalTimeTotalVariableProfile = PlanTimeTotals.TotMDCostT1;

            // VariableProfileList.Add(ShrinkCost)
            // ShrinkCost.AddTimeTotalVariable(PlanTimeTotals.ShrinkCostT1);
            // ShrinkCost.TotalTimeTotalVariableProfile = PlanTimeTotals.ShrinkCostT1;

            VariableProfileList.Add(ShrinkUnitsTot);
            // ShrinkUnitsTot.AddTimeTotalVariable(PlanTimeTotals.ShrinkUnitsT1);
            // ShrinkUnitsTot.TotalTimeTotalVariableProfile = PlanTimeTotals.ShrinkUnitsT1;

            ShrinkUnitsTot.AddTimeTotalVariable(PlanTimeTotals.ShrinkUnitsTotT1);
            ShrinkUnitsTot.TotalTimeTotalVariableProfile = PlanTimeTotals.ShrinkUnitsTotT1;

            // VariableProfileList.Add(AdjDollars)
            // AdjDollars.AddTimeTotalVariable(PlanTimeTotals.AdjDollarsT1);
            // AdjDollars.TotalTimeTotalVariableProfile = PlanTimeTotals.AdjDollarsT1;

            // VariableProfileList.Add(AdjCost)
            // AdjCost.AddTimeTotalVariable(PlanTimeTotals.AdjCostT1);
            // AdjCost.TotalTimeTotalVariableProfile = PlanTimeTotals.AdjCostT1;

            // VariableProfileList.Add(TotStrEinvDlr)
            // VariableProfileList.Add(TotStrEinvCost)
            VariableProfileList.Add(TotEinvUnits);
            TotEinvUnits.AddTimeTotalVariable(PlanTimeTotals.TotEinvUnitsT1);
            TotEinvUnits.TotalTimeTotalVariableProfile = PlanTimeTotals.TotEinvUnitsT1;

            TotEinvUnits.AddTimeTotalVariable(PlanTimeTotals.TotEinvUnitsT2);
            TotEinvUnits.AverageTimeTotalVariableProfile = PlanTimeTotals.TotEinvUnitsT2;

            TotEinvUnits.AddTimeTotalVariable(PlanTimeTotals.TotEinvUnitsT3);
            TotEinvUnits.TotalTimeTotalVariableProfile = PlanTimeTotals.TotEinvUnitsT3;

            // VariableProfileList.Add(PermMDDlr)
            // PermMDDlr.AddTimeTotalVariable(PlanTimeTotals.PermMDDlrT1);
            // PermMDDlr.TotalTimeTotalVariableProfile = PlanTimeTotals.PermMDDlrT1;

            // VariableProfileList.Add(PermMDCost)
            // PermMDCost.AddTimeTotalVariable(PlanTimeTotals.PermMDCostT1);
            // PermMDCost.TotalTimeTotalVariableProfile = PlanTimeTotals.PermMDCostT1;

            // VariableProfileList.Add(PermMDDlrPct)
            // PermMDDlrPct.AddTimeTotalVariable(PlanTimeTotals.PermMDDlrPctT1);

            // VariableProfileList.Add(PosMDDlr)
            // PosMDDlr.AddTimeTotalVariable(PlanTimeTotals.PosMDDlrT1);
            // PosMDDlr.TotalTimeTotalVariableProfile = PlanTimeTotals.PosMDDlrT1;

            // VariableProfileList.Add(PosMDCost)
            // PosMDCost.AddTimeTotalVariable(PlanTimeTotals.PosMDCostT1);
            // PosMDCost.TotalTimeTotalVariableProfile = PlanTimeTotals.PosMDCostT1;

            // VariableProfileList.Add(PosMDDlrPct)
            // PosMDDlrPct.AddTimeTotalVariable(PlanTimeTotals.PosMDDlrPctT1);

            VariableProfileList.Add(AdjUntiPctTot);
            // AdjUntiPctTot.AddTimeTotalVariable(PlanTimeTotals.AdjDollarsPctT1);

            AdjUntiPctTot.AddTimeTotalVariable(PlanTimeTotals.AdjUntiPctTotT1);
            AdjUntiPctTot.AverageTimeTotalVariableProfile = PlanTimeTotals.AdjUntiPctTotT1;

            // VariableProfileList.Add(MaintInvDlr)
            // MaintInvDlr.AddTimeTotalVariable(PlanTimeTotals.MaintInvDlrT1);
            // MaintInvDlr.TotalTimeTotalVariableProfile = PlanTimeTotals.MaintInvDlrT1;

            // VariableProfileList.Add(MaintInvCost)
            // MaintInvCost.AddTimeTotalVariable(PlanTimeTotals.MaintInvCostT1);
            // MaintInvCost.TotalTimeTotalVariableProfile = PlanTimeTotals.MaintInvCostT1;

            // VariableProfileList.Add(MMUPct)
            // MMUPct.AddTimeTotalVariable(PlanTimeTotals.MMUPctT1);

            // VariableProfileList.Add(PermMDDlrPctToMD)
            // PermMDDlrPctToMD.AddTimeTotalVariable(PlanTimeTotals.PermMDDlrPctToMDT1);

            VariableProfileList.Add(OTBCostDlrCum);
            // OTBCostDlrCum.AddTimeTotalVariable(PlanTimeTotals.OTBDlrCumT1);
            // OTBCostDlrCum.TotalTimeTotalVariableProfile = PlanTimeTotals.OTBDlrCumT1;

            VariableProfileList.Add(OTBUnitCum);
            // OTBUnitCum.AddTimeTotalVariable(PlanTimeTotals.OTBUnitCumT1);
            // OTBUnitCum.TotalTimeTotalVariableProfile = PlanTimeTotals.OTBUnitCumT1;

            VariableProfileList.Add(SellThruUnitPctTot);
            SellThruUnitPctTot.AddTimeTotalVariable(PlanTimeTotals.SellThruUnitPctTotT1);

            // VariableProfileList.Add(StockSalesDlr)
            // VariableProfileList.Add(StockSalesRatioTot)
            VariableProfileList.Add(TotStrSalesAUC);
            TotStrSalesAUC.AddTimeTotalVariable(PlanTimeTotals.TotStrSalesAUCT1);

            VariableProfileList.Add(TotSalesAUR);
            TotSalesAUR.AddTimeTotalVariable(PlanTimeTotals.TotSalesAURT1);

            VariableProfileList.Add(TotSalesDlr);
            TotSalesDlr.AddTimeTotalVariable(PlanTimeTotals.TotSalesDlrT1);
            TotSalesDlr.TotalTimeTotalVariableProfile = PlanTimeTotals.TotSalesDlrT1;

            TotSalesDlr.AddTimeTotalVariable(PlanTimeTotals.TotSalesDlrT2);

            VariableProfileList.Add(TotSalesCostDlr);
            TotSalesCostDlr.AddTimeTotalVariable(PlanTimeTotals.TotSalesCostDlrT1);
            TotSalesCostDlr.TotalTimeTotalVariableProfile = PlanTimeTotals.TotSalesCostDlrT1;

            TotSalesCostDlr.AddTimeTotalVariable(PlanTimeTotals.TotSalesCostDlrT2);
            TotSalesCostDlr.AverageTimeTotalVariableProfile = PlanTimeTotals.TotSalesCostDlrT2;

            VariableProfileList.Add(TotSalesUnit);
            TotSalesUnit.AddTimeTotalVariable(PlanTimeTotals.TotSalesUnitT1);
            TotSalesUnit.TotalTimeTotalVariableProfile = PlanTimeTotals.TotSalesUnitT1;

            TotSalesUnit.AddTimeTotalVariable(PlanTimeTotals.TotSalesUnitT2);

            VariableProfileList.Add(GrossMarginPctStr);
            GrossMarginPctStr.AddTimeTotalVariable(PlanTimeTotals.GrossMarginPctStrT1);

            VariableProfileList.Add(GrossMarginTotStr);
            GrossMarginTotStr.AddTimeTotalVariable(PlanTimeTotals.GrossMarginTotStrT1);
            GrossMarginTotStr.TotalTimeTotalVariableProfile = PlanTimeTotals.GrossMarginTotStrT1;

            // VariableProfileList.Add(StrCostDlr)
            VariableProfileList.Add(CompSlsDlr);
            CompSlsDlr.AddTimeTotalVariable(PlanTimeTotals.CompSlsDlrT1);
            CompSlsDlr.TotalTimeTotalVariableProfile = PlanTimeTotals.CompSlsDlrT1;

            VariableProfileList.Add(NonCompSlsDlr);
            NonCompSlsDlr.AddTimeTotalVariable(PlanTimeTotals.NonCompSlsDlrT1);
            NonCompSlsDlr.TotalTimeTotalVariableProfile = PlanTimeTotals.NonCompSlsDlrT1;

            VariableProfileList.Add(NewStores);
            NewStores.AddTimeTotalVariable(PlanTimeTotals.NewStoresT1);
            NewStores.AverageTimeTotalVariableProfile = PlanTimeTotals.NewStoresT1;

            VariableProfileList.Add(OpenStores);
            OpenStores.AddTimeTotalVariable(PlanTimeTotals.OpenStoresT1);
            OpenStores.AverageTimeTotalVariableProfile = PlanTimeTotals.OpenStoresT1;

            VariableProfileList.Add(AvgStrSlsUnit);
            VariableProfileList.Add(AvgStrSlsDlr);
            // VariableProfileList.Add(TotBINVUnit)
            // VariableProfileList.Add(TotStrEinvUnits)
            // VariableProfileList.Add(TotStrBinvPctTtlUnits)
            // VariableProfileList.Add(ShrinkUnitsStr)
            // VariableProfileList.Add(ShrinkPctStr)
            // VariableProfileList.Add(AdjUnitsStr)
            // VariableProfileList.Add(AdjUntiPctStr)
            VariableProfileList.Add(TotStrAvgINVUnit);
            // VariableProfileList.Add(TotAvgINVUnit)
            VariableProfileList.Add(TotFWOSUnit);
            // VariableProfileList.Add(StrIMUPct)
            // VariableProfileList.Add(SalesUnitPerRack)
            // VariableProfileList.Add(SalesDlrPerRack)
            VariableProfileList.Add(DTCRtnUnit);
            DTCRtnUnit.AddTimeTotalVariable(PlanTimeTotals.DTCRtnUnitT1);
            DTCRtnUnit.TotalTimeTotalVariableProfile = PlanTimeTotals.DTCRtnUnitT1;

            VariableProfileList.Add(DTCBODlr);
            DTCBODlr.AddTimeTotalVariable(PlanTimeTotals.DTCBODlrT1);
            DTCBODlr.TotalTimeTotalVariableProfile = PlanTimeTotals.DTCBODlrT1;

            VariableProfileList.Add(DTCBOCostDlr);
            DTCBOCostDlr.AddTimeTotalVariable(PlanTimeTotals.DTCBOCostDlrT1);
            DTCBOCostDlr.TotalTimeTotalVariableProfile = PlanTimeTotals.DTCBOCostDlrT1;

            VariableProfileList.Add(DTCBOPct);
            DTCBOPct.AddTimeTotalVariable(PlanTimeTotals.DTCBOPctT1);

            VariableProfileList.Add(DTCCancelUnit);
            DTCCancelUnit.AddTimeTotalVariable(PlanTimeTotals.DTCCancelUnitT1);
            DTCCancelUnit.TotalTimeTotalVariableProfile = PlanTimeTotals.DTCCancelUnitT1;

            VariableProfileList.Add(DTCCancelDlr);
            DTCCancelDlr.AddTimeTotalVariable(PlanTimeTotals.DTCCancelDlrT1);
            DTCCancelDlr.TotalTimeTotalVariableProfile = PlanTimeTotals.DTCCancelDlrT1;

            VariableProfileList.Add(DTCCancelPct);
            DTCCancelPct.AddTimeTotalVariable(PlanTimeTotals.DTCCancelPctT1);

            VariableProfileList.Add(DTCCancelCostDlr);
            DTCCancelCostDlr.AddTimeTotalVariable(PlanTimeTotals.DTCCancelCostDlrT1);
            DTCCancelCostDlr.TotalTimeTotalVariableProfile = PlanTimeTotals.DTCCancelCostDlrT1;

            // VariableProfileList.Add(DTCDamageRtnCostDlr)
            // VariableProfileList.Add(DTCSaleableRtnCostDlr)
            VariableProfileList.Add(DTCGrossDmdUnit);
            DTCGrossDmdUnit.AddTimeTotalVariable(PlanTimeTotals.DTCGrossDmdUnitT1);
            DTCGrossDmdUnit.TotalTimeTotalVariableProfile = PlanTimeTotals.DTCGrossDmdUnitT1;

            VariableProfileList.Add(DTCGrossDmdDlr);
            DTCGrossDmdDlr.AddTimeTotalVariable(PlanTimeTotals.DTCGrossDmdDlrT1);
            DTCGrossDmdDlr.TotalTimeTotalVariableProfile = PlanTimeTotals.DTCGrossDmdDlrT1;

            VariableProfileList.Add(DTCGrossDmdAUR);
            DTCGrossDmdAUR.AddTimeTotalVariable(PlanTimeTotals.DTCGrossDmdAURT1);

            VariableProfileList.Add(DTCGrossDmdAUC);
            DTCGrossDmdAUC.AddTimeTotalVariable(PlanTimeTotals.DTCGrossDmdAUCT1);

            VariableProfileList.Add(DTCGrossDmdCostDlr);
            DTCGrossDmdCostDlr.AddTimeTotalVariable(PlanTimeTotals.DTCGrossDmdCostDlrT1);
            DTCGrossDmdCostDlr.TotalTimeTotalVariableProfile = PlanTimeTotals.DTCGrossDmdCostDlrT1;

            VariableProfileList.Add(DTCNetDmdUnit);
            DTCNetDmdUnit.AddTimeTotalVariable(PlanTimeTotals.DTCNetDmdUnitT1);
            DTCNetDmdUnit.TotalTimeTotalVariableProfile = PlanTimeTotals.DTCNetDmdUnitT1;

            VariableProfileList.Add(DTCNetDmdDlr);
            DTCNetDmdDlr.AddTimeTotalVariable(PlanTimeTotals.DTCNetDmdDlrT1);
            DTCNetDmdDlr.TotalTimeTotalVariableProfile = PlanTimeTotals.DTCNetDmdDlrT1;

            VariableProfileList.Add(DTCNetDmdCostDlr);
            DTCNetDmdCostDlr.AddTimeTotalVariable(PlanTimeTotals.DTCNetDmdCostDlrT1);
            DTCNetDmdCostDlr.TotalTimeTotalVariableProfile = PlanTimeTotals.DTCNetDmdCostDlrT1;

            VariableProfileList.Add(DTCNetDmdPct);
            DTCNetDmdPct.AddTimeTotalVariable(PlanTimeTotals.DTCNetDmdPctT1);

            VariableProfileList.Add(DTCNetDmdAUR);
            DTCNetDmdAUR.AddTimeTotalVariable(PlanTimeTotals.DTCNetDmdAURT1);

            VariableProfileList.Add(DTCNetDmdAUC);
            DTCNetDmdAUC.AddTimeTotalVariable(PlanTimeTotals.DTCNetDmdAUCT1);

            VariableProfileList.Add(DTCNetDmdGMDlr);
            DTCNetDmdGMDlr.AddTimeTotalVariable(PlanTimeTotals.DTCNetDmdGMDlrT1);
            DTCNetDmdGMDlr.TotalTimeTotalVariableProfile = PlanTimeTotals.DTCNetDmdGMDlrT1;

            VariableProfileList.Add(DTCNetDmdGMPct);
            DTCNetDmdGMPct.AddTimeTotalVariable(PlanTimeTotals.DTCNetDmdGMPctT1);

            VariableProfileList.Add(DTCRtnDlr);
            DTCRtnDlr.AddTimeTotalVariable(PlanTimeTotals.DTCRtnDlrT1);
            DTCRtnDlr.TotalTimeTotalVariableProfile = PlanTimeTotals.DTCRtnDlrT1;

            VariableProfileList.Add(DTCRtnCostDlr);
            DTCRtnCostDlr.AddTimeTotalVariable(PlanTimeTotals.DTCRtnCostDlrT1);
            DTCRtnCostDlr.TotalTimeTotalVariableProfile = PlanTimeTotals.DTCRtnCostDlrT1;

            VariableProfileList.Add(DTCRtnPct);
            DTCRtnPct.AddTimeTotalVariable(PlanTimeTotals.DTCRtnPctT1);

            VariableProfileList.Add(DTCAvgOrder);
            DTCAvgOrder.AddTimeTotalVariable(PlanTimeTotals.DTCAvgOrderT1);
            DTCAvgOrder.AverageTimeTotalVariableProfile = PlanTimeTotals.DTCAvgOrderT1;

            VariableProfileList.Add(DTCFWOSUnit);
            // VariableProfileList.Add(DTCIMUPct)
            VariableProfileList.Add(DTCNoOfOrders);
            DTCNoOfOrders.AddTimeTotalVariable(PlanTimeTotals.DTCNoOfOrdersT1);
            DTCNoOfOrders.TotalTimeTotalVariableProfile = PlanTimeTotals.DTCNoOfOrdersT1;

            VariableProfileList.Add(DTCVisits);
            DTCVisits.AddTimeTotalVariable(PlanTimeTotals.DTCVisitsT1);
            DTCVisits.TotalTimeTotalVariableProfile = PlanTimeTotals.DTCVisitsT1;

            VariableProfileList.Add(DTCPlacement);
            DTCPlacement.AddTimeTotalVariable(PlanTimeTotals.DTCPlacementT1);
            DTCPlacement.AverageTimeTotalVariableProfile = PlanTimeTotals.DTCPlacementT1;

            VariableProfileList.Add(DTCSlsStkRatio);
            DTCSlsStkRatio.AddTimeTotalVariable(PlanTimeTotals.DTCSlsStkRatioT1);

            VariableProfileList.Add(DTCSellThru);
            DTCSellThru.AddTimeTotalVariable(PlanTimeTotals.DTCSellThruT1);

            VariableProfileList.Add(DTCSpace);
            DTCSpace.AddTimeTotalVariable(PlanTimeTotals.DTCSpaceT1);
            DTCSpace.AverageTimeTotalVariableProfile = PlanTimeTotals.DTCSpaceT1;

            // VariableProfileList.Add(DTCAdjUnit)
            // VariableProfileList.Add(DTCAdjPct)
            // VariableProfileList.Add(DTCAvgInvUnit)
            // VariableProfileList.Add(DTCBINVUnit)
            // VariableProfileList.Add(DTCEINVUnit)
            // VariableProfileList.Add(DTCBINVUnitPct)
            // VariableProfileList.Add(DTCShrinkUnit)
            // VariableProfileList.Add(DTCShrinkPct)
            VariableProfileList.Add(DTCBOUnit);
            DTCBOUnit.AddTimeTotalVariable(PlanTimeTotals.DTCBOUnitT1);
            DTCBOUnit.TotalTimeTotalVariableProfile = PlanTimeTotals.DTCBOUnitT1;

            VariableProfileList.Add(TotStrSalesUnitPctTTL);
            TotStrSalesUnitPctTTL.AddTimeTotalVariable(PlanTimeTotals.TotStrSalesUnitPctTTLT1);

            VariableProfileList.Add(TotStrSalesCostDlrPctTTL);
            TotStrSalesCostDlrPctTTL.AddTimeTotalVariable(PlanTimeTotals.TotStrSalesCostDlrPctTTLT1);

            VariableProfileList.Add(TotDTCSalesUnitPctTTL);
            TotDTCSalesUnitPctTTL.AddTimeTotalVariable(PlanTimeTotals.TotDTCSalesUnitPctTTLT1);

            VariableProfileList.Add(TotDTCSalesCostDlrPctTTL);
            TotDTCSalesCostDlrPctTTL.AddTimeTotalVariable(PlanTimeTotals.TotDTCSalesCostDlrPctTTLT1);

            VariableProfileList.Add(AdjCostDlrTot);
            AdjCostDlrTot.AddTimeTotalVariable(PlanTimeTotals.AdjCostDlrTotT1);
            AdjCostDlrTot.TotalTimeTotalVariableProfile = PlanTimeTotals.AdjCostDlrTotT1;

            VariableProfileList.Add(ShrinkCostDlrTot);
            ShrinkCostDlrTot.AddTimeTotalVariable(PlanTimeTotals.ShrinkCostDlrTotT1);
            ShrinkCostDlrTot.TotalTimeTotalVariableProfile = PlanTimeTotals.ShrinkCostDlrTotT1;

            VariableProfileList.Add(TotEinvCostDlr);
            TotEinvCostDlr.AddTimeTotalVariable(PlanTimeTotals.TotEinvCostDlrT1);
            TotEinvCostDlr.TotalTimeTotalVariableProfile = PlanTimeTotals.TotEinvCostDlrT1;

            TotEinvCostDlr.AddTimeTotalVariable(PlanTimeTotals.TotEinvCostDlrT2);
            TotEinvCostDlr.AverageTimeTotalVariableProfile = PlanTimeTotals.TotEinvCostDlrT2;

            TotEinvCostDlr.AddTimeTotalVariable(PlanTimeTotals.TotEinvCostDlrT3);
            TotEinvCostDlr.TotalTimeTotalVariableProfile = PlanTimeTotals.TotEinvCostDlrT3;

            VariableProfileList.Add(DTCGrossDmdGMDlr);
            DTCGrossDmdGMDlr.AddTimeTotalVariable(PlanTimeTotals.DTCGrossDmdGMDlrT1);
            DTCGrossDmdGMDlr.TotalTimeTotalVariableProfile = PlanTimeTotals.DTCGrossDmdGMDlrT1;

            VariableProfileList.Add(DTCGrsDmdGMPct);
            DTCGrsDmdGMPct.AddTimeTotalVariable(PlanTimeTotals.DTCGrsDmdGMPctT1);

            VariableProfileList.Add(DiscountPct);
            DiscountPct.AddTimeTotalVariable(PlanTimeTotals.DiscountPctT1);

            VariableProfileList.Add(DiscountDlr);
            DiscountDlr.AddTimeTotalVariable(PlanTimeTotals.DiscountDlrT1);
            DiscountDlr.TotalTimeTotalVariableProfile = PlanTimeTotals.DiscountDlrT1;

            VariableProfileList.Add(AfterDiscountDlr);
            AfterDiscountDlr.AddTimeTotalVariable(PlanTimeTotals.AfterDiscountDlrT1);
            AfterDiscountDlr.TotalTimeTotalVariableProfile = PlanTimeTotals.AfterDiscountDlrT1;

            VariableProfileList.Add(AfterDiscountAUR);
            AfterDiscountAUR.AddTimeTotalVariable(PlanTimeTotals.AfterDiscountAURT1);

            VariableProfileList.Add(FreightCostPerUnit);
            FreightCostPerUnit.AddTimeTotalVariable(PlanTimeTotals.FreightCostPerUnitT1);

            VariableProfileList.Add(TotFreightCostDlr);
            TotFreightCostDlr.AddTimeTotalVariable(PlanTimeTotals.TotFreightCostDlrT1);
            TotFreightCostDlr.TotalTimeTotalVariableProfile = PlanTimeTotals.TotFreightCostDlrT1;

            VariableProfileList.Add(AfterDiscGMDlr);
            AfterDiscGMDlr.AddTimeTotalVariable(PlanTimeTotals.AfterDiscGMDlrT1);
            AfterDiscGMDlr.TotalTimeTotalVariableProfile = PlanTimeTotals.AfterDiscGMDlrT1;

            VariableProfileList.Add(VATPct);
            VATPct.AddTimeTotalVariable(PlanTimeTotals.VATPctT1);

            VariableProfileList.Add(VATDlr);
            VATDlr.AddTimeTotalVariable(PlanTimeTotals.VATDlrT1);
            VATDlr.TotalTimeTotalVariableProfile = PlanTimeTotals.VATDlrT1;

            VariableProfileList.Add(CurrXchgPct);
            CurrXchgPct.AddTimeTotalVariable(PlanTimeTotals.CurrXchgPctT1);

            VariableProfileList.Add(ConvertedSalesDlr);
            ConvertedSalesDlr.AddTimeTotalVariable(PlanTimeTotals.ConvertedSalesDlrT1);
            ConvertedSalesDlr.TotalTimeTotalVariableProfile = PlanTimeTotals.ConvertedSalesDlrT1;

            VariableProfileList.Add(SaleswithoutVATDlr);
            SaleswithoutVATDlr.AddTimeTotalVariable(PlanTimeTotals.SaleswithoutVATDlrT1);
            SaleswithoutVATDlr.TotalTimeTotalVariableProfile = PlanTimeTotals.SaleswithoutVATDlrT1;

            VariableProfileList.Add(TotStrAvgEndINVUnit);
            VariableProfileList.Add(TotEinvAUC);
            TotEinvAUC.AddTimeTotalVariable(PlanTimeTotals.TotEinvAUCT1);

            TotEinvAUC.AddTimeTotalVariable(PlanTimeTotals.TotEinvAUCT2);

            TotEinvAUC.AddTimeTotalVariable(PlanTimeTotals.TotEinvAUCT3);

            VariableProfileList.Add(Commit1Unit);
            Commit1Unit.AddTimeTotalVariable(PlanTimeTotals.Commit1UnitT1);
            Commit1Unit.TotalTimeTotalVariableProfile = PlanTimeTotals.Commit1UnitT1;

            VariableProfileList.Add(Commit1CostDlr);
            Commit1CostDlr.AddTimeTotalVariable(PlanTimeTotals.Commit1CostDlrT1);
            Commit1CostDlr.TotalTimeTotalVariableProfile = PlanTimeTotals.Commit1CostDlrT1;

            VariableProfileList.Add(Commit1AUC);
            Commit1AUC.AddTimeTotalVariable(PlanTimeTotals.Commit1AUCT1);

            VariableProfileList.Add(Commit2Unit);
            Commit2Unit.AddTimeTotalVariable(PlanTimeTotals.Commit2UnitT1);
            Commit2Unit.TotalTimeTotalVariableProfile = PlanTimeTotals.Commit2UnitT1;

            VariableProfileList.Add(Commit2CostDlr);
            Commit2CostDlr.AddTimeTotalVariable(PlanTimeTotals.Commit2CostDlrT1);
            Commit2CostDlr.TotalTimeTotalVariableProfile = PlanTimeTotals.Commit2CostDlrT1;

            VariableProfileList.Add(Commit2AUC);
            Commit2AUC.AddTimeTotalVariable(PlanTimeTotals.Commit2AUCT1);

            VariableProfileList.Add(Commit3Unit);
            Commit3Unit.AddTimeTotalVariable(PlanTimeTotals.Commit3UnitT1);
            Commit3Unit.TotalTimeTotalVariableProfile = PlanTimeTotals.Commit3UnitT1;

            VariableProfileList.Add(Commit3AUC);
            Commit3AUC.AddTimeTotalVariable(PlanTimeTotals.Commit3AUCT1);

            VariableProfileList.Add(Commit3CostDlr);
            Commit3CostDlr.AddTimeTotalVariable(PlanTimeTotals.Commit3CostDlrT1);
            Commit3CostDlr.TotalTimeTotalVariableProfile = PlanTimeTotals.Commit3CostDlrT1;

            VariableProfileList.Add(SquareSpace);
            SquareSpace.AddTimeTotalVariable(PlanTimeTotals.SquareSpaceT1);

            VariableProfileList.Add(LinearSpace);
            LinearSpace.AddTimeTotalVariable(PlanTimeTotals.LinearSpaceT1);

            VariableProfileList.Add(FloorSpace);
            FloorSpace.AddTimeTotalVariable(PlanTimeTotals.FloorSpaceT1);

            VariableProfileList.Add(DTCTransactions);
            DTCTransactions.AddTimeTotalVariable(PlanTimeTotals.DTCTransactionsT1);
            DTCTransactions.TotalTimeTotalVariableProfile = PlanTimeTotals.DTCTransactionsT1;

            VariableProfileList.Add(SpaceConvPct);
            SpaceConvPct.AddTimeTotalVariable(PlanTimeTotals.SpaceConvPctT1);

            VariableProfileList.Add(SalesUperSqSpace);
            SalesUperSqSpace.AddTimeTotalVariable(PlanTimeTotals.SalesUperSqSpaceT1);

            VariableProfileList.Add(SalesUperLinearSpace);
            SalesUperLinearSpace.AddTimeTotalVariable(PlanTimeTotals.SalesUperLinearSpaceT1);

            VariableProfileList.Add(DensityU);
            DensityU.AddTimeTotalVariable(PlanTimeTotals.DensityUT1);

            VariableProfileList.Add(SalesperSpaceU);
            SalesperSpaceU.AddTimeTotalVariable(PlanTimeTotals.SalesperSpaceUT1);

            VariableProfileList.Add(TotStrSalesCDlrperSqSpace);
            TotStrSalesCDlrperSqSpace.AddTimeTotalVariable(PlanTimeTotals.TotStrSalesCDlrperSqSpaceT1);

            VariableProfileList.Add(TotStrSalesDlrperSqSpace);
            TotStrSalesDlrperSqSpace.AddTimeTotalVariable(PlanTimeTotals.TotStrSalesDlrperSqSpaceT1);

            VariableProfileList.Add(TotStrSalesCDlrperLinearSpace);
            TotStrSalesCDlrperLinearSpace.AddTimeTotalVariable(PlanTimeTotals.TotStrSalesCDlrperLinearSpaceT1);

            VariableProfileList.Add(TotStrSalesDlrperLinearSpace);
            TotStrSalesDlrperLinearSpace.AddTimeTotalVariable(PlanTimeTotals.TotStrSalesDlrperLinearSpaceT1);

            VariableProfileList.Add(DTCPlacedOrdersDlr);
            DTCPlacedOrdersDlr.AddTimeTotalVariable(PlanTimeTotals.DTCPlacedOrdersDlrT1);

            VariableProfileList.Add(DTCConvPct);
            DTCConvPct.AddTimeTotalVariable(PlanTimeTotals.DTCConvPctT1);

        }
    }
    /// <summary>
    /// The PlanTimeTotalVariables class is where the time-total variables are defined.
    /// </summary>
    /// <remarks>
    /// This class is where the time-total variables are defined.
    /// </remarks>
    public class PlanTimeTotalVariables : BasePlanTimeTotalVariables
    {
        public TimeTotalVariableProfile TotStrBinvDlrT1;
        public TimeTotalVariableProfile TotStrBinvDlrT2;
        public TimeTotalVariableProfile TotStrBinvDlrT3;
        public TimeTotalVariableProfile TotStrBinvDlrT4;
        public TimeTotalVariableProfile TotBinvAUCT1;
        public TimeTotalVariableProfile TotBinvAUCT2;
        public TimeTotalVariableProfile TotBinvAUCT3;
        public TimeTotalVariableProfile RegStrBinvAURT1;
        public TimeTotalVariableProfile RegStrBinvAURT2;
        public TimeTotalVariableProfile RegStrBinvAURT3;
        public TimeTotalVariableProfile RegStrBinvDlrT1;
        public TimeTotalVariableProfile RegStrBinvDlrT2;
        public TimeTotalVariableProfile RegStrBinvDlrT3;
        public TimeTotalVariableProfile RegStrBinvDlrT4;
        public TimeTotalVariableProfile ClearStrBinvAURT1;
        public TimeTotalVariableProfile ClearStrBinvAURT2;
        public TimeTotalVariableProfile ClearStrBinvAURT3;
        public TimeTotalVariableProfile ClearStrBinvDlrT1;
        public TimeTotalVariableProfile ClearStrBinvDlrT2;
        public TimeTotalVariableProfile ClearStrBinvDlrT3;
        public TimeTotalVariableProfile RegStrBinvPctTtlDlrT1;
        public TimeTotalVariableProfile RegStrBinvPctTtlDlrT2;
        public TimeTotalVariableProfile RegStrBinvPctTtlDlrT3;
        public TimeTotalVariableProfile RegStrBinvPctTtlUnitsT1;
        public TimeTotalVariableProfile RegStrBinvPctTtlUnitsT2;
        public TimeTotalVariableProfile RegStrBinvPctTtlUnitsT3;
        public TimeTotalVariableProfile ClearStrBinvPctTtlDlrT1;
        public TimeTotalVariableProfile ClearStrBinvPctTtlDlrT2;
        public TimeTotalVariableProfile ClearStrBinvPctTtlDlrT3;
        public TimeTotalVariableProfile ClearStrBinvPctTtlUnitsT1;
        public TimeTotalVariableProfile ClearStrBinvPctTtlUnitsT2;
        public TimeTotalVariableProfile ClearStrBinvPctTtlUnitsT3;
        public TimeTotalVariableProfile SalesDlrT1;
        public TimeTotalVariableProfile SalesDlrT2;
        public TimeTotalVariableProfile SalesAURT1;
        public TimeTotalVariableProfile SalesAURT2;
        public TimeTotalVariableProfile SalesRegDlrT1;
        public TimeTotalVariableProfile SalesRegDlrT2;
        public TimeTotalVariableProfile SalesRegAURT1;
        public TimeTotalVariableProfile TotStrSalesAURT1;
        public TimeTotalVariableProfile SalesClearDlrT1;
        public TimeTotalVariableProfile SalesClearDlrT2;
        public TimeTotalVariableProfile SalesClearAURT1;
        public TimeTotalVariableProfile SalesRegPctTtlDlrT1;
        public TimeTotalVariableProfile SalesRegPctTtlUnitsT1;
        public TimeTotalVariableProfile SalesClearPctTtlDlrT1;
        public TimeTotalVariableProfile SalesClearPctTtlUnitsT1;
        public TimeTotalVariableProfile CompPctTtlT1;
        public TimeTotalVariableProfile NonCompPctTtlT1;
        public TimeTotalVariableProfile ReceiptUnitT1;
        public TimeTotalVariableProfile ReceiptAURT1;
        public TimeTotalVariableProfile ReceiptCostT1;
        public TimeTotalVariableProfile TotMDDlrT1;
        public TimeTotalVariableProfile TotMDPctT1;
        public TimeTotalVariableProfile AdjUnitsT1;
        public TimeTotalVariableProfile ShrinkDlrT1;
        public TimeTotalVariableProfile ShrinkPctT1;
        public TimeTotalVariableProfile ShrinkPctTotT1;
        public TimeTotalVariableProfile FWOSTotDlrT1;
        public TimeTotalVariableProfile FWOSTotDlrT2;
        public TimeTotalVariableProfile ForwardWOSTotalT2;
        public TimeTotalVariableProfile ForwardWOSReglDlrT1;
        public TimeTotalVariableProfile ForwardWOSReglDlrT2;
        public TimeTotalVariableProfile ForwardWOSClearlDlrT1;
        public TimeTotalVariableProfile ForwardWOSClearlDlrT2;
        public TimeTotalVariableProfile NoOfRacksT1;
        public TimeTotalVariableProfile InventoryTotalUnitsT4;
        public TimeTotalVariableProfile SalesAUCT1;
        public TimeTotalVariableProfile TotSalesAUCT1;
        public TimeTotalVariableProfile SalesCostT1;
        public TimeTotalVariableProfile SalesCostT2;
        public TimeTotalVariableProfile TotStrSalesCostDlrT1;
        public TimeTotalVariableProfile SalesMarginT1;
        public TimeTotalVariableProfile TotStrBinvAUCT1;
        public TimeTotalVariableProfile TotStrBinvAUCT2;
        public TimeTotalVariableProfile TotStrBinvAUCT3;
        public TimeTotalVariableProfile TotBinvCostDlrT1;
        public TimeTotalVariableProfile TotBinvCostDlrT2;
        public TimeTotalVariableProfile TotBinvCostDlrT3;
        public TimeTotalVariableProfile ReceiptAUCT1;
        public TimeTotalVariableProfile ReceiptAUCTotT1;
        public TimeTotalVariableProfile ReceiptMUPctT1;
        public TimeTotalVariableProfile InitialMUPctT1;
        public TimeTotalVariableProfile GrossMarginT1;
        public TimeTotalVariableProfile GrossMarginPctT1;
        public TimeTotalVariableProfile CummMUPctT1;
        public TimeTotalVariableProfile COGST1;
        public TimeTotalVariableProfile GMROIT1;
        public TimeTotalVariableProfile OTBCostDlrT1;
        public TimeTotalVariableProfile OTBUnitT1;
        public TimeTotalVariableProfile OnOrderDlrT1;
        public TimeTotalVariableProfile OnOrderAUCT1;
        public TimeTotalVariableProfile OnOrderAURT1;
        public TimeTotalVariableProfile OnOrderCostT1;
        public TimeTotalVariableProfile OnOrderIMUT1;
        public TimeTotalVariableProfile OnOrderUnitT1;
        public TimeTotalVariableProfile BINVMgnPctT1;
        public TimeTotalVariableProfile TotMDCostT1;
        public TimeTotalVariableProfile ShrinkCostT1;
        public TimeTotalVariableProfile ShrinkUnitsT1;
        public TimeTotalVariableProfile ShrinkUnitsTotT1;
        public TimeTotalVariableProfile AdjDollarsT1;
        public TimeTotalVariableProfile AdjCostT1;
        public TimeTotalVariableProfile TotEinvUnitsT1;
        public TimeTotalVariableProfile TotEinvUnitsT2;
        public TimeTotalVariableProfile TotEinvUnitsT3;
        public TimeTotalVariableProfile PermMDDlrT1;
        public TimeTotalVariableProfile PermMDCostT1;
        public TimeTotalVariableProfile PermMDDlrPctT1;
        public TimeTotalVariableProfile PosMDDlrT1;
        public TimeTotalVariableProfile PosMDCostT1;
        public TimeTotalVariableProfile PosMDDlrPctT1;
        public TimeTotalVariableProfile AdjDollarsPctT1;
        public TimeTotalVariableProfile AdjUntiPctTotT1;
        public TimeTotalVariableProfile MaintInvDlrT1;
        public TimeTotalVariableProfile MaintInvCostT1;
        public TimeTotalVariableProfile MMUPctT1;
        public TimeTotalVariableProfile PermMDDlrPctToMDT1;
        public TimeTotalVariableProfile OTBDlrCumT1;
        public TimeTotalVariableProfile OTBUnitCumT1;
        public TimeTotalVariableProfile SellThruUnitPctTotT1;
        public TimeTotalVariableProfile TotStrSalesAUCT1;
        public TimeTotalVariableProfile TotSalesAURT1;
        public TimeTotalVariableProfile TotSalesDlrT1;
        public TimeTotalVariableProfile TotSalesDlrT2;
        public TimeTotalVariableProfile TotSalesCostDlrT1;
        public TimeTotalVariableProfile TotSalesCostDlrT2;
        public TimeTotalVariableProfile TotSalesUnitT1;
        public TimeTotalVariableProfile TotSalesUnitT2;
        public TimeTotalVariableProfile GrossMarginPctStrT1;
        public TimeTotalVariableProfile GrossMarginTotStrT1;
        public TimeTotalVariableProfile CompSlsDlrT1;
        public TimeTotalVariableProfile NonCompSlsDlrT1;
        public TimeTotalVariableProfile NewStoresT1;
        public TimeTotalVariableProfile OpenStoresT1;
        public TimeTotalVariableProfile DTCRtnUnitT1;
        public TimeTotalVariableProfile DTCBODlrT1;
        public TimeTotalVariableProfile DTCBOCostDlrT1;
        public TimeTotalVariableProfile DTCBOPctT1;
        public TimeTotalVariableProfile DTCCancelUnitT1;
        public TimeTotalVariableProfile DTCCancelDlrT1;
        public TimeTotalVariableProfile DTCCancelPctT1;
        public TimeTotalVariableProfile DTCCancelCostDlrT1;
        public TimeTotalVariableProfile DTCGrossDmdUnitT1;
        public TimeTotalVariableProfile DTCGrossDmdDlrT1;
        public TimeTotalVariableProfile DTCGrossDmdAURT1;
        public TimeTotalVariableProfile DTCGrossDmdAUCT1;
        public TimeTotalVariableProfile DTCGrossDmdCostDlrT1;
        public TimeTotalVariableProfile DTCNetDmdUnitT1;
        public TimeTotalVariableProfile DTCNetDmdDlrT1;
        public TimeTotalVariableProfile DTCNetDmdCostDlrT1;
        public TimeTotalVariableProfile DTCNetDmdPctT1;
        public TimeTotalVariableProfile DTCNetDmdAURT1;
        public TimeTotalVariableProfile DTCNetDmdAUCT1;
        public TimeTotalVariableProfile DTCNetDmdGMDlrT1;
        public TimeTotalVariableProfile DTCNetDmdGMPctT1;
        public TimeTotalVariableProfile DTCRtnDlrT1;
        public TimeTotalVariableProfile DTCRtnCostDlrT1;
        public TimeTotalVariableProfile DTCRtnPctT1;
        public TimeTotalVariableProfile DTCAvgOrderT1;
        public TimeTotalVariableProfile DTCNoOfOrdersT1;
        public TimeTotalVariableProfile DTCVisitsT1;
        public TimeTotalVariableProfile DTCPlacementT1;
        public TimeTotalVariableProfile DTCSlsStkRatioT1;
        public TimeTotalVariableProfile DTCSellThruT1;
        public TimeTotalVariableProfile DTCSpaceT1;
        public TimeTotalVariableProfile DTCBOUnitT1;
        public TimeTotalVariableProfile TotStrSalesUnitPctTTLT1;
        public TimeTotalVariableProfile TotStrSalesCostDlrPctTTLT1;
        public TimeTotalVariableProfile TotDTCSalesUnitPctTTLT1;
        public TimeTotalVariableProfile TotDTCSalesCostDlrPctTTLT1;
        public TimeTotalVariableProfile AdjCostDlrTotT1;
        public TimeTotalVariableProfile ShrinkCostDlrTotT1;
        public TimeTotalVariableProfile TotEinvCostDlrT1;
        public TimeTotalVariableProfile TotEinvCostDlrT2;
        public TimeTotalVariableProfile TotEinvCostDlrT3;
        public TimeTotalVariableProfile DTCGrossDmdGMDlrT1;
        public TimeTotalVariableProfile DTCGrsDmdGMPctT1;
        public TimeTotalVariableProfile DiscountPctT1;
        public TimeTotalVariableProfile DiscountDlrT1;
        public TimeTotalVariableProfile AfterDiscountDlrT1;
        public TimeTotalVariableProfile AfterDiscountAURT1;
        public TimeTotalVariableProfile FreightCostPerUnitT1;
        public TimeTotalVariableProfile TotFreightCostDlrT1;
        public TimeTotalVariableProfile AfterDiscGMDlrT1;
        public TimeTotalVariableProfile VATPctT1;
        public TimeTotalVariableProfile VATDlrT1;
        public TimeTotalVariableProfile CurrXchgPctT1;
        public TimeTotalVariableProfile ConvertedSalesDlrT1;
        public TimeTotalVariableProfile SaleswithoutVATDlrT1;
        public TimeTotalVariableProfile TotEinvAUCT1;
        public TimeTotalVariableProfile TotEinvAUCT2;
        public TimeTotalVariableProfile TotEinvAUCT3;
        public TimeTotalVariableProfile Commit1UnitT1;
        public TimeTotalVariableProfile Commit1CostDlrT1;
        public TimeTotalVariableProfile Commit1AUCT1;
        public TimeTotalVariableProfile Commit2UnitT1;
        public TimeTotalVariableProfile Commit2CostDlrT1;
        public TimeTotalVariableProfile Commit2AUCT1;
        public TimeTotalVariableProfile Commit3UnitT1;
        public TimeTotalVariableProfile Commit3AUCT1;
        public TimeTotalVariableProfile Commit3CostDlrT1;
        public TimeTotalVariableProfile SquareSpaceT1;
        public TimeTotalVariableProfile LinearSpaceT1;
        public TimeTotalVariableProfile FloorSpaceT1;
        public TimeTotalVariableProfile DTCTransactionsT1;
        public TimeTotalVariableProfile SpaceConvPctT1;
        public TimeTotalVariableProfile SalesUperSqSpaceT1;
        public TimeTotalVariableProfile SalesUperLinearSpaceT1;
        public TimeTotalVariableProfile DensityUT1;
        public TimeTotalVariableProfile SalesperSpaceUT1;
        public TimeTotalVariableProfile TotStrSalesCDlrperSqSpaceT1;
        public TimeTotalVariableProfile TotStrSalesDlrperSqSpaceT1;
        public TimeTotalVariableProfile TotStrSalesCDlrperLinearSpaceT1;
        public TimeTotalVariableProfile TotStrSalesDlrperLinearSpaceT1;
        public TimeTotalVariableProfile DTCPlacedOrdersDlrT1;
        public TimeTotalVariableProfile DTCConvPctT1;
        public PlanTimeTotalVariables() : 
                base()
        {
            ForwardWOSTotalAllStoreIndexT1 = new TimeTotalVariableProfile(ForwardWOSTotalAllStoreIndexT1.Key, "Tot All FWOS # IDX", eVariableCategory.Store, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Dynamic, eVariableSpreadType.None, eVariableWeekType.EOW, eVariableTimeTotalType.First, eValueFormatType.GenericNumeric, 2);
            ForwardWOSMarkdownAllStoreIndexT1 = new TimeTotalVariableProfile(ForwardWOSMarkdownAllStoreIndexT1.Key, "Tot All FWOS MD # IDX", eVariableCategory.Store, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Dynamic, eVariableSpreadType.None, eVariableWeekType.EOW, eVariableTimeTotalType.First, eValueFormatType.GenericNumeric, 2);
            ForwardWOSRegPromoAllStoreIndexT1 = new TimeTotalVariableProfile(ForwardWOSRegPromoAllStoreIndexT1.Key, "Tot All FWOS R/P # IDX", eVariableCategory.Store, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Dynamic, eVariableSpreadType.None, eVariableWeekType.EOW, eVariableTimeTotalType.First, eValueFormatType.GenericNumeric, 2);
            SalesTotalAllStoreIndexT1 = new TimeTotalVariableProfile(SalesTotalAllStoreIndexT1.Key, "Tot All Sales # IDX", eVariableCategory.Store, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Dynamic, eVariableSpreadType.None, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 2);
            SalesMarkdownAllStoreIndexT1 = new TimeTotalVariableProfile(SalesMarkdownAllStoreIndexT1.Key, "Tot All Sales MD # IDX", eVariableCategory.Store, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Dynamic, eVariableSpreadType.None, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 2);
            SalesPromoAllStoreIndexT1 = new TimeTotalVariableProfile(SalesPromoAllStoreIndexT1.Key, "Tot All Sales Promo # IDX", eVariableCategory.Store, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Dynamic, eVariableSpreadType.None, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 2);
            SalesRegPromoAllStoreIndexT1 = new TimeTotalVariableProfile(SalesRegPromoAllStoreIndexT1.Key, "Tot All Sales R/P # IDX", eVariableCategory.Store, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Dynamic, eVariableSpreadType.None, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 2);
            SalesRegularAllStoreIndexT1 = new TimeTotalVariableProfile(SalesRegularAllStoreIndexT1.Key, "Tot All Sales Reg # IDX", eVariableCategory.Store, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Dynamic, eVariableSpreadType.None, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 2);
            SellThruPctTotalAllStoreIndexT1 = new TimeTotalVariableProfile(SellThruPctTotalAllStoreIndexT1.Key, "Tot All Sell Thru % # IDX", eVariableCategory.Store, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Dynamic, eVariableSpreadType.None, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 2);
            SellThruPctMarkdownAllStoreIndexT1 = new TimeTotalVariableProfile(SellThruPctMarkdownAllStoreIndexT1.Key, "Tot All Sell Thru % MD # IDX", eVariableCategory.Store, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Dynamic, eVariableSpreadType.None, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 2);
            SellThruPctRegPromoAllStoreIndexT1 = new TimeTotalVariableProfile(SellThruPctRegPromoAllStoreIndexT1.Key, "Tot All Sell Thru % R/P # IDX", eVariableCategory.Store, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Dynamic, eVariableSpreadType.None, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 2);
            InventoryTotalAllStoreIndexT2 = new TimeTotalVariableProfile(InventoryTotalAllStoreIndexT2.Key, "Avg All Str BINV # IDX", eVariableCategory.Store, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Dynamic, eVariableSpreadType.None, eVariableWeekType.BOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 2);
            InventoryTotalAllStoreIndexT1 = new TimeTotalVariableProfile(InventoryTotalAllStoreIndexT1.Key, "Beg All Str BINV # IDX", eVariableCategory.Store, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Dynamic, eVariableSpreadType.None, eVariableWeekType.BOW, eVariableTimeTotalType.First, eValueFormatType.GenericNumeric, 2);
            InventoryTotalAllStoreIndexT3 = new TimeTotalVariableProfile(InventoryTotalAllStoreIndexT3.Key, "End All Str EINV # IDX", eVariableCategory.Store, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Dynamic, eVariableSpreadType.None, eVariableWeekType.BOW, eVariableTimeTotalType.Next, eValueFormatType.GenericNumeric, 2);
            InventoryMarkdownAllStoreIndexT2 = new TimeTotalVariableProfile(InventoryMarkdownAllStoreIndexT2.Key, "Avg All Str BINV MD # IDX", eVariableCategory.Store, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Dynamic, eVariableSpreadType.None, eVariableWeekType.BOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 2);
            InventoryMarkdownAllStoreIndexT1 = new TimeTotalVariableProfile(InventoryMarkdownAllStoreIndexT1.Key, "Beg All Str BINV MD # IDX", eVariableCategory.Store, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Dynamic, eVariableSpreadType.None, eVariableWeekType.BOW, eVariableTimeTotalType.First, eValueFormatType.GenericNumeric, 2);
            InventoryMarkdownAllStoreIndexT3 = new TimeTotalVariableProfile(InventoryMarkdownAllStoreIndexT3.Key, "End All Str EINV MD # IDX", eVariableCategory.Store, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Dynamic, eVariableSpreadType.None, eVariableWeekType.BOW, eVariableTimeTotalType.Next, eValueFormatType.GenericNumeric, 2);
            InventoryRegularAllStoreIndexT2 = new TimeTotalVariableProfile(InventoryRegularAllStoreIndexT2.Key, "Avg All Str BINV Reg # IDX", eVariableCategory.Store, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Dynamic, eVariableSpreadType.None, eVariableWeekType.BOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 2);
            InventoryRegularAllStoreIndexT1 = new TimeTotalVariableProfile(InventoryRegularAllStoreIndexT1.Key, "Beg All Str BINV Reg # IDX", eVariableCategory.Store, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Dynamic, eVariableSpreadType.None, eVariableWeekType.BOW, eVariableTimeTotalType.First, eValueFormatType.GenericNumeric, 2);
            InventoryRegularAllStoreIndexT3 = new TimeTotalVariableProfile(InventoryRegularAllStoreIndexT3.Key, "End All Str EINV Reg # IDX", eVariableCategory.Store, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Dynamic, eVariableSpreadType.None, eVariableWeekType.BOW, eVariableTimeTotalType.Next, eValueFormatType.GenericNumeric, 2);
            WOSTotalT1 = new TimeTotalVariableProfile(WOSTotalT1.Key, "Tot Fcst WOS #", eVariableCategory.Chain, eVariableStyle.Percentage, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.Plug, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 2);
            WOSRegPromoT1 = new TimeTotalVariableProfile(WOSRegPromoT1.Key, "Tot Fcst WOS R/P #", eVariableCategory.Chain, eVariableStyle.Percentage, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.Plug, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 2);
            ForwardWOSTotalT1 = new TimeTotalVariableProfile(ForwardWOSTotalT1.Key, "Str Tot FWOS Turn #", eVariableCategory.Both, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.None, eVariableWeekType.EOW, eVariableTimeTotalType.First, eValueFormatType.GenericNumeric, 2);
            ForwardWOSMarkdownT1 = new TimeTotalVariableProfile(ForwardWOSMarkdownT1.Key, "Str Clear # FWOS", eVariableCategory.Both, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.None, eVariableWeekType.EOW, eVariableTimeTotalType.First, eValueFormatType.GenericNumeric, 2);
            ForwardWOSRegPromoT1 = new TimeTotalVariableProfile(ForwardWOSRegPromoT1.Key, "Str Reg # FWOS", eVariableCategory.Both, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.None, eVariableWeekType.EOW, eVariableTimeTotalType.First, eValueFormatType.GenericNumeric, 2);
            ReceiptTotalUnitsT1 = new TimeTotalVariableProfile(ReceiptTotalUnitsT1.Key, "TTL Receipts #", eVariableCategory.Both, eVariableStyle.Units, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.None, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 0);
            ReceiptMarkdownUnitsT1 = new TimeTotalVariableProfile(ReceiptMarkdownUnitsT1.Key, "TTL Receipts MD #", eVariableCategory.Both, eVariableStyle.Units, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.None, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 0);
            ReceiptRegularUnitsT1 = new TimeTotalVariableProfile(ReceiptRegularUnitsT1.Key, "TTL Receipts Reg #", eVariableCategory.Both, eVariableStyle.Units, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.None, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 0);
            SalesStockRatioTotalT1 = new TimeTotalVariableProfile(SalesStockRatioTotalT1.Key, "Tot S/S Ratio #", eVariableCategory.Both, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.None, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 2);
            SalesStockRatioMarkdownT1 = new TimeTotalVariableProfile(SalesStockRatioMarkdownT1.Key, "Tot S/S Ratio MD #", eVariableCategory.Both, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.None, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 2);
            SalesStockRatioRegPromoT1 = new TimeTotalVariableProfile(SalesStockRatioRegPromoT1.Key, "Tot S/S Ratio R/P #", eVariableCategory.Both, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.None, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 2);
            SalesTotalUnitsT2 = new TimeTotalVariableProfile(SalesTotalUnitsT2.Key, "Avg Tot Sales #", eVariableCategory.Both, eVariableStyle.Units, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 2);
            SalesTotalUnitsT1 = new TimeTotalVariableProfile(SalesTotalUnitsT1.Key, "TTL Tot Sales #", eVariableCategory.Both, eVariableStyle.Units, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 0);
            SalesTotalUnitsT3 = new TimeTotalVariableProfile(SalesTotalUnitsT3.Key, "WTD Tot Sales #", eVariableCategory.Store, eVariableStyle.Units, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.None, eVariableWeekType.EOW, eVariableTimeTotalType.None, eValueFormatType.GenericNumeric, 0);
            SalesMarkdownUnitsT2 = new TimeTotalVariableProfile(SalesMarkdownUnitsT2.Key, "Avg Str Clear Sales #", eVariableCategory.Both, eVariableStyle.Units, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.None, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 2);
            SalesMarkdownUnitsT1 = new TimeTotalVariableProfile(SalesMarkdownUnitsT1.Key, "TTL Str Clear Sales #", eVariableCategory.Both, eVariableStyle.Units, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.None, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 0);
            SalesMarkdownUnitsT3 = new TimeTotalVariableProfile(SalesMarkdownUnitsT3.Key, "WTD Str Clear Sales #", eVariableCategory.Store, eVariableStyle.Units, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.None, eVariableWeekType.EOW, eVariableTimeTotalType.None, eValueFormatType.GenericNumeric, 0);
            SalesPromoUnitsT1 = new TimeTotalVariableProfile(SalesPromoUnitsT1.Key, "TTL Str Promo Sales #", eVariableCategory.Both, eVariableStyle.Units, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 0);
            SalesPromoUnitsT2 = new TimeTotalVariableProfile(SalesPromoUnitsT2.Key, "WTD Str Promo Sales #", eVariableCategory.Store, eVariableStyle.Units, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.None, eVariableWeekType.EOW, eVariableTimeTotalType.None, eValueFormatType.GenericNumeric, 0);
            SalesRegPromoUnitsT2 = new TimeTotalVariableProfile(SalesRegPromoUnitsT2.Key, "Avg Str R/P Sales #", eVariableCategory.Both, eVariableStyle.Units, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.None, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 2);
            SalesRegPromoUnitsT1 = new TimeTotalVariableProfile(SalesRegPromoUnitsT1.Key, "TTL Str R/P Sales #", eVariableCategory.Both, eVariableStyle.Units, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.None, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 0);
            SalesRegPromoUnitsT3 = new TimeTotalVariableProfile(SalesRegPromoUnitsT3.Key, "WTD Str R/P Sales #", eVariableCategory.Store, eVariableStyle.Units, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.None, eVariableWeekType.EOW, eVariableTimeTotalType.None, eValueFormatType.GenericNumeric, 0);
            SalesRegularUnitsT1 = new TimeTotalVariableProfile(SalesRegularUnitsT1.Key, "TTL Str Reg Sales #", eVariableCategory.Both, eVariableStyle.Units, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 0);
            SalesRegularUnitsT2 = new TimeTotalVariableProfile(SalesRegularUnitsT2.Key, "WTD Str Reg Sales #", eVariableCategory.Store, eVariableStyle.Units, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.None, eVariableWeekType.EOW, eVariableTimeTotalType.None, eValueFormatType.GenericNumeric, 0);
            SellThruPctTotalT1 = new TimeTotalVariableProfile(SellThruPctTotalT1.Key, "Tot Sell Thru % #", eVariableCategory.Both, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.None, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 2);
            SellThruPctMarkdownT1 = new TimeTotalVariableProfile(SellThruPctMarkdownT1.Key, "Tot Sell Thru % MD #", eVariableCategory.Both, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.None, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 2);
            SellThruPctRegPromoT1 = new TimeTotalVariableProfile(SellThruPctRegPromoT1.Key, "Tot Sell Thru % R/P #", eVariableCategory.Both, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.None, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 2);
            ForwardWOSTotalSetIndexT1 = new TimeTotalVariableProfile(ForwardWOSTotalSetIndexT1.Key, "Tot Set FWOS # IDX", eVariableCategory.Store, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Dynamic, eVariableSpreadType.None, eVariableWeekType.EOW, eVariableTimeTotalType.First, eValueFormatType.GenericNumeric, 2);
            ForwardWOSMarkdownSetIndexT1 = new TimeTotalVariableProfile(ForwardWOSMarkdownSetIndexT1.Key, "Tot Set FWOS MD # IDX", eVariableCategory.Store, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Dynamic, eVariableSpreadType.None, eVariableWeekType.EOW, eVariableTimeTotalType.First, eValueFormatType.GenericNumeric, 2);
            ForwardWOSRegPromoSetIndexT1 = new TimeTotalVariableProfile(ForwardWOSRegPromoSetIndexT1.Key, "Tot Set FWOS R/P # IDX", eVariableCategory.Store, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Dynamic, eVariableSpreadType.None, eVariableWeekType.EOW, eVariableTimeTotalType.First, eValueFormatType.GenericNumeric, 2);
            SalesTotalSetIndexT1 = new TimeTotalVariableProfile(SalesTotalSetIndexT1.Key, "Tot Set Sales # IDX", eVariableCategory.Store, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Dynamic, eVariableSpreadType.None, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 2);
            SalesMarkdownSetIndexT1 = new TimeTotalVariableProfile(SalesMarkdownSetIndexT1.Key, "Tot Set Sales MD # IDX", eVariableCategory.Store, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Dynamic, eVariableSpreadType.None, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 2);
            SalesPromoSetIndexT1 = new TimeTotalVariableProfile(SalesPromoSetIndexT1.Key, "Tot Set Sales Promo # IDX", eVariableCategory.Store, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Dynamic, eVariableSpreadType.None, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 2);
            SalesRegPromoSetIndexT1 = new TimeTotalVariableProfile(SalesRegPromoSetIndexT1.Key, "Tot Set Sales R/P # IDX", eVariableCategory.Store, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Dynamic, eVariableSpreadType.None, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 2);
            SalesRegularSetIndexT1 = new TimeTotalVariableProfile(SalesRegularSetIndexT1.Key, "Tot Set Sales Reg # IDX", eVariableCategory.Store, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Dynamic, eVariableSpreadType.None, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 2);
            SellThruPctTotalSetIndexT1 = new TimeTotalVariableProfile(SellThruPctTotalSetIndexT1.Key, "Tot Set Sell Thru % # IDX", eVariableCategory.Store, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Dynamic, eVariableSpreadType.None, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 2);
            SellThruPctMarkdownSetIndexT1 = new TimeTotalVariableProfile(SellThruPctMarkdownSetIndexT1.Key, "Tot Set Sell Thru % MD # IDX", eVariableCategory.Store, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Dynamic, eVariableSpreadType.None, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 2);
            SellThruPctRegPromoSetIndexT1 = new TimeTotalVariableProfile(SellThruPctRegPromoSetIndexT1.Key, "Tot Set Sell Thru % R/P # IDX", eVariableCategory.Store, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Dynamic, eVariableSpreadType.None, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 2);
            InventoryTotalSetIndexT2 = new TimeTotalVariableProfile(InventoryTotalSetIndexT2.Key, "Avg Set Str BINV # IDX", eVariableCategory.Store, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Dynamic, eVariableSpreadType.None, eVariableWeekType.BOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 2);
            InventoryTotalSetIndexT1 = new TimeTotalVariableProfile(InventoryTotalSetIndexT1.Key, "Beg Set Str BINV # IDX", eVariableCategory.Store, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Dynamic, eVariableSpreadType.None, eVariableWeekType.BOW, eVariableTimeTotalType.First, eValueFormatType.GenericNumeric, 2);
            InventoryTotalSetIndexT3 = new TimeTotalVariableProfile(InventoryTotalSetIndexT3.Key, "End Set Str EINV # IDX", eVariableCategory.Store, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Dynamic, eVariableSpreadType.None, eVariableWeekType.BOW, eVariableTimeTotalType.Next, eValueFormatType.GenericNumeric, 2);
            InventoryMarkdownSetIndexT2 = new TimeTotalVariableProfile(InventoryMarkdownSetIndexT2.Key, "Avg Set Str BINV MD # IDX", eVariableCategory.Store, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Dynamic, eVariableSpreadType.None, eVariableWeekType.BOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 2);
            InventoryMarkdownSetIndexT1 = new TimeTotalVariableProfile(InventoryMarkdownSetIndexT1.Key, "Beg Set Str BINV MD # IDX", eVariableCategory.Store, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Dynamic, eVariableSpreadType.None, eVariableWeekType.BOW, eVariableTimeTotalType.First, eValueFormatType.GenericNumeric, 2);
            InventoryMarkdownSetIndexT3 = new TimeTotalVariableProfile(InventoryMarkdownSetIndexT3.Key, "End Set Str EINV MD # IDX", eVariableCategory.Store, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Dynamic, eVariableSpreadType.None, eVariableWeekType.BOW, eVariableTimeTotalType.Next, eValueFormatType.GenericNumeric, 2);
            InventoryRegularSetIndexT2 = new TimeTotalVariableProfile(InventoryRegularSetIndexT2.Key, "Avg Set Str BINV Reg # IDX", eVariableCategory.Store, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Dynamic, eVariableSpreadType.None, eVariableWeekType.BOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 2);
            InventoryRegularSetIndexT1 = new TimeTotalVariableProfile(InventoryRegularSetIndexT1.Key, "Beg Set Str BINV Reg # IDX", eVariableCategory.Store, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Dynamic, eVariableSpreadType.None, eVariableWeekType.BOW, eVariableTimeTotalType.First, eValueFormatType.GenericNumeric, 2);
            InventoryRegularSetIndexT3 = new TimeTotalVariableProfile(InventoryRegularSetIndexT3.Key, "End Set Str EINV Reg # IDX", eVariableCategory.Store, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Dynamic, eVariableSpreadType.None, eVariableWeekType.BOW, eVariableTimeTotalType.Next, eValueFormatType.GenericNumeric, 2);
            InventoryTotalUnitsT2 = new TimeTotalVariableProfile(InventoryTotalUnitsT2.Key, "Avg Tot BINV #", eVariableCategory.Both, eVariableStyle.Units, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.None, eVariableWeekType.BOW, eVariableTimeTotalType.AllPlusNext, eValueFormatType.GenericNumeric, 2);
            InventoryTotalUnitsT1 = new TimeTotalVariableProfile(InventoryTotalUnitsT1.Key, "Beg Tot BINV #", eVariableCategory.Both, eVariableStyle.Units, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.BOW, eVariableTimeTotalType.First, eValueFormatType.GenericNumeric, 0);
            InventoryTotalUnitsT3 = new TimeTotalVariableProfile(InventoryTotalUnitsT3.Key, "Next Tot BINV #", eVariableCategory.Both, eVariableStyle.Units, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.None, eVariableWeekType.BOW, eVariableTimeTotalType.Next, eValueFormatType.GenericNumeric, 0);
            InventoryMarkdownUnitsT2 = new TimeTotalVariableProfile(InventoryMarkdownUnitsT2.Key, "Avg Str Clear BINV #", eVariableCategory.Both, eVariableStyle.Units, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.None, eVariableWeekType.BOW, eVariableTimeTotalType.AllPlusNext, eValueFormatType.GenericNumeric, 2);
            InventoryMarkdownUnitsT1 = new TimeTotalVariableProfile(InventoryMarkdownUnitsT1.Key, "Beg Str Clear BINV #", eVariableCategory.Both, eVariableStyle.Units, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.None, eVariableWeekType.BOW, eVariableTimeTotalType.First, eValueFormatType.GenericNumeric, 0);
            InventoryMarkdownUnitsT3 = new TimeTotalVariableProfile(InventoryMarkdownUnitsT3.Key, "Next Str Clear BINV #", eVariableCategory.Both, eVariableStyle.Units, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.None, eVariableWeekType.BOW, eVariableTimeTotalType.Next, eValueFormatType.GenericNumeric, 0);
            InventoryRegularUnitsT2 = new TimeTotalVariableProfile(InventoryRegularUnitsT2.Key, "Avg Str Reg BINV #", eVariableCategory.Both, eVariableStyle.Units, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.None, eVariableWeekType.BOW, eVariableTimeTotalType.AllPlusNext, eValueFormatType.GenericNumeric, 2);
            InventoryRegularUnitsT1 = new TimeTotalVariableProfile(InventoryRegularUnitsT1.Key, "Beg Str Reg BINV #", eVariableCategory.Both, eVariableStyle.Units, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.BOW, eVariableTimeTotalType.First, eValueFormatType.GenericNumeric, 0);
            InventoryRegularUnitsT3 = new TimeTotalVariableProfile(InventoryRegularUnitsT3.Key, "Next Str Reg BINV #", eVariableCategory.Both, eVariableStyle.Units, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.None, eVariableWeekType.BOW, eVariableTimeTotalType.Next, eValueFormatType.GenericNumeric, 0);
            TotStrBinvDlrT1 = new TimeTotalVariableProfile(NextSequence, "Beg BINV Rtl", eVariableCategory.Both, eVariableStyle.Dollar, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.BOW, eVariableTimeTotalType.First, eValueFormatType.GenericNumeric, 0);
            TotStrBinvDlrT2 = new TimeTotalVariableProfile(NextSequence, "Avg BINV Rtl", eVariableCategory.Both, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.BOW, eVariableTimeTotalType.AllPlusNext, eValueFormatType.GenericNumeric, 1);
            TotStrBinvDlrT3 = new TimeTotalVariableProfile(NextSequence, "End EINV Rtl", eVariableCategory.Both, eVariableStyle.Dollar, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.BOW, eVariableTimeTotalType.Next, eValueFormatType.GenericNumeric, 0);
            TotStrBinvDlrT4 = new TimeTotalVariableProfile(NextSequence, "Stk Turn Rtl", eVariableCategory.Both, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.BOW, eVariableTimeTotalType.AllPlusNext, eValueFormatType.GenericNumeric, 1);
            TotBinvAUCT1 = new TimeTotalVariableProfile(NextSequence, "Beg Tot BINV AUC", eVariableCategory.Both, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.BOW, eVariableTimeTotalType.First, eValueFormatType.GenericNumeric, 2);
            TotBinvAUCT2 = new TimeTotalVariableProfile(NextSequence, "Avg Tot BINV AUC", eVariableCategory.Both, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.BOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 2);
            TotBinvAUCT3 = new TimeTotalVariableProfile(NextSequence, "Next Tot BINV AUC", eVariableCategory.Both, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.BOW, eVariableTimeTotalType.Next, eValueFormatType.GenericNumeric, 2);
            RegStrBinvAURT1 = new TimeTotalVariableProfile(NextSequence, "Beg BINV Reg AUR", eVariableCategory.Both, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.BOW, eVariableTimeTotalType.First, eValueFormatType.GenericNumeric, 2);
            RegStrBinvAURT2 = new TimeTotalVariableProfile(NextSequence, "Avg BINV Reg AUR", eVariableCategory.Both, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.BOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 2);
            RegStrBinvAURT3 = new TimeTotalVariableProfile(NextSequence, "End EINV Reg AUR", eVariableCategory.Both, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.BOW, eVariableTimeTotalType.Next, eValueFormatType.GenericNumeric, 2);
            RegStrBinvDlrT1 = new TimeTotalVariableProfile(NextSequence, "Beg BINV Reg $", eVariableCategory.Both, eVariableStyle.Units, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.BOW, eVariableTimeTotalType.First, eValueFormatType.GenericNumeric, 0);
            RegStrBinvDlrT2 = new TimeTotalVariableProfile(NextSequence, "Avg BINV Reg $", eVariableCategory.Both, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.BOW, eVariableTimeTotalType.AllPlusNext, eValueFormatType.GenericNumeric, 1);
            RegStrBinvDlrT3 = new TimeTotalVariableProfile(NextSequence, "End EINV Reg $", eVariableCategory.Both, eVariableStyle.Units, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.BOW, eVariableTimeTotalType.Next, eValueFormatType.GenericNumeric, 0);
            RegStrBinvDlrT4 = new TimeTotalVariableProfile(NextSequence, "Reg Str OTS $", eVariableCategory.Both, eVariableStyle.Dollar, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.BOW, eVariableTimeTotalType.FirstAndLast, eValueFormatType.GenericNumeric, 0);
            ClearStrBinvAURT1 = new TimeTotalVariableProfile(NextSequence, "Beg BINV MD AUR", eVariableCategory.Both, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.BOW, eVariableTimeTotalType.First, eValueFormatType.GenericNumeric, 2);
            ClearStrBinvAURT2 = new TimeTotalVariableProfile(NextSequence, "Avg BINV MD AUR", eVariableCategory.Both, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.BOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 2);
            ClearStrBinvAURT3 = new TimeTotalVariableProfile(NextSequence, "End EINV MD AUR", eVariableCategory.Both, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.BOW, eVariableTimeTotalType.Next, eValueFormatType.GenericNumeric, 2);
            ClearStrBinvDlrT1 = new TimeTotalVariableProfile(NextSequence, "Beg BINV MD $", eVariableCategory.Both, eVariableStyle.Dollar, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.BOW, eVariableTimeTotalType.First, eValueFormatType.GenericNumeric, 0);
            ClearStrBinvDlrT2 = new TimeTotalVariableProfile(NextSequence, "Avg BINV MD $", eVariableCategory.Both, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.BOW, eVariableTimeTotalType.AllPlusNext, eValueFormatType.GenericNumeric, 1);
            ClearStrBinvDlrT3 = new TimeTotalVariableProfile(NextSequence, "End EINV MD $", eVariableCategory.Both, eVariableStyle.Dollar, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eVariableTimeTotalType.Next, eValueFormatType.GenericNumeric, 0);
            RegStrBinvPctTtlDlrT1 = new TimeTotalVariableProfile(NextSequence, "Beg BINV Reg $ % TTL", eVariableCategory.Both, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eVariableTimeTotalType.First, eValueFormatType.GenericNumeric, 2);
            RegStrBinvPctTtlDlrT2 = new TimeTotalVariableProfile(NextSequence, "Avg BINV Reg $ % TTL", eVariableCategory.Both, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.BOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 2);
            RegStrBinvPctTtlDlrT3 = new TimeTotalVariableProfile(NextSequence, "End EINV Reg $ % TTL", eVariableCategory.Both, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.BOW, eVariableTimeTotalType.Next, eValueFormatType.GenericNumeric, 2);
            RegStrBinvPctTtlUnitsT1 = new TimeTotalVariableProfile(NextSequence, "Beg BINV Reg U % TTL", eVariableCategory.Both, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eVariableTimeTotalType.First, eValueFormatType.GenericNumeric, 2);
            RegStrBinvPctTtlUnitsT2 = new TimeTotalVariableProfile(NextSequence, "Avg BINV Reg U % TTL", eVariableCategory.Both, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.BOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 2);
            RegStrBinvPctTtlUnitsT3 = new TimeTotalVariableProfile(NextSequence, "End EINV Reg U % TTL", eVariableCategory.Both, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.BOW, eVariableTimeTotalType.Next, eValueFormatType.GenericNumeric, 2);
            ClearStrBinvPctTtlDlrT1 = new TimeTotalVariableProfile(NextSequence, "Beg BINV MD $ % TTL", eVariableCategory.Both, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eVariableTimeTotalType.First, eValueFormatType.GenericNumeric, 2);
            ClearStrBinvPctTtlDlrT2 = new TimeTotalVariableProfile(NextSequence, "Avg BINV MD $ % TTL", eVariableCategory.Both, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.BOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 2);
            ClearStrBinvPctTtlDlrT3 = new TimeTotalVariableProfile(NextSequence, "End EINV MD $ % TTL", eVariableCategory.Both, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.BOW, eVariableTimeTotalType.Next, eValueFormatType.GenericNumeric, 2);
            ClearStrBinvPctTtlUnitsT1 = new TimeTotalVariableProfile(NextSequence, "Beg BINV MD U % TTL", eVariableCategory.Both, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eVariableTimeTotalType.First, eValueFormatType.GenericNumeric, 2);
            ClearStrBinvPctTtlUnitsT2 = new TimeTotalVariableProfile(NextSequence, "Avg BINV MD U % TTL", eVariableCategory.Both, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.BOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 2);
            ClearStrBinvPctTtlUnitsT3 = new TimeTotalVariableProfile(NextSequence, "End EINV MD U % TTL", eVariableCategory.Both, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.BOW, eVariableTimeTotalType.Next, eValueFormatType.GenericNumeric, 2);
            SalesDlrT1 = new TimeTotalVariableProfile(NextSequence, "TTL Tot Str Sales $", eVariableCategory.Both, eVariableStyle.Dollar, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 0);
            SalesDlrT2 = new TimeTotalVariableProfile(NextSequence, "Avg Tot Str Sales $", eVariableCategory.Both, eVariableStyle.Dollar, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 0);
            SalesAURT1 = new TimeTotalVariableProfile(NextSequence, "TTL Sls AUR", eVariableCategory.Both, eVariableStyle.Percentage, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 2);
            SalesAURT2 = new TimeTotalVariableProfile(NextSequence, "Avg Sls AUR", eVariableCategory.Both, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 2);
            SalesRegDlrT1 = new TimeTotalVariableProfile(NextSequence, "TTL Sales Reg $", eVariableCategory.Both, eVariableStyle.Dollar, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 0);
            SalesRegDlrT2 = new TimeTotalVariableProfile(NextSequence, "Avg Sales Reg $", eVariableCategory.Both, eVariableStyle.Dollar, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 0);
            SalesRegAURT1 = new TimeTotalVariableProfile(NextSequence, "TTL Sales Reg AUR", eVariableCategory.Both, eVariableStyle.Percentage, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 2);
            TotStrSalesAURT1 = new TimeTotalVariableProfile(NextSequence, "TTL Tot Str Sales AUR", eVariableCategory.Chain, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 2);
            SalesClearDlrT1 = new TimeTotalVariableProfile(NextSequence, "TTL Sales MD $", eVariableCategory.Both, eVariableStyle.Dollar, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 0);
            SalesClearDlrT2 = new TimeTotalVariableProfile(NextSequence, "Avg Sales MD $", eVariableCategory.Both, eVariableStyle.Dollar, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 0);
            SalesClearAURT1 = new TimeTotalVariableProfile(NextSequence, "TTL Sales MD AUR", eVariableCategory.Both, eVariableStyle.Percentage, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 2);
            SalesRegPctTtlDlrT1 = new TimeTotalVariableProfile(NextSequence, "TTL Sales Reg $ % TTL", eVariableCategory.Both, eVariableStyle.Percentage, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 1);
            SalesRegPctTtlUnitsT1 = new TimeTotalVariableProfile(NextSequence, "TTL Sales Reg U % TTL", eVariableCategory.Both, eVariableStyle.Percentage, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 1);
            SalesClearPctTtlDlrT1 = new TimeTotalVariableProfile(NextSequence, "TTL Sales MD $ % TTL", eVariableCategory.Both, eVariableStyle.Percentage, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 1);
            SalesClearPctTtlUnitsT1 = new TimeTotalVariableProfile(NextSequence, "TTL Sales MD U % TTL", eVariableCategory.Both, eVariableStyle.Percentage, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 1);
            CompPctTtlT1 = new TimeTotalVariableProfile(NextSequence, "TTL % Comp Tot", eVariableCategory.Chain, eVariableStyle.Percentage, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 2);
            NonCompPctTtlT1 = new TimeTotalVariableProfile(NextSequence, "TTL % Non Comp Tot", eVariableCategory.Chain, eVariableStyle.Percentage, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 2);
            ReceiptUnitT1 = new TimeTotalVariableProfile(NextSequence, "TTL Tot Rec #", eVariableCategory.Both, eVariableStyle.Dollar, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 0);
            ReceiptAURT1 = new TimeTotalVariableProfile(NextSequence, "TTL Rec AUR", eVariableCategory.Chain, eVariableStyle.Percentage, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 2);
            ReceiptCostT1 = new TimeTotalVariableProfile(NextSequence, "TTL Tot Rec C$", eVariableCategory.Both, eVariableStyle.Dollar, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 0);
            TotMDDlrT1 = new TimeTotalVariableProfile(NextSequence, "TTL Tot MD Rtl", eVariableCategory.Both, eVariableStyle.Dollar, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 0);
            TotMDPctT1 = new TimeTotalVariableProfile(NextSequence, "TTL Tot MD Rtl Pct", eVariableCategory.Both, eVariableStyle.Percentage, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 1);
            AdjUnitsT1 = new TimeTotalVariableProfile(NextSequence, "TTL Tot Adj #", eVariableCategory.Chain, eVariableStyle.Units, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.None, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 0);
            ShrinkDlrT1 = new TimeTotalVariableProfile(NextSequence, "TTL Shr Rtl", eVariableCategory.Chain, eVariableStyle.Dollar, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 0);
            ShrinkPctT1 = new TimeTotalVariableProfile(NextSequence, "TTL Tot Shr %", eVariableCategory.Chain, eVariableStyle.Percentage, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 1);
            ShrinkPctTotT1 = new TimeTotalVariableProfile(NextSequence, "TTL Tot Shrink C$ %", eVariableCategory.Chain, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 2);
            FWOSTotDlrT1 = new TimeTotalVariableProfile(NextSequence, "Turn Rtl", eVariableCategory.Chain, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.None, eVariableWeekType.EOW, eVariableTimeTotalType.First, eValueFormatType.GenericNumeric, 1);
            FWOSTotDlrT2 = new TimeTotalVariableProfile(NextSequence, "Turn Rtl", eVariableCategory.Chain, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.None, eVariableWeekType.EOW, eVariableTimeTotalType.None, eValueFormatType.GenericNumeric, 2);
            ForwardWOSTotalT2 = new TimeTotalVariableProfile(NextSequence, "Tot U FWOS Turn", eVariableCategory.Chain, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.None, eVariableWeekType.EOW, eVariableTimeTotalType.None, eValueFormatType.GenericNumeric, 2);
            ForwardWOSReglDlrT1 = new TimeTotalVariableProfile(NextSequence, "Reg $ FWOS ", eVariableCategory.Both, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eVariableTimeTotalType.First, eValueFormatType.GenericNumeric, 1);
            ForwardWOSReglDlrT2 = new TimeTotalVariableProfile(NextSequence, "Reg $ FWOS Turn", eVariableCategory.Both, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eVariableTimeTotalType.None, eValueFormatType.GenericNumeric, 2);
            ForwardWOSClearlDlrT1 = new TimeTotalVariableProfile(NextSequence, "MD $ FWOS ", eVariableCategory.Both, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eVariableTimeTotalType.First, eValueFormatType.GenericNumeric, 1);
            ForwardWOSClearlDlrT2 = new TimeTotalVariableProfile(NextSequence, "MD $ FWOS Turn", eVariableCategory.Both, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eVariableTimeTotalType.None, eValueFormatType.GenericNumeric, 2);
            NoOfRacksT1 = new TimeTotalVariableProfile(NextSequence, "Avg # of Racks", eVariableCategory.Both, eVariableStyle.Units, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 2);
            InventoryTotalUnitsT4 = new TimeTotalVariableProfile(NextSequence, "Tot BINV Turn #", eVariableCategory.Both, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.None, eVariableWeekType.BOW, eVariableTimeTotalType.AllPlusNext, eValueFormatType.GenericNumeric, 2);
            SalesAUCT1 = new TimeTotalVariableProfile(NextSequence, "TTL Sales Tot AUC", eVariableCategory.Both, eVariableStyle.Percentage, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 2);
            TotSalesAUCT1 = new TimeTotalVariableProfile(NextSequence, "TTL Tot Sales AUC", eVariableCategory.Chain, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 2);
            SalesCostT1 = new TimeTotalVariableProfile(NextSequence, "TTL Tot Str Sales C$", eVariableCategory.Both, eVariableStyle.Dollar, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 0);
            SalesCostT2 = new TimeTotalVariableProfile(NextSequence, "Avg Tot Str Sales C$", eVariableCategory.Both, eVariableStyle.Dollar, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 0);
            TotStrSalesCostDlrT1 = new TimeTotalVariableProfile(NextSequence, "TTL Tot Str Sales C$", eVariableCategory.Chain, eVariableStyle.Dollar, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 0);
            SalesMarginT1 = new TimeTotalVariableProfile(NextSequence, "TTL Sales Margin", eVariableCategory.Both, eVariableStyle.Dollar, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 0);
            TotStrBinvAUCT1 = new TimeTotalVariableProfile(NextSequence, "Beg BINV Tot AUC", eVariableCategory.Both, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.BOW, eVariableTimeTotalType.First, eValueFormatType.GenericNumeric, 2);
            TotStrBinvAUCT2 = new TimeTotalVariableProfile(NextSequence, "Avg BINV Tot AUC", eVariableCategory.Both, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.BOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 2);
            TotStrBinvAUCT3 = new TimeTotalVariableProfile(NextSequence, "End EINV Tot AUC", eVariableCategory.Both, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.BOW, eVariableTimeTotalType.Next, eValueFormatType.GenericNumeric, 2);
            TotBinvCostDlrT1 = new TimeTotalVariableProfile(NextSequence, "Beg Tot BINV C$", eVariableCategory.Both, eVariableStyle.Dollar, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.BOW, eVariableTimeTotalType.First, eValueFormatType.GenericNumeric, 0);
            TotBinvCostDlrT2 = new TimeTotalVariableProfile(NextSequence, "Avg Tot BINV C$", eVariableCategory.Both, eVariableStyle.Dollar, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.BOW, eVariableTimeTotalType.AllPlusNext, eValueFormatType.GenericNumeric, 0);
            TotBinvCostDlrT3 = new TimeTotalVariableProfile(NextSequence, "Next Tot BINV C$", eVariableCategory.Both, eVariableStyle.Dollar, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.BOW, eVariableTimeTotalType.Next, eValueFormatType.GenericNumeric, 0);
            ReceiptAUCT1 = new TimeTotalVariableProfile(NextSequence, "TTL Rec AUC", eVariableCategory.Chain, eVariableStyle.Percentage, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 2);
            ReceiptAUCTotT1 = new TimeTotalVariableProfile(NextSequence, "TTL Tot Rec AUC", eVariableCategory.Chain, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 2);
            ReceiptMUPctT1 = new TimeTotalVariableProfile(NextSequence, "TTL RMU %", eVariableCategory.Chain, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 2);
            InitialMUPctT1 = new TimeTotalVariableProfile(NextSequence, "TTL Tot IMU %", eVariableCategory.Chain, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 2);
            GrossMarginT1 = new TimeTotalVariableProfile(NextSequence, "TTL Tot GM $", eVariableCategory.Both, eVariableStyle.Dollar, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 0);
            GrossMarginPctT1 = new TimeTotalVariableProfile(NextSequence, "TTL Tot GM %", eVariableCategory.Both, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 1);
            CummMUPctT1 = new TimeTotalVariableProfile(NextSequence, "TTL CMU %", eVariableCategory.Chain, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 2);
            COGST1 = new TimeTotalVariableProfile(NextSequence, "TTL COGS", eVariableCategory.Both, eVariableStyle.Dollar, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 0);
            GMROIT1 = new TimeTotalVariableProfile(NextSequence, "TTL GMROI Rtl", eVariableCategory.Both, eVariableStyle.Dollar, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 0);
            OTBCostDlrT1 = new TimeTotalVariableProfile(NextSequence, "TTL Tot OTB C$", eVariableCategory.Chain, eVariableStyle.Dollar, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 0);
            OTBUnitT1 = new TimeTotalVariableProfile(NextSequence, "TTL Tot OTB #", eVariableCategory.Chain, eVariableStyle.Units, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 0);
            OnOrderDlrT1 = new TimeTotalVariableProfile(NextSequence, "TTL Tot On Order $", eVariableCategory.Chain, eVariableStyle.Dollar, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 0);
            OnOrderAUCT1 = new TimeTotalVariableProfile(NextSequence, "TTL Tot On Order AUC", eVariableCategory.Chain, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 2);
            OnOrderAURT1 = new TimeTotalVariableProfile(NextSequence, "TTL Tot On Order AUR", eVariableCategory.Chain, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 2);
            OnOrderCostT1 = new TimeTotalVariableProfile(NextSequence, "TTL Tot On Order C$", eVariableCategory.Chain, eVariableStyle.Dollar, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 0);
            OnOrderIMUT1 = new TimeTotalVariableProfile(NextSequence, "TTL On Order IMU %", eVariableCategory.Chain, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 2);
            OnOrderUnitT1 = new TimeTotalVariableProfile(NextSequence, "TTL Tot On Order #", eVariableCategory.Chain, eVariableStyle.Units, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 0);
            BINVMgnPctT1 = new TimeTotalVariableProfile(NextSequence, "TTL BINV Mgn Pct", eVariableCategory.Both, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.BOW, eVariableTimeTotalType.First, eValueFormatType.GenericNumeric, 2);
            TotMDCostT1 = new TimeTotalVariableProfile(NextSequence, "TTL Tot MD Cost", eVariableCategory.Both, eVariableStyle.Dollar, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 0);
            ShrinkCostT1 = new TimeTotalVariableProfile(NextSequence, "TTL Shr Cost", eVariableCategory.Both, eVariableStyle.Dollar, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 0);
            ShrinkUnitsT1 = new TimeTotalVariableProfile(NextSequence, "TTL Tot Shr #", eVariableCategory.Both, eVariableStyle.Units, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 0);
            ShrinkUnitsTotT1 = new TimeTotalVariableProfile(NextSequence, "TTL Tot Shrink #", eVariableCategory.Chain, eVariableStyle.Units, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 0);
            AdjDollarsT1 = new TimeTotalVariableProfile(NextSequence, "TTL Adj Rtl", eVariableCategory.Both, eVariableStyle.Dollar, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 0);
            AdjCostT1 = new TimeTotalVariableProfile(NextSequence, "TTL Adj Cost", eVariableCategory.Both, eVariableStyle.Dollar, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 0);
            TotEinvUnitsT1 = new TimeTotalVariableProfile(NextSequence, "Beg Tot EINV #", eVariableCategory.Chain, eVariableStyle.Units, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eVariableTimeTotalType.First, eValueFormatType.GenericNumeric, 0);
            TotEinvUnitsT2 = new TimeTotalVariableProfile(NextSequence, "Avg Tot EINV #", eVariableCategory.Chain, eVariableStyle.Units, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 0);
            TotEinvUnitsT3 = new TimeTotalVariableProfile(NextSequence, "End Tot EINV #", eVariableCategory.Chain, eVariableStyle.Units, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eVariableTimeTotalType.Last, eValueFormatType.GenericNumeric, 0);
            PermMDDlrT1 = new TimeTotalVariableProfile(NextSequence, "TTL PMD Rtl", eVariableCategory.Both, eVariableStyle.Dollar, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 0);
            PermMDCostT1 = new TimeTotalVariableProfile(NextSequence, "TTL PMD Cost", eVariableCategory.Both, eVariableStyle.Dollar, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 0);
            PermMDDlrPctT1 = new TimeTotalVariableProfile(NextSequence, "TTL PMD Rtl Pct", eVariableCategory.Both, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 2);
            PosMDDlrT1 = new TimeTotalVariableProfile(NextSequence, "TTL Pos MD Rtl", eVariableCategory.Both, eVariableStyle.Dollar, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 0);
            PosMDCostT1 = new TimeTotalVariableProfile(NextSequence, "TTL Pos MD Cost", eVariableCategory.Both, eVariableStyle.Dollar, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 0);
            PosMDDlrPctT1 = new TimeTotalVariableProfile(NextSequence, "TTL Pos MD Rtl Pct", eVariableCategory.Both, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 2);
            AdjDollarsPctT1 = new TimeTotalVariableProfile(NextSequence, "TTL Adj Rtl Pct", eVariableCategory.Both, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 2);
            AdjUntiPctTotT1 = new TimeTotalVariableProfile(NextSequence, "TTL Tot Adj C$ %", eVariableCategory.Chain, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 2);
            MaintInvDlrT1 = new TimeTotalVariableProfile(NextSequence, "TTL Maint Inv Rtl", eVariableCategory.Both, eVariableStyle.Dollar, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eVariableTimeTotalType.First, eValueFormatType.GenericNumeric, 0);
            MaintInvCostT1 = new TimeTotalVariableProfile(NextSequence, "TTL Maint Inv Cost", eVariableCategory.Both, eVariableStyle.Dollar, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eVariableTimeTotalType.First, eValueFormatType.GenericNumeric, 0);
            MMUPctT1 = new TimeTotalVariableProfile(NextSequence, "TTL MMU Rtl Pct", eVariableCategory.Both, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 2);
            PermMDDlrPctToMDT1 = new TimeTotalVariableProfile(NextSequence, "TTL PMD Oct Tot MD Rtl", eVariableCategory.Both, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 2);
            OTBDlrCumT1 = new TimeTotalVariableProfile(NextSequence, "TTL Cum OTB $", eVariableCategory.Chain, eVariableStyle.Dollar, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 0);
            OTBUnitCumT1 = new TimeTotalVariableProfile(NextSequence, "TTL Cum OTB #", eVariableCategory.Chain, eVariableStyle.Units, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 0);
            SellThruUnitPctTotT1 = new TimeTotalVariableProfile(NextSequence, "Tot Sell Thru Turn #", eVariableCategory.Chain, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.None, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 2);
            TotStrSalesAUCT1 = new TimeTotalVariableProfile(NextSequence, "TTL Tot Str Sales AUC", eVariableCategory.Chain, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 2);
            TotSalesAURT1 = new TimeTotalVariableProfile(NextSequence, "TTL Tot Sales AUR", eVariableCategory.Chain, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 2);
            TotSalesDlrT1 = new TimeTotalVariableProfile(NextSequence, "TTL Tot Sales $", eVariableCategory.Both, eVariableStyle.Dollar, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 0);
            TotSalesDlrT2 = new TimeTotalVariableProfile(NextSequence, "Avg Tot Sales $", eVariableCategory.Both, eVariableStyle.Dollar, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 0);
            TotSalesCostDlrT1 = new TimeTotalVariableProfile(NextSequence, "TTL Tot Sales C$", eVariableCategory.Both, eVariableStyle.Dollar, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 0);
            TotSalesCostDlrT2 = new TimeTotalVariableProfile(NextSequence, "Avg Tot Sales C$", eVariableCategory.Both, eVariableStyle.Dollar, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 0);
            TotSalesUnitT1 = new TimeTotalVariableProfile(NextSequence, "TTL Tot Str Sales #", eVariableCategory.Chain, eVariableStyle.Units, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 0);
            TotSalesUnitT2 = new TimeTotalVariableProfile(NextSequence, "Avg Tot Str Sales #", eVariableCategory.Chain, eVariableStyle.Units, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 0);
            GrossMarginPctStrT1 = new TimeTotalVariableProfile(NextSequence, "TTL Tot Str GM %", eVariableCategory.Chain, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 2);
            GrossMarginTotStrT1 = new TimeTotalVariableProfile(NextSequence, "TTL Tot Str GM $", eVariableCategory.Chain, eVariableStyle.Dollar, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 0);
            CompSlsDlrT1 = new TimeTotalVariableProfile(NextSequence, "TTL Comp Sales $", eVariableCategory.Chain, eVariableStyle.Dollar, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 0);
            NonCompSlsDlrT1 = new TimeTotalVariableProfile(NextSequence, "TTL Non Comp Sales $", eVariableCategory.Chain, eVariableStyle.Dollar, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 0);
            NewStoresT1 = new TimeTotalVariableProfile(NextSequence, "Avg New Stores", eVariableCategory.Chain, eVariableStyle.Units, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 0);
            OpenStoresT1 = new TimeTotalVariableProfile(NextSequence, "Avg Open Stores", eVariableCategory.Chain, eVariableStyle.Units, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 0);
            DTCRtnUnitT1 = new TimeTotalVariableProfile(NextSequence, "TTL DTC Rtn #", eVariableCategory.Chain, eVariableStyle.Units, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 0);
            DTCBODlrT1 = new TimeTotalVariableProfile(NextSequence, "TTL DTC Back Order $", eVariableCategory.Chain, eVariableStyle.Dollar, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 0);
            DTCBOCostDlrT1 = new TimeTotalVariableProfile(NextSequence, "TTL DTC Back Order C$", eVariableCategory.Chain, eVariableStyle.Dollar, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 0);
            DTCBOPctT1 = new TimeTotalVariableProfile(NextSequence, "TTL DTC Back Order C$ %", eVariableCategory.Chain, eVariableStyle.Percentage, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 2);
            DTCCancelUnitT1 = new TimeTotalVariableProfile(NextSequence, "TTL DTC Cancel #", eVariableCategory.Chain, eVariableStyle.Units, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 0);
            DTCCancelDlrT1 = new TimeTotalVariableProfile(NextSequence, "TTL DTC Cancel $", eVariableCategory.Chain, eVariableStyle.Dollar, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 0);
            DTCCancelPctT1 = new TimeTotalVariableProfile(NextSequence, "TTL DTC Cancel C$ %", eVariableCategory.Chain, eVariableStyle.Percentage, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 2);
            DTCCancelCostDlrT1 = new TimeTotalVariableProfile(NextSequence, "TTL DTC Cancel C$", eVariableCategory.Chain, eVariableStyle.Dollar, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 0);
            DTCGrossDmdUnitT1 = new TimeTotalVariableProfile(NextSequence, "TTL DTC Grs Dmd #", eVariableCategory.Chain, eVariableStyle.Units, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 0);
            DTCGrossDmdDlrT1 = new TimeTotalVariableProfile(NextSequence, "TTL DTC Grs Dmd $", eVariableCategory.Chain, eVariableStyle.Dollar, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 0);
            DTCGrossDmdAURT1 = new TimeTotalVariableProfile(NextSequence, "TTL DTC Grs Dmd AUR", eVariableCategory.Chain, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 2);
            DTCGrossDmdAUCT1 = new TimeTotalVariableProfile(NextSequence, "TTL DTC Grs Dmd AUC", eVariableCategory.Chain, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 2);
            DTCGrossDmdCostDlrT1 = new TimeTotalVariableProfile(NextSequence, "TTL DTC Grs Dmd C$", eVariableCategory.Chain, eVariableStyle.Dollar, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 0);
            DTCNetDmdUnitT1 = new TimeTotalVariableProfile(NextSequence, "TTL DTC Net Dmd #", eVariableCategory.Chain, eVariableStyle.Units, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 0);
            DTCNetDmdDlrT1 = new TimeTotalVariableProfile(NextSequence, "TTL DTC Net Dmd $", eVariableCategory.Chain, eVariableStyle.Dollar, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 0);
            DTCNetDmdCostDlrT1 = new TimeTotalVariableProfile(NextSequence, "TTL DTC Net Dmd C$", eVariableCategory.Chain, eVariableStyle.Dollar, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 0);
            DTCNetDmdPctT1 = new TimeTotalVariableProfile(NextSequence, "TTL DTC Net Dmd C$ %", eVariableCategory.Chain, eVariableStyle.Percentage, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 2);
            DTCNetDmdAURT1 = new TimeTotalVariableProfile(NextSequence, "TTL DTC Net Dmd AUR", eVariableCategory.Chain, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 2);
            DTCNetDmdAUCT1 = new TimeTotalVariableProfile(NextSequence, "TTL DTC Net Dmd AUC", eVariableCategory.Chain, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 2);
            DTCNetDmdGMDlrT1 = new TimeTotalVariableProfile(NextSequence, "TTL DTC Net Dmd GM $", eVariableCategory.Chain, eVariableStyle.Dollar, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 0);
            DTCNetDmdGMPctT1 = new TimeTotalVariableProfile(NextSequence, "TTL DTC Net Dmd GM %", eVariableCategory.Chain, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 2);
            DTCRtnDlrT1 = new TimeTotalVariableProfile(NextSequence, "TTL Rtn $", eVariableCategory.Chain, eVariableStyle.Dollar, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 0);
            DTCRtnCostDlrT1 = new TimeTotalVariableProfile(NextSequence, "TTL DTC Rtn C$", eVariableCategory.Chain, eVariableStyle.Dollar, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 0);
            DTCRtnPctT1 = new TimeTotalVariableProfile(NextSequence, "TTL DTC Rtn C$ %", eVariableCategory.Chain, eVariableStyle.Percentage, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 2);
            DTCAvgOrderT1 = new TimeTotalVariableProfile(NextSequence, "Avg DTC Avg Order", eVariableCategory.Chain, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 0);
            DTCNoOfOrdersT1 = new TimeTotalVariableProfile(NextSequence, "TTL DTC No of Orders", eVariableCategory.Chain, eVariableStyle.Units, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 0);
            DTCVisitsT1 = new TimeTotalVariableProfile(NextSequence, "TTL DTC Visits", eVariableCategory.Chain, eVariableStyle.Units, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 0);
            DTCPlacementT1 = new TimeTotalVariableProfile(NextSequence, "Avg DTC Placement", eVariableCategory.Chain, eVariableStyle.Percentage, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 2);
            DTCSlsStkRatioT1 = new TimeTotalVariableProfile(NextSequence, "TTL DTC S/S Ratio", eVariableCategory.Chain, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 2);
            DTCSellThruT1 = new TimeTotalVariableProfile(NextSequence, "TTL DTC Sell Thru", eVariableCategory.Chain, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 2);
            DTCSpaceT1 = new TimeTotalVariableProfile(NextSequence, "Avg DTC Space", eVariableCategory.Chain, eVariableStyle.Units, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 0);
            DTCBOUnitT1 = new TimeTotalVariableProfile(NextSequence, "TTL DTC Back Order #", eVariableCategory.Chain, eVariableStyle.Units, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 0);
            TotStrSalesUnitPctTTLT1 = new TimeTotalVariableProfile(NextSequence, "TTL Tot Str Sales # % TTL", eVariableCategory.Chain, eVariableStyle.Percentage, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 2);
            TotStrSalesCostDlrPctTTLT1 = new TimeTotalVariableProfile(NextSequence, "TTL Tot Str Sales C$ % TTL", eVariableCategory.Chain, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 2);
            TotDTCSalesUnitPctTTLT1 = new TimeTotalVariableProfile(NextSequence, "TTL Tot DTC Sales # % TTL", eVariableCategory.Chain, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 2);
            TotDTCSalesCostDlrPctTTLT1 = new TimeTotalVariableProfile(NextSequence, "TTL Tot DTC Sales C$ % TTL", eVariableCategory.Chain, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 2);
            AdjCostDlrTotT1 = new TimeTotalVariableProfile(NextSequence, "TTL Tot Adj C$", eVariableCategory.Chain, eVariableStyle.Dollar, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 0);
            ShrinkCostDlrTotT1 = new TimeTotalVariableProfile(NextSequence, "TTL Tot Shrink C$", eVariableCategory.Chain, eVariableStyle.Dollar, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 0);
            TotEinvCostDlrT1 = new TimeTotalVariableProfile(NextSequence, "Beg Tot EINV C$", eVariableCategory.Chain, eVariableStyle.Dollar, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eVariableTimeTotalType.First, eValueFormatType.GenericNumeric, 0);
            TotEinvCostDlrT2 = new TimeTotalVariableProfile(NextSequence, "Avg Tot EINV C$", eVariableCategory.Chain, eVariableStyle.Dollar, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 0);
            TotEinvCostDlrT3 = new TimeTotalVariableProfile(NextSequence, "End Tot EINV C$", eVariableCategory.Chain, eVariableStyle.Dollar, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eVariableTimeTotalType.Last, eValueFormatType.GenericNumeric, 0);
            DTCGrossDmdGMDlrT1 = new TimeTotalVariableProfile(NextSequence, "TTL DTC Grs Dmd GM $", eVariableCategory.Chain, eVariableStyle.Dollar, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 0);
            DTCGrsDmdGMPctT1 = new TimeTotalVariableProfile(NextSequence, "TTL DTC Grs Dmd GM %", eVariableCategory.Chain, eVariableStyle.Percentage, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 2);
            DiscountPctT1 = new TimeTotalVariableProfile(NextSequence, "TTL Discount %", eVariableCategory.Both, eVariableStyle.Percentage, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 2);
            DiscountDlrT1 = new TimeTotalVariableProfile(NextSequence, "TTL Discount $", eVariableCategory.Both, eVariableStyle.Dollar, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 0);
            AfterDiscountDlrT1 = new TimeTotalVariableProfile(NextSequence, "TTL After Discount $", eVariableCategory.Both, eVariableStyle.Dollar, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 0);
            AfterDiscountAURT1 = new TimeTotalVariableProfile(NextSequence, "TTL Avg Discount AUR", eVariableCategory.Chain, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 2);
            FreightCostPerUnitT1 = new TimeTotalVariableProfile(NextSequence, "AVG Freight C$/#", eVariableCategory.Chain, eVariableStyle.Percentage, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.Plug, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 2);
            TotFreightCostDlrT1 = new TimeTotalVariableProfile(NextSequence, "TTL Tot Freight C$", eVariableCategory.Chain, eVariableStyle.Dollar, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 2);
            AfterDiscGMDlrT1 = new TimeTotalVariableProfile(NextSequence, "TTL After Discount GM $", eVariableCategory.Chain, eVariableStyle.Dollar, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 0);
            VATPctT1 = new TimeTotalVariableProfile(NextSequence, "AVG VAT %", eVariableCategory.Both, eVariableStyle.Percentage, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 2);
            VATDlrT1 = new TimeTotalVariableProfile(NextSequence, "TTL VAT $", eVariableCategory.Both, eVariableStyle.Dollar, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 0);
            CurrXchgPctT1 = new TimeTotalVariableProfile(NextSequence, "Avg Currency Xchg %", eVariableCategory.Both, eVariableStyle.Percentage, eVariableAccess.Editable, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 2);
            ConvertedSalesDlrT1 = new TimeTotalVariableProfile(NextSequence, "TTL Conv Sales $", eVariableCategory.Chain, eVariableStyle.Dollar, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 0);
            SaleswithoutVATDlrT1 = new TimeTotalVariableProfile(NextSequence, "TTL Sales w/out VAT", eVariableCategory.Both, eVariableStyle.Dollar, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 0);
            TotEinvAUCT1 = new TimeTotalVariableProfile(NextSequence, "Beg Tot EINV AUC", eVariableCategory.Chain, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eVariableTimeTotalType.Last, eValueFormatType.GenericNumeric, 2);
            TotEinvAUCT2 = new TimeTotalVariableProfile(NextSequence, "Avg Tot EINV AUC", eVariableCategory.Chain, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 2);
            TotEinvAUCT3 = new TimeTotalVariableProfile(NextSequence, "End Tot EINV AUC", eVariableCategory.Chain, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eVariableTimeTotalType.Last, eValueFormatType.GenericNumeric, 2);
            Commit1UnitT1 = new TimeTotalVariableProfile(NextSequence, "TTL Commit1 #", eVariableCategory.Chain, eVariableStyle.Units, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 0);
            Commit1CostDlrT1 = new TimeTotalVariableProfile(NextSequence, "TTL Commit1 C$", eVariableCategory.Chain, eVariableStyle.Dollar, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 0);
            Commit1AUCT1 = new TimeTotalVariableProfile(NextSequence, "TTL Commit1 AUC", eVariableCategory.Chain, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 2);
            Commit2UnitT1 = new TimeTotalVariableProfile(NextSequence, "TTL Commit2 #", eVariableCategory.Chain, eVariableStyle.Units, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 0);
            Commit2CostDlrT1 = new TimeTotalVariableProfile(NextSequence, "TTL Commit2 C$", eVariableCategory.Chain, eVariableStyle.Dollar, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 0);
            Commit2AUCT1 = new TimeTotalVariableProfile(NextSequence, "TTL Commit2 AUC", eVariableCategory.Chain, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 2);
            Commit3UnitT1 = new TimeTotalVariableProfile(NextSequence, "TTL Commit3 #", eVariableCategory.Chain, eVariableStyle.Units, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 0);
            Commit3AUCT1 = new TimeTotalVariableProfile(NextSequence, "TTL Commit3 AUC", eVariableCategory.Chain, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 2);
            Commit3CostDlrT1 = new TimeTotalVariableProfile(NextSequence, "TTL Commit3 C$", eVariableCategory.Chain, eVariableStyle.Dollar, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 0);
            SquareSpaceT1 = new TimeTotalVariableProfile(NextSequence, "Avg Sq Space", eVariableCategory.Both, eVariableStyle.Units, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.Plug, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 0);
            LinearSpaceT1 = new TimeTotalVariableProfile(NextSequence, "Avg Linear Space", eVariableCategory.Both, eVariableStyle.Units, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.Plug, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 0);
            FloorSpaceT1 = new TimeTotalVariableProfile(NextSequence, "Avg Floor Space", eVariableCategory.Both, eVariableStyle.Units, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.Plug, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 0);
            DTCTransactionsT1 = new TimeTotalVariableProfile(NextSequence, "TTL DTC Transactions", eVariableCategory.Chain, eVariableStyle.Units, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctContribution, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 0);
            SpaceConvPctT1 = new TimeTotalVariableProfile(NextSequence, "Avg Space Conv %", eVariableCategory.Both, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 2);
            SalesUperSqSpaceT1 = new TimeTotalVariableProfile(NextSequence, "TTL Sales # per Sq Space", eVariableCategory.Both, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 2);
            SalesUperLinearSpaceT1 = new TimeTotalVariableProfile(NextSequence, "TTL Sales # per Lin Space", eVariableCategory.Both, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 2);
            DensityUT1 = new TimeTotalVariableProfile(NextSequence, "Avg Density", eVariableCategory.Both, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 2);
            SalesperSpaceUT1 = new TimeTotalVariableProfile(NextSequence, "TTL Sales per Space #", eVariableCategory.Both, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 2);
            TotStrSalesCDlrperSqSpaceT1 = new TimeTotalVariableProfile(NextSequence, "TTL Str Sales C$ per Sq Space", eVariableCategory.Chain, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 2);
            TotStrSalesDlrperSqSpaceT1 = new TimeTotalVariableProfile(NextSequence, "TTL Str Sales $ per Sq Space", eVariableCategory.Chain, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 2);
            TotStrSalesCDlrperLinearSpaceT1 = new TimeTotalVariableProfile(NextSequence, "TTL Str Sales C$ per Lin Space", eVariableCategory.Chain, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 2);
            TotStrSalesDlrperLinearSpaceT1 = new TimeTotalVariableProfile(NextSequence, "TTL Str Sales $ per Lin Space", eVariableCategory.Chain, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 2);
            DTCPlacedOrdersDlrT1 = new TimeTotalVariableProfile(NextSequence, "TTL DTC Placed Orders $", eVariableCategory.Both, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 2);
            DTCConvPctT1 = new TimeTotalVariableProfile(NextSequence, "TTL DTC Conv %", eVariableCategory.Chain, eVariableStyle.Percentage, eVariableAccess.DisplayOnly, eVariableScope.Static, eVariableSpreadType.PctChange, eVariableWeekType.EOW, eVariableTimeTotalType.All, eValueFormatType.GenericNumeric, 2);
        }
        protected override void InitializeVariables(BasePlanVariables aBasePlanVariables)
        {
            base.InitializeVariables(aBasePlanVariables);
            PlanVariables PlanVars = (PlanVariables)aBasePlanVariables;
            // TimeTotalVariableProfileList.Add(TotStrBinvDlrT1);
            // TotStrBinvDlrT1.ParentVariableProfile = PlanVars.TotStrBinvDlr;

            // TimeTotalVariableProfileList.Add(TotStrBinvDlrT2);
            // TotStrBinvDlrT2.ParentVariableProfile = PlanVars.TotStrBinvDlr;

            // TimeTotalVariableProfileList.Add(TotStrBinvDlrT3);
            // TotStrBinvDlrT3.ParentVariableProfile = PlanVars.TotStrBinvDlr;

            // TimeTotalVariableProfileList.Add(TotStrBinvDlrT4);
            // TotStrBinvDlrT4.ParentVariableProfile = PlanVars.TotStrBinvDlr;

            TimeTotalVariableProfileList.Add(TotBinvAUCT1);
            TotBinvAUCT1.ParentVariableProfile = PlanVars.TotBinvAUC;

            TimeTotalVariableProfileList.Add(TotBinvAUCT2);
            TotBinvAUCT2.ParentVariableProfile = PlanVars.TotBinvAUC;

            TimeTotalVariableProfileList.Add(TotBinvAUCT3);
            TotBinvAUCT3.ParentVariableProfile = PlanVars.TotBinvAUC;

            // TimeTotalVariableProfileList.Add(RegStrBinvAURT1);
            // RegStrBinvAURT1.ParentVariableProfile = PlanVars.RegStrBinvAUR;

            // TimeTotalVariableProfileList.Add(RegStrBinvAURT2);
            // RegStrBinvAURT2.ParentVariableProfile = PlanVars.RegStrBinvAUR;

            // TimeTotalVariableProfileList.Add(RegStrBinvAURT3);
            // RegStrBinvAURT3.ParentVariableProfile = PlanVars.RegStrBinvAUR;

            // TimeTotalVariableProfileList.Add(RegStrBinvDlrT1);
            // RegStrBinvDlrT1.ParentVariableProfile = PlanVars.RegStrBinvDlr;

            // TimeTotalVariableProfileList.Add(RegStrBinvDlrT2);
            // RegStrBinvDlrT2.ParentVariableProfile = PlanVars.RegStrBinvDlr;

            // TimeTotalVariableProfileList.Add(RegStrBinvDlrT3);
            // RegStrBinvDlrT3.ParentVariableProfile = PlanVars.RegStrBinvDlr;

            // TimeTotalVariableProfileList.Add(RegStrBinvDlrT4);
            // RegStrBinvDlrT4.ParentVariableProfile = PlanVars.RegStrBinvDlr;

            // TimeTotalVariableProfileList.Add(ClearStrBinvAURT1);
            // ClearStrBinvAURT1.ParentVariableProfile = PlanVars.ClearStrBinvAUR;

            // TimeTotalVariableProfileList.Add(ClearStrBinvAURT2);
            // ClearStrBinvAURT2.ParentVariableProfile = PlanVars.ClearStrBinvAUR;

            // TimeTotalVariableProfileList.Add(ClearStrBinvAURT3);
            // ClearStrBinvAURT3.ParentVariableProfile = PlanVars.ClearStrBinvAUR;

            // TimeTotalVariableProfileList.Add(ClearStrBinvDlrT1);
            // ClearStrBinvDlrT1.ParentVariableProfile = PlanVars.ClearStrBinvDlr;

            // TimeTotalVariableProfileList.Add(ClearStrBinvDlrT2);
            // ClearStrBinvDlrT2.ParentVariableProfile = PlanVars.ClearStrBinvDlr;

            // TimeTotalVariableProfileList.Add(ClearStrBinvDlrT3);
            // ClearStrBinvDlrT3.ParentVariableProfile = PlanVars.ClearStrBinvDlr;

            // TimeTotalVariableProfileList.Add(RegStrBinvPctTtlDlrT1);
            // RegStrBinvPctTtlDlrT1.ParentVariableProfile = PlanVars.RegStrBinvPctTtlDlr;

            // TimeTotalVariableProfileList.Add(RegStrBinvPctTtlDlrT2);
            // RegStrBinvPctTtlDlrT2.ParentVariableProfile = PlanVars.RegStrBinvPctTtlDlr;

            // TimeTotalVariableProfileList.Add(RegStrBinvPctTtlDlrT3);
            // RegStrBinvPctTtlDlrT3.ParentVariableProfile = PlanVars.RegStrBinvPctTtlDlr;

            // TimeTotalVariableProfileList.Add(RegStrBinvPctTtlUnitsT1);
            // RegStrBinvPctTtlUnitsT1.ParentVariableProfile = PlanVars.RegStrBinvPctTtlUnits;

            // TimeTotalVariableProfileList.Add(RegStrBinvPctTtlUnitsT2);
            // RegStrBinvPctTtlUnitsT2.ParentVariableProfile = PlanVars.RegStrBinvPctTtlUnits;

            // TimeTotalVariableProfileList.Add(RegStrBinvPctTtlUnitsT3);
            // RegStrBinvPctTtlUnitsT3.ParentVariableProfile = PlanVars.RegStrBinvPctTtlUnits;

            // TimeTotalVariableProfileList.Add(ClearStrBinvPctTtlDlrT1);
            // ClearStrBinvPctTtlDlrT1.ParentVariableProfile = PlanVars.ClearStrBinvPctTtlDlr;

            // TimeTotalVariableProfileList.Add(ClearStrBinvPctTtlDlrT2);
            // ClearStrBinvPctTtlDlrT2.ParentVariableProfile = PlanVars.ClearStrBinvPctTtlDlr;

            // TimeTotalVariableProfileList.Add(ClearStrBinvPctTtlDlrT3);
            // ClearStrBinvPctTtlDlrT3.ParentVariableProfile = PlanVars.ClearStrBinvPctTtlDlr;

            // TimeTotalVariableProfileList.Add(ClearStrBinvPctTtlUnitsT1);
            // ClearStrBinvPctTtlUnitsT1.ParentVariableProfile = PlanVars.ClearStrBinvPctTtlUnits;

            // TimeTotalVariableProfileList.Add(ClearStrBinvPctTtlUnitsT2);
            // ClearStrBinvPctTtlUnitsT2.ParentVariableProfile = PlanVars.ClearStrBinvPctTtlUnits;

            // TimeTotalVariableProfileList.Add(ClearStrBinvPctTtlUnitsT3);
            // ClearStrBinvPctTtlUnitsT3.ParentVariableProfile = PlanVars.ClearStrBinvPctTtlUnits;

            TimeTotalVariableProfileList.Add(SalesDlrT1);
            SalesDlrT1.ParentVariableProfile = PlanVars.TotStrSalesDlr;

            TimeTotalVariableProfileList.Add(SalesDlrT2);
            SalesDlrT2.ParentVariableProfile = PlanVars.TotStrSalesDlr;

            // TimeTotalVariableProfileList.Add(SalesAURT1);
            // SalesAURT1.ParentVariableProfile = PlanVars.StrRegSalesAUR;

            // TimeTotalVariableProfileList.Add(SalesAURT2);
            // SalesAURT2.ParentVariableProfile = PlanVars.StrRegSalesAUR;

            // TimeTotalVariableProfileList.Add(SalesRegDlrT1);
            // SalesRegDlrT1.ParentVariableProfile = PlanVars.SalesRegDlr;

            // TimeTotalVariableProfileList.Add(SalesRegDlrT2);
            // SalesRegDlrT2.ParentVariableProfile = PlanVars.SalesRegDlr;

            // TimeTotalVariableProfileList.Add(SalesRegAURT1);
            // SalesRegAURT1.ParentVariableProfile = PlanVars.TotStrSalesAUR;

            TimeTotalVariableProfileList.Add(TotStrSalesAURT1);
            TotStrSalesAURT1.ParentVariableProfile = PlanVars.TotStrSalesAUR;

            // TimeTotalVariableProfileList.Add(SalesClearDlrT1);
            // SalesClearDlrT1.ParentVariableProfile = PlanVars.StrSalesClearDlr;

            // TimeTotalVariableProfileList.Add(SalesClearDlrT2);
            // SalesClearDlrT2.ParentVariableProfile = PlanVars.StrSalesClearDlr;

            // TimeTotalVariableProfileList.Add(SalesClearAURT1);
            // SalesClearAURT1.ParentVariableProfile = PlanVars.StrSalesClearAUR;

            // TimeTotalVariableProfileList.Add(SalesRegPctTtlDlrT1);
            // SalesRegPctTtlDlrT1.ParentVariableProfile = PlanVars.SalesRegPctTtlDlr;

            // TimeTotalVariableProfileList.Add(SalesRegPctTtlUnitsT1);
            // SalesRegPctTtlUnitsT1.ParentVariableProfile = PlanVars.SalesRegPctTtlUnits;

            // TimeTotalVariableProfileList.Add(SalesClearPctTtlDlrT1);
            // SalesClearPctTtlDlrT1.ParentVariableProfile = PlanVars.StrSalesClearPctTtlDlr;

            // TimeTotalVariableProfileList.Add(SalesClearPctTtlUnitsT1);
            // SalesClearPctTtlUnitsT1.ParentVariableProfile = PlanVars.StrSalesClearPctTtlUnits;

            TimeTotalVariableProfileList.Add(CompPctTtlT1);
            CompPctTtlT1.ParentVariableProfile = PlanVars.CompPctTtl;

            TimeTotalVariableProfileList.Add(NonCompPctTtlT1);
            NonCompPctTtlT1.ParentVariableProfile = PlanVars.NonCompPctTtl;

            TimeTotalVariableProfileList.Add(ReceiptUnitT1);
            ReceiptUnitT1.ParentVariableProfile = PlanVars.TotRecUnit;

            // TimeTotalVariableProfileList.Add(ReceiptAURT1);
            // ReceiptAURT1.ParentVariableProfile = PlanVars.ReceiptAUR;

            TimeTotalVariableProfileList.Add(ReceiptCostT1);
            ReceiptCostT1.ParentVariableProfile = PlanVars.TotRecCostDlr;

            // TimeTotalVariableProfileList.Add(TotMDDlrT1);
            // TotMDDlrT1.ParentVariableProfile = PlanVars.TotMDDlr;

            // TimeTotalVariableProfileList.Add(TotMDPctT1);
            // TotMDPctT1.ParentVariableProfile = PlanVars.TotMDPct;

            TimeTotalVariableProfileList.Add(AdjUnitsT1);
            AdjUnitsT1.ParentVariableProfile = PlanVars.AdjUnitsTot;

            // TimeTotalVariableProfileList.Add(ShrinkDlrT1);
            // ShrinkDlrT1.ParentVariableProfile = PlanVars.ShrinkDlr;

            // TimeTotalVariableProfileList.Add(ShrinkPctT1);
            // ShrinkPctT1.ParentVariableProfile = PlanVars.ShrinkPctTot;

            TimeTotalVariableProfileList.Add(ShrinkPctTotT1);
            ShrinkPctTotT1.ParentVariableProfile = PlanVars.ShrinkPctTot;

            // TimeTotalVariableProfileList.Add(FWOSTotDlrT1);
            // FWOSTotDlrT1.ParentVariableProfile = PlanVars.FWOSTotDlr;

            // TimeTotalVariableProfileList.Add(FWOSTotDlrT2);
            // FWOSTotDlrT2.ParentVariableProfile = PlanVars.FWOSTotDlr;

            // TimeTotalVariableProfileList.Add(ForwardWOSTotalT2);
            // ForwardWOSTotalT2.ParentVariableProfile = PlanVars.FWOSTotDlr;

            // TimeTotalVariableProfileList.Add(ForwardWOSReglDlrT1);
            // ForwardWOSReglDlrT1.ParentVariableProfile = PlanVars.ForwardWOSReglDlr;

            // TimeTotalVariableProfileList.Add(ForwardWOSReglDlrT2);
            // ForwardWOSReglDlrT2.ParentVariableProfile = PlanVars.ForwardWOSReglDlr;

            // TimeTotalVariableProfileList.Add(ForwardWOSClearlDlrT1);
            // ForwardWOSClearlDlrT1.ParentVariableProfile = PlanVars.ForwardWOSClearlDlr;

            // TimeTotalVariableProfileList.Add(ForwardWOSClearlDlrT2);
            // ForwardWOSClearlDlrT2.ParentVariableProfile = PlanVars.ForwardWOSClearlDlr;

            // TimeTotalVariableProfileList.Add(NoOfRacksT1);
            // NoOfRacksT1.ParentVariableProfile = PlanVars.NoOfRacks;

            TimeTotalVariableProfileList.Add(InventoryTotalUnitsT4);
            InventoryTotalUnitsT4.ParentVariableProfile = PlanVars.InventoryTotalUnits;

            // TimeTotalVariableProfileList.Add(SalesAUCT1);
            // SalesAUCT1.ParentVariableProfile = PlanVars.TotSalesAUC;

            TimeTotalVariableProfileList.Add(TotSalesAUCT1);
            TotSalesAUCT1.ParentVariableProfile = PlanVars.TotSalesAUC;

            // TimeTotalVariableProfileList.Add(SalesCostT1);
            // SalesCostT1.ParentVariableProfile = PlanVars.TotStrSalesCostDlr;

            TimeTotalVariableProfileList.Add(SalesCostT2);
            SalesCostT2.ParentVariableProfile = PlanVars.TotStrSalesCostDlr;

            TimeTotalVariableProfileList.Add(TotStrSalesCostDlrT1);
            TotStrSalesCostDlrT1.ParentVariableProfile = PlanVars.TotStrSalesCostDlr;

            // TimeTotalVariableProfileList.Add(SalesMarginT1);
            // SalesMarginT1.ParentVariableProfile = PlanVars.SalesMargin;

            // TimeTotalVariableProfileList.Add(TotStrBinvAUCT1);
            // TotStrBinvAUCT1.ParentVariableProfile = PlanVars.TotStrBinvAUC;

            // TimeTotalVariableProfileList.Add(TotStrBinvAUCT2);
            // TotStrBinvAUCT2.ParentVariableProfile = PlanVars.TotStrBinvAUC;

            // TimeTotalVariableProfileList.Add(TotStrBinvAUCT3);
            // TotStrBinvAUCT3.ParentVariableProfile = PlanVars.TotStrBinvAUC;

            TimeTotalVariableProfileList.Add(TotBinvCostDlrT1);
            TotBinvCostDlrT1.ParentVariableProfile = PlanVars.TotBinvCostDlr;

            TimeTotalVariableProfileList.Add(TotBinvCostDlrT2);
            TotBinvCostDlrT2.ParentVariableProfile = PlanVars.TotBinvCostDlr;

            TimeTotalVariableProfileList.Add(TotBinvCostDlrT3);
            TotBinvCostDlrT3.ParentVariableProfile = PlanVars.TotBinvCostDlr;

            // TimeTotalVariableProfileList.Add(ReceiptAUCT1);
            // ReceiptAUCT1.ParentVariableProfile = PlanVars.ReceiptAUCTot;

            TimeTotalVariableProfileList.Add(ReceiptAUCTotT1);
            ReceiptAUCTotT1.ParentVariableProfile = PlanVars.ReceiptAUCTot;

            // TimeTotalVariableProfileList.Add(ReceiptMUPctT1);
            // ReceiptMUPctT1.ParentVariableProfile = PlanVars.ReceiptMUPct;

            TimeTotalVariableProfileList.Add(InitialMUPctT1);
            InitialMUPctT1.ParentVariableProfile = PlanVars.TotIMUPct;

            TimeTotalVariableProfileList.Add(GrossMarginT1);
            GrossMarginT1.ParentVariableProfile = PlanVars.GrossMarginTotDlr;

            TimeTotalVariableProfileList.Add(GrossMarginPctT1);
            GrossMarginPctT1.ParentVariableProfile = PlanVars.GrossMarginPctTot;

            // TimeTotalVariableProfileList.Add(CummMUPctT1);
            // CummMUPctT1.ParentVariableProfile = PlanVars.CummMUPct;

            // TimeTotalVariableProfileList.Add(COGST1);
            // COGST1.ParentVariableProfile = PlanVars.COGS;

            // TimeTotalVariableProfileList.Add(GMROIT1);
            // GMROIT1.ParentVariableProfile = PlanVars.GMROI;

            TimeTotalVariableProfileList.Add(OTBCostDlrT1);
            OTBCostDlrT1.ParentVariableProfile = PlanVars.OTBCostDlr;

            TimeTotalVariableProfileList.Add(OTBUnitT1);
            OTBUnitT1.ParentVariableProfile = PlanVars.OTBUnit;

            TimeTotalVariableProfileList.Add(OnOrderDlrT1);
            OnOrderDlrT1.ParentVariableProfile = PlanVars.OnOrderDlr;

            TimeTotalVariableProfileList.Add(OnOrderAUCT1);
            OnOrderAUCT1.ParentVariableProfile = PlanVars.OnOrderAUC;

            TimeTotalVariableProfileList.Add(OnOrderAURT1);
            OnOrderAURT1.ParentVariableProfile = PlanVars.OnOrderAUR;

            TimeTotalVariableProfileList.Add(OnOrderCostT1);
            OnOrderCostT1.ParentVariableProfile = PlanVars.OnOrderCostDlr;

            // TimeTotalVariableProfileList.Add(OnOrderIMUT1);
            // OnOrderIMUT1.ParentVariableProfile = PlanVars.OnOrderIMU;

            TimeTotalVariableProfileList.Add(OnOrderUnitT1);
            OnOrderUnitT1.ParentVariableProfile = PlanVars.OnOrderUnit;

            // TimeTotalVariableProfileList.Add(BINVMgnPctT1);
            // BINVMgnPctT1.ParentVariableProfile = PlanVars.BINVMgnPct;

            // TimeTotalVariableProfileList.Add(TotMDCostT1);
            // TotMDCostT1.ParentVariableProfile = PlanVars.TotMDCost;

            // TimeTotalVariableProfileList.Add(ShrinkCostT1);
            // ShrinkCostT1.ParentVariableProfile = PlanVars.ShrinkCost;

            // TimeTotalVariableProfileList.Add(ShrinkUnitsT1);
            // ShrinkUnitsT1.ParentVariableProfile = PlanVars.ShrinkUnitsTot;

            TimeTotalVariableProfileList.Add(ShrinkUnitsTotT1);
            ShrinkUnitsTotT1.ParentVariableProfile = PlanVars.ShrinkUnitsTot;

            // TimeTotalVariableProfileList.Add(AdjDollarsT1);
            // AdjDollarsT1.ParentVariableProfile = PlanVars.AdjDollars;

            // TimeTotalVariableProfileList.Add(AdjCostT1);
            // AdjCostT1.ParentVariableProfile = PlanVars.AdjCost;

            TimeTotalVariableProfileList.Add(TotEinvUnitsT1);
            TotEinvUnitsT1.ParentVariableProfile = PlanVars.TotEinvUnits;

            TimeTotalVariableProfileList.Add(TotEinvUnitsT2);
            TotEinvUnitsT2.ParentVariableProfile = PlanVars.TotEinvUnits;

            TimeTotalVariableProfileList.Add(TotEinvUnitsT3);
            TotEinvUnitsT3.ParentVariableProfile = PlanVars.TotEinvUnits;

            // TimeTotalVariableProfileList.Add(PermMDDlrT1);
            // PermMDDlrT1.ParentVariableProfile = PlanVars.PermMDDlr;

            // TimeTotalVariableProfileList.Add(PermMDCostT1);
            // PermMDCostT1.ParentVariableProfile = PlanVars.PermMDCost;

            // TimeTotalVariableProfileList.Add(PermMDDlrPctT1);
            // PermMDDlrPctT1.ParentVariableProfile = PlanVars.PermMDDlrPct;

            // TimeTotalVariableProfileList.Add(PosMDDlrT1);
            // PosMDDlrT1.ParentVariableProfile = PlanVars.PosMDDlr;

            // TimeTotalVariableProfileList.Add(PosMDCostT1);
            // PosMDCostT1.ParentVariableProfile = PlanVars.PosMDCost;

            // TimeTotalVariableProfileList.Add(PosMDDlrPctT1);
            // PosMDDlrPctT1.ParentVariableProfile = PlanVars.PosMDDlrPct;

            // TimeTotalVariableProfileList.Add(AdjDollarsPctT1);
            // AdjDollarsPctT1.ParentVariableProfile = PlanVars.AdjUntiPctTot;

            TimeTotalVariableProfileList.Add(AdjUntiPctTotT1);
            AdjUntiPctTotT1.ParentVariableProfile = PlanVars.AdjUntiPctTot;

            // TimeTotalVariableProfileList.Add(MaintInvDlrT1);
            // MaintInvDlrT1.ParentVariableProfile = PlanVars.MaintInvDlr;

            // TimeTotalVariableProfileList.Add(MaintInvCostT1);
            // MaintInvCostT1.ParentVariableProfile = PlanVars.MaintInvCost;

            // TimeTotalVariableProfileList.Add(MMUPctT1);
            // MMUPctT1.ParentVariableProfile = PlanVars.MMUPct;

            // TimeTotalVariableProfileList.Add(PermMDDlrPctToMDT1);
            // PermMDDlrPctToMDT1.ParentVariableProfile = PlanVars.PermMDDlrPctToMD;

            // TimeTotalVariableProfileList.Add(OTBDlrCumT1);
            // OTBDlrCumT1.ParentVariableProfile = PlanVars.OTBCostDlrCum;

            // TimeTotalVariableProfileList.Add(OTBUnitCumT1);
            // OTBUnitCumT1.ParentVariableProfile = PlanVars.OTBUnitCum;

            TimeTotalVariableProfileList.Add(SellThruUnitPctTotT1);
            SellThruUnitPctTotT1.ParentVariableProfile = PlanVars.SellThruUnitPctTot;

            TimeTotalVariableProfileList.Add(TotStrSalesAUCT1);
            TotStrSalesAUCT1.ParentVariableProfile = PlanVars.TotStrSalesAUC;

            TimeTotalVariableProfileList.Add(TotSalesAURT1);
            TotSalesAURT1.ParentVariableProfile = PlanVars.TotSalesAUR;

            TimeTotalVariableProfileList.Add(TotSalesDlrT1);
            TotSalesDlrT1.ParentVariableProfile = PlanVars.TotSalesDlr;

            TimeTotalVariableProfileList.Add(TotSalesDlrT2);
            TotSalesDlrT2.ParentVariableProfile = PlanVars.TotSalesDlr;

            TimeTotalVariableProfileList.Add(TotSalesCostDlrT1);
            TotSalesCostDlrT1.ParentVariableProfile = PlanVars.TotSalesCostDlr;

            TimeTotalVariableProfileList.Add(TotSalesCostDlrT2);
            TotSalesCostDlrT2.ParentVariableProfile = PlanVars.TotSalesCostDlr;

            TimeTotalVariableProfileList.Add(TotSalesUnitT1);
            TotSalesUnitT1.ParentVariableProfile = PlanVars.TotSalesUnit;

            TimeTotalVariableProfileList.Add(TotSalesUnitT2);
            TotSalesUnitT2.ParentVariableProfile = PlanVars.TotSalesUnit;

            TimeTotalVariableProfileList.Add(GrossMarginPctStrT1);
            GrossMarginPctStrT1.ParentVariableProfile = PlanVars.GrossMarginPctStr;

            TimeTotalVariableProfileList.Add(GrossMarginTotStrT1);
            GrossMarginTotStrT1.ParentVariableProfile = PlanVars.GrossMarginTotStr;

            TimeTotalVariableProfileList.Add(CompSlsDlrT1);
            CompSlsDlrT1.ParentVariableProfile = PlanVars.CompSlsDlr;

            TimeTotalVariableProfileList.Add(NonCompSlsDlrT1);
            NonCompSlsDlrT1.ParentVariableProfile = PlanVars.NonCompSlsDlr;

            TimeTotalVariableProfileList.Add(NewStoresT1);
            NewStoresT1.ParentVariableProfile = PlanVars.NewStores;

            TimeTotalVariableProfileList.Add(OpenStoresT1);
            OpenStoresT1.ParentVariableProfile = PlanVars.OpenStores;

            TimeTotalVariableProfileList.Add(DTCRtnUnitT1);
            DTCRtnUnitT1.ParentVariableProfile = PlanVars.DTCRtnUnit;

            TimeTotalVariableProfileList.Add(DTCBODlrT1);
            DTCBODlrT1.ParentVariableProfile = PlanVars.DTCBODlr;

            TimeTotalVariableProfileList.Add(DTCBOCostDlrT1);
            DTCBOCostDlrT1.ParentVariableProfile = PlanVars.DTCBOCostDlr;

            TimeTotalVariableProfileList.Add(DTCBOPctT1);
            DTCBOPctT1.ParentVariableProfile = PlanVars.DTCBOPct;

            TimeTotalVariableProfileList.Add(DTCCancelUnitT1);
            DTCCancelUnitT1.ParentVariableProfile = PlanVars.DTCCancelUnit;

            TimeTotalVariableProfileList.Add(DTCCancelDlrT1);
            DTCCancelDlrT1.ParentVariableProfile = PlanVars.DTCCancelDlr;

            TimeTotalVariableProfileList.Add(DTCCancelPctT1);
            DTCCancelPctT1.ParentVariableProfile = PlanVars.DTCCancelPct;

            TimeTotalVariableProfileList.Add(DTCCancelCostDlrT1);
            DTCCancelCostDlrT1.ParentVariableProfile = PlanVars.DTCCancelCostDlr;

            TimeTotalVariableProfileList.Add(DTCGrossDmdUnitT1);
            DTCGrossDmdUnitT1.ParentVariableProfile = PlanVars.DTCGrossDmdUnit;

            TimeTotalVariableProfileList.Add(DTCGrossDmdDlrT1);
            DTCGrossDmdDlrT1.ParentVariableProfile = PlanVars.DTCGrossDmdDlr;

            TimeTotalVariableProfileList.Add(DTCGrossDmdAURT1);
            DTCGrossDmdAURT1.ParentVariableProfile = PlanVars.DTCGrossDmdAUR;

            TimeTotalVariableProfileList.Add(DTCGrossDmdAUCT1);
            DTCGrossDmdAUCT1.ParentVariableProfile = PlanVars.DTCGrossDmdAUC;

            TimeTotalVariableProfileList.Add(DTCGrossDmdCostDlrT1);
            DTCGrossDmdCostDlrT1.ParentVariableProfile = PlanVars.DTCGrossDmdCostDlr;

            TimeTotalVariableProfileList.Add(DTCNetDmdUnitT1);
            DTCNetDmdUnitT1.ParentVariableProfile = PlanVars.DTCNetDmdUnit;

            TimeTotalVariableProfileList.Add(DTCNetDmdDlrT1);
            DTCNetDmdDlrT1.ParentVariableProfile = PlanVars.DTCNetDmdDlr;

            TimeTotalVariableProfileList.Add(DTCNetDmdCostDlrT1);
            DTCNetDmdCostDlrT1.ParentVariableProfile = PlanVars.DTCNetDmdCostDlr;

            TimeTotalVariableProfileList.Add(DTCNetDmdPctT1);
            DTCNetDmdPctT1.ParentVariableProfile = PlanVars.DTCNetDmdPct;

            TimeTotalVariableProfileList.Add(DTCNetDmdAURT1);
            DTCNetDmdAURT1.ParentVariableProfile = PlanVars.DTCNetDmdAUR;

            TimeTotalVariableProfileList.Add(DTCNetDmdAUCT1);
            DTCNetDmdAUCT1.ParentVariableProfile = PlanVars.DTCNetDmdAUC;

            TimeTotalVariableProfileList.Add(DTCNetDmdGMDlrT1);
            DTCNetDmdGMDlrT1.ParentVariableProfile = PlanVars.DTCNetDmdGMDlr;

            TimeTotalVariableProfileList.Add(DTCNetDmdGMPctT1);
            DTCNetDmdGMPctT1.ParentVariableProfile = PlanVars.DTCNetDmdGMPct;

            TimeTotalVariableProfileList.Add(DTCRtnDlrT1);
            DTCRtnDlrT1.ParentVariableProfile = PlanVars.DTCRtnDlr;

            TimeTotalVariableProfileList.Add(DTCRtnCostDlrT1);
            DTCRtnCostDlrT1.ParentVariableProfile = PlanVars.DTCRtnCostDlr;

            TimeTotalVariableProfileList.Add(DTCRtnPctT1);
            DTCRtnPctT1.ParentVariableProfile = PlanVars.DTCRtnPct;

            TimeTotalVariableProfileList.Add(DTCAvgOrderT1);
            DTCAvgOrderT1.ParentVariableProfile = PlanVars.DTCAvgOrder;

            TimeTotalVariableProfileList.Add(DTCNoOfOrdersT1);
            DTCNoOfOrdersT1.ParentVariableProfile = PlanVars.DTCNoOfOrders;

            TimeTotalVariableProfileList.Add(DTCVisitsT1);
            DTCVisitsT1.ParentVariableProfile = PlanVars.DTCVisits;

            TimeTotalVariableProfileList.Add(DTCPlacementT1);
            DTCPlacementT1.ParentVariableProfile = PlanVars.DTCPlacement;

            TimeTotalVariableProfileList.Add(DTCSlsStkRatioT1);
            DTCSlsStkRatioT1.ParentVariableProfile = PlanVars.DTCSlsStkRatio;

            TimeTotalVariableProfileList.Add(DTCSellThruT1);
            DTCSellThruT1.ParentVariableProfile = PlanVars.DTCSellThru;

            TimeTotalVariableProfileList.Add(DTCSpaceT1);
            DTCSpaceT1.ParentVariableProfile = PlanVars.DTCSpace;

            TimeTotalVariableProfileList.Add(DTCBOUnitT1);
            DTCBOUnitT1.ParentVariableProfile = PlanVars.DTCBOUnit;

            TimeTotalVariableProfileList.Add(TotStrSalesUnitPctTTLT1);
            TotStrSalesUnitPctTTLT1.ParentVariableProfile = PlanVars.TotStrSalesUnitPctTTL;

            TimeTotalVariableProfileList.Add(TotStrSalesCostDlrPctTTLT1);
            TotStrSalesCostDlrPctTTLT1.ParentVariableProfile = PlanVars.TotStrSalesCostDlrPctTTL;

            TimeTotalVariableProfileList.Add(TotDTCSalesUnitPctTTLT1);
            TotDTCSalesUnitPctTTLT1.ParentVariableProfile = PlanVars.TotDTCSalesUnitPctTTL;

            TimeTotalVariableProfileList.Add(TotDTCSalesCostDlrPctTTLT1);
            TotDTCSalesCostDlrPctTTLT1.ParentVariableProfile = PlanVars.TotDTCSalesCostDlrPctTTL;

            TimeTotalVariableProfileList.Add(AdjCostDlrTotT1);
            AdjCostDlrTotT1.ParentVariableProfile = PlanVars.AdjCostDlrTot;

            TimeTotalVariableProfileList.Add(ShrinkCostDlrTotT1);
            ShrinkCostDlrTotT1.ParentVariableProfile = PlanVars.ShrinkCostDlrTot;

            TimeTotalVariableProfileList.Add(TotEinvCostDlrT1);
            TotEinvCostDlrT1.ParentVariableProfile = PlanVars.TotEinvCostDlr;

            TimeTotalVariableProfileList.Add(TotEinvCostDlrT2);
            TotEinvCostDlrT2.ParentVariableProfile = PlanVars.TotEinvCostDlr;

            TimeTotalVariableProfileList.Add(TotEinvCostDlrT3);
            TotEinvCostDlrT3.ParentVariableProfile = PlanVars.TotEinvCostDlr;

            TimeTotalVariableProfileList.Add(DTCGrossDmdGMDlrT1);
            DTCGrossDmdGMDlrT1.ParentVariableProfile = PlanVars.DTCGrossDmdGMDlr;

            TimeTotalVariableProfileList.Add(DTCGrsDmdGMPctT1);
            DTCGrsDmdGMPctT1.ParentVariableProfile = PlanVars.DTCGrsDmdGMPct;

            TimeTotalVariableProfileList.Add(DiscountPctT1);
            DiscountPctT1.ParentVariableProfile = PlanVars.DiscountPct;

            TimeTotalVariableProfileList.Add(DiscountDlrT1);
            DiscountDlrT1.ParentVariableProfile = PlanVars.DiscountDlr;

            TimeTotalVariableProfileList.Add(AfterDiscountDlrT1);
            AfterDiscountDlrT1.ParentVariableProfile = PlanVars.AfterDiscountDlr;

            TimeTotalVariableProfileList.Add(AfterDiscountAURT1);
            AfterDiscountAURT1.ParentVariableProfile = PlanVars.AfterDiscountAUR;

            TimeTotalVariableProfileList.Add(FreightCostPerUnitT1);
            FreightCostPerUnitT1.ParentVariableProfile = PlanVars.FreightCostPerUnit;

            TimeTotalVariableProfileList.Add(TotFreightCostDlrT1);
            TotFreightCostDlrT1.ParentVariableProfile = PlanVars.TotFreightCostDlr;

            TimeTotalVariableProfileList.Add(AfterDiscGMDlrT1);
            AfterDiscGMDlrT1.ParentVariableProfile = PlanVars.AfterDiscGMDlr;

            TimeTotalVariableProfileList.Add(VATPctT1);
            VATPctT1.ParentVariableProfile = PlanVars.VATPct;

            TimeTotalVariableProfileList.Add(VATDlrT1);
            VATDlrT1.ParentVariableProfile = PlanVars.VATDlr;

            TimeTotalVariableProfileList.Add(CurrXchgPctT1);
            CurrXchgPctT1.ParentVariableProfile = PlanVars.CurrXchgPct;

            TimeTotalVariableProfileList.Add(ConvertedSalesDlrT1);
            ConvertedSalesDlrT1.ParentVariableProfile = PlanVars.ConvertedSalesDlr;

            TimeTotalVariableProfileList.Add(SaleswithoutVATDlrT1);
            SaleswithoutVATDlrT1.ParentVariableProfile = PlanVars.SaleswithoutVATDlr;

            TimeTotalVariableProfileList.Add(TotEinvAUCT1);
            TotEinvAUCT1.ParentVariableProfile = PlanVars.TotEinvAUC;

            TimeTotalVariableProfileList.Add(TotEinvAUCT2);
            TotEinvAUCT2.ParentVariableProfile = PlanVars.TotEinvAUC;

            TimeTotalVariableProfileList.Add(TotEinvAUCT3);
            TotEinvAUCT3.ParentVariableProfile = PlanVars.TotEinvAUC;

            TimeTotalVariableProfileList.Add(Commit1UnitT1);
            Commit1UnitT1.ParentVariableProfile = PlanVars.Commit1Unit;

            TimeTotalVariableProfileList.Add(Commit1CostDlrT1);
            Commit1CostDlrT1.ParentVariableProfile = PlanVars.Commit1CostDlr;

            TimeTotalVariableProfileList.Add(Commit1AUCT1);
            Commit1AUCT1.ParentVariableProfile = PlanVars.Commit1AUC;

            TimeTotalVariableProfileList.Add(Commit2UnitT1);
            Commit2UnitT1.ParentVariableProfile = PlanVars.Commit2Unit;

            TimeTotalVariableProfileList.Add(Commit2CostDlrT1);
            Commit2CostDlrT1.ParentVariableProfile = PlanVars.Commit2CostDlr;

            TimeTotalVariableProfileList.Add(Commit2AUCT1);
            Commit2AUCT1.ParentVariableProfile = PlanVars.Commit2AUC;

            TimeTotalVariableProfileList.Add(Commit3UnitT1);
            Commit3UnitT1.ParentVariableProfile = PlanVars.Commit3Unit;

            TimeTotalVariableProfileList.Add(Commit3AUCT1);
            Commit3AUCT1.ParentVariableProfile = PlanVars.Commit3AUC;

            TimeTotalVariableProfileList.Add(Commit3CostDlrT1);
            Commit3CostDlrT1.ParentVariableProfile = PlanVars.Commit3CostDlr;

            TimeTotalVariableProfileList.Add(SquareSpaceT1);
            SquareSpaceT1.ParentVariableProfile = PlanVars.SquareSpace;

            TimeTotalVariableProfileList.Add(LinearSpaceT1);
            LinearSpaceT1.ParentVariableProfile = PlanVars.LinearSpace;

            TimeTotalVariableProfileList.Add(FloorSpaceT1);
            FloorSpaceT1.ParentVariableProfile = PlanVars.FloorSpace;

            TimeTotalVariableProfileList.Add(DTCTransactionsT1);
            DTCTransactionsT1.ParentVariableProfile = PlanVars.DTCTransactions;

            TimeTotalVariableProfileList.Add(SpaceConvPctT1);
            SpaceConvPctT1.ParentVariableProfile = PlanVars.SpaceConvPct;

            TimeTotalVariableProfileList.Add(SalesUperSqSpaceT1);
            SalesUperSqSpaceT1.ParentVariableProfile = PlanVars.SalesUperSqSpace;

            TimeTotalVariableProfileList.Add(SalesUperLinearSpaceT1);
            SalesUperLinearSpaceT1.ParentVariableProfile = PlanVars.SalesUperLinearSpace;

            TimeTotalVariableProfileList.Add(DensityUT1);
            DensityUT1.ParentVariableProfile = PlanVars.DensityU;

            TimeTotalVariableProfileList.Add(SalesperSpaceUT1);
            SalesperSpaceUT1.ParentVariableProfile = PlanVars.SalesperSpaceU;

            TimeTotalVariableProfileList.Add(TotStrSalesCDlrperSqSpaceT1);
            TotStrSalesCDlrperSqSpaceT1.ParentVariableProfile = PlanVars.TotStrSalesCDlrperSqSpace;

            TimeTotalVariableProfileList.Add(TotStrSalesDlrperSqSpaceT1);
            TotStrSalesDlrperSqSpaceT1.ParentVariableProfile = PlanVars.TotStrSalesDlrperSqSpace;

            TimeTotalVariableProfileList.Add(TotStrSalesCDlrperLinearSpaceT1);
            TotStrSalesCDlrperLinearSpaceT1.ParentVariableProfile = PlanVars.TotStrSalesCDlrperLinearSpace;

            TimeTotalVariableProfileList.Add(TotStrSalesDlrperLinearSpaceT1);
            TotStrSalesDlrperLinearSpaceT1.ParentVariableProfile = PlanVars.TotStrSalesDlrperLinearSpace;

            TimeTotalVariableProfileList.Add(DTCPlacedOrdersDlrT1);
            DTCPlacedOrdersDlrT1.ParentVariableProfile = PlanVars.DTCPlacedOrdersDlr;

            TimeTotalVariableProfileList.Add(DTCConvPctT1);
            DTCConvPctT1.ParentVariableProfile = PlanVars.DTCConvPct;

        }
    }
    /// <summary>
    /// The PlanQuantityVariables class is where the quantity variables are defined.
    /// </summary>
    /// <remarks>
    /// This class is where the quantity variables are defined.
    /// </remarks>
    public class PlanQuantityVariables : BasePlanQuantityVariables
    {
        public PlanQuantityVariables() : 
                base()
        {
        }
        protected override void InitializeVariables()
        {
            base.InitializeVariables();
        }
    }
    /// <summary>
    /// The DefaultPlanChangeMethods class is where the change routines are defined.
    /// </summary>
    /// <remarks>
    /// This class is where the change routines are defined.
    /// </remarks>
    public class DefaultPlanChangeMethods : BasePlanChangeMethods
    {
        public PlanChangeMethodProfile Change_CompPctTtl;
        public PlanChangeMethodProfile Change_SalesDlrT1;
        public PlanChangeMethodProfile Change_TotMDPctT1;
        public PlanChangeMethodProfile Change_DTCGrossDmdCostDlr;
        public PlanChangeMethodProfile Change_NonCompPctTtl;
        public PlanChangeMethodProfile Change_DTCNoOfOrders;
        public PlanChangeMethodProfile Change_OpenStores;
        public PlanChangeMethodProfile Change_InventoryTotalUnits_Custom;
        public PlanChangeMethodProfile Change_InventoryRegularUnits_Custom;
        public PlanChangeMethodProfile Change_DTCFWOSUnit;
        public PlanChangeMethodProfile Change_TotBinvAUC;
        public PlanChangeMethodProfile Change_TotBinvCostDlr;
        public PlanChangeMethodProfile Change_ShrinkPctTot;
        public PlanChangeMethodProfile Change_OnOrderUnit;
        public PlanChangeMethodProfile Change_OnOrderAUR;
        public PlanChangeMethodProfile Change_OnOrderAUC;
        public PlanChangeMethodProfile Change_OnOrderCostDlr;
        public PlanChangeMethodProfile Change_OnOrderDlr;
        public PlanChangeMethodProfile Change_TotIMUPct;
        public PlanChangeMethodProfile Change_TotRecCostDlr;
        public PlanChangeMethodProfile Change_TotRecUnit;
        public PlanChangeMethodProfile Change_ReceiptAUCTot;
        public PlanChangeMethodProfile Change_DTCGrossDmdDlr;
        public PlanChangeMethodProfile Change_DTCGrossDmdUnit;
        public PlanChangeMethodProfile Change_DTCGrossDmdAUC;
        public PlanChangeMethodProfile Change_DTCGrossDmdAUR;
        public PlanChangeMethodProfile Change_DTCGrsDmdGMPct;
        public PlanChangeMethodProfile Change_SalesTotalUnits_Custom;
        public PlanChangeMethodProfile Change_TotSalesDlr;
        public PlanChangeMethodProfile Change_TotStrSalesDlr;
        public PlanChangeMethodProfile Change_TotSalesUnit;
        public PlanChangeMethodProfile Change_TotStrSalesAUC;
        public PlanChangeMethodProfile Change_TotStrSalesAUR;
        public PlanChangeMethodProfile Change_TotSalesAUC;
        public PlanChangeMethodProfile Change_TotSalesAUR;
        public PlanChangeMethodProfile Change_GrossMarginPctStr;
        public PlanChangeMethodProfile Change_GrossMarginPctTot;
        public PlanChangeMethodProfile Change_TotStrSalesCostDlr;
        public PlanChangeMethodProfile Change_TotSalesCostDlr;
        public PlanChangeMethodProfile Change_DTCNetDmdDlr;
        public PlanChangeMethodProfile Change_DTCNetDmdCostDlr;
        public PlanChangeMethodProfile Change_DTCNetDmdUnit;
        public PlanChangeMethodProfile Change_DTCNetDmdAUR;
        public PlanChangeMethodProfile Change_DTCNetDmdAUC;
        public PlanChangeMethodProfile Change_DTCNetDmdGMPct;
        public PlanChangeMethodProfile Change_TotDTCSalesCostDlrPctTTL;
        public PlanChangeMethodProfile Change_TotStrSalesCostDlrPctTTL;
        public PlanChangeMethodProfile Change_TotDTCSalesUnitPctTTL;
        public PlanChangeMethodProfile Change_TotStrSalesUnitPctTTL;
        public PlanChangeMethodProfile Change_DiscountPct;
        public PlanChangeMethodProfile Change_FreightCostPerUnit;
        public PlanChangeMethodProfile Change_VATPct;
        public PlanChangeMethodProfile Change_CurrXchgPct;
        public PlanChangeMethodProfile Change_TotEinvUnits;
        public PlanChangeMethodProfile Change_TotEinvCostDlr;
        public PlanChangeMethodProfile Change_TotEinvAUC;
        public PlanChangeMethodProfile Change_AdjUntiPctTot;
        public PlanChangeMethodProfile Change_DTCCancelPct;
        public PlanChangeMethodProfile Change_DTCBOPct;
        public PlanChangeMethodProfile Change_DTCRtnPct;
        public PlanChangeMethodProfile Change_DTCNetDmdPct;
        public PlanChangeMethodProfile Change_Commit1Unit;
        public PlanChangeMethodProfile Change_Commit2Unit;
        public PlanChangeMethodProfile Change_Commit3Unit;
        public PlanChangeMethodProfile Change_Commit1CostDlr;
        public PlanChangeMethodProfile Change_Commit2CostDlr;
        public PlanChangeMethodProfile Change_Commit3CostDlr;
        public PlanChangeMethodProfile Change_SalesRegularUnits_Custom;
        public PlanChangeMethodProfile Change_SalesRegPromoUnits_Custom;
        public PlanChangeMethodProfile Change_SpaceConvPct;
		public DefaultComputations DefaultComputations
		{
			get
			{
				return (DefaultComputations)BasePlanComputations;
			}
		}

        public DefaultPlanChangeMethods(BasePlanComputations aBasePlanComputations) : 
                base(aBasePlanComputations)
        {
            Change_CompPctTtl = new clsChange_CompPctTtl(aBasePlanComputations, NextSequence);
            Change_SalesDlrT1 = new clsChange_SalesDlrT1(aBasePlanComputations, NextSequence);
            Change_TotMDPctT1 = new clsChange_TotMDPctT1(aBasePlanComputations, NextSequence);
            Change_DTCGrossDmdCostDlr = new clsChange_DTCGrossDmdCostDlr(aBasePlanComputations, NextSequence);
            Change_NonCompPctTtl = new clsChange_NonCompPctTtl(aBasePlanComputations, NextSequence);
            Change_DTCNoOfOrders = new clsChange_DTCNoOfOrders(aBasePlanComputations, NextSequence);
            Change_OpenStores = new clsChange_OpenStores(aBasePlanComputations, NextSequence);
            Change_InventoryTotalUnits_Custom = new clsChange_InventoryTotalUnits_Custom(aBasePlanComputations, NextSequence);
            Change_InventoryRegularUnits_Custom = new clsChange_InventoryRegularUnits_Custom(aBasePlanComputations, NextSequence);
            Change_DTCFWOSUnit = new clsChange_DTCFWOSUnit(aBasePlanComputations, NextSequence);
            Change_TotBinvAUC = new clsChange_TotBinvAUC(aBasePlanComputations, NextSequence);
            Change_TotBinvCostDlr = new clsChange_TotBinvCostDlr(aBasePlanComputations, NextSequence);
            Change_ShrinkPctTot = new clsChange_ShrinkPctTot(aBasePlanComputations, NextSequence);
            Change_OnOrderUnit = new clsChange_OnOrderUnit(aBasePlanComputations, NextSequence);
            Change_OnOrderAUR = new clsChange_OnOrderAUR(aBasePlanComputations, NextSequence);
            Change_OnOrderAUC = new clsChange_OnOrderAUC(aBasePlanComputations, NextSequence);
            Change_OnOrderCostDlr = new clsChange_OnOrderCostDlr(aBasePlanComputations, NextSequence);
            Change_OnOrderDlr = new clsChange_OnOrderDlr(aBasePlanComputations, NextSequence);
            Change_TotIMUPct = new clsChange_TotIMUPct(aBasePlanComputations, NextSequence);
            Change_TotRecCostDlr = new clsChange_TotRecCostDlr(aBasePlanComputations, NextSequence);
            Change_TotRecUnit = new clsChange_TotRecUnit(aBasePlanComputations, NextSequence);
            Change_ReceiptAUCTot = new clsChange_ReceiptAUCTot(aBasePlanComputations, NextSequence);
            Change_DTCGrossDmdDlr = new clsChange_DTCGrossDmdDlr(aBasePlanComputations, NextSequence);
            Change_DTCGrossDmdUnit = new clsChange_DTCGrossDmdUnit(aBasePlanComputations, NextSequence);
            Change_DTCGrossDmdAUC = new clsChange_DTCGrossDmdAUC(aBasePlanComputations, NextSequence);
            Change_DTCGrossDmdAUR = new clsChange_DTCGrossDmdAUR(aBasePlanComputations, NextSequence);
            Change_DTCGrsDmdGMPct = new clsChange_DTCGrsDmdGMPct(aBasePlanComputations, NextSequence);
            Change_SalesTotalUnits_Custom = new clsChange_SalesTotalUnits_Custom(aBasePlanComputations, NextSequence);
            Change_TotSalesDlr = new clsChange_TotSalesDlr(aBasePlanComputations, NextSequence);
            Change_TotStrSalesDlr = new clsChange_TotStrSalesDlr(aBasePlanComputations, NextSequence);
            Change_TotSalesUnit = new clsChange_TotSalesUnit(aBasePlanComputations, NextSequence);
            Change_TotStrSalesAUC = new clsChange_TotStrSalesAUC(aBasePlanComputations, NextSequence);
            Change_TotStrSalesAUR = new clsChange_TotStrSalesAUR(aBasePlanComputations, NextSequence);
            Change_TotSalesAUC = new clsChange_TotSalesAUC(aBasePlanComputations, NextSequence);
            Change_TotSalesAUR = new clsChange_TotSalesAUR(aBasePlanComputations, NextSequence);
            Change_GrossMarginPctStr = new clsChange_GrossMarginPctStr(aBasePlanComputations, NextSequence);
            Change_GrossMarginPctTot = new clsChange_GrossMarginPctTot(aBasePlanComputations, NextSequence);
            Change_TotStrSalesCostDlr = new clsChange_TotStrSalesCostDlr(aBasePlanComputations, NextSequence);
            Change_TotSalesCostDlr = new clsChange_TotSalesCostDlr(aBasePlanComputations, NextSequence);
            Change_DTCNetDmdDlr = new clsChange_DTCNetDmdDlr(aBasePlanComputations, NextSequence);
            Change_DTCNetDmdCostDlr = new clsChange_DTCNetDmdCostDlr(aBasePlanComputations, NextSequence);
            Change_DTCNetDmdUnit = new clsChange_DTCNetDmdUnit(aBasePlanComputations, NextSequence);
            Change_DTCNetDmdAUR = new clsChange_DTCNetDmdAUR(aBasePlanComputations, NextSequence);
            Change_DTCNetDmdAUC = new clsChange_DTCNetDmdAUC(aBasePlanComputations, NextSequence);
            Change_DTCNetDmdGMPct = new clsChange_DTCNetDmdGMPct(aBasePlanComputations, NextSequence);
            Change_TotDTCSalesCostDlrPctTTL = new clsChange_TotDTCSalesCostDlrPctTTL(aBasePlanComputations, NextSequence);
            Change_TotStrSalesCostDlrPctTTL = new clsChange_TotStrSalesCostDlrPctTTL(aBasePlanComputations, NextSequence);
            Change_TotDTCSalesUnitPctTTL = new clsChange_TotDTCSalesUnitPctTTL(aBasePlanComputations, NextSequence);
            Change_TotStrSalesUnitPctTTL = new clsChange_TotStrSalesUnitPctTTL(aBasePlanComputations, NextSequence);
            Change_DiscountPct = new clsChange_DiscountPct(aBasePlanComputations, NextSequence);
            Change_FreightCostPerUnit = new clsChange_FreightCostPerUnit(aBasePlanComputations, NextSequence);
            Change_VATPct = new clsChange_VATPct(aBasePlanComputations, NextSequence);
            Change_CurrXchgPct = new clsChange_CurrXchgPct(aBasePlanComputations, NextSequence);
            Change_TotEinvUnits = new clsChange_TotEinvUnits(aBasePlanComputations, NextSequence);
            Change_TotEinvCostDlr = new clsChange_TotEinvCostDlr(aBasePlanComputations, NextSequence);
            Change_TotEinvAUC = new clsChange_TotEinvAUC(aBasePlanComputations, NextSequence);
            Change_AdjUntiPctTot = new clsChange_AdjUntiPctTot(aBasePlanComputations, NextSequence);
            Change_DTCCancelPct = new clsChange_DTCCancelPct(aBasePlanComputations, NextSequence);
            Change_DTCBOPct = new clsChange_DTCBOPct(aBasePlanComputations, NextSequence);
            Change_DTCRtnPct = new clsChange_DTCRtnPct(aBasePlanComputations, NextSequence);
            Change_DTCNetDmdPct = new clsChange_DTCNetDmdPct(aBasePlanComputations, NextSequence);
            Change_Commit1Unit = new clsChange_Commit1Unit(aBasePlanComputations, NextSequence);
            Change_Commit2Unit = new clsChange_Commit2Unit(aBasePlanComputations, NextSequence);
            Change_Commit3Unit = new clsChange_Commit3Unit(aBasePlanComputations, NextSequence);
            Change_Commit1CostDlr = new clsChange_Commit1CostDlr(aBasePlanComputations, NextSequence);
            Change_Commit2CostDlr = new clsChange_Commit2CostDlr(aBasePlanComputations, NextSequence);
            Change_Commit3CostDlr = new clsChange_Commit3CostDlr(aBasePlanComputations, NextSequence);
            Change_SalesRegularUnits_Custom = new clsChange_SalesRegularUnits_Custom(aBasePlanComputations, NextSequence);
            Change_SalesRegPromoUnits_Custom = new clsChange_SalesRegPromoUnits_Custom(aBasePlanComputations, NextSequence);
            Change_SpaceConvPct = new clsChange_SpaceConvPct(aBasePlanComputations, NextSequence);
        }
        protected class clsChange_CompPctTtl : PlanChangeMethodProfile
        {
			public clsChange_CompPctTtl(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "CompPctTtl Change Method")
			{
			}

            public override void Execute(ComputationSchedule aCompSchd, PlanCellReference aPlanCellRef)
            {
                try
                {
                    BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_CompSlsDlr_PCT, ((PlanVariables)BasePlanVariables).CompSlsDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesRegPromoUnits);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_NonCompSlsDlr_Difference, ((PlanVariables)BasePlanVariables).NonCompSlsDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).NonCompPctTtl);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesperSpaceU);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesUperSqSpace);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesUperLinearSpace);
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        protected class clsChange_SalesDlrT1 : PlanChangeMethodProfile
        {
			public clsChange_SalesDlrT1(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "SalesDlrT1 Change Method")
			{
			}

            public override void Execute(ComputationSchedule aCompSchd, PlanCellReference aPlanCellRef)
            {
                try
                {
                    BasePlanToolBox.InsertSpread(aCompSchd, aPlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).SalesDlrT1, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Spread_Period);
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        protected class clsChange_TotMDPctT1 : PlanChangeMethodProfile
        {
			public clsChange_TotMDPctT1(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "TotMDPctT1 Change Method")
			{
			}

            public override void Execute(ComputationSchedule aCompSchd, PlanCellReference aPlanCellRef)
            {
                try
                {
                    BasePlanToolBox.InsertSpread(aCompSchd, aPlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).TotMDDlrT1, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Spread_Period);
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        protected class clsChange_DTCGrossDmdCostDlr : PlanChangeMethodProfile
        {
			public clsChange_DTCGrossDmdCostDlr(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "DTCGrossDmdCostDlr Change Method")
			{
			}

            public override void Execute(ComputationSchedule aCompSchd, PlanCellReference aPlanCellRef)
            {
                int startTimeId;
                int endTimeId;
                int currTimeId;
                int currPlusOneTimeId;
                try
                {
                    startTimeId = BasePlanToolBox.GetBeginPlanTimeDetail(aPlanCellRef);
                    endTimeId = BasePlanToolBox.GetEndPlanTimeDetail(aPlanCellRef);
                    currTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aPlanCellRef);
                    currPlusOneTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aPlanCellRef, 1);
                    BasePlanToolBox.InsertSpread(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCGrossDmdCostDlr, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Spread_DTCGrossDmdCostDlr_SPREAD);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCGrossDmdUnit_AUC, ((PlanVariables)BasePlanVariables).DTCGrossDmdUnit);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCGrossDmdDlr_AUR, ((PlanVariables)BasePlanVariables).DTCGrossDmdDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCGrossDmdGMDlr_DIFF, ((PlanVariables)BasePlanVariables).DTCGrossDmdGMDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_AdjCostDlrTot_PCT, ((PlanVariables)BasePlanVariables).AdjCostDlrTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_AdjUnitsTot_AUC_BINV, ((PlanVariables)BasePlanVariables).AdjUnitsTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_ShrinkCostDlrTot_PCT, ((PlanVariables)BasePlanVariables).ShrinkCostDlrTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_ShrinkUnitsTot_AUC_BINV, ((PlanVariables)BasePlanVariables).ShrinkUnitsTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotBinvCostDlr_PLUG, ((PlanVariables)BasePlanVariables).TotBinvCostDlr, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_InventoryTotalUnits_PLUG, ((PlanVariables)BasePlanVariables).InventoryTotalUnits, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotBinvAUC, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesCostDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotEinvCostDlr_FLOW, ((PlanVariables)BasePlanVariables).TotEinvCostDlr, currTimeId,endTimeId);
					BasePlanToolBox.InsertSpread(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCGrossDmdUnit, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Spread_DTCGrossDmdUnit_SPREAD);
					BasePlanToolBox.InsertSpread(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesTotalUnits, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Spread_SalesTotalUnits_PREAD_REG_CLEAR);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesTotalUnits);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotEinvUnits_FLOW, ((PlanVariables)BasePlanVariables).TotEinvUnits, currTimeId,endTimeId);
					BasePlanToolBox.InsertSpread(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCGrossDmdDlr, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Spread_DTCGrossDmdDlr_SPREAD);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DiscountDlr_Calc, ((PlanVariables)BasePlanVariables).DiscountDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_AfterDiscountDlr_Calc, ((PlanVariables)BasePlanVariables).AfterDiscountDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).AfterDiscountAUR);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotFreightCostDlr_Calc, ((PlanVariables)BasePlanVariables).TotFreightCostDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).AfterDiscGMDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrAvgINVUnit, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrAvgEndINVUnit, currTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_VATDlr_Calc, ((PlanVariables)BasePlanVariables).VATDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_SaleswithoutVATDlr_Calc, ((PlanVariables)BasePlanVariables).SaleswithoutVATDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_ConvertedSalesDlr_Calc, ((PlanVariables)BasePlanVariables).ConvertedSalesDlr);
					BasePlanToolBox.InsertSpread(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).InventoryTotalUnits, currPlusOneTimeId,endTimeId, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Spread_InventoryTotalUnits_Spread);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DensityU, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCAvgOrder);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCFWOSUnit, startTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCGrsDmdGMPct);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdAUC);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdAUR);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCNetDmdGMDlr_DIFF, ((PlanVariables)BasePlanVariables).DTCNetDmdGMDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdGMPct);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCSlsStkRatio, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCSellThru, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesRegPromoUnits);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesUperLinearSpace);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesUperSqSpace);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesperSpaceU);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).ForwardWOSTotal, startTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotDTCSalesUnitPctTTL);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotDTCSalesCostDlrPctTTL);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotEinvAUC, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotFWOSUnit, startTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).GrossMarginTotDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).GrossMarginPctTot);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesAUC);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesAUR);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SellThruUnitPctTot, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).GrossMarginPctStr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesUnitPctTTL);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesCostDlrPctTTL);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCPlacedOrdersDlr);
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        protected class clsChange_NonCompPctTtl : PlanChangeMethodProfile
        {
			public clsChange_NonCompPctTtl(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "NonCompPctTtl Change Method")
			{
			}

            public override void Execute(ComputationSchedule aCompSchd, PlanCellReference aPlanCellRef)
            {
                try
                {
                    BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_NonCompSlsDlr_PCT, ((PlanVariables)BasePlanVariables).NonCompSlsDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesRegPromoUnits);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_CompSlsDlr_Differerence, ((PlanVariables)BasePlanVariables).CompSlsDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).CompPctTtl);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesUperLinearSpace);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesUperSqSpace);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesperSpaceU);
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        protected class clsChange_DTCNoOfOrders : PlanChangeMethodProfile
        {
			public clsChange_DTCNoOfOrders(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "DTCNoOfOrders Change Method")
			{
			}

            public override void Execute(ComputationSchedule aCompSchd, PlanCellReference aPlanCellRef)
            {
                try
                {
                    BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCAvgOrder);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCPlacedOrdersDlr);
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        protected class clsChange_OpenStores : PlanChangeMethodProfile
        {
			public clsChange_OpenStores(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "OpenStores Change Method")
			{
			}

            public override void Execute(ComputationSchedule aCompSchd, PlanCellReference aPlanCellRef)
            {
                int endTimeId;
                int currPlusOneTimeId;
                try
                {
                    endTimeId = BasePlanToolBox.GetEndPlanTimeDetail(aPlanCellRef);
                    currPlusOneTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aPlanCellRef, 1);
                    BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrAvgINVUnit);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).AvgStrSlsUnit);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).AvgStrSlsDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrAvgEndINVUnit);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_AdjCostDlrTot_PCT, ((PlanVariables)BasePlanVariables).AdjCostDlrTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_AdjUnitsTot_AUC_BINV, ((PlanVariables)BasePlanVariables).AdjUnitsTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_ShrinkCostDlrTot_PCT, ((PlanVariables)BasePlanVariables).ShrinkCostDlrTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_ShrinkUnitsTot_AUC_BINV, ((PlanVariables)BasePlanVariables).ShrinkUnitsTot, currPlusOneTimeId,endTimeId);
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        protected class clsChange_InventoryTotalUnits_Custom : PlanChangeMethodProfile
        {
			public clsChange_InventoryTotalUnits_Custom(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "InventoryTotalUnits Custom Change Method")
			{
			}

            public override void Execute(ComputationSchedule aCompSchd, PlanCellReference aPlanCellRef)
            {
                int endTimeId;
                int currTimeId;
                int currMinusOneTimeId;
                int currPlusOneTimeId;
                try
                {
                    endTimeId = BasePlanToolBox.GetEndPlanTimeDetail(aPlanCellRef);
                    currTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aPlanCellRef);
                    currMinusOneTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aPlanCellRef, -1);
                    currPlusOneTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aPlanCellRef, 1);
                    if ( BasePlanToolBox.isChain(aPlanCellRef) )
                    {
                        BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_AdjCostDlrTot_PCT, ((PlanVariables)BasePlanVariables).AdjCostDlrTot, currTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_AdjUnitsTot_AUC_BINV, ((PlanVariables)BasePlanVariables).AdjUnitsTot, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotBinvAUC, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotBinvCostDlr_AUC, ((PlanVariables)BasePlanVariables).TotBinvCostDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_ShrinkCostDlrTot_PCT, ((PlanVariables)BasePlanVariables).ShrinkCostDlrTot, currTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_ShrinkUnitsTot_AUC_BINV, ((PlanVariables)BasePlanVariables).ShrinkUnitsTot, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotRecUnit, currMinusOneTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_InventoryTotalUnits_FLOW, ((PlanVariables)BasePlanVariables).InventoryTotalUnits, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertSpread(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).InventoryTotalUnits, currTimeId,endTimeId, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Spread_InventoryTotalUnits_Spread);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrAvgINVUnit, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCFWOSUnit, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCSlsStkRatio, currTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotEinvUnits_PLUG, ((PlanVariables)BasePlanVariables).TotEinvUnits, currMinusOneTimeId,currTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCSellThru, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).ForwardWOSTotal, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotFWOSUnit, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SellThruUnitPctTot, currTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotEinvUnits_FLOW, ((PlanVariables)BasePlanVariables).TotEinvUnits, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotRecCostDlr, currMinusOneTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotBinvCostDlr_FLOW, ((PlanVariables)BasePlanVariables).TotBinvCostDlr, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).OTBUnit, currMinusOneTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).OTBUnitCum, currMinusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).OTBCostDlr, currMinusOneTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).OTBCostDlrCum, currMinusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotEinvCostDlr_PLUG, ((PlanVariables)BasePlanVariables).TotEinvCostDlr, currMinusOneTimeId,currTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).ReceiptAUCTot, currMinusOneTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotEinvCostDlr_FLOW, ((PlanVariables)BasePlanVariables).TotEinvCostDlr, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotEinvAUC, currMinusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrAvgEndINVUnit, currMinusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DensityU, currTimeId,endTimeId);
                    }
                    if ( BasePlanToolBox.isStore(aPlanCellRef) )
                    {
                        BasePlanToolBox.InsertSpread(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).InventoryTotalUnits, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Spread_InventoryTotalUnits_Spread);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotRecUnit, currMinusOneTimeId,currTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotBinvCostDlr_AUC, ((PlanVariables)BasePlanVariables).TotBinvCostDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotRecCostDlr_AUC, ((PlanVariables)BasePlanVariables).TotRecCostDlr, currMinusOneTimeId,currTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DensityU);
                    }
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        protected class clsChange_InventoryRegularUnits_Custom : PlanChangeMethodProfile
        {
			public clsChange_InventoryRegularUnits_Custom(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "InventoryRegularUnits Custom Change Method")
			{
			}

            public override void Execute(ComputationSchedule aCompSchd, PlanCellReference aPlanCellRef)
            {
                int endTimeId;
                int currTimeId;
                int currMinusOneTimeId;
                int currPlusOneTimeId;
                try
                {
                    endTimeId = BasePlanToolBox.GetEndPlanTimeDetail(aPlanCellRef);
                    currTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aPlanCellRef);
                    currMinusOneTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aPlanCellRef, -1);
                    currPlusOneTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aPlanCellRef, 1);
                    if ( BasePlanToolBox.isChain(aPlanCellRef) )
                    {
                        BasePlanToolBox.InsertSpread(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).InventoryTotalUnits, currPlusOneTimeId,endTimeId, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Spread_InventoryTotalUnits_Spread);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).InventoryTotalUnits);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DensityU, currTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotBinvCostDlr_AUC, ((PlanVariables)BasePlanVariables).TotBinvCostDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotBinvAUC, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_AdjCostDlrTot_PCT, ((PlanVariables)BasePlanVariables).AdjCostDlrTot, currTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_AdjUnitsTot_AUC_BINV, ((PlanVariables)BasePlanVariables).AdjUnitsTot, currTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_ShrinkCostDlrTot_PCT, ((PlanVariables)BasePlanVariables).ShrinkCostDlrTot, currTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_ShrinkUnitsTot_AUC_BINV, ((PlanVariables)BasePlanVariables).ShrinkUnitsTot, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotRecUnit, currMinusOneTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_InventoryTotalUnits_FLOW, ((PlanVariables)BasePlanVariables).InventoryTotalUnits, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotRecCostDlr, currMinusOneTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotBinvCostDlr_FLOW, ((PlanVariables)BasePlanVariables).TotBinvCostDlr, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrAvgINVUnit, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCFWOSUnit, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCSlsStkRatio, currTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotEinvUnits_PLUG, ((PlanVariables)BasePlanVariables).TotEinvUnits, currMinusOneTimeId,currTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotEinvUnits_FLOW, ((PlanVariables)BasePlanVariables).TotEinvUnits, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCSellThru, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).ForwardWOSTotal, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).OTBUnit, currMinusOneTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).OTBUnitCum, currMinusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).OTBCostDlr, currMinusOneTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).OTBCostDlrCum, currMinusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotEinvCostDlr_PLUG, ((PlanVariables)BasePlanVariables).TotEinvCostDlr, currMinusOneTimeId,currTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotFWOSUnit, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).ReceiptAUCTot, currMinusOneTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SellThruUnitPctTot, currTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotEinvCostDlr_FLOW, ((PlanVariables)BasePlanVariables).TotEinvCostDlr, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotEinvAUC, currMinusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrAvgEndINVUnit, currMinusOneTimeId,endTimeId);
                    }
                    if ( BasePlanToolBox.isStore(aPlanCellRef) )
                    {
                        BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).InventoryTotalUnits, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DensityU, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotRecUnit, currMinusOneTimeId,currTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotBinvCostDlr_AUC, ((PlanVariables)BasePlanVariables).TotBinvCostDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotRecCostDlr_AUC, ((PlanVariables)BasePlanVariables).TotRecCostDlr, currMinusOneTimeId,currTimeId);
                    }
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        protected class clsChange_DTCFWOSUnit : PlanChangeMethodProfile
        {
			public clsChange_DTCFWOSUnit(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "DTCFWOSUnit Change Method")
			{
			}

            public override void Execute(ComputationSchedule aCompSchd, PlanCellReference aPlanCellRef)
            {
                int endTimeId;
                int currTimeId;
                int currMinusOneTimeId;
                int currPlusOneTimeId;
                try
                {
                    endTimeId = BasePlanToolBox.GetEndPlanTimeDetail(aPlanCellRef);
                    currTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aPlanCellRef);
                    currMinusOneTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aPlanCellRef, -1);
                    currPlusOneTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aPlanCellRef, 1);
                    BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_InventoryTotalUnits_DTC_FWOS, ((PlanVariables)BasePlanVariables).InventoryTotalUnits);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCFWOSUnit, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrAvgINVUnit, currTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotEinvUnits_PLUG, ((PlanVariables)BasePlanVariables).TotEinvUnits, currMinusOneTimeId,currTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrAvgEndINVUnit, currMinusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCSlsStkRatio, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCSellThru, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesRegPromoUnits);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).ForwardWOSTotal, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotBinvAUC, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotBinvCostDlr_AUC, ((PlanVariables)BasePlanVariables).TotBinvCostDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_AdjCostDlrTot_PCT, ((PlanVariables)BasePlanVariables).AdjCostDlrTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_AdjUnitsTot_AUC_BINV, ((PlanVariables)BasePlanVariables).AdjUnitsTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_InventoryTotalUnits_FLOW, ((PlanVariables)BasePlanVariables).InventoryTotalUnits, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_ShrinkCostDlrTot_PCT, ((PlanVariables)BasePlanVariables).ShrinkCostDlrTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_ShrinkUnitsTot_AUC_BINV, ((PlanVariables)BasePlanVariables).ShrinkUnitsTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotRecUnit, currMinusOneTimeId);
					BasePlanToolBox.InsertSpread(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).InventoryTotalUnits, currTimeId,endTimeId, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Spread_InventoryTotalUnits_Spread);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotRecCostDlr, currMinusOneTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotBinvCostDlr_FLOW, ((PlanVariables)BasePlanVariables).TotBinvCostDlr, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).OTBUnit, currMinusOneTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).OTBUnitCum, currMinusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).OTBCostDlr, currMinusOneTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).OTBCostDlrCum, currMinusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotEinvUnits_FLOW, ((PlanVariables)BasePlanVariables).TotEinvUnits, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotEinvCostDlr_PLUG, ((PlanVariables)BasePlanVariables).TotEinvCostDlr, currMinusOneTimeId,currTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotEinvAUC, currMinusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotEinvCostDlr_FLOW, ((PlanVariables)BasePlanVariables).TotEinvCostDlr, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotFWOSUnit, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).ReceiptAUCTot, currMinusOneTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SellThruUnitPctTot, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DensityU, currTimeId,endTimeId);
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        protected class clsChange_TotBinvAUC : PlanChangeMethodProfile
        {
			public clsChange_TotBinvAUC(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "TotBinvAUC Change Method")
			{
			}

            public override void Execute(ComputationSchedule aCompSchd, PlanCellReference aPlanCellRef)
            {
                int endTimeId;
                int currTimeId;
                int currMinusOneTimeId;
                int currPlusOneTimeId;
                try
                {
                    endTimeId = BasePlanToolBox.GetEndPlanTimeDetail(aPlanCellRef);
                    currTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aPlanCellRef);
                    currMinusOneTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aPlanCellRef, -1);
                    currPlusOneTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aPlanCellRef, 1);
                    BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_ShrinkCostDlrTot_PCT, ((PlanVariables)BasePlanVariables).ShrinkCostDlrTot, currTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_ShrinkUnitsTot_AUC_BINV, ((PlanVariables)BasePlanVariables).ShrinkUnitsTot, currTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_AdjCostDlrTot_PCT, ((PlanVariables)BasePlanVariables).AdjCostDlrTot, currTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_AdjUnitsTot_AUC_BINV, ((PlanVariables)BasePlanVariables).AdjUnitsTot, currTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_InventoryTotalUnits_FLOW, ((PlanVariables)BasePlanVariables).InventoryTotalUnits, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotBinvCostDlr_AUC, ((PlanVariables)BasePlanVariables).TotBinvCostDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotBinvAUC, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrAvgINVUnit, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotEinvUnits_PLUG, ((PlanVariables)BasePlanVariables).TotEinvUnits, currMinusOneTimeId,currTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrAvgEndINVUnit, currTimeId,endTimeId);
					BasePlanToolBox.InsertSpread(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).InventoryTotalUnits, currPlusOneTimeId,endTimeId, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Spread_InventoryTotalUnits_Spread);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotRecCostDlr, currMinusOneTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotBinvCostDlr_FLOW, ((PlanVariables)BasePlanVariables).TotBinvCostDlr, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).OTBCostDlr, currMinusOneTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).OTBCostDlrCum, currMinusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotEinvUnits_FLOW, ((PlanVariables)BasePlanVariables).TotEinvUnits, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotEinvCostDlr_PLUG, ((PlanVariables)BasePlanVariables).TotEinvCostDlr, currMinusOneTimeId,currTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotEinvAUC, currMinusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotEinvCostDlr_FLOW, ((PlanVariables)BasePlanVariables).TotEinvCostDlr, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).ReceiptAUCTot, currMinusOneTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DensityU, currTimeId,endTimeId);
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        protected class clsChange_TotBinvCostDlr : PlanChangeMethodProfile
        {
			public clsChange_TotBinvCostDlr(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "TotBinvCostDlr Change Method")
			{
			}

            public override void Execute(ComputationSchedule aCompSchd, PlanCellReference aPlanCellRef)
            {
                int endTimeId;
                int currTimeId;
                int currMinusOneTimeId;
                int currPlusOneTimeId;
                try
                {
                    endTimeId = BasePlanToolBox.GetEndPlanTimeDetail(aPlanCellRef);
                    currTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aPlanCellRef);
                    currMinusOneTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aPlanCellRef, -1);
                    currPlusOneTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aPlanCellRef, 1);
                    if ( BasePlanToolBox.isChain(aPlanCellRef) )
                    {
                        BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_AdjCostDlrTot_PCT, ((PlanVariables)BasePlanVariables).AdjCostDlrTot, currTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_ShrinkCostDlrTot_PCT, ((PlanVariables)BasePlanVariables).ShrinkCostDlrTot, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotRecCostDlr, currMinusOneTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotBinvCostDlr_FLOW, ((PlanVariables)BasePlanVariables).TotBinvCostDlr, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotBinvAUC, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_InventoryTotalUnits_AUC, ((PlanVariables)BasePlanVariables).InventoryTotalUnits);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotEinvCostDlr_PLUG, ((PlanVariables)BasePlanVariables).TotEinvCostDlr, currMinusOneTimeId,currTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotEinvCostDlr_FLOW, ((PlanVariables)BasePlanVariables).TotEinvCostDlr, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrAvgINVUnit, currTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotEinvUnits_PLUG, ((PlanVariables)BasePlanVariables).TotEinvUnits, currMinusOneTimeId,currTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrAvgEndINVUnit, currMinusOneTimeId,endTimeId);
					BasePlanToolBox.InsertSpread(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).InventoryTotalUnits, currTimeId,endTimeId, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Spread_InventoryTotalUnits_Spread);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DensityU, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCFWOSUnit, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCSlsStkRatio, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCSellThru, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).ForwardWOSTotal, currTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_AdjUnitsTot_AUC_BINV, ((PlanVariables)BasePlanVariables).AdjUnitsTot, currTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_ShrinkUnitsTot_AUC_BINV, ((PlanVariables)BasePlanVariables).ShrinkUnitsTot, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotRecUnit, currMinusOneTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_InventoryTotalUnits_FLOW, ((PlanVariables)BasePlanVariables).InventoryTotalUnits, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).OTBUnit, currMinusOneTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).OTBUnitCum, currMinusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).OTBCostDlr, currMinusOneTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).OTBCostDlrCum, currMinusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotEinvUnits_FLOW, ((PlanVariables)BasePlanVariables).TotEinvUnits, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotEinvAUC, currMinusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotFWOSUnit, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).ReceiptAUCTot, currMinusOneTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SellThruUnitPctTot, currTimeId,endTimeId);
                    }
                    if ( BasePlanToolBox.isStore(aPlanCellRef) )
                    {
                        BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_InventoryTotalUnits_AUC, ((PlanVariables)BasePlanVariables).InventoryTotalUnits);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotRecCostDlr, currMinusOneTimeId,currTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DensityU, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertSpread(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).InventoryTotalUnits, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Spread_InventoryTotalUnits_Spread);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotRecUnit, currMinusOneTimeId,currTimeId);
                    }
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        protected class clsChange_ShrinkPctTot : PlanChangeMethodProfile
        {
			public clsChange_ShrinkPctTot(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "ShrinkPctTot Change Method")
			{
			}

            public override void Execute(ComputationSchedule aCompSchd, PlanCellReference aPlanCellRef)
            {
                int endTimeId;
                int currTimeId;
                int currPlusOneTimeId;
                try
                {
                    endTimeId = BasePlanToolBox.GetEndPlanTimeDetail(aPlanCellRef);
                    currTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aPlanCellRef);
                    currPlusOneTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aPlanCellRef, 1);
                    BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotBinvCostDlr_FLOW, ((PlanVariables)BasePlanVariables).TotBinvCostDlr, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_ShrinkCostDlrTot_PCT, ((PlanVariables)BasePlanVariables).ShrinkCostDlrTot, currTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_InventoryTotalUnits_FLOW, ((PlanVariables)BasePlanVariables).InventoryTotalUnits, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotBinvAUC, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_ShrinkUnitsTot_AUC_BINV, ((PlanVariables)BasePlanVariables).ShrinkUnitsTot, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrAvgINVUnit, currTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotEinvUnits_PLUG, ((PlanVariables)BasePlanVariables).TotEinvUnits, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrAvgEndINVUnit, currTimeId,endTimeId);
					BasePlanToolBox.InsertSpread(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).InventoryTotalUnits, currPlusOneTimeId,endTimeId, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Spread_InventoryTotalUnits_Spread);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DensityU, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCFWOSUnit, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCSlsStkRatio, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCSellThru, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesRegPromoUnits);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).ForwardWOSTotal, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).AdjUntiPctTot, currTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotEinvCostDlr_PLUG, ((PlanVariables)BasePlanVariables).TotEinvCostDlr, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotEinvAUC, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotFWOSUnit, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SellThruUnitPctTot, currTimeId,endTimeId);
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        protected class clsChange_OnOrderUnit : PlanChangeMethodProfile
        {
			public clsChange_OnOrderUnit(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "OnOrderUnit Change Method")
			{
			}

            public override void Execute(ComputationSchedule aCompSchd, PlanCellReference aPlanCellRef)
            {
                int endTimeId;
                int currTimeId;
                int currPlusOneTimeId;
                try
                {
                    endTimeId = BasePlanToolBox.GetEndPlanTimeDetail(aPlanCellRef);
                    currTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aPlanCellRef);
                    currPlusOneTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aPlanCellRef, 1);
                    BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_AdjUnitsTot_AUC_BINV, ((PlanVariables)BasePlanVariables).AdjUnitsTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_OnOrderDlr_AUR, ((PlanVariables)BasePlanVariables).OnOrderDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_OnOrderCostDlr_AUC, ((PlanVariables)BasePlanVariables).OnOrderCostDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).OTBUnit);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).OTBCostDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).OTBUnitCum, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).OTBCostDlrCum, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotIMUPct);
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        protected class clsChange_OnOrderAUR : PlanChangeMethodProfile
        {
			public clsChange_OnOrderAUR(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "OnOrderAUR Change Method")
			{
			}

            public override void Execute(ComputationSchedule aCompSchd, PlanCellReference aPlanCellRef)
            {
                int endTimeId;
                int currPlusOneTimeId;
                try
                {
                    endTimeId = BasePlanToolBox.GetEndPlanTimeDetail(aPlanCellRef);
                    currPlusOneTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aPlanCellRef, 1);
                    BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_AdjUnitsTot_AUC_BINV, ((PlanVariables)BasePlanVariables).AdjUnitsTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_OnOrderDlr_AUR, ((PlanVariables)BasePlanVariables).OnOrderDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotIMUPct);
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        protected class clsChange_OnOrderAUC : PlanChangeMethodProfile
        {
			public clsChange_OnOrderAUC(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "OnOrderAUC Change Method")
			{
			}

            public override void Execute(ComputationSchedule aCompSchd, PlanCellReference aPlanCellRef)
            {
                int endTimeId;
                int currTimeId;
                int currPlusOneTimeId;
                try
                {
                    endTimeId = BasePlanToolBox.GetEndPlanTimeDetail(aPlanCellRef);
                    currTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aPlanCellRef);
                    currPlusOneTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aPlanCellRef, 1);
                    BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_AdjUnitsTot_AUC_BINV, ((PlanVariables)BasePlanVariables).AdjUnitsTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_OnOrderCostDlr_AUC, ((PlanVariables)BasePlanVariables).OnOrderCostDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotIMUPct);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).OTBCostDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).OTBCostDlrCum, currTimeId,endTimeId);
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        protected class clsChange_OnOrderCostDlr : PlanChangeMethodProfile
        {
			public clsChange_OnOrderCostDlr(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "OnOrderCostDlr Change Method")
			{
			}

            public override void Execute(ComputationSchedule aCompSchd, PlanCellReference aPlanCellRef)
            {
                int endTimeId;
                int currTimeId;
                int currPlusOneTimeId;
                try
                {
                    endTimeId = BasePlanToolBox.GetEndPlanTimeDetail(aPlanCellRef);
                    currTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aPlanCellRef);
                    currPlusOneTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aPlanCellRef, 1);
                    BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_AdjUnitsTot_AUC_BINV, ((PlanVariables)BasePlanVariables).AdjUnitsTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_OnOrderUnit_AUC, ((PlanVariables)BasePlanVariables).OnOrderUnit);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).OTBCostDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_OnOrderDlr_AUR, ((PlanVariables)BasePlanVariables).OnOrderDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotIMUPct);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).OTBUnit);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).OTBUnitCum, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).OTBCostDlrCum, currTimeId,endTimeId);
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        protected class clsChange_OnOrderDlr : PlanChangeMethodProfile
        {
			public clsChange_OnOrderDlr(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "OnOrderDlr Change Method")
			{
			}

            public override void Execute(ComputationSchedule aCompSchd, PlanCellReference aPlanCellRef)
            {
                int endTimeId;
                int currTimeId;
                int currPlusOneTimeId;
                try
                {
                    endTimeId = BasePlanToolBox.GetEndPlanTimeDetail(aPlanCellRef);
                    currTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aPlanCellRef);
                    currPlusOneTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aPlanCellRef, 1);
                    BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_AdjUnitsTot_AUC_BINV, ((PlanVariables)BasePlanVariables).AdjUnitsTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_OnOrderUnit_AUR, ((PlanVariables)BasePlanVariables).OnOrderUnit);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_OnOrderCostDlr_AUC, ((PlanVariables)BasePlanVariables).OnOrderCostDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotIMUPct);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).OTBUnit);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).OTBCostDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).OTBUnitCum, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).OTBCostDlrCum, currTimeId,endTimeId);
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        protected class clsChange_TotIMUPct : PlanChangeMethodProfile
        {
			public clsChange_TotIMUPct(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "TotIMUPct Change Method")
			{
			}

            public override void Execute(ComputationSchedule aCompSchd, PlanCellReference aPlanCellRef)
            {
                int endTimeId;
                int currTimeId;
                try
                {
                    endTimeId = BasePlanToolBox.GetEndPlanTimeDetail(aPlanCellRef);
                    currTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aPlanCellRef);
                    BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_OnOrderCostDlr_IMU, ((PlanVariables)BasePlanVariables).OnOrderCostDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).OnOrderAUC);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).OTBCostDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).OTBCostDlrCum, currTimeId,endTimeId);
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        protected class clsChange_TotRecCostDlr : PlanChangeMethodProfile
        {
			public clsChange_TotRecCostDlr(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "TotRecCostDlr Change Method")
			{
			}

            public override void Execute(ComputationSchedule aCompSchd, PlanCellReference aPlanCellRef)
            {
                int endTimeId;
                int currTimeId;
                int currPlusOneTimeId;
                try
                {
                    endTimeId = BasePlanToolBox.GetEndPlanTimeDetail(aPlanCellRef);
                    currTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aPlanCellRef);
                    currPlusOneTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aPlanCellRef, 1);
                    if ( BasePlanToolBox.isChain(aPlanCellRef) )
                    {
                        BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_AdjCostDlrTot_PCT, ((PlanVariables)BasePlanVariables).AdjCostDlrTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_ShrinkCostDlrTot_PCT, ((PlanVariables)BasePlanVariables).ShrinkCostDlrTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotBinvCostDlr_PLUG, ((PlanVariables)BasePlanVariables).TotBinvCostDlr, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotEinvCostDlr_FLOW, ((PlanVariables)BasePlanVariables).TotEinvCostDlr, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).OTBCostDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotRecUnit_AUC, ((PlanVariables)BasePlanVariables).TotRecUnit);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_ShrinkUnitsTot_AUC_BINV, ((PlanVariables)BasePlanVariables).ShrinkUnitsTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_AdjUnitsTot_AUC_BINV, ((PlanVariables)BasePlanVariables).AdjUnitsTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_InventoryTotalUnits_PLUG, ((PlanVariables)BasePlanVariables).InventoryTotalUnits, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotBinvAUC, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotEinvUnits_FLOW, ((PlanVariables)BasePlanVariables).TotEinvUnits, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrAvgINVUnit, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrAvgEndINVUnit, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCFWOSUnit, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCSlsStkRatio, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCSellThru, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).ForwardWOSTotal, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertSpread(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).InventoryTotalUnits, currPlusOneTimeId,endTimeId, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Spread_InventoryTotalUnits_Spread);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).OTBUnit);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).OTBUnitCum, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).OTBCostDlrCum, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotEinvAUC, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotFWOSUnit, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SellThruUnitPctTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DensityU, currPlusOneTimeId,endTimeId);
                    }
                    if ( BasePlanToolBox.isStore(aPlanCellRef) )
                    {
                        BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotBinvCostDlr_FLOW, ((PlanVariables)BasePlanVariables).TotBinvCostDlr, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotRecUnit_AUC, ((PlanVariables)BasePlanVariables).TotRecUnit);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_InventoryTotalUnits_AUC, ((PlanVariables)BasePlanVariables).InventoryTotalUnits, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertSpread(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).InventoryTotalUnits, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Spread_InventoryTotalUnits_Spread);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DensityU, currPlusOneTimeId,endTimeId);
                    }
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        protected class clsChange_TotRecUnit : PlanChangeMethodProfile
        {
			public clsChange_TotRecUnit(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "TotRecUnit Change Method")
			{
			}

            public override void Execute(ComputationSchedule aCompSchd, PlanCellReference aPlanCellRef)
            {
                int endTimeId;
                int currTimeId;
                int currPlusOneTimeId;
                try
                {
                    endTimeId = BasePlanToolBox.GetEndPlanTimeDetail(aPlanCellRef);
                    currTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aPlanCellRef);
                    currPlusOneTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aPlanCellRef, 1);
                    if ( BasePlanToolBox.isChain(aPlanCellRef) )
                    {
                        BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_ShrinkCostDlrTot_PCT, ((PlanVariables)BasePlanVariables).ShrinkCostDlrTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_ShrinkUnitsTot_AUC_BINV, ((PlanVariables)BasePlanVariables).ShrinkUnitsTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotBinvCostDlr_PLUG, ((PlanVariables)BasePlanVariables).TotBinvCostDlr, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_AdjCostDlrTot_PCT, ((PlanVariables)BasePlanVariables).AdjCostDlrTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotBinvAUC, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertSpread(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).InventoryTotalUnits, currPlusOneTimeId,endTimeId, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Spread_InventoryTotalUnits_Spread);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotRecCostDlr_AUC, ((PlanVariables)BasePlanVariables).TotRecCostDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotEinvCostDlr_FLOW, ((PlanVariables)BasePlanVariables).TotEinvCostDlr, currTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_AdjUnitsTot_AUC_BINV, ((PlanVariables)BasePlanVariables).AdjUnitsTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_InventoryTotalUnits_PLUG, ((PlanVariables)BasePlanVariables).InventoryTotalUnits, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotEinvUnits_FLOW, ((PlanVariables)BasePlanVariables).TotEinvUnits, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).OTBUnit);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrAvgINVUnit, currPlusOneTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrAvgEndINVUnit, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCFWOSUnit, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCSlsStkRatio, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCSellThru, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).ForwardWOSTotal, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).OTBUnitCum, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).OTBCostDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).OTBCostDlrCum, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotEinvAUC, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotFWOSUnit, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SellThruUnitPctTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DensityU, currPlusOneTimeId,endTimeId);
                    }
                    if ( BasePlanToolBox.isStore(aPlanCellRef) )
                    {
                        BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_InventoryTotalUnits_FLOW, ((PlanVariables)BasePlanVariables).InventoryTotalUnits, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotRecCostDlr_AUC, ((PlanVariables)BasePlanVariables).TotRecCostDlr);
					BasePlanToolBox.InsertSpread(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).InventoryTotalUnits, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Spread_InventoryTotalUnits_Spread);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotBinvCostDlr_AUC, ((PlanVariables)BasePlanVariables).TotBinvCostDlr, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DensityU, currPlusOneTimeId,endTimeId);
                    }
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        protected class clsChange_ReceiptAUCTot : PlanChangeMethodProfile
        {
			public clsChange_ReceiptAUCTot(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "ReceiptAUCTot Change Method")
			{
			}

            public override void Execute(ComputationSchedule aCompSchd, PlanCellReference aPlanCellRef)
            {
                int endTimeId;
                int currTimeId;
                int currPlusOneTimeId;
                try
                {
                    endTimeId = BasePlanToolBox.GetEndPlanTimeDetail(aPlanCellRef);
                    currTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aPlanCellRef);
                    currPlusOneTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aPlanCellRef, 1);
                    BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotRecCostDlr_AUC, ((PlanVariables)BasePlanVariables).TotRecCostDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_AdjCostDlrTot_PCT, ((PlanVariables)BasePlanVariables).AdjCostDlrTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_AdjUnitsTot_AUC_BINV, ((PlanVariables)BasePlanVariables).AdjUnitsTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_InventoryTotalUnits_FLOW, ((PlanVariables)BasePlanVariables).InventoryTotalUnits, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_ShrinkCostDlrTot_PCT, ((PlanVariables)BasePlanVariables).ShrinkCostDlrTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_ShrinkUnitsTot_AUC_BINV, ((PlanVariables)BasePlanVariables).ShrinkUnitsTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotBinvCostDlr_FLOW, ((PlanVariables)BasePlanVariables).TotBinvCostDlr, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotBinvAUC, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrAvgINVUnit, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotEinvUnits_PLUG, ((PlanVariables)BasePlanVariables).TotEinvUnits);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrAvgEndINVUnit, currTimeId,endTimeId);
					BasePlanToolBox.InsertSpread(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).InventoryTotalUnits, currPlusOneTimeId,endTimeId, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Spread_InventoryTotalUnits_Spread);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).OTBCostDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).OTBCostDlrCum, currTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotEinvUnits_FLOW, ((PlanVariables)BasePlanVariables).TotEinvUnits, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotEinvCostDlr_PLUG, ((PlanVariables)BasePlanVariables).TotEinvCostDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotEinvAUC, currTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotEinvCostDlr_FLOW, ((PlanVariables)BasePlanVariables).TotEinvCostDlr, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DensityU, currPlusOneTimeId,endTimeId);
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        protected class clsChange_DTCGrossDmdDlr : PlanChangeMethodProfile
        {
			public clsChange_DTCGrossDmdDlr(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "DTCGrossDmdDlr Change Method")
			{
			}

            public override void Execute(ComputationSchedule aCompSchd, PlanCellReference aPlanCellRef)
            {
                int startTimeId;
                int endTimeId;
                int currTimeId;
                int currPlusOneTimeId;
                try
                {
                    startTimeId = BasePlanToolBox.GetBeginPlanTimeDetail(aPlanCellRef);
                    endTimeId = BasePlanToolBox.GetEndPlanTimeDetail(aPlanCellRef);
                    currTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aPlanCellRef);
                    currPlusOneTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aPlanCellRef, 1);
                    BasePlanToolBox.InsertSpread(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCGrossDmdDlr, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Spread_DTCGrossDmdDlr_SPREAD);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCGrossDmdUnit_AUR, ((PlanVariables)BasePlanVariables).DTCGrossDmdUnit);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCGrossDmdCostDlr_AUC, ((PlanVariables)BasePlanVariables).DTCGrossDmdCostDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCGrossDmdGMDlr_DIFF, ((PlanVariables)BasePlanVariables).DTCGrossDmdGMDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCGrsDmdGMPct);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_AdjCostDlrTot_PCT, ((PlanVariables)BasePlanVariables).AdjCostDlrTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_ShrinkCostDlrTot_PCT, ((PlanVariables)BasePlanVariables).ShrinkCostDlrTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_ShrinkUnitsTot_AUC_BINV, ((PlanVariables)BasePlanVariables).ShrinkUnitsTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotBinvCostDlr_PLUG, ((PlanVariables)BasePlanVariables).TotBinvCostDlr, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertSpread(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).InventoryTotalUnits, currPlusOneTimeId,endTimeId, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Spread_InventoryTotalUnits_Spread);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotBinvAUC, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertSpread(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCGrossDmdCostDlr, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Spread_DTCGrossDmdCostDlr_SPREAD);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesCostDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotEinvCostDlr_FLOW, ((PlanVariables)BasePlanVariables).TotEinvCostDlr, currTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_AdjUnitsTot_AUC_BINV, ((PlanVariables)BasePlanVariables).AdjUnitsTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertSpread(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCGrossDmdUnit, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Spread_DTCGrossDmdUnit_SPREAD);
					BasePlanToolBox.InsertSpread(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesTotalUnits, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Spread_SalesTotalUnits_PREAD_REG_CLEAR);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesTotalUnits);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_InventoryTotalUnits_PLUG, ((PlanVariables)BasePlanVariables).InventoryTotalUnits, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotEinvUnits_FLOW, ((PlanVariables)BasePlanVariables).TotEinvUnits, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DiscountDlr_Calc, ((PlanVariables)BasePlanVariables).DiscountDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_AfterDiscountDlr_Calc, ((PlanVariables)BasePlanVariables).AfterDiscountDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).AfterDiscountAUR);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotFreightCostDlr_Calc, ((PlanVariables)BasePlanVariables).TotFreightCostDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).AfterDiscGMDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrAvgINVUnit, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrAvgEndINVUnit, currTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_VATDlr_Calc, ((PlanVariables)BasePlanVariables).VATDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_SaleswithoutVATDlr_Calc, ((PlanVariables)BasePlanVariables).SaleswithoutVATDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_ConvertedSalesDlr_Calc, ((PlanVariables)BasePlanVariables).ConvertedSalesDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DensityU, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCAvgOrder);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCFWOSUnit, startTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdAUC);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdAUR);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCNetDmdGMDlr_DIFF, ((PlanVariables)BasePlanVariables).DTCNetDmdGMDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdGMPct);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCSlsStkRatio, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCSellThru, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesRegPromoUnits);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesUperLinearSpace);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesUperSqSpace);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesperSpaceU);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotDTCSalesUnitPctTTL);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotDTCSalesCostDlrPctTTL);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotEinvAUC, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotFWOSUnit, startTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).GrossMarginTotDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).GrossMarginPctTot);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesAUC);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesAUR);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SellThruUnitPctTot, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).GrossMarginPctStr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesUnitPctTTL);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesCostDlrPctTTL);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCPlacedOrdersDlr);
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        protected class clsChange_DTCGrossDmdUnit : PlanChangeMethodProfile
        {
			public clsChange_DTCGrossDmdUnit(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "DTCGrossDmdUnit Change Method")
			{
			}

            public override void Execute(ComputationSchedule aCompSchd, PlanCellReference aPlanCellRef)
            {
                int startTimeId;
                int endTimeId;
                int currTimeId;
                int currPlusOneTimeId;
                try
                {
                    startTimeId = BasePlanToolBox.GetBeginPlanTimeDetail(aPlanCellRef);
                    endTimeId = BasePlanToolBox.GetEndPlanTimeDetail(aPlanCellRef);
                    currTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aPlanCellRef);
                    currPlusOneTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aPlanCellRef, 1);
                    BasePlanToolBox.InsertSpread(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCGrossDmdUnit, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Spread_DTCGrossDmdUnit_SPREAD);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCGrossDmdDlr_AUR, ((PlanVariables)BasePlanVariables).DTCGrossDmdDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCGrossDmdCostDlr_AUC, ((PlanVariables)BasePlanVariables).DTCGrossDmdCostDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_AdjCostDlrTot_PCT, ((PlanVariables)BasePlanVariables).AdjCostDlrTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_ShrinkCostDlrTot_PCT, ((PlanVariables)BasePlanVariables).ShrinkCostDlrTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_ShrinkUnitsTot_AUC_BINV, ((PlanVariables)BasePlanVariables).ShrinkUnitsTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotBinvCostDlr_PLUG, ((PlanVariables)BasePlanVariables).TotBinvCostDlr, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotBinvAUC, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertSpread(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).InventoryTotalUnits, currPlusOneTimeId,endTimeId, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Spread_InventoryTotalUnits_Spread);
					BasePlanToolBox.InsertSpread(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCGrossDmdCostDlr, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Spread_DTCGrossDmdCostDlr_SPREAD);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesCostDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotEinvCostDlr_FLOW, ((PlanVariables)BasePlanVariables).TotEinvCostDlr, currTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_AdjUnitsTot_AUC_BINV, ((PlanVariables)BasePlanVariables).AdjUnitsTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertSpread(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesTotalUnits, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Spread_SalesTotalUnits_PREAD_REG_CLEAR);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesTotalUnits);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_InventoryTotalUnits_PLUG, ((PlanVariables)BasePlanVariables).InventoryTotalUnits, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotEinvUnits_FLOW, ((PlanVariables)BasePlanVariables).TotEinvUnits, currTimeId,endTimeId);
					BasePlanToolBox.InsertSpread(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCGrossDmdDlr, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Spread_DTCGrossDmdDlr_SPREAD);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DiscountDlr_Calc, ((PlanVariables)BasePlanVariables).DiscountDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_AfterDiscountDlr_Calc, ((PlanVariables)BasePlanVariables).AfterDiscountDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).AfterDiscountAUR);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotFreightCostDlr_Calc, ((PlanVariables)BasePlanVariables).TotFreightCostDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).AfterDiscGMDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrAvgINVUnit, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrAvgEndINVUnit, currTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_VATDlr_Calc, ((PlanVariables)BasePlanVariables).VATDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_SaleswithoutVATDlr_Calc, ((PlanVariables)BasePlanVariables).SaleswithoutVATDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_ConvertedSalesDlr_Calc, ((PlanVariables)BasePlanVariables).ConvertedSalesDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DensityU, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCAvgOrder);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCFWOSUnit, startTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCGrossDmdGMDlr_DIFF, ((PlanVariables)BasePlanVariables).DTCGrossDmdGMDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCGrsDmdGMPct);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdAUC);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdAUR);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCNetDmdGMDlr_DIFF, ((PlanVariables)BasePlanVariables).DTCNetDmdGMDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdGMPct);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCSlsStkRatio, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCSellThru, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesRegPromoUnits);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesUperLinearSpace);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesUperSqSpace);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesperSpaceU);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotDTCSalesUnitPctTTL);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotDTCSalesCostDlrPctTTL);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotEinvAUC, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotFWOSUnit, startTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).GrossMarginTotDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).GrossMarginPctTot);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesAUC);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesAUR);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SellThruUnitPctTot, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).GrossMarginPctStr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesUnitPctTTL);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesCostDlrPctTTL);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCPlacedOrdersDlr);
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        protected class clsChange_DTCGrossDmdAUC : PlanChangeMethodProfile
        {
			public clsChange_DTCGrossDmdAUC(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "DTCGrossDmdAUC Change Method")
			{
			}

            public override void Execute(ComputationSchedule aCompSchd, PlanCellReference aPlanCellRef)
            {
                int startTimeId;
                int endTimeId;
                int currTimeId;
                int currPlusOneTimeId;
                try
                {
                    startTimeId = BasePlanToolBox.GetBeginPlanTimeDetail(aPlanCellRef);
                    endTimeId = BasePlanToolBox.GetEndPlanTimeDetail(aPlanCellRef);
                    currTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aPlanCellRef);
                    currPlusOneTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aPlanCellRef, 1);
                    BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCGrossDmdCostDlr_AUC, ((PlanVariables)BasePlanVariables).DTCGrossDmdCostDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_AdjCostDlrTot_PCT, ((PlanVariables)BasePlanVariables).AdjCostDlrTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_ShrinkCostDlrTot_PCT, ((PlanVariables)BasePlanVariables).ShrinkCostDlrTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotBinvCostDlr_PLUG, ((PlanVariables)BasePlanVariables).TotBinvCostDlr, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertSpread(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCGrossDmdCostDlr, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Spread_DTCGrossDmdCostDlr_SPREAD);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesCostDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotEinvCostDlr_FLOW, ((PlanVariables)BasePlanVariables).TotEinvCostDlr, currTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotEinvUnits_AUC, ((PlanVariables)BasePlanVariables).TotEinvUnits, currTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_InventoryTotalUnits_PLUG, ((PlanVariables)BasePlanVariables).InventoryTotalUnits, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotFreightCostDlr_Calc, ((PlanVariables)BasePlanVariables).TotFreightCostDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).AfterDiscGMDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrAvgINVUnit, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrAvgEndINVUnit, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCAvgOrder);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCFWOSUnit, startTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCGrossDmdGMDlr_DIFF, ((PlanVariables)BasePlanVariables).DTCGrossDmdGMDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCGrsDmdGMPct);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdAUC);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCNetDmdGMDlr_DIFF, ((PlanVariables)BasePlanVariables).DTCNetDmdGMDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdGMPct);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCSlsStkRatio, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCSellThru, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).ForwardWOSTotal, startTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_AdjUnitsTot_AUC_BINV, ((PlanVariables)BasePlanVariables).AdjUnitsTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertSpread(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).InventoryTotalUnits, currPlusOneTimeId,endTimeId, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Spread_InventoryTotalUnits_Spread);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotDTCSalesCostDlrPctTTL);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotFWOSUnit, startTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).GrossMarginTotDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).GrossMarginPctTot);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesAUC);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SellThruUnitPctTot, currTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_ShrinkUnitsTot_AUC_BINV, ((PlanVariables)BasePlanVariables).ShrinkUnitsTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).GrossMarginPctStr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesCostDlrPctTTL);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DensityU, currPlusOneTimeId,endTimeId);
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        protected class clsChange_DTCGrossDmdAUR : PlanChangeMethodProfile
        {
			public clsChange_DTCGrossDmdAUR(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "DTCGrossDmdAUR Change Method")
			{
			}

            public override void Execute(ComputationSchedule aCompSchd, PlanCellReference aPlanCellRef)
            {
                try
                {
                    BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCGrossDmdDlr_AUR, ((PlanVariables)BasePlanVariables).DTCGrossDmdDlr);
					BasePlanToolBox.InsertSpread(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCGrossDmdDlr, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Spread_DTCGrossDmdDlr_SPREAD);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DiscountDlr_Calc, ((PlanVariables)BasePlanVariables).DiscountDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_AfterDiscountDlr_Calc, ((PlanVariables)BasePlanVariables).AfterDiscountDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).AfterDiscountAUR);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).AfterDiscGMDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_VATDlr_Calc, ((PlanVariables)BasePlanVariables).VATDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_SaleswithoutVATDlr_Calc, ((PlanVariables)BasePlanVariables).SaleswithoutVATDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_ConvertedSalesDlr_Calc, ((PlanVariables)BasePlanVariables).ConvertedSalesDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCAvgOrder);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCGrossDmdGMDlr_DIFF, ((PlanVariables)BasePlanVariables).DTCGrossDmdGMDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCGrsDmdGMPct);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdAUR);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCNetDmdGMDlr_DIFF, ((PlanVariables)BasePlanVariables).DTCNetDmdGMDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdGMPct);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).GrossMarginTotDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).GrossMarginPctTot);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesAUR);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCPlacedOrdersDlr);
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        protected class clsChange_DTCGrsDmdGMPct : PlanChangeMethodProfile
        {
			public clsChange_DTCGrsDmdGMPct(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "DTCGrsDmdGMPct Change Method")
			{
			}

            public override void Execute(ComputationSchedule aCompSchd, PlanCellReference aPlanCellRef)
            {
                try
                {
                    BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCGrossDmdDlr_GRSD_GM_PCT, ((PlanVariables)BasePlanVariables).DTCGrossDmdDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCGrossDmdGMDlr_GM_PCT, ((PlanVariables)BasePlanVariables).DTCGrossDmdGMDlr);
					BasePlanToolBox.InsertSpread(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCGrossDmdDlr, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Spread_DTCGrossDmdDlr_SPREAD);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DiscountDlr_Calc, ((PlanVariables)BasePlanVariables).DiscountDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_AfterDiscountDlr_Calc, ((PlanVariables)BasePlanVariables).AfterDiscountDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).AfterDiscountAUR);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).AfterDiscGMDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_VATDlr_Calc, ((PlanVariables)BasePlanVariables).VATDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_SaleswithoutVATDlr_Calc, ((PlanVariables)BasePlanVariables).SaleswithoutVATDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_ConvertedSalesDlr_Calc, ((PlanVariables)BasePlanVariables).ConvertedSalesDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCAvgOrder);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCGrossDmdAUR);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdAUR);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCNetDmdGMDlr_DIFF, ((PlanVariables)BasePlanVariables).DTCNetDmdGMDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdGMPct);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).GrossMarginTotDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).GrossMarginPctTot);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesAUR);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCPlacedOrdersDlr);
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        protected class clsChange_SalesTotalUnits_Custom : PlanChangeMethodProfile
        {
			public clsChange_SalesTotalUnits_Custom(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "SalesTotalUnits Custom Change Method")
			{
			}

            public override void Execute(ComputationSchedule aCompSchd, PlanCellReference aPlanCellRef)
            {
                int startTimeId;
                int endTimeId;
                int currTimeId;
                int currPlusOneTimeId;
                try
                {
                    startTimeId = BasePlanToolBox.GetBeginPlanTimeDetail(aPlanCellRef);
                    endTimeId = BasePlanToolBox.GetEndPlanTimeDetail(aPlanCellRef);
                    currTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aPlanCellRef);
                    currPlusOneTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aPlanCellRef, 1);
                    if ( BasePlanToolBox.isChain(aPlanCellRef) )
                    {
                        BasePlanToolBox.InsertSpread(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesTotalUnits, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Spread_SalesTotalUnits_SPREAD_DTC_STR);
					BasePlanToolBox.InsertSpread(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesTotalUnits, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Spread_SalesTotalUnits_PREAD_REG_CLEAR);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DiscountDlr_Calc, ((PlanVariables)BasePlanVariables).DiscountDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotSalesDlr_AUR, ((PlanVariables)BasePlanVariables).TotSalesDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_AfterDiscountDlr_Calc, ((PlanVariables)BasePlanVariables).AfterDiscountDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).AfterDiscountAUR);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotDTCSalesUnitPctTTL);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotBinvAUC, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertSpread(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).InventoryTotalUnits, currPlusOneTimeId,endTimeId, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Spread_InventoryTotalUnits_Spread);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_AdjCostDlrTot_PCT, ((PlanVariables)BasePlanVariables).AdjCostDlrTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_ShrinkCostDlrTot_PCT, ((PlanVariables)BasePlanVariables).ShrinkCostDlrTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_ShrinkUnitsTot_AUC_BINV, ((PlanVariables)BasePlanVariables).ShrinkUnitsTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotBinvCostDlr_PLUG, ((PlanVariables)BasePlanVariables).TotBinvCostDlr, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotSalesCostDlr_AUC, ((PlanVariables)BasePlanVariables).TotSalesCostDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotEinvCostDlr_FLOW, ((PlanVariables)BasePlanVariables).TotEinvCostDlr, currTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_AdjUnitsTot_AUC_BINV, ((PlanVariables)BasePlanVariables).AdjUnitsTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_InventoryTotalUnits_PLUG, ((PlanVariables)BasePlanVariables).InventoryTotalUnits, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotEinvUnits_FLOW, ((PlanVariables)BasePlanVariables).TotEinvUnits, currTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotFreightCostDlr_Calc, ((PlanVariables)BasePlanVariables).TotFreightCostDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SellThruUnitPctTot, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesUnitPctTTL);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).AfterDiscGMDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrAvgINVUnit, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrAvgEndINVUnit, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).AvgStrSlsUnit);
					BasePlanToolBox.InsertSpread(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesDlr, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Spread_TotSalesDlr_SPREAD_DTC_STR);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).AvgStrSlsDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_CompSlsDlr_PCT, ((PlanVariables)BasePlanVariables).CompSlsDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_VATDlr_Calc, ((PlanVariables)BasePlanVariables).VATDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_SaleswithoutVATDlr_Calc, ((PlanVariables)BasePlanVariables).SaleswithoutVATDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_ConvertedSalesDlr_Calc, ((PlanVariables)BasePlanVariables).ConvertedSalesDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCAvgOrder);
					BasePlanToolBox.InsertSpread(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesCostDlr, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Spread_TotSalesCostDlr_SPREAD);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCGrossDmdCostDlr_SUM, ((PlanVariables)BasePlanVariables).DTCGrossDmdCostDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCBOPct);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCCancelPct);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCFWOSUnit, startTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCGrossDmdUnit_SUM, ((PlanVariables)BasePlanVariables).DTCGrossDmdUnit);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCGrossDmdDlr_SUM, ((PlanVariables)BasePlanVariables).DTCGrossDmdDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCGrossDmdAUC);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCGrossDmdAUR);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCGrossDmdGMDlr_GM_PCT, ((PlanVariables)BasePlanVariables).DTCGrossDmdGMDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdPct);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCNetDmdGMDlr_PCT, ((PlanVariables)BasePlanVariables).DTCNetDmdGMDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCRtnPct);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCSlsStkRatio, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCSellThru, currTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_NonCompSlsDlr_PCT, ((PlanVariables)BasePlanVariables).NonCompSlsDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesRegPromoUnits);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotDTCSalesCostDlrPctTTL);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotEinvAUC, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotFWOSUnit, startTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_GrossMarginTotStr_PCT, ((PlanVariables)BasePlanVariables).GrossMarginTotStr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).GrossMarginTotDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).GrossMarginPctTot);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesAUC);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesAUR);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesCostDlrPctTTL);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesCDlrperSqSpace);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesCDlrperLinearSpace);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesDlrperSqSpace);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesDlrperLinearSpace);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesperSpaceU);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesUperSqSpace);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesUperLinearSpace);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DensityU, currPlusOneTimeId,endTimeId);
                    }
                    if ( BasePlanToolBox.isStore(aPlanCellRef) )
                    {
                        BasePlanToolBox.InsertSpread(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesTotalUnits, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Spread_SalesTotalUnits_PREAD_REG_CLEAR);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotRecUnit);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotSalesDlr_AUR, ((PlanVariables)BasePlanVariables).TotSalesDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotSalesCostDlr_AUC, ((PlanVariables)BasePlanVariables).TotSalesCostDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DiscountDlr_Calc, ((PlanVariables)BasePlanVariables).DiscountDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_AfterDiscountDlr_Calc, ((PlanVariables)BasePlanVariables).AfterDiscountDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_VATDlr_Calc, ((PlanVariables)BasePlanVariables).VATDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_SaleswithoutVATDlr_Calc, ((PlanVariables)BasePlanVariables).SaleswithoutVATDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_ConvertedSalesDlr_Calc, ((PlanVariables)BasePlanVariables).ConvertedSalesDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesRegPromoUnits);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_GrossMarginTotDlr_DIFF, ((PlanVariables)BasePlanVariables).GrossMarginTotDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).GrossMarginPctTot);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotRecCostDlr_AUC, ((PlanVariables)BasePlanVariables).TotRecCostDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesUperLinearSpace);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesUperSqSpace);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesperSpaceU);
                    }
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        protected class clsChange_TotSalesDlr : PlanChangeMethodProfile
        {
			public clsChange_TotSalesDlr(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "TotSalesDlr Change Method")
			{
			}

            public override void Execute(ComputationSchedule aCompSchd, PlanCellReference aPlanCellRef)
            {
                int startTimeId;
                int endTimeId;
                int currTimeId;
                int currPlusOneTimeId;
                try
                {
                    startTimeId = BasePlanToolBox.GetBeginPlanTimeDetail(aPlanCellRef);
                    endTimeId = BasePlanToolBox.GetEndPlanTimeDetail(aPlanCellRef);
                    currTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aPlanCellRef);
                    currPlusOneTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aPlanCellRef, 1);
                    if ( BasePlanToolBox.isChain(aPlanCellRef) )
                    {
                        BasePlanToolBox.InsertSpread(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesDlr, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Spread_TotSalesDlr_SPREAD_DTC_STR);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DiscountDlr_Calc, ((PlanVariables)BasePlanVariables).DiscountDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_AfterDiscountDlr_Calc, ((PlanVariables)BasePlanVariables).AfterDiscountDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_SalesTotalUnits_AUR, ((PlanVariables)BasePlanVariables).SalesTotalUnits);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotFreightCostDlr_Calc, ((PlanVariables)BasePlanVariables).TotFreightCostDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_GrossMarginTotStr_PCT, ((PlanVariables)BasePlanVariables).GrossMarginTotStr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCNetDmdGMDlr_PCT, ((PlanVariables)BasePlanVariables).DTCNetDmdGMDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).GrossMarginTotDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).GrossMarginPctTot);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_InventoryTotalUnits_PLUG, ((PlanVariables)BasePlanVariables).InventoryTotalUnits, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_ShrinkCostDlrTot_PCT, ((PlanVariables)BasePlanVariables).ShrinkCostDlrTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_ShrinkUnitsTot_AUC_BINV, ((PlanVariables)BasePlanVariables).ShrinkUnitsTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotBinvCostDlr_PLUG, ((PlanVariables)BasePlanVariables).TotBinvCostDlr, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_AdjCostDlrTot_PCT, ((PlanVariables)BasePlanVariables).AdjCostDlrTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_AdjUnitsTot_AUC_BINV, ((PlanVariables)BasePlanVariables).AdjUnitsTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotBinvAUC, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertSpread(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesTotalUnits, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Spread_SalesTotalUnits_SPREAD_DTC_STR);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotStrSalesCostDlr_GM_DIFFER, ((PlanVariables)BasePlanVariables).TotStrSalesCostDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCNetDmdCostDlr_GM_DIFFER, ((PlanVariables)BasePlanVariables).DTCNetDmdCostDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesCostDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotEinvCostDlr_FLOW, ((PlanVariables)BasePlanVariables).TotEinvCostDlr, currTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotEinvUnits_FLOW, ((PlanVariables)BasePlanVariables).TotEinvUnits, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).AfterDiscountAUR);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).AfterDiscGMDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrAvgINVUnit, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrAvgEndINVUnit, currTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_VATDlr_Calc, ((PlanVariables)BasePlanVariables).VATDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_SaleswithoutVATDlr_Calc, ((PlanVariables)BasePlanVariables).SaleswithoutVATDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_ConvertedSalesDlr_Calc, ((PlanVariables)BasePlanVariables).ConvertedSalesDlr);
					BasePlanToolBox.InsertSpread(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).InventoryTotalUnits, currPlusOneTimeId,endTimeId, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Spread_InventoryTotalUnits_Spread);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DensityU, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCAvgOrder);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCGrossDmdCostDlr_SUM, ((PlanVariables)BasePlanVariables).DTCGrossDmdCostDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCBOPct);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCCancelPct);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCFWOSUnit, startTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCGrossDmdUnit_SUM, ((PlanVariables)BasePlanVariables).DTCGrossDmdUnit);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCGrossDmdDlr_SUM, ((PlanVariables)BasePlanVariables).DTCGrossDmdDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCGrossDmdAUC);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCGrossDmdAUR);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCGrossDmdGMDlr_DIFF, ((PlanVariables)BasePlanVariables).DTCGrossDmdGMDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCGrsDmdGMPct);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdAUC);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdAUR);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdPct);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCRtnPct);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCSlsStkRatio, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCSellThru, currTimeId,endTimeId);
					BasePlanToolBox.InsertSpread(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesTotalUnits, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Spread_SalesTotalUnits_PREAD_REG_CLEAR);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesRegPromoUnits);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesUperLinearSpace);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesUperSqSpace);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesperSpaceU);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotDTCSalesUnitPctTTL);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotDTCSalesCostDlrPctTTL);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotEinvAUC, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotFWOSUnit, startTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesAUC);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SellThruUnitPctTot, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesUnitPctTTL);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesDlrperLinearSpace);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesDlrperSqSpace);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesAUC);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesCostDlrPctTTL);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesCDlrperLinearSpace);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesCDlrperSqSpace);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCPlacedOrdersDlr);
                    }
                    if ( BasePlanToolBox.isStore(aPlanCellRef) )
                    {
                        BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DiscountDlr_Calc, ((PlanVariables)BasePlanVariables).DiscountDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_AfterDiscountDlr_Calc, ((PlanVariables)BasePlanVariables).AfterDiscountDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_SalesTotalUnits_AUR, ((PlanVariables)BasePlanVariables).SalesTotalUnits);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotSalesCostDlr_AUC, ((PlanVariables)BasePlanVariables).TotSalesCostDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_GrossMarginTotDlr_DIFF, ((PlanVariables)BasePlanVariables).GrossMarginTotDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).GrossMarginPctTot);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_VATDlr_Calc, ((PlanVariables)BasePlanVariables).VATDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_SaleswithoutVATDlr_Calc, ((PlanVariables)BasePlanVariables).SaleswithoutVATDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_ConvertedSalesDlr_Calc, ((PlanVariables)BasePlanVariables).ConvertedSalesDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesRegPromoUnits);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesUperLinearSpace);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesUperSqSpace);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesperSpaceU);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotRecUnit);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotRecCostDlr_AUC, ((PlanVariables)BasePlanVariables).TotRecCostDlr);
					BasePlanToolBox.InsertSpread(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesTotalUnits, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Spread_SalesTotalUnits_PREAD_REG_CLEAR);
                    }
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        protected class clsChange_TotStrSalesDlr : PlanChangeMethodProfile
        {
			public clsChange_TotStrSalesDlr(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "TotStrSalesDlr Change Method")
			{
			}

            public override void Execute(ComputationSchedule aCompSchd, PlanCellReference aPlanCellRef)
            {
                int startTimeId;
                int endTimeId;
                int currTimeId;
                int currPlusOneTimeId;
                try
                {
                    startTimeId = BasePlanToolBox.GetBeginPlanTimeDetail(aPlanCellRef);
                    endTimeId = BasePlanToolBox.GetEndPlanTimeDetail(aPlanCellRef);
                    currTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aPlanCellRef);
                    currPlusOneTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aPlanCellRef, 1);
                    BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).AvgStrSlsDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_CompSlsDlr_PCT, ((PlanVariables)BasePlanVariables).CompSlsDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_NonCompSlsDlr_PCT, ((PlanVariables)BasePlanVariables).NonCompSlsDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesDlr);
					BasePlanToolBox.InsertSpread(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesTotalUnits, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Spread_SalesTotalUnits_PREAD_REG_CLEAR);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotSalesUnit_AUR, ((PlanVariables)BasePlanVariables).TotSalesUnit);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesTotalUnits);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotFreightCostDlr_Calc, ((PlanVariables)BasePlanVariables).TotFreightCostDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotStrSalesCostDlr_AUC, ((PlanVariables)BasePlanVariables).TotStrSalesCostDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_GrossMarginTotStr_DIFF, ((PlanVariables)BasePlanVariables).GrossMarginTotStr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).GrossMarginPctStr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesDlrperSqSpace);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesDlrperLinearSpace);
					BasePlanToolBox.InsertSpread(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).InventoryTotalUnits, currPlusOneTimeId,endTimeId, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Spread_InventoryTotalUnits_Spread);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotBinvAUC, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_AdjCostDlrTot_PCT, ((PlanVariables)BasePlanVariables).AdjCostDlrTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_ShrinkCostDlrTot_PCT, ((PlanVariables)BasePlanVariables).ShrinkCostDlrTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_ShrinkUnitsTot_AUC_BINV, ((PlanVariables)BasePlanVariables).ShrinkUnitsTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotBinvCostDlr_PLUG, ((PlanVariables)BasePlanVariables).TotBinvCostDlr, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesCostDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotEinvCostDlr_FLOW, ((PlanVariables)BasePlanVariables).TotEinvCostDlr, currTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_AdjUnitsTot_AUC_BINV, ((PlanVariables)BasePlanVariables).AdjUnitsTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_InventoryTotalUnits_PLUG, ((PlanVariables)BasePlanVariables).InventoryTotalUnits, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotEinvUnits_FLOW, ((PlanVariables)BasePlanVariables).TotEinvUnits, currTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DiscountDlr_Calc, ((PlanVariables)BasePlanVariables).DiscountDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_AfterDiscountDlr_Calc, ((PlanVariables)BasePlanVariables).AfterDiscountDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).AfterDiscountAUR);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).AfterDiscGMDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrAvgINVUnit, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrAvgEndINVUnit, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).AvgStrSlsUnit);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_VATDlr_Calc, ((PlanVariables)BasePlanVariables).VATDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_SaleswithoutVATDlr_Calc, ((PlanVariables)BasePlanVariables).SaleswithoutVATDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_ConvertedSalesDlr_Calc, ((PlanVariables)BasePlanVariables).ConvertedSalesDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCFWOSUnit, startTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesRegPromoUnits);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).ForwardWOSTotal, startTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotDTCSalesUnitPctTTL);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotDTCSalesCostDlrPctTTL);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotEinvAUC, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotFWOSUnit, startTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).GrossMarginTotDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).GrossMarginPctTot);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesAUC);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesAUR);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SellThruUnitPctTot);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesUnitPctTTL);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesCostDlrPctTTL);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesCDlrperSqSpace);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesCDlrperLinearSpace);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesperSpaceU);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesUperSqSpace);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesUperLinearSpace);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DensityU, currPlusOneTimeId,endTimeId);
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        protected class clsChange_TotSalesUnit : PlanChangeMethodProfile
        {
			public clsChange_TotSalesUnit(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "TotSalesUnit Change Method")
			{
			}

            public override void Execute(ComputationSchedule aCompSchd, PlanCellReference aPlanCellRef)
            {
                int startTimeId;
                int endTimeId;
                int currTimeId;
                int currPlusOneTimeId;
                try
                {
                    startTimeId = BasePlanToolBox.GetBeginPlanTimeDetail(aPlanCellRef);
                    endTimeId = BasePlanToolBox.GetEndPlanTimeDetail(aPlanCellRef);
                    currTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aPlanCellRef);
                    currPlusOneTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aPlanCellRef, 1);
                    BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).AvgStrSlsUnit);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotBinvAUC, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_AdjCostDlrTot_PCT, ((PlanVariables)BasePlanVariables).AdjCostDlrTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_ShrinkCostDlrTot_PCT, ((PlanVariables)BasePlanVariables).ShrinkCostDlrTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_ShrinkUnitsTot_AUC_BINV, ((PlanVariables)BasePlanVariables).ShrinkUnitsTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotBinvCostDlr_PLUG, ((PlanVariables)BasePlanVariables).TotBinvCostDlr, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertSpread(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).InventoryTotalUnits, currPlusOneTimeId,endTimeId, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Spread_InventoryTotalUnits_Spread);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotStrSalesCostDlr_AUC, ((PlanVariables)BasePlanVariables).TotStrSalesCostDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesCostDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotEinvCostDlr_FLOW, ((PlanVariables)BasePlanVariables).TotEinvCostDlr, currTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_AdjUnitsTot_AUC_BINV, ((PlanVariables)BasePlanVariables).AdjUnitsTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertSpread(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesTotalUnits, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Spread_SalesTotalUnits_PREAD_REG_CLEAR);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesTotalUnits);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotEinvUnits_FLOW, ((PlanVariables)BasePlanVariables).TotEinvUnits, currTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_InventoryTotalUnits_PLUG, ((PlanVariables)BasePlanVariables).InventoryTotalUnits, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotFWOSUnit, startTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesUnitPctTTL);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotStrSalesDlr_AUR, ((PlanVariables)BasePlanVariables).TotStrSalesDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DiscountDlr_Calc, ((PlanVariables)BasePlanVariables).DiscountDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_AfterDiscountDlr_Calc, ((PlanVariables)BasePlanVariables).AfterDiscountDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).AfterDiscountAUR);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotFreightCostDlr_Calc, ((PlanVariables)BasePlanVariables).TotFreightCostDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).AfterDiscGMDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrAvgINVUnit, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrAvgEndINVUnit, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).AvgStrSlsDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_CompSlsDlr_PCT, ((PlanVariables)BasePlanVariables).CompSlsDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_VATDlr_Calc, ((PlanVariables)BasePlanVariables).VATDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_SaleswithoutVATDlr_Calc, ((PlanVariables)BasePlanVariables).SaleswithoutVATDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_ConvertedSalesDlr_Calc, ((PlanVariables)BasePlanVariables).ConvertedSalesDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCFWOSUnit, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_NonCompSlsDlr_PCT, ((PlanVariables)BasePlanVariables).NonCompSlsDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesRegPromoUnits);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).ForwardWOSTotal, startTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotDTCSalesUnitPctTTL);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotDTCSalesCostDlrPctTTL);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotEinvAUC, currTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_GrossMarginTotStr_DIFF, ((PlanVariables)BasePlanVariables).GrossMarginTotStr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).GrossMarginTotDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).GrossMarginPctTot);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesAUC);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesAUR);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SellThruUnitPctTot);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).GrossMarginPctStr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesCostDlrPctTTL);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesCDlrperSqSpace);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesCDlrperLinearSpace);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesUperSqSpace);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesUperLinearSpace);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesperSpaceU);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesDlrperSqSpace);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesDlrperLinearSpace);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DensityU, currPlusOneTimeId,endTimeId);
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        protected class clsChange_TotStrSalesAUC : PlanChangeMethodProfile
        {
			public clsChange_TotStrSalesAUC(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "TotStrSalesAUC Change Method")
			{
			}

            public override void Execute(ComputationSchedule aCompSchd, PlanCellReference aPlanCellRef)
            {
                int startTimeId;
                int endTimeId;
                int currTimeId;
                int currPlusOneTimeId;
                try
                {
                    startTimeId = BasePlanToolBox.GetBeginPlanTimeDetail(aPlanCellRef);
                    endTimeId = BasePlanToolBox.GetEndPlanTimeDetail(aPlanCellRef);
                    currTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aPlanCellRef);
                    currPlusOneTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aPlanCellRef, 1);
                    BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotStrSalesCostDlr_AUC, ((PlanVariables)BasePlanVariables).TotStrSalesCostDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesCostDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).AfterDiscGMDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_AdjCostDlrTot_PCT, ((PlanVariables)BasePlanVariables).AdjCostDlrTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_AdjUnitsTot_AUC_BINV, ((PlanVariables)BasePlanVariables).AdjUnitsTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_ShrinkCostDlrTot_PCT, ((PlanVariables)BasePlanVariables).ShrinkCostDlrTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_ShrinkUnitsTot_AUC_BINV, ((PlanVariables)BasePlanVariables).ShrinkUnitsTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotBinvCostDlr_PLUG, ((PlanVariables)BasePlanVariables).TotBinvCostDlr, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotEinvUnits_FLOW, ((PlanVariables)BasePlanVariables).TotEinvUnits, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotBinvAUC, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotEinvCostDlr_FLOW, ((PlanVariables)BasePlanVariables).TotEinvCostDlr, currTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_InventoryTotalUnits_PLUG, ((PlanVariables)BasePlanVariables).InventoryTotalUnits, currPlusOneTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrAvgINVUnit, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrAvgEndINVUnit, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_SaleswithoutVATDlr_Calc, ((PlanVariables)BasePlanVariables).SaleswithoutVATDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_ConvertedSalesDlr_Calc, ((PlanVariables)BasePlanVariables).ConvertedSalesDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCFWOSUnit, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCSlsStkRatio, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCSellThru, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).ForwardWOSTotal, startTimeId,endTimeId);
					BasePlanToolBox.InsertSpread(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).InventoryTotalUnits, currPlusOneTimeId,endTimeId, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Spread_InventoryTotalUnits_Spread);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotDTCSalesCostDlrPctTTL);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotEinvAUC, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotFWOSUnit, startTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_GrossMarginTotStr_DIFF, ((PlanVariables)BasePlanVariables).GrossMarginTotStr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).GrossMarginTotDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).GrossMarginPctTot);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesAUC);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).GrossMarginPctStr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesCostDlrPctTTL);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesCDlrperSqSpace);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesCDlrperLinearSpace);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DensityU, currPlusOneTimeId,endTimeId);
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        protected class clsChange_TotStrSalesAUR : PlanChangeMethodProfile
        {
			public clsChange_TotStrSalesAUR(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "TotStrSalesAUR Change Method")
			{
			}

            public override void Execute(ComputationSchedule aCompSchd, PlanCellReference aPlanCellRef)
            {
                try
                {
                    BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotStrSalesDlr_AUR, ((PlanVariables)BasePlanVariables).TotStrSalesDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DiscountDlr_Calc, ((PlanVariables)BasePlanVariables).DiscountDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_AfterDiscountDlr_Calc, ((PlanVariables)BasePlanVariables).AfterDiscountDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).AfterDiscountAUR);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).AfterDiscGMDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).AvgStrSlsDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_CompSlsDlr_PCT, ((PlanVariables)BasePlanVariables).CompSlsDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_VATDlr_Calc, ((PlanVariables)BasePlanVariables).VATDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_SaleswithoutVATDlr_Calc, ((PlanVariables)BasePlanVariables).SaleswithoutVATDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_ConvertedSalesDlr_Calc, ((PlanVariables)BasePlanVariables).ConvertedSalesDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_NonCompSlsDlr_PCT, ((PlanVariables)BasePlanVariables).NonCompSlsDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_GrossMarginTotStr_DIFF, ((PlanVariables)BasePlanVariables).GrossMarginTotStr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).GrossMarginTotDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).GrossMarginPctTot);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesAUR);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).GrossMarginPctStr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesDlrperSqSpace);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesDlrperLinearSpace);
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        protected class clsChange_TotSalesAUC : PlanChangeMethodProfile
        {
			public clsChange_TotSalesAUC(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "TotSalesAUC Change Method")
			{
			}

            public override void Execute(ComputationSchedule aCompSchd, PlanCellReference aPlanCellRef)
            {
                int startTimeId;
                int endTimeId;
                int currTimeId;
                int currPlusOneTimeId;
                try
                {
                    startTimeId = BasePlanToolBox.GetBeginPlanTimeDetail(aPlanCellRef);
                    endTimeId = BasePlanToolBox.GetEndPlanTimeDetail(aPlanCellRef);
                    currTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aPlanCellRef);
                    currPlusOneTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aPlanCellRef, 1);
                    BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotSalesCostDlr_AUC, ((PlanVariables)BasePlanVariables).TotSalesCostDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_AdjCostDlrTot_PCT, ((PlanVariables)BasePlanVariables).AdjCostDlrTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_ShrinkCostDlrTot_PCT, ((PlanVariables)BasePlanVariables).ShrinkCostDlrTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_ShrinkUnitsTot_AUC_BINV, ((PlanVariables)BasePlanVariables).ShrinkUnitsTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotBinvCostDlr_PLUG, ((PlanVariables)BasePlanVariables).TotBinvCostDlr, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotBinvAUC, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertSpread(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).InventoryTotalUnits, currPlusOneTimeId,endTimeId, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Spread_InventoryTotalUnits_Spread);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotEinvCostDlr_FLOW, ((PlanVariables)BasePlanVariables).TotEinvCostDlr, currTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_AdjUnitsTot_AUC_BINV, ((PlanVariables)BasePlanVariables).AdjUnitsTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_InventoryTotalUnits_PLUG, ((PlanVariables)BasePlanVariables).InventoryTotalUnits, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotEinvUnits_FLOW, ((PlanVariables)BasePlanVariables).TotEinvUnits, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).AfterDiscGMDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrAvgINVUnit, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrAvgEndINVUnit, currTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_SaleswithoutVATDlr_Calc, ((PlanVariables)BasePlanVariables).SaleswithoutVATDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_ConvertedSalesDlr_Calc, ((PlanVariables)BasePlanVariables).ConvertedSalesDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCAvgOrder);
					BasePlanToolBox.InsertSpread(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesCostDlr, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Spread_TotSalesCostDlr_SPREAD);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCGrossDmdCostDlr_SUM, ((PlanVariables)BasePlanVariables).DTCGrossDmdCostDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCBOPct);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCCancelPct);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCFWOSUnit, startTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCGrossDmdAUC);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCGrossDmdGMDlr_DIFF, ((PlanVariables)BasePlanVariables).DTCGrossDmdGMDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCGrsDmdGMPct);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdAUC);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdPct);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCNetDmdGMDlr_DIFF, ((PlanVariables)BasePlanVariables).DTCNetDmdGMDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdGMPct);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCRtnPct);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCSlsStkRatio, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCSellThru, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotDTCSalesCostDlrPctTTL);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotEinvAUC, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotFWOSUnit, startTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_GrossMarginTotStr_DIFF, ((PlanVariables)BasePlanVariables).GrossMarginTotStr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).GrossMarginTotDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).GrossMarginPctTot);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SellThruUnitPctTot, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).GrossMarginPctStr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesAUC);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesCostDlrPctTTL);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesCDlrperSqSpace);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesCDlrperLinearSpace);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DensityU, currPlusOneTimeId,endTimeId);
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        protected class clsChange_TotSalesAUR : PlanChangeMethodProfile
        {
			public clsChange_TotSalesAUR(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "TotSalesAUR Change Method")
			{
			}

            public override void Execute(ComputationSchedule aCompSchd, PlanCellReference aPlanCellRef)
            {
                try
                {
                    BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotSalesDlr_AUR, ((PlanVariables)BasePlanVariables).TotSalesDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DiscountDlr_Calc, ((PlanVariables)BasePlanVariables).DiscountDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_AfterDiscountDlr_Calc, ((PlanVariables)BasePlanVariables).AfterDiscountDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).AfterDiscountAUR);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).AfterDiscGMDlr);
					BasePlanToolBox.InsertSpread(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesDlr, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Spread_TotSalesDlr_SPREAD_DTC_STR);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).AvgStrSlsDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_CompSlsDlr_PCT, ((PlanVariables)BasePlanVariables).CompSlsDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_VATDlr_Calc, ((PlanVariables)BasePlanVariables).VATDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_SaleswithoutVATDlr_Calc, ((PlanVariables)BasePlanVariables).SaleswithoutVATDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_ConvertedSalesDlr_Calc, ((PlanVariables)BasePlanVariables).ConvertedSalesDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCAvgOrder);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCGrossDmdDlr_SUM, ((PlanVariables)BasePlanVariables).DTCGrossDmdDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCGrossDmdAUR);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCGrossDmdGMDlr_DIFF, ((PlanVariables)BasePlanVariables).DTCGrossDmdGMDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCGrsDmdGMPct);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdAUR);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCNetDmdGMDlr_DIFF, ((PlanVariables)BasePlanVariables).DTCNetDmdGMDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdGMPct);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_NonCompSlsDlr_PCT, ((PlanVariables)BasePlanVariables).NonCompSlsDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_GrossMarginTotStr_DIFF, ((PlanVariables)BasePlanVariables).GrossMarginTotStr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).GrossMarginTotDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).GrossMarginPctTot);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).GrossMarginPctStr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesDlrperLinearSpace);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesDlrperSqSpace);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesAUR);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCPlacedOrdersDlr);
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        protected class clsChange_GrossMarginPctStr : PlanChangeMethodProfile
        {
			public clsChange_GrossMarginPctStr(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "GrossMarginPctStr Change Method")
			{
			}

            public override void Execute(ComputationSchedule aCompSchd, PlanCellReference aPlanCellRef)
            {
                try
                {
                    BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotStrSalesDlr_INVERSE_PCT, ((PlanVariables)BasePlanVariables).TotStrSalesDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_GrossMarginTotStr_PCT, ((PlanVariables)BasePlanVariables).GrossMarginTotStr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DiscountDlr_Calc, ((PlanVariables)BasePlanVariables).DiscountDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_AfterDiscountDlr_Calc, ((PlanVariables)BasePlanVariables).AfterDiscountDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).AfterDiscountAUR);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).AfterDiscGMDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).AvgStrSlsDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_CompSlsDlr_PCT, ((PlanVariables)BasePlanVariables).CompSlsDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_VATDlr_Calc, ((PlanVariables)BasePlanVariables).VATDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_SaleswithoutVATDlr_Calc, ((PlanVariables)BasePlanVariables).SaleswithoutVATDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_ConvertedSalesDlr_Calc, ((PlanVariables)BasePlanVariables).ConvertedSalesDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_NonCompSlsDlr_PCT, ((PlanVariables)BasePlanVariables).NonCompSlsDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).GrossMarginTotDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).GrossMarginPctTot);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesAUR);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesAUR);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesDlrperSqSpace);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesDlrperLinearSpace);
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        protected class clsChange_GrossMarginPctTot : PlanChangeMethodProfile
        {
			public clsChange_GrossMarginPctTot(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "GrossMarginPctTot Change Method")
			{
			}

            public override void Execute(ComputationSchedule aCompSchd, PlanCellReference aPlanCellRef)
            {
                int endTimeId;
                int currTimeId;
                try
                {
                    endTimeId = BasePlanToolBox.GetEndPlanTimeDetail(aPlanCellRef);
                    currTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aPlanCellRef);
                    if ( BasePlanToolBox.isChain(aPlanCellRef) )
                    {
                        BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotSalesDlr_INVERSE_GM_PCT, ((PlanVariables)BasePlanVariables).TotSalesDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_GrossMarginTotDlr_PCT, ((PlanVariables)BasePlanVariables).GrossMarginTotDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DiscountDlr_Calc, ((PlanVariables)BasePlanVariables).DiscountDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_AfterDiscountDlr_Calc, ((PlanVariables)BasePlanVariables).AfterDiscountDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).AfterDiscountAUR);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).AfterDiscGMDlr);
					BasePlanToolBox.InsertSpread(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesDlr, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Spread_TotSalesDlr_SPREAD_DTC_STR);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).AvgStrSlsDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_CompSlsDlr_PCT, ((PlanVariables)BasePlanVariables).CompSlsDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_VATDlr_Calc, ((PlanVariables)BasePlanVariables).VATDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_SaleswithoutVATDlr_Calc, ((PlanVariables)BasePlanVariables).SaleswithoutVATDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_ConvertedSalesDlr_Calc, ((PlanVariables)BasePlanVariables).ConvertedSalesDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCAvgOrder);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCGrossDmdDlr_SUM, ((PlanVariables)BasePlanVariables).DTCGrossDmdDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCGrossDmdAUR);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCGrossDmdGMDlr_DIFF, ((PlanVariables)BasePlanVariables).DTCGrossDmdGMDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCGrsDmdGMPct);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdAUR);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCNetDmdGMDlr_DIFF, ((PlanVariables)BasePlanVariables).DTCNetDmdGMDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdGMPct);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCSlsStkRatio, currTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_NonCompSlsDlr_PCT, ((PlanVariables)BasePlanVariables).NonCompSlsDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesAUR);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_GrossMarginTotStr_DIFF, ((PlanVariables)BasePlanVariables).GrossMarginTotStr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).GrossMarginPctStr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCPlacedOrdersDlr);
                    }
                    if ( BasePlanToolBox.isStore(aPlanCellRef) )
                    {
                        BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotSalesDlr_INVERSE_GM_PCT, ((PlanVariables)BasePlanVariables).TotSalesDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_GrossMarginTotDlr_PCT, ((PlanVariables)BasePlanVariables).GrossMarginTotDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DiscountDlr_Calc, ((PlanVariables)BasePlanVariables).DiscountDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_AfterDiscountDlr_Calc, ((PlanVariables)BasePlanVariables).AfterDiscountDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_VATDlr_Calc, ((PlanVariables)BasePlanVariables).VATDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_SaleswithoutVATDlr_Calc, ((PlanVariables)BasePlanVariables).SaleswithoutVATDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_ConvertedSalesDlr_Calc, ((PlanVariables)BasePlanVariables).ConvertedSalesDlr);
                    }
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        protected class clsChange_TotStrSalesCostDlr : PlanChangeMethodProfile
        {
			public clsChange_TotStrSalesCostDlr(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "TotStrSalesCostDlr Change Method")
			{
			}

            public override void Execute(ComputationSchedule aCompSchd, PlanCellReference aPlanCellRef)
            {
                int startTimeId;
                int endTimeId;
                int currTimeId;
                int currPlusOneTimeId;
                try
                {
                    startTimeId = BasePlanToolBox.GetBeginPlanTimeDetail(aPlanCellRef);
                    endTimeId = BasePlanToolBox.GetEndPlanTimeDetail(aPlanCellRef);
                    currTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aPlanCellRef);
                    currPlusOneTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aPlanCellRef, 1);
                    BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesCostDlr);
					BasePlanToolBox.InsertSpread(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesTotalUnits, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Spread_SalesTotalUnits_PREAD_REG_CLEAR);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotSalesUnit_AUC, ((PlanVariables)BasePlanVariables).TotSalesUnit);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesTotalUnits);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotFreightCostDlr_Calc, ((PlanVariables)BasePlanVariables).TotFreightCostDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotStrSalesDlr_AUR, ((PlanVariables)BasePlanVariables).TotStrSalesDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_GrossMarginTotStr_DIFF, ((PlanVariables)BasePlanVariables).GrossMarginTotStr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesCostDlrPctTTL);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesCDlrperSqSpace);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesCDlrperLinearSpace);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_InventoryTotalUnits_PLUG, ((PlanVariables)BasePlanVariables).InventoryTotalUnits, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_AdjCostDlrTot_PCT, ((PlanVariables)BasePlanVariables).AdjCostDlrTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_AdjUnitsTot_AUC_BINV, ((PlanVariables)BasePlanVariables).AdjUnitsTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_ShrinkCostDlrTot_PCT, ((PlanVariables)BasePlanVariables).ShrinkCostDlrTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_ShrinkUnitsTot_AUC_BINV, ((PlanVariables)BasePlanVariables).ShrinkUnitsTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotBinvCostDlr_PLUG, ((PlanVariables)BasePlanVariables).TotBinvCostDlr, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotBinvAUC, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotEinvCostDlr_FLOW, ((PlanVariables)BasePlanVariables).TotEinvCostDlr, currTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotEinvUnits_FLOW, ((PlanVariables)BasePlanVariables).TotEinvUnits, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DiscountDlr_Calc, ((PlanVariables)BasePlanVariables).DiscountDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_AfterDiscountDlr_Calc, ((PlanVariables)BasePlanVariables).AfterDiscountDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).AfterDiscountAUR);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).AfterDiscGMDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrAvgINVUnit, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrAvgEndINVUnit, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).AvgStrSlsUnit);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).AvgStrSlsDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_CompSlsDlr_PCT, ((PlanVariables)BasePlanVariables).CompSlsDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_VATDlr_Calc, ((PlanVariables)BasePlanVariables).VATDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_SaleswithoutVATDlr_Calc, ((PlanVariables)BasePlanVariables).SaleswithoutVATDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_ConvertedSalesDlr_Calc, ((PlanVariables)BasePlanVariables).ConvertedSalesDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCFWOSUnit, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCSlsStkRatio, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCSellThru, currTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_NonCompSlsDlr_PCT, ((PlanVariables)BasePlanVariables).NonCompSlsDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesRegPromoUnits);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).ForwardWOSTotal, startTimeId,endTimeId);
					BasePlanToolBox.InsertSpread(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).InventoryTotalUnits, currPlusOneTimeId,endTimeId, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Spread_InventoryTotalUnits_Spread);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotDTCSalesUnitPctTTL);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotDTCSalesCostDlrPctTTL);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotEinvAUC, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotFWOSUnit, startTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).GrossMarginTotDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).GrossMarginPctTot);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesAUC);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesAUR);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SellThruUnitPctTot, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).GrossMarginPctStr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesUnitPctTTL);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesDlrperSqSpace);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesDlrperLinearSpace);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesperSpaceU);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesUperSqSpace);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesUperLinearSpace);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DensityU, currPlusOneTimeId,endTimeId);
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        protected class clsChange_TotSalesCostDlr : PlanChangeMethodProfile
        {
			public clsChange_TotSalesCostDlr(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "TotSalesCostDlr Change Method")
			{
			}

            public override void Execute(ComputationSchedule aCompSchd, PlanCellReference aPlanCellRef)
            {
                int startTimeId;
                int endTimeId;
                int currTimeId;
                int currPlusOneTimeId;
                try
                {
                    startTimeId = BasePlanToolBox.GetBeginPlanTimeDetail(aPlanCellRef);
                    endTimeId = BasePlanToolBox.GetEndPlanTimeDetail(aPlanCellRef);
                    currTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aPlanCellRef);
                    currPlusOneTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aPlanCellRef, 1);
                    if ( BasePlanToolBox.isChain(aPlanCellRef) )
                    {
                        BasePlanToolBox.InsertSpread(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesCostDlr, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Spread_TotSalesCostDlr_SPREAD);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_SalesTotalUnits_AUC, ((PlanVariables)BasePlanVariables).SalesTotalUnits);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotFreightCostDlr_Calc, ((PlanVariables)BasePlanVariables).TotFreightCostDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotSalesDlr_AUR, ((PlanVariables)BasePlanVariables).TotSalesDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DiscountDlr_Calc, ((PlanVariables)BasePlanVariables).DiscountDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_AfterDiscountDlr_Calc, ((PlanVariables)BasePlanVariables).AfterDiscountDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).AfterDiscGMDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotDTCSalesCostDlrPctTTL);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotBinvCostDlr_PLUG, ((PlanVariables)BasePlanVariables).TotBinvCostDlr, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_AdjCostDlrTot_PCT, ((PlanVariables)BasePlanVariables).AdjCostDlrTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_ShrinkCostDlrTot_PCT, ((PlanVariables)BasePlanVariables).ShrinkCostDlrTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotEinvCostDlr_FLOW, ((PlanVariables)BasePlanVariables).TotEinvCostDlr, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesCostDlrPctTTL);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotBinvAUC, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_ShrinkUnitsTot_AUC_BINV, ((PlanVariables)BasePlanVariables).ShrinkUnitsTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_InventoryTotalUnits_PLUG, ((PlanVariables)BasePlanVariables).InventoryTotalUnits, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_AdjUnitsTot_AUC_BINV, ((PlanVariables)BasePlanVariables).AdjUnitsTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotEinvUnits_FLOW, ((PlanVariables)BasePlanVariables).TotEinvUnits, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).AfterDiscountAUR);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrAvgINVUnit, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrAvgEndINVUnit, currTimeId,endTimeId);
					BasePlanToolBox.InsertSpread(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesTotalUnits, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Spread_SalesTotalUnits_SPREAD_DTC_STR);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).AvgStrSlsUnit);
					BasePlanToolBox.InsertSpread(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesDlr, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Spread_TotSalesDlr_SPREAD_DTC_STR);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).AvgStrSlsDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_CompSlsDlr_PCT, ((PlanVariables)BasePlanVariables).CompSlsDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_VATDlr_Calc, ((PlanVariables)BasePlanVariables).VATDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_SaleswithoutVATDlr_Calc, ((PlanVariables)BasePlanVariables).SaleswithoutVATDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_ConvertedSalesDlr_Calc, ((PlanVariables)BasePlanVariables).ConvertedSalesDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCAvgOrder);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCGrossDmdCostDlr_SUM, ((PlanVariables)BasePlanVariables).DTCGrossDmdCostDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCBOPct);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCCancelPct);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCFWOSUnit, startTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCGrossDmdUnit_SUM, ((PlanVariables)BasePlanVariables).DTCGrossDmdUnit);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCGrossDmdDlr_SUM, ((PlanVariables)BasePlanVariables).DTCGrossDmdDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCGrossDmdAUC);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCGrossDmdAUR);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCGrossDmdGMDlr_GM_PCT, ((PlanVariables)BasePlanVariables).DTCGrossDmdGMDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdPct);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCNetDmdGMDlr_PCT, ((PlanVariables)BasePlanVariables).DTCNetDmdGMDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCRtnPct);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCSlsStkRatio, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCSellThru, currTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_NonCompSlsDlr_PCT, ((PlanVariables)BasePlanVariables).NonCompSlsDlr);
					BasePlanToolBox.InsertSpread(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesTotalUnits, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Spread_SalesTotalUnits_PREAD_REG_CLEAR);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesRegPromoUnits);
					BasePlanToolBox.InsertSpread(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).InventoryTotalUnits, currPlusOneTimeId,endTimeId, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Spread_InventoryTotalUnits_Spread);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotDTCSalesUnitPctTTL);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotEinvAUC, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotFWOSUnit, startTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_GrossMarginTotStr_PCT, ((PlanVariables)BasePlanVariables).GrossMarginTotStr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).GrossMarginTotDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).GrossMarginPctTot);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SellThruUnitPctTot, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesUnitPctTTL);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesAUC);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesAUR);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesCDlrperSqSpace);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesCDlrperLinearSpace);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesDlrperSqSpace);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesDlrperLinearSpace);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesperSpaceU);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesUperSqSpace);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesUperLinearSpace);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DensityU, currPlusOneTimeId,endTimeId);
                    }
                    if ( BasePlanToolBox.isStore(aPlanCellRef) )
                    {
                        BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_SalesTotalUnits_AUC, ((PlanVariables)BasePlanVariables).SalesTotalUnits);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotSalesDlr_AUR, ((PlanVariables)BasePlanVariables).TotSalesDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_GrossMarginTotDlr_DIFF, ((PlanVariables)BasePlanVariables).GrossMarginTotDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DiscountDlr_Calc, ((PlanVariables)BasePlanVariables).DiscountDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_AfterDiscountDlr_Calc, ((PlanVariables)BasePlanVariables).AfterDiscountDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_VATDlr_Calc, ((PlanVariables)BasePlanVariables).VATDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_SaleswithoutVATDlr_Calc, ((PlanVariables)BasePlanVariables).SaleswithoutVATDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_ConvertedSalesDlr_Calc, ((PlanVariables)BasePlanVariables).ConvertedSalesDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesRegPromoUnits);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).GrossMarginPctTot);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotRecUnit);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotRecCostDlr_AUC, ((PlanVariables)BasePlanVariables).TotRecCostDlr);
					BasePlanToolBox.InsertSpread(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesTotalUnits, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Spread_SalesTotalUnits_PREAD_REG_CLEAR);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesUperLinearSpace);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesUperSqSpace);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesperSpaceU);
                    }
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        protected class clsChange_DTCNetDmdDlr : PlanChangeMethodProfile
        {
			public clsChange_DTCNetDmdDlr(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "DTCNetDmdDlr Change Method")
			{
			}

            public override void Execute(ComputationSchedule aCompSchd, PlanCellReference aPlanCellRef)
            {
                int startTimeId;
                int endTimeId;
                int currTimeId;
                int currPlusOneTimeId;
                try
                {
                    startTimeId = BasePlanToolBox.GetBeginPlanTimeDetail(aPlanCellRef);
                    endTimeId = BasePlanToolBox.GetEndPlanTimeDetail(aPlanCellRef);
                    currTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aPlanCellRef);
                    currPlusOneTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aPlanCellRef, 1);
                    BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCGrossDmdDlr_SUM, ((PlanVariables)BasePlanVariables).DTCGrossDmdDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCNetDmdUnit_AUR, ((PlanVariables)BasePlanVariables).DTCNetDmdUnit);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCNetDmdCostDlr_AUC, ((PlanVariables)BasePlanVariables).DTCNetDmdCostDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCNetDmdGMDlr_DIFF, ((PlanVariables)BasePlanVariables).DTCNetDmdGMDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdGMPct);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotBinvAUC, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_InventoryTotalUnits_PLUG, ((PlanVariables)BasePlanVariables).InventoryTotalUnits, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_ShrinkCostDlrTot_PCT, ((PlanVariables)BasePlanVariables).ShrinkCostDlrTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_ShrinkUnitsTot_AUC_BINV, ((PlanVariables)BasePlanVariables).ShrinkUnitsTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotBinvCostDlr_PLUG, ((PlanVariables)BasePlanVariables).TotBinvCostDlr, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_AdjCostDlrTot_PCT, ((PlanVariables)BasePlanVariables).AdjCostDlrTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_AdjUnitsTot_AUC_BINV, ((PlanVariables)BasePlanVariables).AdjUnitsTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesCostDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotEinvCostDlr_FLOW, ((PlanVariables)BasePlanVariables).TotEinvCostDlr, currTimeId,endTimeId);
					BasePlanToolBox.InsertSpread(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesTotalUnits, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Spread_SalesTotalUnits_PREAD_REG_CLEAR);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesTotalUnits);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotEinvUnits_FLOW, ((PlanVariables)BasePlanVariables).TotEinvUnits, currTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DiscountDlr_Calc, ((PlanVariables)BasePlanVariables).DiscountDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_AfterDiscountDlr_Calc, ((PlanVariables)BasePlanVariables).AfterDiscountDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).AfterDiscountAUR);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotFreightCostDlr_Calc, ((PlanVariables)BasePlanVariables).TotFreightCostDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).AfterDiscGMDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrAvgINVUnit, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrAvgEndINVUnit, currTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_VATDlr_Calc, ((PlanVariables)BasePlanVariables).VATDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_SaleswithoutVATDlr_Calc, ((PlanVariables)BasePlanVariables).SaleswithoutVATDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_ConvertedSalesDlr_Calc, ((PlanVariables)BasePlanVariables).ConvertedSalesDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCFWOSUnit, startTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCGrossDmdUnit_SUM, ((PlanVariables)BasePlanVariables).DTCGrossDmdUnit);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCGrossDmdCostDlr_SUM, ((PlanVariables)BasePlanVariables).DTCGrossDmdCostDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCGrossDmdAUC);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCGrossDmdAUR);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCGrossDmdGMDlr_DIFF, ((PlanVariables)BasePlanVariables).DTCGrossDmdGMDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCGrsDmdGMPct);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesRegPromoUnits);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).ForwardWOSTotal, startTimeId,endTimeId);
					BasePlanToolBox.InsertSpread(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).InventoryTotalUnits, currPlusOneTimeId,endTimeId, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Spread_InventoryTotalUnits_Spread);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotDTCSalesUnitPctTTL);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotDTCSalesCostDlrPctTTL);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotEinvAUC, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotFWOSUnit, startTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).GrossMarginTotDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).GrossMarginPctTot);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesAUC);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesAUR);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SellThruUnitPctTot);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).GrossMarginPctStr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesUnitPctTTL);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesCostDlrPctTTL);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesperSpaceU);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesUperSqSpace);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesUperLinearSpace);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DensityU, currPlusOneTimeId,endTimeId);
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        protected class clsChange_DTCNetDmdCostDlr : PlanChangeMethodProfile
        {
			public clsChange_DTCNetDmdCostDlr(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "DTCNetDmdCostDlr Change Method")
			{
			}

            public override void Execute(ComputationSchedule aCompSchd, PlanCellReference aPlanCellRef)
            {
                int endTimeId;
                int currTimeId;
                int currPlusOneTimeId;
                try
                {
                    endTimeId = BasePlanToolBox.GetEndPlanTimeDetail(aPlanCellRef);
                    currTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aPlanCellRef);
                    currPlusOneTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aPlanCellRef, 1);
                    BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCGrossDmdCostDlr_SUM, ((PlanVariables)BasePlanVariables).DTCGrossDmdCostDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCNetDmdUnit_AUC, ((PlanVariables)BasePlanVariables).DTCNetDmdUnit);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdPct);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCNetDmdDlr_AUR, ((PlanVariables)BasePlanVariables).DTCNetDmdDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCNetDmdGMDlr_DIFF, ((PlanVariables)BasePlanVariables).DTCNetDmdGMDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesCostDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotDTCSalesCostDlrPctTTL);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_InventoryTotalUnits_PLUG, ((PlanVariables)BasePlanVariables).InventoryTotalUnits, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_ShrinkCostDlrTot_PCT, ((PlanVariables)BasePlanVariables).ShrinkCostDlrTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_ShrinkUnitsTot_AUC_BINV, ((PlanVariables)BasePlanVariables).ShrinkUnitsTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotBinvCostDlr_PLUG, ((PlanVariables)BasePlanVariables).TotBinvCostDlr, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_AdjCostDlrTot_PCT, ((PlanVariables)BasePlanVariables).AdjCostDlrTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_AdjUnitsTot_AUC_BINV, ((PlanVariables)BasePlanVariables).AdjUnitsTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotBinvAUC, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotEinvCostDlr_FLOW, ((PlanVariables)BasePlanVariables).TotEinvCostDlr, currTimeId,endTimeId);
					BasePlanToolBox.InsertSpread(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesTotalUnits, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Spread_SalesTotalUnits_PREAD_REG_CLEAR);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesTotalUnits);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotEinvUnits_FLOW, ((PlanVariables)BasePlanVariables).TotEinvUnits, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DiscountDlr_Calc, ((PlanVariables)BasePlanVariables).DiscountDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_AfterDiscountDlr_Calc, ((PlanVariables)BasePlanVariables).AfterDiscountDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).AfterDiscountAUR);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotFreightCostDlr_Calc, ((PlanVariables)BasePlanVariables).TotFreightCostDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).AfterDiscGMDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrAvgINVUnit, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrAvgEndINVUnit, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).AvgStrSlsUnit);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_VATDlr_Calc, ((PlanVariables)BasePlanVariables).VATDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_SaleswithoutVATDlr_Calc, ((PlanVariables)BasePlanVariables).SaleswithoutVATDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_ConvertedSalesDlr_Calc, ((PlanVariables)BasePlanVariables).ConvertedSalesDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCFWOSUnit, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCGrossDmdUnit_SUM, ((PlanVariables)BasePlanVariables).DTCGrossDmdUnit);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCGrossDmdAUC);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCGrossDmdAUR);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCGrossDmdGMDlr_DIFF, ((PlanVariables)BasePlanVariables).DTCGrossDmdGMDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCGrsDmdGMPct);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdGMPct);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesRegPromoUnits);
					BasePlanToolBox.InsertSpread(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).InventoryTotalUnits, currPlusOneTimeId,endTimeId, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Spread_InventoryTotalUnits_Spread);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotDTCSalesUnitPctTTL);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotEinvAUC, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).GrossMarginTotDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).GrossMarginPctTot);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesAUC);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesAUR);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SellThruUnitPctTot, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).GrossMarginPctStr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesCostDlrPctTTL);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesperSpaceU);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesUperSqSpace);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesUperLinearSpace);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DensityU, currPlusOneTimeId,endTimeId);
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        protected class clsChange_DTCNetDmdUnit : PlanChangeMethodProfile
        {
			public clsChange_DTCNetDmdUnit(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "DTCNetDmdUnit Change Method")
			{
			}

            public override void Execute(ComputationSchedule aCompSchd, PlanCellReference aPlanCellRef)
            {
                int startTimeId;
                int endTimeId;
                int currTimeId;
                int currPlusOneTimeId;
                try
                {
                    startTimeId = BasePlanToolBox.GetBeginPlanTimeDetail(aPlanCellRef);
                    endTimeId = BasePlanToolBox.GetEndPlanTimeDetail(aPlanCellRef);
                    currTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aPlanCellRef);
                    currPlusOneTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aPlanCellRef, 1);
                    BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_AdjCostDlrTot_PCT, ((PlanVariables)BasePlanVariables).AdjCostDlrTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_AdjUnitsTot_AUC_BINV, ((PlanVariables)BasePlanVariables).AdjUnitsTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_InventoryTotalUnits_PLUG, ((PlanVariables)BasePlanVariables).InventoryTotalUnits, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_ShrinkCostDlrTot_PCT, ((PlanVariables)BasePlanVariables).ShrinkCostDlrTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_ShrinkUnitsTot_AUC_BINV, ((PlanVariables)BasePlanVariables).ShrinkUnitsTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotBinvCostDlr_PLUG, ((PlanVariables)BasePlanVariables).TotBinvCostDlr, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotBinvAUC, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCNetDmdCostDlr_AUC, ((PlanVariables)BasePlanVariables).DTCNetDmdCostDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesCostDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotEinvCostDlr_FLOW, ((PlanVariables)BasePlanVariables).TotEinvCostDlr, currTimeId,endTimeId);
					BasePlanToolBox.InsertSpread(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesTotalUnits, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Spread_SalesTotalUnits_PREAD_REG_CLEAR);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesTotalUnits);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotEinvUnits_FLOW, ((PlanVariables)BasePlanVariables).TotEinvUnits, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCFWOSUnit, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCGrossDmdUnit_SUM, ((PlanVariables)BasePlanVariables).DTCGrossDmdUnit);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCNetDmdDlr_AUR, ((PlanVariables)BasePlanVariables).DTCNetDmdDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotDTCSalesUnitPctTTL);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DiscountDlr_Calc, ((PlanVariables)BasePlanVariables).DiscountDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_AfterDiscountDlr_Calc, ((PlanVariables)BasePlanVariables).AfterDiscountDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).AfterDiscountAUR);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotFreightCostDlr_Calc, ((PlanVariables)BasePlanVariables).TotFreightCostDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).AfterDiscGMDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrAvgINVUnit, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrAvgEndINVUnit, currTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_VATDlr_Calc, ((PlanVariables)BasePlanVariables).VATDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_SaleswithoutVATDlr_Calc, ((PlanVariables)BasePlanVariables).SaleswithoutVATDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_ConvertedSalesDlr_Calc, ((PlanVariables)BasePlanVariables).ConvertedSalesDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCGrossDmdDlr_SUM, ((PlanVariables)BasePlanVariables).DTCGrossDmdDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCGrossDmdCostDlr_SUM, ((PlanVariables)BasePlanVariables).DTCGrossDmdCostDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCGrossDmdAUC);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCGrossDmdAUR);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCGrossDmdGMDlr_DIFF, ((PlanVariables)BasePlanVariables).DTCGrossDmdGMDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCGrsDmdGMPct);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCNetDmdGMDlr_DIFF, ((PlanVariables)BasePlanVariables).DTCNetDmdGMDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdGMPct);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesRegPromoUnits);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).ForwardWOSTotal, startTimeId,endTimeId);
					BasePlanToolBox.InsertSpread(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).InventoryTotalUnits, currPlusOneTimeId,endTimeId, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Spread_InventoryTotalUnits_Spread);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotDTCSalesCostDlrPctTTL);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotEinvAUC, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotFWOSUnit, startTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).GrossMarginTotDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).GrossMarginPctTot);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesAUC);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesAUR);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SellThruUnitPctTot);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).GrossMarginPctStr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesUnitPctTTL);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesCostDlrPctTTL);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesperSpaceU);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesUperSqSpace);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesUperLinearSpace);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DensityU, currPlusOneTimeId,endTimeId);
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        protected class clsChange_DTCNetDmdAUR : PlanChangeMethodProfile
        {
			public clsChange_DTCNetDmdAUR(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "DTCNetDmdAUR Change Method")
			{
			}

            public override void Execute(ComputationSchedule aCompSchd, PlanCellReference aPlanCellRef)
            {
                try
                {
                    BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCNetDmdDlr_AUR, ((PlanVariables)BasePlanVariables).DTCNetDmdDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCPlacedOrdersDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DiscountDlr_Calc, ((PlanVariables)BasePlanVariables).DiscountDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_AfterDiscountDlr_Calc, ((PlanVariables)BasePlanVariables).AfterDiscountDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).AfterDiscountAUR);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).AfterDiscGMDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_VATDlr_Calc, ((PlanVariables)BasePlanVariables).VATDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_SaleswithoutVATDlr_Calc, ((PlanVariables)BasePlanVariables).SaleswithoutVATDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_ConvertedSalesDlr_Calc, ((PlanVariables)BasePlanVariables).ConvertedSalesDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCGrossDmdDlr_SUM, ((PlanVariables)BasePlanVariables).DTCGrossDmdDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCGrossDmdAUR);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCGrossDmdGMDlr_DIFF, ((PlanVariables)BasePlanVariables).DTCGrossDmdGMDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCGrsDmdGMPct);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCNetDmdGMDlr_DIFF, ((PlanVariables)BasePlanVariables).DTCNetDmdGMDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdGMPct);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).GrossMarginTotDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).GrossMarginPctTot);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesAUR);
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        protected class clsChange_DTCNetDmdAUC : PlanChangeMethodProfile
        {
			public clsChange_DTCNetDmdAUC(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "DTCNetDmdAUC Change Method")
			{
			}

            public override void Execute(ComputationSchedule aCompSchd, PlanCellReference aPlanCellRef)
            {
                int endTimeId;
                int currTimeId;
                int currPlusOneTimeId;
                try
                {
                    endTimeId = BasePlanToolBox.GetEndPlanTimeDetail(aPlanCellRef);
                    currTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aPlanCellRef);
                    currPlusOneTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aPlanCellRef, 1);
                    BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCNetDmdCostDlr_AUC, ((PlanVariables)BasePlanVariables).DTCNetDmdCostDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesCostDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).AfterDiscGMDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_SaleswithoutVATDlr_Calc, ((PlanVariables)BasePlanVariables).SaleswithoutVATDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_ConvertedSalesDlr_Calc, ((PlanVariables)BasePlanVariables).ConvertedSalesDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCGrossDmdCostDlr_SUM, ((PlanVariables)BasePlanVariables).DTCGrossDmdCostDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCGrossDmdAUC);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCGrossDmdGMDlr_DIFF, ((PlanVariables)BasePlanVariables).DTCGrossDmdGMDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCGrsDmdGMPct);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCNetDmdGMDlr_DIFF, ((PlanVariables)BasePlanVariables).DTCNetDmdGMDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdGMPct);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_AdjCostDlrTot_PCT, ((PlanVariables)BasePlanVariables).AdjCostDlrTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_ShrinkCostDlrTot_PCT, ((PlanVariables)BasePlanVariables).ShrinkCostDlrTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotBinvCostDlr_FLOW, ((PlanVariables)BasePlanVariables).TotBinvCostDlr, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotBinvAUC, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotDTCSalesCostDlrPctTTL);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotEinvCostDlr_PLUG, ((PlanVariables)BasePlanVariables).TotEinvCostDlr, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).GrossMarginTotDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).GrossMarginPctTot);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesAUC);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesCostDlrPctTTL);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotEinvAUC, currTimeId,endTimeId);
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        protected class clsChange_DTCNetDmdGMPct : PlanChangeMethodProfile
        {
			public clsChange_DTCNetDmdGMPct(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "DTCNetDmdGMPct Change Method")
			{
			}

            public override void Execute(ComputationSchedule aCompSchd, PlanCellReference aPlanCellRef)
            {
                try
                {
                    BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCNetDmdDlr_NETD_GM_PCT, ((PlanVariables)BasePlanVariables).DTCNetDmdDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCNetDmdGMDlr_PCT, ((PlanVariables)BasePlanVariables).DTCNetDmdGMDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DiscountDlr_Calc, ((PlanVariables)BasePlanVariables).DiscountDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_AfterDiscountDlr_Calc, ((PlanVariables)BasePlanVariables).AfterDiscountDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).AfterDiscountAUR);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).AfterDiscGMDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_VATDlr_Calc, ((PlanVariables)BasePlanVariables).VATDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_SaleswithoutVATDlr_Calc, ((PlanVariables)BasePlanVariables).SaleswithoutVATDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_ConvertedSalesDlr_Calc, ((PlanVariables)BasePlanVariables).ConvertedSalesDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCGrossDmdDlr_SUM, ((PlanVariables)BasePlanVariables).DTCGrossDmdDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCGrossDmdAUR);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCGrossDmdGMDlr_DIFF, ((PlanVariables)BasePlanVariables).DTCGrossDmdGMDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCGrsDmdGMPct);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdAUR);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).GrossMarginTotDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).GrossMarginPctTot);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesAUR);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCPlacedOrdersDlr);
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        protected class clsChange_TotDTCSalesCostDlrPctTTL : PlanChangeMethodProfile
        {
			public clsChange_TotDTCSalesCostDlrPctTTL(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "TotDTCSalesCostDlrPctTTL Change Method")
			{
			}

            public override void Execute(ComputationSchedule aCompSchd, PlanCellReference aPlanCellRef)
            {
                int endTimeId;
                int currTimeId;
                int currPlusOneTimeId;
                try
                {
                    endTimeId = BasePlanToolBox.GetEndPlanTimeDetail(aPlanCellRef);
                    currTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aPlanCellRef);
                    currPlusOneTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aPlanCellRef, 1);
                    BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCNetDmdCostDlr_PCT_DTCPCT, ((PlanVariables)BasePlanVariables).DTCNetDmdCostDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCNetDmdUnit_AUC, ((PlanVariables)BasePlanVariables).DTCNetDmdUnit);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCNetDmdDlr_AUR, ((PlanVariables)BasePlanVariables).DTCNetDmdDlr);
					BasePlanToolBox.InsertSpread(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdUnit, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Spread_SalesTotalUnits_SpreadDifference);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).AvgStrSlsUnit);
					BasePlanToolBox.InsertSpread(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdDlr, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Spread_TotSalesDlr_SpreadDifference);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).AvgStrSlsDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_NonCompSlsDlr_PCT, ((PlanVariables)BasePlanVariables).NonCompSlsDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_CompSlsDlr_Differerence, ((PlanVariables)BasePlanVariables).CompSlsDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCAvgOrder);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCFWOSUnit, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCGrossDmdUnit_SUM, ((PlanVariables)BasePlanVariables).DTCGrossDmdUnit);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCGrossDmdCostDlr_SUM, ((PlanVariables)BasePlanVariables).DTCGrossDmdCostDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCGrossDmdAUC);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCGrossDmdAUR);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCGrossDmdGMDlr_DIFF, ((PlanVariables)BasePlanVariables).DTCGrossDmdGMDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCGrsDmdGMPct);
					BasePlanToolBox.InsertSpread(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdCostDlr, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Spread_TotSalesCostDlr_SpreadDifference);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdPct);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCNetDmdGMDlr_DIFF, ((PlanVariables)BasePlanVariables).DTCNetDmdGMDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdGMPct);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesRegPromoUnits);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotDTCSalesUnitPctTTL);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_GrossMarginTotStr_DIFF, ((PlanVariables)BasePlanVariables).GrossMarginTotStr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).GrossMarginTotDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).GrossMarginPctTot);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SellThruUnitPctTot, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).GrossMarginPctStr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesUnitPctTTL);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesAUC);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesAUR);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesCostDlrPctTTL);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesCDlrperSqSpace);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesCDlrperLinearSpace);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesDlrperSqSpace);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesDlrperLinearSpace);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesperSpaceU);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesUperSqSpace);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesUperLinearSpace);
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        protected class clsChange_TotStrSalesCostDlrPctTTL : PlanChangeMethodProfile
        {
			public clsChange_TotStrSalesCostDlrPctTTL(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "TotStrSalesCostDlrPctTTL Change Method")
			{
			}

            public override void Execute(ComputationSchedule aCompSchd, PlanCellReference aPlanCellRef)
            {
                int endTimeId;
                int currTimeId;
                int currPlusOneTimeId;
                try
                {
                    endTimeId = BasePlanToolBox.GetEndPlanTimeDetail(aPlanCellRef);
                    currTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aPlanCellRef);
                    currPlusOneTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aPlanCellRef, 1);
                    BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotStrSalesCostDlr_PCT_PCTTTL, ((PlanVariables)BasePlanVariables).TotStrSalesCostDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotSalesUnit_AUC, ((PlanVariables)BasePlanVariables).TotSalesUnit);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotStrSalesDlr_AUR, ((PlanVariables)BasePlanVariables).TotStrSalesDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).AvgStrSlsUnit);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).AvgStrSlsDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_NonCompSlsDlr_PCT, ((PlanVariables)BasePlanVariables).NonCompSlsDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_CompSlsDlr_Differerence, ((PlanVariables)BasePlanVariables).CompSlsDlr);
					BasePlanToolBox.InsertSpread(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesDlr, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Spread_TotSalesDlr_SpreadDifference);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCAvgOrder);
					BasePlanToolBox.InsertSpread(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesUnit, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Spread_SalesTotalUnits_SpreadDifference);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCFWOSUnit, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCGrossDmdUnit_SUM, ((PlanVariables)BasePlanVariables).DTCGrossDmdUnit);
					BasePlanToolBox.InsertSpread(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesCostDlr, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Spread_TotSalesCostDlr_SpreadDifference);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCGrossDmdCostDlr_SUM, ((PlanVariables)BasePlanVariables).DTCGrossDmdCostDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCGrossDmdAUC);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCGrossDmdAUR);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCGrossDmdGMDlr_DIFF, ((PlanVariables)BasePlanVariables).DTCGrossDmdGMDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCGrsDmdGMPct);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdAUC);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdAUR);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdPct);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCNetDmdGMDlr_DIFF, ((PlanVariables)BasePlanVariables).DTCNetDmdGMDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdGMPct);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesRegPromoUnits);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesUperLinearSpace);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesUperSqSpace);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesperSpaceU);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotDTCSalesUnitPctTTL);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_GrossMarginTotStr_DIFF, ((PlanVariables)BasePlanVariables).GrossMarginTotStr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).GrossMarginTotDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).GrossMarginPctTot);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SellThruUnitPctTot, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).GrossMarginPctStr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesUnitPctTTL);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesDlrperLinearSpace);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesDlrperSqSpace);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesCDlrperLinearSpace);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesCDlrperSqSpace);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCPlacedOrdersDlr);
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        protected class clsChange_TotDTCSalesUnitPctTTL : PlanChangeMethodProfile
        {
			public clsChange_TotDTCSalesUnitPctTTL(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "TotDTCSalesUnitPctTTL Change Method")
			{
			}

            public override void Execute(ComputationSchedule aCompSchd, PlanCellReference aPlanCellRef)
            {
                int startTimeId;
                int endTimeId;
                int currTimeId;
                try
                {
                    startTimeId = BasePlanToolBox.GetBeginPlanTimeDetail(aPlanCellRef);
                    endTimeId = BasePlanToolBox.GetEndPlanTimeDetail(aPlanCellRef);
                    currTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aPlanCellRef);
                    BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCNetDmdUnit_PCT_DTCPCT, ((PlanVariables)BasePlanVariables).DTCNetDmdUnit);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCNetDmdDlr_AUR, ((PlanVariables)BasePlanVariables).DTCNetDmdDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCNetDmdCostDlr_AUC, ((PlanVariables)BasePlanVariables).DTCNetDmdCostDlr);
					BasePlanToolBox.InsertSpread(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdUnit, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Spread_SalesTotalUnits_SpreadDifference);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).AvgStrSlsUnit);
					BasePlanToolBox.InsertSpread(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdDlr, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Spread_TotSalesDlr_SpreadDifference);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).AvgStrSlsDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCAvgOrder);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCFWOSUnit, startTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCGrossDmdUnit_SUM, ((PlanVariables)BasePlanVariables).DTCGrossDmdUnit);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCGrossDmdDlr_SUM, ((PlanVariables)BasePlanVariables).DTCGrossDmdDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCGrossDmdCostDlr_SUM, ((PlanVariables)BasePlanVariables).DTCGrossDmdCostDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCGrossDmdAUC);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCGrossDmdAUR);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCGrossDmdGMDlr_DIFF, ((PlanVariables)BasePlanVariables).DTCGrossDmdGMDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCGrsDmdGMPct);
					BasePlanToolBox.InsertSpread(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdCostDlr, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Spread_TotSalesCostDlr_SpreadDifference);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCNetDmdGMDlr_DIFF, ((PlanVariables)BasePlanVariables).DTCNetDmdGMDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdGMPct);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCSlsStkRatio, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCSellThru, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesRegPromoUnits);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).ForwardWOSTotal, startTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotDTCSalesCostDlrPctTTL);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotFWOSUnit, startTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_GrossMarginTotStr_PCT, ((PlanVariables)BasePlanVariables).GrossMarginTotStr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).GrossMarginTotDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).GrossMarginPctTot);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesAUC);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesAUR);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SellThruUnitPctTot);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesUnitPctTTL);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesCostDlrPctTTL);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesCDlrperSqSpace);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesCDlrperLinearSpace);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesDlrperSqSpace);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesDlrperLinearSpace);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesperSpaceU);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesUperSqSpace);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesUperLinearSpace);
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        protected class clsChange_TotStrSalesUnitPctTTL : PlanChangeMethodProfile
        {
			public clsChange_TotStrSalesUnitPctTTL(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "TotStrSalesUnitPctTTL Change Method")
			{
			}

            public override void Execute(ComputationSchedule aCompSchd, PlanCellReference aPlanCellRef)
            {
                int startTimeId;
                int endTimeId;
                int currTimeId;
                int currPlusOneTimeId;
                try
                {
                    startTimeId = BasePlanToolBox.GetBeginPlanTimeDetail(aPlanCellRef);
                    endTimeId = BasePlanToolBox.GetEndPlanTimeDetail(aPlanCellRef);
                    currTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aPlanCellRef);
                    currPlusOneTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aPlanCellRef, 1);
                    BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotSalesUnit_PCT_PCTTTL, ((PlanVariables)BasePlanVariables).TotSalesUnit);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotStrSalesDlr_AUR, ((PlanVariables)BasePlanVariables).TotStrSalesDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotStrSalesCostDlr_AUC, ((PlanVariables)BasePlanVariables).TotStrSalesCostDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).AvgStrSlsUnit);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).AvgStrSlsDlr);
					BasePlanToolBox.InsertSpread(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesDlr, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Spread_TotSalesDlr_SpreadDifference);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCAvgOrder);
					BasePlanToolBox.InsertSpread(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesUnit, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Spread_SalesTotalUnits_SpreadDifference);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCFWOSUnit, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCGrossDmdUnit_SUM, ((PlanVariables)BasePlanVariables).DTCGrossDmdUnit);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCGrossDmdDlr_SUM, ((PlanVariables)BasePlanVariables).DTCGrossDmdDlr);
					BasePlanToolBox.InsertSpread(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesCostDlr, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Spread_TotSalesCostDlr_SpreadDifference);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCGrossDmdCostDlr_SUM, ((PlanVariables)BasePlanVariables).DTCGrossDmdCostDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCGrossDmdAUC);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCGrossDmdAUR);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCGrossDmdGMDlr_DIFF, ((PlanVariables)BasePlanVariables).DTCGrossDmdGMDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCGrsDmdGMPct);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdAUC);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdAUR);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCNetDmdGMDlr_DIFF, ((PlanVariables)BasePlanVariables).DTCNetDmdGMDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdGMPct);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCSlsStkRatio, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCSellThru, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesRegPromoUnits);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesUperLinearSpace);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesUperSqSpace);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesperSpaceU);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).ForwardWOSTotal, startTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotDTCSalesUnitPctTTL);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotDTCSalesCostDlrPctTTL);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotFWOSUnit, startTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_GrossMarginTotStr_DIFF, ((PlanVariables)BasePlanVariables).GrossMarginTotStr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).GrossMarginTotDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).GrossMarginPctTot);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesAUC);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesAUR);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SellThruUnitPctTot);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).GrossMarginPctStr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesDlrperLinearSpace);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesDlrperSqSpace);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesCostDlrPctTTL);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesCDlrperLinearSpace);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesCDlrperSqSpace);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCPlacedOrdersDlr);
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        protected class clsChange_DiscountPct : PlanChangeMethodProfile
        {
			public clsChange_DiscountPct(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "DiscountPct Change Method")
			{
			}

            public override void Execute(ComputationSchedule aCompSchd, PlanCellReference aPlanCellRef)
            {
                try
                {
                    BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DiscountDlr_Calc, ((PlanVariables)BasePlanVariables).DiscountDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_AfterDiscountDlr_Calc, ((PlanVariables)BasePlanVariables).AfterDiscountDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).AfterDiscountAUR);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).AfterDiscGMDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_VATDlr_Calc, ((PlanVariables)BasePlanVariables).VATDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_SaleswithoutVATDlr_Calc, ((PlanVariables)BasePlanVariables).SaleswithoutVATDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_ConvertedSalesDlr_Calc, ((PlanVariables)BasePlanVariables).ConvertedSalesDlr);
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        protected class clsChange_FreightCostPerUnit : PlanChangeMethodProfile
        {
			public clsChange_FreightCostPerUnit(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "FreightCostPerUnit Change Method")
			{
			}

            public override void Execute(ComputationSchedule aCompSchd, PlanCellReference aPlanCellRef)
            {
                try
                {
                    BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotFreightCostDlr_Calc, ((PlanVariables)BasePlanVariables).TotFreightCostDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_GrossMarginTotStr_DIFF, ((PlanVariables)BasePlanVariables).GrossMarginTotStr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).GrossMarginPctStr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).GrossMarginTotDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).GrossMarginPctTot);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).AfterDiscGMDlr);
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        protected class clsChange_VATPct : PlanChangeMethodProfile
        {
			public clsChange_VATPct(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "VATPct Change Method")
			{
			}

            public override void Execute(ComputationSchedule aCompSchd, PlanCellReference aPlanCellRef)
            {
                try
                {
                    BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_VATDlr_Calc, ((PlanVariables)BasePlanVariables).VATDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_SaleswithoutVATDlr_Calc, ((PlanVariables)BasePlanVariables).SaleswithoutVATDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_ConvertedSalesDlr_Calc, ((PlanVariables)BasePlanVariables).ConvertedSalesDlr);
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        protected class clsChange_CurrXchgPct : PlanChangeMethodProfile
        {
			public clsChange_CurrXchgPct(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "CurrXchgPct Change Method")
			{
			}

            public override void Execute(ComputationSchedule aCompSchd, PlanCellReference aPlanCellRef)
            {
                try
                {
                    BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_ConvertedSalesDlr_Calc, ((PlanVariables)BasePlanVariables).ConvertedSalesDlr);
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        protected class clsChange_TotEinvUnits : PlanChangeMethodProfile
        {
			public clsChange_TotEinvUnits(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "TotEinvUnits Change Method")
			{
			}

            public override void Execute(ComputationSchedule aCompSchd, PlanCellReference aPlanCellRef)
            {
                int endTimeId;
                int currTimeId;
                int currPlusOneTimeId;
                try
                {
                    endTimeId = BasePlanToolBox.GetEndPlanTimeDetail(aPlanCellRef);
                    currTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aPlanCellRef);
                    currPlusOneTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aPlanCellRef, 1);
                    BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_AdjCostDlrTot_PCT, ((PlanVariables)BasePlanVariables).AdjCostDlrTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotBinvCostDlr_PLUG, ((PlanVariables)BasePlanVariables).TotBinvCostDlr, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotEinvAUC, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotBinvAUC, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_AdjUnitsTot_AUC_BINV, ((PlanVariables)BasePlanVariables).AdjUnitsTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_InventoryTotalUnits_PLUG, ((PlanVariables)BasePlanVariables).InventoryTotalUnits, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotEinvCostDlr_AUC, ((PlanVariables)BasePlanVariables).TotEinvCostDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_ShrinkCostDlrTot_PCT, ((PlanVariables)BasePlanVariables).ShrinkCostDlrTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_ShrinkUnitsTot_AUC_BINV, ((PlanVariables)BasePlanVariables).ShrinkUnitsTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotRecUnit);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotEinvUnits_FLOW, ((PlanVariables)BasePlanVariables).TotEinvUnits, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrAvgEndINVUnit, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCSellThru, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SellThruUnitPctTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertSpread(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).InventoryTotalUnits, currPlusOneTimeId,endTimeId, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Spread_InventoryTotalUnits_Spread);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrAvgINVUnit, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCFWOSUnit, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCSlsStkRatio, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).ForwardWOSTotal, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).OTBUnit);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).OTBUnitCum, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotRecCostDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).OTBCostDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).OTBCostDlrCum, currTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotEinvCostDlr_FLOW, ((PlanVariables)BasePlanVariables).TotEinvCostDlr, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotFWOSUnit, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).ReceiptAUCTot);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DensityU, currPlusOneTimeId,endTimeId);
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        protected class clsChange_TotEinvCostDlr : PlanChangeMethodProfile
        {
			public clsChange_TotEinvCostDlr(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "TotEinvCostDlr Change Method")
			{
			}

            public override void Execute(ComputationSchedule aCompSchd, PlanCellReference aPlanCellRef)
            {
                int endTimeId;
                int currTimeId;
                int currPlusOneTimeId;
                try
                {
                    endTimeId = BasePlanToolBox.GetEndPlanTimeDetail(aPlanCellRef);
                    currTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aPlanCellRef);
                    currPlusOneTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aPlanCellRef, 1);
                    BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_AdjCostDlrTot_PCT, ((PlanVariables)BasePlanVariables).AdjCostDlrTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotBinvCostDlr_PLUG, ((PlanVariables)BasePlanVariables).TotBinvCostDlr, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_ShrinkCostDlrTot_PCT, ((PlanVariables)BasePlanVariables).ShrinkCostDlrTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotRecCostDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotEinvCostDlr_FLOW, ((PlanVariables)BasePlanVariables).TotEinvCostDlr, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotEinvAUC, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotEinvUnits_AUC, ((PlanVariables)BasePlanVariables).TotEinvUnits);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_InventoryTotalUnits_PLUG, ((PlanVariables)BasePlanVariables).InventoryTotalUnits, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrAvgINVUnit, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrAvgEndINVUnit, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCFWOSUnit, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCSlsStkRatio, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCSellThru, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).ForwardWOSTotal, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_AdjUnitsTot_AUC_BINV, ((PlanVariables)BasePlanVariables).AdjUnitsTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertSpread(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).InventoryTotalUnits, currPlusOneTimeId,endTimeId, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Spread_InventoryTotalUnits_Spread);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_ShrinkUnitsTot_AUC_BINV, ((PlanVariables)BasePlanVariables).ShrinkUnitsTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotRecUnit);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).OTBUnit);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).OTBUnitCum, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).OTBCostDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).OTBCostDlrCum, currTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotEinvUnits_FLOW, ((PlanVariables)BasePlanVariables).TotEinvUnits, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotFWOSUnit, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).ReceiptAUCTot);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SellThruUnitPctTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DensityU, currPlusOneTimeId,endTimeId);
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        protected class clsChange_TotEinvAUC : PlanChangeMethodProfile
        {
			public clsChange_TotEinvAUC(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "TotEinvAUC Change Method")
			{
			}

            public override void Execute(ComputationSchedule aCompSchd, PlanCellReference aPlanCellRef)
            {
                int endTimeId;
                int currTimeId;
                int currPlusOneTimeId;
                try
                {
                    endTimeId = BasePlanToolBox.GetEndPlanTimeDetail(aPlanCellRef);
                    currTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aPlanCellRef);
                    currPlusOneTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aPlanCellRef, 1);
                    BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_AdjCostDlrTot_PCT, ((PlanVariables)BasePlanVariables).AdjCostDlrTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_AdjUnitsTot_AUC_BINV, ((PlanVariables)BasePlanVariables).AdjUnitsTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_InventoryTotalUnits_PLUG, ((PlanVariables)BasePlanVariables).InventoryTotalUnits, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_ShrinkCostDlrTot_PCT, ((PlanVariables)BasePlanVariables).ShrinkCostDlrTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_ShrinkUnitsTot_AUC_BINV, ((PlanVariables)BasePlanVariables).ShrinkUnitsTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotBinvCostDlr_PLUG, ((PlanVariables)BasePlanVariables).TotBinvCostDlr, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotEinvUnits_FLOW, ((PlanVariables)BasePlanVariables).TotEinvUnits, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotBinvAUC, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotEinvCostDlr_AUC, ((PlanVariables)BasePlanVariables).TotEinvCostDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotEinvAUC, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotRecCostDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotEinvCostDlr_FLOW, ((PlanVariables)BasePlanVariables).TotEinvCostDlr, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrAvgINVUnit, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrAvgEndINVUnit, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCFWOSUnit, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCSlsStkRatio, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCSellThru, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).ForwardWOSTotal, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).OTBCostDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).OTBCostDlrCum, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotFWOSUnit, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).ReceiptAUCTot);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SellThruUnitPctTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DensityU, currPlusOneTimeId,endTimeId);
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        protected class clsChange_AdjUntiPctTot : PlanChangeMethodProfile
        {
			public clsChange_AdjUntiPctTot(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "AdjUntiPctTot Change Method")
			{
			}

            public override void Execute(ComputationSchedule aCompSchd, PlanCellReference aPlanCellRef)
            {
                int endTimeId;
                int currTimeId;
                int currPlusOneTimeId;
                try
                {
                    endTimeId = BasePlanToolBox.GetEndPlanTimeDetail(aPlanCellRef);
                    currTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aPlanCellRef);
                    currPlusOneTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aPlanCellRef, 1);
                    BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotBinvCostDlr_FLOW, ((PlanVariables)BasePlanVariables).TotBinvCostDlr, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_AdjCostDlrTot_PCT, ((PlanVariables)BasePlanVariables).AdjCostDlrTot, currTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_InventoryTotalUnits_FLOW, ((PlanVariables)BasePlanVariables).InventoryTotalUnits, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotBinvAUC, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_AdjUnitsTot_AUC_BINV, ((PlanVariables)BasePlanVariables).AdjUnitsTot, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrAvgINVUnit, currTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotEinvUnits_PLUG, ((PlanVariables)BasePlanVariables).TotEinvUnits, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrAvgEndINVUnit, currTimeId,endTimeId);
					BasePlanToolBox.InsertSpread(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).InventoryTotalUnits, currPlusOneTimeId,endTimeId, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Spread_InventoryTotalUnits_Spread);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DensityU, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCFWOSUnit, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCSlsStkRatio, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCSellThru, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesRegPromoUnits);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).ForwardWOSTotal, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotEinvCostDlr_PLUG, ((PlanVariables)BasePlanVariables).TotEinvCostDlr, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotEinvAUC, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotFWOSUnit, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SellThruUnitPctTot, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).ShrinkPctTot, currTimeId,endTimeId);
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        protected class clsChange_DTCCancelPct : PlanChangeMethodProfile
        {
			public clsChange_DTCCancelPct(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "DTCCancelPct Change Method")
			{
			}

            public override void Execute(ComputationSchedule aCompSchd, PlanCellReference aPlanCellRef)
            {
                int startTimeId;
                int endTimeId;
                int currTimeId;
                int currPlusOneTimeId;
                try
                {
                    startTimeId = BasePlanToolBox.GetBeginPlanTimeDetail(aPlanCellRef);
                    endTimeId = BasePlanToolBox.GetEndPlanTimeDetail(aPlanCellRef);
                    currTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aPlanCellRef);
                    currPlusOneTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aPlanCellRef, 1);
                    BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCCancelCostDlr_PCT_CANPCT, ((PlanVariables)BasePlanVariables).DTCCancelCostDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCCancelUnit_AUC_GRSD, ((PlanVariables)BasePlanVariables).DTCCancelUnit);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCCancelDlr_AUR_GRSD, ((PlanVariables)BasePlanVariables).DTCCancelDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_AdjCostDlrTot_PCT, ((PlanVariables)BasePlanVariables).AdjCostDlrTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_ShrinkCostDlrTot_PCT, ((PlanVariables)BasePlanVariables).ShrinkCostDlrTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_ShrinkUnitsTot_AUC_BINV, ((PlanVariables)BasePlanVariables).ShrinkUnitsTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotBinvCostDlr_PLUG, ((PlanVariables)BasePlanVariables).TotBinvCostDlr, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotBinvAUC, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertSpread(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).InventoryTotalUnits, currPlusOneTimeId,endTimeId, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Spread_InventoryTotalUnits_Spread);
					BasePlanToolBox.InsertSpread(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCCancelCostDlr, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Spread_DTCGrossDmdCostDlr_SpreadDifference);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesCostDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotEinvCostDlr_FLOW, ((PlanVariables)BasePlanVariables).TotEinvCostDlr, currTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_AdjUnitsTot_AUC_BINV, ((PlanVariables)BasePlanVariables).AdjUnitsTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertSpread(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCCancelUnit, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Spread_DTCGrossDmdUnit_SpreadDifference);
					BasePlanToolBox.InsertSpread(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesTotalUnits, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Spread_SalesTotalUnits_PREAD_REG_CLEAR);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesTotalUnits);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_InventoryTotalUnits_PLUG, ((PlanVariables)BasePlanVariables).InventoryTotalUnits, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotEinvUnits_FLOW, ((PlanVariables)BasePlanVariables).TotEinvUnits, currTimeId,endTimeId);
					BasePlanToolBox.InsertSpread(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCCancelDlr, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Spread_DTCGrossDmdDlr_SpreadDifference);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DiscountDlr_Calc, ((PlanVariables)BasePlanVariables).DiscountDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_AfterDiscountDlr_Calc, ((PlanVariables)BasePlanVariables).AfterDiscountDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).AfterDiscountAUR);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotFreightCostDlr_Calc, ((PlanVariables)BasePlanVariables).TotFreightCostDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).AfterDiscGMDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrAvgINVUnit, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrAvgEndINVUnit, currTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_VATDlr_Calc, ((PlanVariables)BasePlanVariables).VATDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_SaleswithoutVATDlr_Calc, ((PlanVariables)BasePlanVariables).SaleswithoutVATDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_ConvertedSalesDlr_Calc, ((PlanVariables)BasePlanVariables).ConvertedSalesDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DensityU, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCAvgOrder);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCBOPct);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCFWOSUnit, startTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdAUC);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdAUR);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdPct);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCNetDmdGMDlr_DIFF, ((PlanVariables)BasePlanVariables).DTCNetDmdGMDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdGMPct);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCRtnPct);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCSlsStkRatio, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCSellThru, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesRegPromoUnits);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesUperLinearSpace);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesUperSqSpace);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesperSpaceU);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotDTCSalesUnitPctTTL);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotDTCSalesCostDlrPctTTL);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotEinvAUC, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotFWOSUnit, startTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).GrossMarginTotDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).GrossMarginPctTot);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesAUC);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesAUR);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SellThruUnitPctTot, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesUnitPctTTL);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesCostDlrPctTTL);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCPlacedOrdersDlr);
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        protected class clsChange_DTCBOPct : PlanChangeMethodProfile
        {
			public clsChange_DTCBOPct(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "DTCBOPct Change Method")
			{
			}

            public override void Execute(ComputationSchedule aCompSchd, PlanCellReference aPlanCellRef)
            {
                int startTimeId;
                int endTimeId;
                int currTimeId;
                int currPlusOneTimeId;
                try
                {
                    startTimeId = BasePlanToolBox.GetBeginPlanTimeDetail(aPlanCellRef);
                    endTimeId = BasePlanToolBox.GetEndPlanTimeDetail(aPlanCellRef);
                    currTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aPlanCellRef);
                    currPlusOneTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aPlanCellRef, 1);
                    BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCBOCostDlr_PCT_BOPCT, ((PlanVariables)BasePlanVariables).DTCBOCostDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCBOUnit_AUC_GRSD, ((PlanVariables)BasePlanVariables).DTCBOUnit);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCBODlr_AUR_GRSD, ((PlanVariables)BasePlanVariables).DTCBODlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_AdjCostDlrTot_PCT, ((PlanVariables)BasePlanVariables).AdjCostDlrTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_ShrinkCostDlrTot_PCT, ((PlanVariables)BasePlanVariables).ShrinkCostDlrTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_ShrinkUnitsTot_AUC_BINV, ((PlanVariables)BasePlanVariables).ShrinkUnitsTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotBinvCostDlr_PLUG, ((PlanVariables)BasePlanVariables).TotBinvCostDlr, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotBinvAUC, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertSpread(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).InventoryTotalUnits, currPlusOneTimeId,endTimeId, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Spread_InventoryTotalUnits_Spread);
					BasePlanToolBox.InsertSpread(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCBOCostDlr, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Spread_DTCGrossDmdCostDlr_SpreadDifference);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesCostDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotEinvCostDlr_FLOW, ((PlanVariables)BasePlanVariables).TotEinvCostDlr, currTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_AdjUnitsTot_AUC_BINV, ((PlanVariables)BasePlanVariables).AdjUnitsTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertSpread(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCBOUnit, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Spread_DTCGrossDmdUnit_SpreadDifference);
					BasePlanToolBox.InsertSpread(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesTotalUnits, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Spread_SalesTotalUnits_PREAD_REG_CLEAR);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesTotalUnits);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_InventoryTotalUnits_PLUG, ((PlanVariables)BasePlanVariables).InventoryTotalUnits, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotEinvUnits_FLOW, ((PlanVariables)BasePlanVariables).TotEinvUnits, currTimeId,endTimeId);
					BasePlanToolBox.InsertSpread(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCBODlr, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Spread_DTCGrossDmdDlr_SpreadDifference);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DiscountDlr_Calc, ((PlanVariables)BasePlanVariables).DiscountDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_AfterDiscountDlr_Calc, ((PlanVariables)BasePlanVariables).AfterDiscountDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).AfterDiscountAUR);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotFreightCostDlr_Calc, ((PlanVariables)BasePlanVariables).TotFreightCostDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).AfterDiscGMDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrAvgINVUnit, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrAvgEndINVUnit, currTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_VATDlr_Calc, ((PlanVariables)BasePlanVariables).VATDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_SaleswithoutVATDlr_Calc, ((PlanVariables)BasePlanVariables).SaleswithoutVATDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_ConvertedSalesDlr_Calc, ((PlanVariables)BasePlanVariables).ConvertedSalesDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DensityU, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCAvgOrder);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCCancelPct);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCFWOSUnit, startTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdAUC);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdAUR);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdPct);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCNetDmdGMDlr_DIFF, ((PlanVariables)BasePlanVariables).DTCNetDmdGMDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdGMPct);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCRtnPct);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCSlsStkRatio, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCSellThru, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesRegPromoUnits);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesUperLinearSpace);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesUperSqSpace);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesperSpaceU);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotDTCSalesUnitPctTTL);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotDTCSalesCostDlrPctTTL);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotEinvAUC, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotFWOSUnit, startTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).GrossMarginTotDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).GrossMarginPctTot);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesAUC);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesAUR);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SellThruUnitPctTot, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesUnitPctTTL);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesCostDlrPctTTL);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCPlacedOrdersDlr);
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        protected class clsChange_DTCRtnPct : PlanChangeMethodProfile
        {
			public clsChange_DTCRtnPct(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "DTCRtnPct Change Method")
			{
			}

            public override void Execute(ComputationSchedule aCompSchd, PlanCellReference aPlanCellRef)
            {
                int startTimeId;
                int endTimeId;
                int currTimeId;
                int currPlusOneTimeId;
                try
                {
                    startTimeId = BasePlanToolBox.GetBeginPlanTimeDetail(aPlanCellRef);
                    endTimeId = BasePlanToolBox.GetEndPlanTimeDetail(aPlanCellRef);
                    currTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aPlanCellRef);
                    currPlusOneTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aPlanCellRef, 1);
                    BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCRtnCostDlr_PCT_RTNPCT, ((PlanVariables)BasePlanVariables).DTCRtnCostDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCRtnUnit_AUC_GRSD, ((PlanVariables)BasePlanVariables).DTCRtnUnit);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCRtnDlr_AUR_GRSD, ((PlanVariables)BasePlanVariables).DTCRtnDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_AdjCostDlrTot_PCT, ((PlanVariables)BasePlanVariables).AdjCostDlrTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_ShrinkCostDlrTot_PCT, ((PlanVariables)BasePlanVariables).ShrinkCostDlrTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_ShrinkUnitsTot_AUC_BINV, ((PlanVariables)BasePlanVariables).ShrinkUnitsTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotBinvCostDlr_PLUG, ((PlanVariables)BasePlanVariables).TotBinvCostDlr, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotBinvAUC, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertSpread(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).InventoryTotalUnits, currPlusOneTimeId,endTimeId, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Spread_InventoryTotalUnits_Spread);
					BasePlanToolBox.InsertSpread(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCRtnCostDlr, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Spread_DTCGrossDmdCostDlr_SpreadDifference);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesCostDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotEinvCostDlr_FLOW, ((PlanVariables)BasePlanVariables).TotEinvCostDlr, currTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_AdjUnitsTot_AUC_BINV, ((PlanVariables)BasePlanVariables).AdjUnitsTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertSpread(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCRtnUnit, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Spread_DTCGrossDmdUnit_SpreadDifference);
					BasePlanToolBox.InsertSpread(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesTotalUnits, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Spread_SalesTotalUnits_PREAD_REG_CLEAR);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesTotalUnits);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_InventoryTotalUnits_PLUG, ((PlanVariables)BasePlanVariables).InventoryTotalUnits, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotEinvUnits_FLOW, ((PlanVariables)BasePlanVariables).TotEinvUnits, currTimeId,endTimeId);
					BasePlanToolBox.InsertSpread(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCRtnDlr, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Spread_DTCGrossDmdDlr_SpreadDifference);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DiscountDlr_Calc, ((PlanVariables)BasePlanVariables).DiscountDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_AfterDiscountDlr_Calc, ((PlanVariables)BasePlanVariables).AfterDiscountDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).AfterDiscountAUR);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotFreightCostDlr_Calc, ((PlanVariables)BasePlanVariables).TotFreightCostDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).AfterDiscGMDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrAvgINVUnit, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrAvgEndINVUnit, currTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_VATDlr_Calc, ((PlanVariables)BasePlanVariables).VATDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_SaleswithoutVATDlr_Calc, ((PlanVariables)BasePlanVariables).SaleswithoutVATDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_ConvertedSalesDlr_Calc, ((PlanVariables)BasePlanVariables).ConvertedSalesDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DensityU, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCAvgOrder);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCBOPct);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCCancelPct);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCFWOSUnit, startTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdAUC);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdAUR);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdPct);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCNetDmdGMDlr_DIFF, ((PlanVariables)BasePlanVariables).DTCNetDmdGMDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdGMPct);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCSlsStkRatio, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCSellThru, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesRegPromoUnits);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesUperLinearSpace);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesUperSqSpace);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesperSpaceU);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotDTCSalesUnitPctTTL);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotDTCSalesCostDlrPctTTL);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotEinvAUC, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotFWOSUnit, startTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).GrossMarginTotDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).GrossMarginPctTot);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesAUC);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesAUR);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SellThruUnitPctTot, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).GrossMarginPctStr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesUnitPctTTL);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesCostDlrPctTTL);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCPlacedOrdersDlr);
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        protected class clsChange_DTCNetDmdPct : PlanChangeMethodProfile
        {
			public clsChange_DTCNetDmdPct(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "DTCNetDmdPct Change Method")
			{
			}

            public override void Execute(ComputationSchedule aCompSchd, PlanCellReference aPlanCellRef)
            {
                int startTimeId;
                int endTimeId;
                int currTimeId;
                int currPlusOneTimeId;
                try
                {
                    startTimeId = BasePlanToolBox.GetBeginPlanTimeDetail(aPlanCellRef);
                    endTimeId = BasePlanToolBox.GetEndPlanTimeDetail(aPlanCellRef);
                    currTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aPlanCellRef);
                    currPlusOneTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aPlanCellRef, 1);
                    BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCNetDmdCostDlr_PCT_NETPCT, ((PlanVariables)BasePlanVariables).DTCNetDmdCostDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCNetDmdUnit_AUC, ((PlanVariables)BasePlanVariables).DTCNetDmdUnit);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCNetDmdDlr_AUR, ((PlanVariables)BasePlanVariables).DTCNetDmdDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_AdjCostDlrTot_PCT, ((PlanVariables)BasePlanVariables).AdjCostDlrTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_ShrinkCostDlrTot_PCT, ((PlanVariables)BasePlanVariables).ShrinkCostDlrTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_ShrinkUnitsTot_AUC_BINV, ((PlanVariables)BasePlanVariables).ShrinkUnitsTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotBinvCostDlr_PLUG, ((PlanVariables)BasePlanVariables).TotBinvCostDlr, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotBinvAUC, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertSpread(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).InventoryTotalUnits, currPlusOneTimeId,endTimeId, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Spread_InventoryTotalUnits_Spread);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesCostDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotEinvCostDlr_FLOW, ((PlanVariables)BasePlanVariables).TotEinvCostDlr, currTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_AdjUnitsTot_AUC_BINV, ((PlanVariables)BasePlanVariables).AdjUnitsTot, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertSpread(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesTotalUnits, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Spread_SalesTotalUnits_PREAD_REG_CLEAR);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesTotalUnits);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_InventoryTotalUnits_PLUG, ((PlanVariables)BasePlanVariables).InventoryTotalUnits, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotEinvUnits_FLOW, ((PlanVariables)BasePlanVariables).TotEinvUnits, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DiscountDlr_Calc, ((PlanVariables)BasePlanVariables).DiscountDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_AfterDiscountDlr_Calc, ((PlanVariables)BasePlanVariables).AfterDiscountDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).AfterDiscountAUR);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotFreightCostDlr_Calc, ((PlanVariables)BasePlanVariables).TotFreightCostDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).AfterDiscGMDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrAvgINVUnit, currPlusOneTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrAvgEndINVUnit, currTimeId,endTimeId);
					BasePlanToolBox.InsertSpread(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdDlr, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Spread_DTCGrossDmdDlr_SpreadDifference);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_VATDlr_Calc, ((PlanVariables)BasePlanVariables).VATDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_SaleswithoutVATDlr_Calc, ((PlanVariables)BasePlanVariables).SaleswithoutVATDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_ConvertedSalesDlr_Calc, ((PlanVariables)BasePlanVariables).ConvertedSalesDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCAvgOrder);
					BasePlanToolBox.InsertSpread(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdCostDlr, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Spread_DTCGrossDmdCostDlr_SpreadDifference);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCBOPct);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCCancelPct);
					BasePlanToolBox.InsertSpread(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdUnit, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Spread_DTCGrossDmdUnit_SpreadDifference);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCFWOSUnit, startTimeId,endTimeId);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DTCNetDmdGMDlr_DIFF, ((PlanVariables)BasePlanVariables).DTCNetDmdGMDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdGMPct);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCRtnPct);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCSlsStkRatio, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCSellThru, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesRegPromoUnits);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotDTCSalesUnitPctTTL);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotDTCSalesCostDlrPctTTL);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotEinvAUC, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotFWOSUnit, startTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).GrossMarginTotDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).GrossMarginPctTot);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesAUC);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesAUR);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SellThruUnitPctTot, currTimeId,endTimeId);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).GrossMarginPctStr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesUnitPctTTL);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesCostDlrPctTTL);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesperSpaceU);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesUperSqSpace);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesUperLinearSpace);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).DensityU, currPlusOneTimeId,endTimeId);
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        protected class clsChange_Commit1Unit : PlanChangeMethodProfile
        {
			public clsChange_Commit1Unit(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "Commit1Unit Change Method")
			{
			}

            public override void Execute(ComputationSchedule aCompSchd, PlanCellReference aPlanCellRef)
            {
                int endTimeId;
                int currTimeId;
                try
                {
                    endTimeId = BasePlanToolBox.GetEndPlanTimeDetail(aPlanCellRef);
                    currTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aPlanCellRef);
                    BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).Commit1AUC);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).OTBUnit);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).OTBUnitCum, currTimeId,endTimeId);
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        protected class clsChange_Commit2Unit : PlanChangeMethodProfile
        {
			public clsChange_Commit2Unit(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "Commit2Unit Change Method")
			{
			}

            public override void Execute(ComputationSchedule aCompSchd, PlanCellReference aPlanCellRef)
            {
                int endTimeId;
                int currTimeId;
                try
                {
                    endTimeId = BasePlanToolBox.GetEndPlanTimeDetail(aPlanCellRef);
                    currTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aPlanCellRef);
                    BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).Commit2AUC);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).OTBUnit);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).OTBUnitCum, currTimeId,endTimeId);
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        protected class clsChange_Commit3Unit : PlanChangeMethodProfile
        {
			public clsChange_Commit3Unit(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "Commit3Unit Change Method")
			{
			}

            public override void Execute(ComputationSchedule aCompSchd, PlanCellReference aPlanCellRef)
            {
                int endTimeId;
                int currTimeId;
                try
                {
                    endTimeId = BasePlanToolBox.GetEndPlanTimeDetail(aPlanCellRef);
                    currTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aPlanCellRef);
                    BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).Commit3AUC);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).OTBUnit);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).OTBUnitCum, currTimeId,endTimeId);
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        protected class clsChange_Commit1CostDlr : PlanChangeMethodProfile
        {
			public clsChange_Commit1CostDlr(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "Commit1CostDlr Change Method")
			{
			}

            public override void Execute(ComputationSchedule aCompSchd, PlanCellReference aPlanCellRef)
            {
                int endTimeId;
                int currTimeId;
                try
                {
                    endTimeId = BasePlanToolBox.GetEndPlanTimeDetail(aPlanCellRef);
                    currTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aPlanCellRef);
                    BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).Commit1AUC);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).OTBCostDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).OTBCostDlrCum, currTimeId,endTimeId);
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        protected class clsChange_Commit2CostDlr : PlanChangeMethodProfile
        {
			public clsChange_Commit2CostDlr(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "Commit2CostDlr Change Method")
			{
			}

            public override void Execute(ComputationSchedule aCompSchd, PlanCellReference aPlanCellRef)
            {
                int endTimeId;
                int currTimeId;
                try
                {
                    endTimeId = BasePlanToolBox.GetEndPlanTimeDetail(aPlanCellRef);
                    currTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aPlanCellRef);
                    BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).Commit2AUC);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).OTBCostDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).OTBCostDlrCum, currTimeId,endTimeId);
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        protected class clsChange_Commit3CostDlr : PlanChangeMethodProfile
        {
			public clsChange_Commit3CostDlr(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "Commit3CostDlr Change Method")
			{
			}

            public override void Execute(ComputationSchedule aCompSchd, PlanCellReference aPlanCellRef)
            {
                int endTimeId;
                int currTimeId;
                try
                {
                    endTimeId = BasePlanToolBox.GetEndPlanTimeDetail(aPlanCellRef);
                    currTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aPlanCellRef);
                    BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).Commit3AUC);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).OTBCostDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).OTBCostDlrCum, currTimeId,endTimeId);
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        protected class clsChange_SalesRegularUnits_Custom : PlanChangeMethodProfile
        {
			public clsChange_SalesRegularUnits_Custom(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "SalesRegularUnits Custom Change Method")
			{
			}

            public override void Execute(ComputationSchedule aCompSchd, PlanCellReference aPlanCellRef)
            {
                try
                {
                    if ( BasePlanToolBox.isStore(aPlanCellRef) )
                    {
                        BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesRegPromoUnits);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_SalesTotalUnits_SUM_RPC_for_STORE, ((PlanVariables)BasePlanVariables).SalesTotalUnits);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotSalesDlr_AUR, ((PlanVariables)BasePlanVariables).TotSalesDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DiscountDlr_Calc, ((PlanVariables)BasePlanVariables).DiscountDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_AfterDiscountDlr_Calc, ((PlanVariables)BasePlanVariables).AfterDiscountDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_VATDlr_Calc, ((PlanVariables)BasePlanVariables).VATDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_SaleswithoutVATDlr_Calc, ((PlanVariables)BasePlanVariables).SaleswithoutVATDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_ConvertedSalesDlr_Calc, ((PlanVariables)BasePlanVariables).ConvertedSalesDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotSalesCostDlr_AUC, ((PlanVariables)BasePlanVariables).TotSalesCostDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_GrossMarginTotDlr_DIFF, ((PlanVariables)BasePlanVariables).GrossMarginTotDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).GrossMarginPctTot);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotRecUnit);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotRecCostDlr_AUC, ((PlanVariables)BasePlanVariables).TotRecCostDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesperSpaceU);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesUperSqSpace);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesUperLinearSpace);
                    }
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        protected class clsChange_SalesRegPromoUnits_Custom : PlanChangeMethodProfile
        {
			public clsChange_SalesRegPromoUnits_Custom(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "SalesRegPromoUnits Custom Change Method")
			{
			}

            public override void Execute(ComputationSchedule aCompSchd, PlanCellReference aPlanCellRef)
            {
                try
                {
                    if ( BasePlanToolBox.isStore(aPlanCellRef) )
                    {
                        BasePlanToolBox.InsertSpread(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesRegPromoUnits, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Spread_SalesRegPromoUnits_SPREAD_REG_PROMO);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesperSpaceU);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesUperSqSpace);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesUperLinearSpace);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesTotalUnits);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotSalesDlr_AUR, ((PlanVariables)BasePlanVariables).TotSalesDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotSalesCostDlr_AUC, ((PlanVariables)BasePlanVariables).TotSalesCostDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotRecUnit);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_TotRecCostDlr_AUC, ((PlanVariables)BasePlanVariables).TotRecCostDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_DiscountDlr_Calc, ((PlanVariables)BasePlanVariables).DiscountDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_AfterDiscountDlr_Calc, ((PlanVariables)BasePlanVariables).AfterDiscountDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_VATDlr_Calc, ((PlanVariables)BasePlanVariables).VATDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_SaleswithoutVATDlr_Calc, ((PlanVariables)BasePlanVariables).SaleswithoutVATDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_ConvertedSalesDlr_Calc, ((PlanVariables)BasePlanVariables).ConvertedSalesDlr);
					BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_GrossMarginTotDlr_DIFF, ((PlanVariables)BasePlanVariables).GrossMarginTotDlr);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).GrossMarginPctTot);
                    }
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        protected class clsChange_SpaceConvPct : PlanChangeMethodProfile
        {
			public clsChange_SpaceConvPct(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "SpaceConvPct Change Method")
			{
			}

            public override void Execute(ComputationSchedule aCompSchd, PlanCellReference aPlanCellRef)
            {
                try
                {
                    BasePlanToolBox.InsertFormula(aCompSchd, aPlanCellRef, ((DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads).Formula_LinearSpace_Calc_Conv, ((PlanVariables)BasePlanVariables).LinearSpace);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesUperLinearSpace);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesDlrperLinearSpace);
					BasePlanToolBox.InsertInitFormula(aCompSchd, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesCDlrperLinearSpace);
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
    }
    /// <summary>
    /// The DefaultPlanCubeInitialization class is where the "Default" cube initialization routines are defined.
    /// </summary>
    /// <remarks>
    /// This class is where the "Default" cube initialization routines are defined.
    /// </remarks>
    public class DefaultPlanCubeInitialization : BasePlanCubeInitialization
    {
        public DefaultPlanCubeInitialization(BasePlanComputations aBasePlanComputations) : 
                base(aBasePlanComputations)
        {
        }
    }
    /// <summary>
    /// The DefaultPlanFormulasAndSpreads class is where the "Default" formulas and spreads are defined.
    /// </summary>
    /// <remarks>
    /// This class is where the "Default" formulas and spreads are defined.
    /// </remarks>
    public class DefaultPlanFormulasAndSpreads : BasePlanFormulasAndSpreads
    {
        protected FormulaProfile _formula_AdjCostDlrTot_BINV_AUC;
        protected FormulaProfile _formula_AdjCostDlrTot_PCT;
        protected FormulaProfile _formula_AdjUnitsTot_AUC_BINV;
        protected FormulaProfile _formula_AfterDiscountDlr_Calc;
        protected FormulaProfile _formula_CompSlsDlr_Differerence;
        protected FormulaProfile _formula_CompSlsDlr_PCT;
        protected FormulaProfile _formula_ConvertedSalesDlr_Calc;
        protected FormulaProfile _formula_DiscountDlr_Calc;
        protected FormulaProfile _formula_DTCBOCostDlr_AUC_GRSD;
        protected FormulaProfile _formula_DTCBOCostDlr_PCT_BOPCT;
        protected FormulaProfile _formula_DTCBODlr_AUR_GRSD;
        protected FormulaProfile _formula_DTCBODlr_GRSD_GM_PCT;
        protected FormulaProfile _formula_DTCBOUnit_AUC_GRSD;
        protected FormulaProfile _formula_DTCCancelCostDlr_AUC_GRSD;
        protected FormulaProfile _formula_DTCCancelCostDlr_PCT_CANPCT;
        protected FormulaProfile _formula_DTCCancelDlr_AUR_GRSD;
        protected FormulaProfile _formula_DTCCancelDlr_GRSD_GM_PCT;
        protected FormulaProfile _formula_DTCCancelUnit_AUC_GRSD;
        protected FormulaProfile _formula_DTCGrossDmdCostDlr_AUC;
        protected FormulaProfile _formula_DTCGrossDmdCostDlr_SUM;
        protected FormulaProfile _formula_DTCGrossDmdDlr_AUR;
        protected FormulaProfile _formula_DTCGrossDmdDlr_GRSD_GM_PCT;
        protected FormulaProfile _formula_DTCGrossDmdDlr_SUM;
        protected FormulaProfile _formula_DTCGrossDmdGMDlr_DIFF;
        protected FormulaProfile _formula_DTCGrossDmdGMDlr_GM_PCT;
        protected FormulaProfile _formula_DTCGrossDmdUnit_AUC;
        protected FormulaProfile _formula_DTCGrossDmdUnit_AUR;
        protected FormulaProfile _formula_DTCGrossDmdUnit_SUM;
        protected FormulaProfile _formula_DTCNetDmdCostDlr_AUC;
        protected FormulaProfile _formula_DTCNetDmdCostDlr_DIFF;
        protected FormulaProfile _formula_DTCNetDmdCostDlr_GM_DIFFER;
        protected FormulaProfile _formula_DTCNetDmdCostDlr_PCT_DTCPCT;
        protected FormulaProfile _formula_DTCNetDmdCostDlr_PCT_NETPCT;
        protected FormulaProfile _formula_DTCNetDmdDlr_AUR;
        protected FormulaProfile _formula_DTCNetDmdDlr_DIFF;
        protected FormulaProfile _formula_DTCNetDmdDlr_NETD_GM_PCT;
        protected FormulaProfile _formula_DTCNetDmdGMDlr_DIFF;
        protected FormulaProfile _formula_DTCNetDmdGMDlr_PCT;
        protected FormulaProfile _formula_DTCNetDmdUnit_AUC;
        protected FormulaProfile _formula_DTCNetDmdUnit_AUR;
        protected FormulaProfile _formula_DTCNetDmdUnit_DIFF;
        protected FormulaProfile _formula_DTCNetDmdUnit_PCT_DTCPCT;
        protected FormulaProfile _formula_DTCRtnCostDlr_AUC_GRSD;
        protected FormulaProfile _formula_DTCRtnCostDlr_PCT_RTNPCT;
        protected FormulaProfile _formula_DTCRtnDlr_AUR_GRSD;
        protected FormulaProfile _formula_DTCRtnDlr_GRSD_GM_PCT;
        protected FormulaProfile _formula_DTCRtnUnit_AUC_GRSD;
        protected FormulaProfile _formula_FreightCostPerUnit_Calc;
        protected FormulaProfile _formula_GrossMarginTotDlr_DIFF;
        protected FormulaProfile _formula_GrossMarginTotDlr_PCT;
        protected FormulaProfile _formula_GrossMarginTotStr_DIFF;
        protected FormulaProfile _formula_GrossMarginTotStr_PCT;
        protected FormulaProfile _formula_InventoryRegularUnits_STORE_FLOW;
        protected FormulaProfile _formula_InventoryTotalUnits_AUC;
        protected FormulaProfile _formula_InventoryTotalUnits_DTC_FWOS;
        protected FormulaProfile _formula_InventoryTotalUnits_FLOW;
        protected FormulaProfile _formula_InventoryTotalUnits_PLUG;
        protected FormulaProfile _formula_NonCompSlsDlr_Difference;
        protected FormulaProfile _formula_NonCompSlsDlr_PCT;
        protected FormulaProfile _formula_OnOrderCostDlr_AUC;
        protected FormulaProfile _formula_OnOrderCostDlr_IMU;
        protected FormulaProfile _formula_OnOrderDlr_AUR;
        protected FormulaProfile _formula_OnOrderUnit_AUC;
        protected FormulaProfile _formula_OnOrderUnit_AUR;
        protected FormulaProfile _formula_SalesTotalUnits_AUC;
        protected FormulaProfile _formula_SalesTotalUnits_AUR;
        protected FormulaProfile _formula_SaleswithoutVATDlr_Calc;
        protected FormulaProfile _formula_ShrinkCostDlrTot_BINV_AUC;
        protected FormulaProfile _formula_ShrinkCostDlrTot_PCT;
        protected FormulaProfile _formula_ShrinkUnitsTot_AUC_BINV;
        protected FormulaProfile _formula_TotBinvCostDlr_AUC;
        protected FormulaProfile _formula_TotBinvCostDlr_FLOW;
        protected FormulaProfile _formula_TotBinvCostDlr_PLUG;
        protected FormulaProfile _formula_TotEinvCostDlr_AUC;
        protected FormulaProfile _formula_TotEinvCostDlr_FLOW;
        protected FormulaProfile _formula_TotEinvCostDlr_PLUG;
        protected FormulaProfile _formula_TotEinvUnits_AUC;
        protected FormulaProfile _formula_TotEinvUnits_DTC_FWOS;
        protected FormulaProfile _formula_TotEinvUnits_FLOW;
        protected FormulaProfile _formula_TotEinvUnits_PLUG;
        protected FormulaProfile _formula_TotEinvUnits_STR_BINV_SUM;
        protected FormulaProfile _formula_TotFreightCostDlr_Calc;
        protected FormulaProfile _formula_TotMDDlr_PCT;
        protected FormulaProfile _formula_TotRecCostDlr_AUC;
        protected FormulaProfile _formula_TotRecCostDlr_FLOW;
        protected FormulaProfile _formula_TotRecUnit_AUC;
        protected FormulaProfile _formula_TotRecUnit_FLOW;
        protected FormulaProfile _formula_TotSalesCostDlr_AUC;
        protected FormulaProfile _formula_TotSalesCostDlr_GRS_MARGIN;
        protected FormulaProfile _formula_TotSalesDlr_AUR;
        protected FormulaProfile _formula_TotSalesDlr_INVERSE_GM_PCT;
        protected FormulaProfile _formula_TotSalesDlr_SUM_GM;
        protected FormulaProfile _formula_TotSalesUnit_AUC;
        protected FormulaProfile _formula_TotSalesUnit_AUR;
        protected FormulaProfile _formula_TotSalesUnit_PCT_PCTTTL;
        protected FormulaProfile _formula_TotStrSalesCostDlr_AUC;
        protected FormulaProfile _formula_TotStrSalesCostDlr_GM_DIFFER;
        protected FormulaProfile _formula_TotStrSalesCostDlr_GRS_MARGIN;
        protected FormulaProfile _formula_TotStrSalesCostDlr_PCT_PCTTTL;
        protected FormulaProfile _formula_TotStrSalesDlr_AUR;
        protected FormulaProfile _formula_TotStrSalesDlr_INVERSE_PCT;
        protected FormulaProfile _formula_TotStrSalesDlr_SUM_GM;
        protected FormulaProfile _formula_VATDlr_Calc;
        protected FormulaProfile _init_AdjUntiPctTot;
        protected FormulaProfile _init_AdjUntiPctTotT1;
        protected FormulaProfile _init_AfterDiscGMDlr;
        protected FormulaProfile _init_AfterDiscountAUR;
        protected FormulaProfile _init_AfterDiscountAURT1;
        protected FormulaProfile _init_AvgStrSlsDlr;
        protected FormulaProfile _init_AvgStrSlsUnit;
        protected FormulaProfile _init_ClearStrBinvAURT1;
        protected FormulaProfile _init_ClearStrBinvAURT2;
        protected FormulaProfile _init_ClearStrBinvAURT3;
        protected FormulaProfile _init_ClearStrBinvPctTtlDlrT1;
        protected FormulaProfile _init_ClearStrBinvPctTtlDlrT2;
        protected FormulaProfile _init_ClearStrBinvPctTtlDlrT3;
        protected FormulaProfile _init_ClearStrBinvPctTtlUnitsT1;
        protected FormulaProfile _init_ClearStrBinvPctTtlUnitsT2;
        protected FormulaProfile _init_ClearStrBinvPctTtlUnitsT3;
        protected FormulaProfile _init_Commit1AUC;
        protected FormulaProfile _init_Commit1AUCT1;
        protected FormulaProfile _init_Commit2AUC;
        protected FormulaProfile _init_Commit2AUCT1;
        protected FormulaProfile _init_Commit3AUC;
        protected FormulaProfile _init_Commit3AUCT1;
        protected FormulaProfile _init_CompPctTtl;
        protected FormulaProfile _init_CompPctTtlT1;
        protected FormulaProfile _init_CurrXchgPct;
        protected FormulaProfile _init_CurrXchgPctT1;
        protected FormulaProfile _init_DiscountPct;
        protected FormulaProfile _init_DiscountPctT1;
        protected FormulaProfile _init_DTCAvgOrder;
        protected FormulaProfile _init_DTCBOPct;
        protected FormulaProfile _init_DTCBOPctT1;
        protected FormulaProfile _init_DTCCancelPct;
        protected FormulaProfile _init_DTCCancelPctT1;
        protected FormulaProfile _init_DTCFWOSUnit;
        protected FormulaProfile _init_DTCGrossDmdAUC;
        protected FormulaProfile _init_DTCGrossDmdAUCT1;
        protected FormulaProfile _init_DTCGrossDmdAUR;
        protected FormulaProfile _init_DTCGrossDmdAURT1;
        protected FormulaProfile _init_DTCGrsDmdGMPct;
        protected FormulaProfile _init_DTCGrsDmdGMPctT1;
        protected FormulaProfile _init_DTCNetDmdAUC;
        protected FormulaProfile _init_DTCNetDmdAUCT1;
        protected FormulaProfile _init_DTCNetDmdAUR;
        protected FormulaProfile _init_DTCNetDmdAURT1;
        protected FormulaProfile _init_DTCNetDmdGMDlrT1;
        protected FormulaProfile _init_DTCNetDmdGMPct;
        protected FormulaProfile _init_DTCNetDmdGMPctT1;
        protected FormulaProfile _init_DTCNetDmdPct;
        protected FormulaProfile _init_DTCNetDmdPctT1;
        protected FormulaProfile _init_DTCRtnPct;
        protected FormulaProfile _init_DTCRtnPctT1;
        protected FormulaProfile _init_DTCSellThru;
        protected FormulaProfile _init_DTCSellThruT1;
        protected FormulaProfile _init_DTCSlsStkRatio;
        protected FormulaProfile _init_DTCSlsStkRatioT1;
        protected FormulaProfile _init_ForwardWOSClearlDlrT1;
        protected FormulaProfile _init_ForwardWOSClearlDlrT2;
        protected FormulaProfile _init_ForwardWOSMarkdown_Custom;
        protected FormulaProfile _init_ForwardWOSMarkdownT1_Custom;
        protected FormulaProfile _init_ForwardWOSReglDlrT1;
        protected FormulaProfile _init_ForwardWOSReglDlrT2;
        protected FormulaProfile _init_ForwardWOSRegPromo_Custom;
        protected FormulaProfile _init_ForwardWOSRegPromoT1_Custom;
        protected FormulaProfile _init_ForwardWOSTotal_Custom;
        protected FormulaProfile _init_ForwardWOSTotalT1_Custom;
        protected FormulaProfile _init_ForwardWOSTotalT2;
        protected FormulaProfile _init_FreightCostPerUnitT1;
        protected FormulaProfile _init_FWOSTotDlr;
        protected FormulaProfile _init_FWOSTotDlrT1;
        protected FormulaProfile _init_FWOSTotDlrT2;
        protected FormulaProfile _init_GrossMarginPctStr;
        protected FormulaProfile _init_GrossMarginPctStrT1;
        protected FormulaProfile _init_GrossMarginPctT1;
        protected FormulaProfile _init_GrossMarginPctTot;
        protected FormulaProfile _init_GrossMarginT1;
        protected FormulaProfile _init_GrossMarginTotDlr;
        protected FormulaProfile _init_GrossMarginTotStrT1;
        protected FormulaProfile _init_InventoryTotalUnits_Custom;
        protected FormulaProfile _init_InventoryTotalUnitsT4;
        protected FormulaProfile _init_NonCompPctTtl;
        protected FormulaProfile _init_NonCompPctTtlT1;
        protected FormulaProfile _init_OnOrderAUC;
        protected FormulaProfile _init_OnOrderAUCT1;
        protected FormulaProfile _init_OnOrderAUR;
        protected FormulaProfile _init_OnOrderAURT1;
        protected FormulaProfile _init_OTBCostDlr;
        protected FormulaProfile _init_OTBCostDlrCum;
        protected FormulaProfile _init_OTBUnit;
        protected FormulaProfile _init_OTBUnitCum;
        protected FormulaProfile _init_ReceiptAUCT1;
        protected FormulaProfile _init_ReceiptAUCTot;
        protected FormulaProfile _init_ReceiptAUCTotT1;
        protected FormulaProfile _init_ReceiptAUR;
        protected FormulaProfile _init_ReceiptAURT1;
        protected FormulaProfile _init_RegStrBinvAURT1;
        protected FormulaProfile _init_RegStrBinvAURT2;
        protected FormulaProfile _init_RegStrBinvAURT3;
        protected FormulaProfile _init_RegStrBinvDlrT4;
        protected FormulaProfile _init_RegStrBinvPctTtlDlrT1;
        protected FormulaProfile _init_RegStrBinvPctTtlDlrT2;
        protected FormulaProfile _init_RegStrBinvPctTtlDlrT3;
        protected FormulaProfile _init_RegStrBinvPctTtlUnitsT1;
        protected FormulaProfile _init_RegStrBinvPctTtlUnitsT2;
        protected FormulaProfile _init_RegStrBinvPctTtlUnitsT3;
        protected FormulaProfile _init_SalesAUCT1;
        protected FormulaProfile _init_SalesClearAURT1;
        protected FormulaProfile _init_SalesClearPctTtlDlrT1;
        protected FormulaProfile _init_SalesClearPctTtlUnitsT1;
        protected FormulaProfile _init_SalesMarginT1;
        protected FormulaProfile _init_SalesRegAURT1;
        protected FormulaProfile _init_SalesRegPctTtlDlrT1;
        protected FormulaProfile _init_SalesRegPctTtlUnitsT1;
        protected FormulaProfile _init_SalesRegPromoUnits_Custom;
        protected FormulaProfile _init_SalesRegPromoUnitsT1_Custom;
        protected FormulaProfile _init_SalesTotalUnits_Custom;
        protected FormulaProfile _init_SellThruUnitPctTot;
        protected FormulaProfile _init_SellThruUnitPctTotT1;
        protected FormulaProfile _init_ShrinkPctT1;
        protected FormulaProfile _init_ShrinkPctTot;
        protected FormulaProfile _init_ShrinkPctTotT1;
        protected FormulaProfile _init_TotBinvAUC;
        protected FormulaProfile _init_TotDTCSalesCostDlrPctTTL;
        protected FormulaProfile _init_TotDTCSalesCostDlrPctTTLT1;
        protected FormulaProfile _init_TotDTCSalesUnitPctTTL;
        protected FormulaProfile _init_TotDTCSalesUnitPctTTLT1;
        protected FormulaProfile _init_TotEinvAUC;
        protected FormulaProfile _init_TotEinvAUCT1;
        protected FormulaProfile _init_TotEinvAUCT2;
        protected FormulaProfile _init_TotEinvAUCT3;
        protected FormulaProfile _init_TotEinvCostDlr;
        protected FormulaProfile _init_TotEinvUnits;
        protected FormulaProfile _init_TotFWOSUnit;
        protected FormulaProfile _init_TotIMUPct;
        protected FormulaProfile _init_TotMDPctT1;
        protected FormulaProfile _init_TotSalesAUC;
        protected FormulaProfile _init_TotSalesAUCT1;
        protected FormulaProfile _init_TotSalesAUR;
        protected FormulaProfile _init_TotSalesAURT1;
        protected FormulaProfile _init_TotSalesCostDlr;
        protected FormulaProfile _init_TotSalesDlr;
        protected FormulaProfile _init_TotStrAvgEndINVUnit;
        protected FormulaProfile _init_TotStrAvgINVUnit;
        protected FormulaProfile _init_TotStrBinvAUCT1;
        protected FormulaProfile _init_TotStrBinvAUCT2;
        protected FormulaProfile _init_TotStrBinvAUCT3;
        protected FormulaProfile _init_TotStrBinvAURT1;
        protected FormulaProfile _init_TotStrBinvAURT2;
        protected FormulaProfile _init_TotStrBinvAURT3;
        protected FormulaProfile _init_TotStrSalesAUC;
        protected FormulaProfile _init_TotStrSalesAUCT1;
        protected FormulaProfile _init_TotStrSalesAUR;
        protected FormulaProfile _init_TotStrSalesAURT1;
        protected FormulaProfile _init_TotStrSalesCostDlrPctTTL;
        protected FormulaProfile _init_TotStrSalesCostDlrPctTTLT1;
        protected FormulaProfile _init_TotStrSalesUnitPctTTL;
        protected FormulaProfile _init_TotStrSalesUnitPctTTLT1;
        protected FormulaProfile _init_VATPct;
        protected FormulaProfile _init_VATPctT1;
        protected SpreadProfile _spread_DTCGrossDmdCostDlr_SPREAD;
        protected SpreadProfile _spread_DTCGrossDmdCostDlr_SpreadDifference;
        protected SpreadProfile _spread_DTCGrossDmdDlr_SPREAD;
        protected SpreadProfile _spread_DTCGrossDmdDlr_SpreadDifference;
        protected SpreadProfile _spread_DTCGrossDmdUnit_SPREAD;
        protected SpreadProfile _spread_DTCGrossDmdUnit_SpreadDifference;
        protected SpreadProfile _spread_InventoryTotalUnits_Spread;
        protected SpreadProfile _spread_SalesTotalUnits_PREAD_REG_CLEAR;
        protected SpreadProfile _spread_SalesTotalUnits_SPREAD_DTC_STR;
        protected SpreadProfile _spread_SalesTotalUnits_SpreadDifference;
        protected SpreadProfile _spread_TotEinvUnits_SPREAD_REG_CLEAR;
        protected SpreadProfile _spread_TotSalesCostDlr_SPREAD;
        protected SpreadProfile _spread_TotSalesCostDlr_SpreadDifference;
        protected SpreadProfile _spread_TotSalesDlr_SPREAD_DTC_STR;
        protected SpreadProfile _spread_TotSalesDlr_SpreadDifference;
        protected FormulaProfile _init_SalesTotalUnits_Custom_STORE;
        protected FormulaProfile _init_TotSalesDlr_STORE;
        protected FormulaProfile _init_TotSalesUnit;
        protected FormulaProfile _init_TotSalesCostDlr_STORE;
        protected FormulaProfile _init_GrossMarginTotDlr_STORE;
        protected FormulaProfile _init_TotRecCostDlr_STORE;
        protected SpreadProfile _spread_SalesRegPromoUnits_SPREAD_REG_PROMO;
        protected FormulaProfile _formula_SalesTotalUnits_SUM_RPC_for_STORE;
        protected FormulaProfile _init_SpaceConvPct;
        protected FormulaProfile _init_SpaceConvPctT1;
        protected FormulaProfile _init_SalesUperSqSpace;
        protected FormulaProfile _init_SalesUperSqSpaceT1;
        protected FormulaProfile _init_SalesUperLinearSpaceT1;
        protected FormulaProfile _init_SalesUperLinearSpace;
        protected FormulaProfile _init_TotStrSalesDlrperLinearSpace;
        protected FormulaProfile _init_TotStrSalesDlrperLinearSpaceT1;
        protected FormulaProfile _init_TotStrSalesDlrperSqSpace;
        protected FormulaProfile _init_TotStrSalesDlrperSqSpaceT1;
        protected FormulaProfile _init_TotStrSalesCDlrperSqSpace;
        protected FormulaProfile _init_TotStrSalesCDlrperSqSpaceT1;
        protected FormulaProfile _init_TotStrSalesCDlrperLinearSpace;
        protected FormulaProfile _init_TotStrSalesCDlrperLinearSpaceT1;
        protected FormulaProfile _init_DensityU;
        protected FormulaProfile _init_DensityUT1;
        protected FormulaProfile _init_SalesperSpaceU;
        protected FormulaProfile _init_SalesperSpaceUT1;
        protected FormulaProfile _init_DTCPlacedOrdersDlr;
        protected FormulaProfile _init_DTCConvPct;
        protected FormulaProfile _init_DTCConvPctT1;
        protected FormulaProfile _formula_LinearSpace_Calc_Conv;
				public FormulaProfile Formula_AdjCostDlrTot_BINV_AUC { get { return _formula_AdjCostDlrTot_BINV_AUC; } }
				public FormulaProfile Formula_AdjCostDlrTot_PCT { get { return _formula_AdjCostDlrTot_PCT; } }
				public FormulaProfile Formula_AdjUnitsTot_AUC_BINV { get { return _formula_AdjUnitsTot_AUC_BINV; } }
				public FormulaProfile Formula_AfterDiscountDlr_Calc { get { return _formula_AfterDiscountDlr_Calc; } }
				public FormulaProfile Formula_CompSlsDlr_Differerence { get { return _formula_CompSlsDlr_Differerence; } }
				public FormulaProfile Formula_CompSlsDlr_PCT { get { return _formula_CompSlsDlr_PCT; } }
				public FormulaProfile Formula_ConvertedSalesDlr_Calc { get { return _formula_ConvertedSalesDlr_Calc; } }
				public FormulaProfile Formula_DiscountDlr_Calc { get { return _formula_DiscountDlr_Calc; } }
				public FormulaProfile Formula_DTCBOCostDlr_AUC_GRSD { get { return _formula_DTCBOCostDlr_AUC_GRSD; } }
				public FormulaProfile Formula_DTCBOCostDlr_PCT_BOPCT { get { return _formula_DTCBOCostDlr_PCT_BOPCT; } }
				public FormulaProfile Formula_DTCBODlr_AUR_GRSD { get { return _formula_DTCBODlr_AUR_GRSD; } }
				public FormulaProfile Formula_DTCBODlr_GRSD_GM_PCT { get { return _formula_DTCBODlr_GRSD_GM_PCT; } }
				public FormulaProfile Formula_DTCBOUnit_AUC_GRSD { get { return _formula_DTCBOUnit_AUC_GRSD; } }
				public FormulaProfile Formula_DTCCancelCostDlr_AUC_GRSD { get { return _formula_DTCCancelCostDlr_AUC_GRSD; } }
				public FormulaProfile Formula_DTCCancelCostDlr_PCT_CANPCT { get { return _formula_DTCCancelCostDlr_PCT_CANPCT; } }
				public FormulaProfile Formula_DTCCancelDlr_AUR_GRSD { get { return _formula_DTCCancelDlr_AUR_GRSD; } }
				public FormulaProfile Formula_DTCCancelDlr_GRSD_GM_PCT { get { return _formula_DTCCancelDlr_GRSD_GM_PCT; } }
				public FormulaProfile Formula_DTCCancelUnit_AUC_GRSD { get { return _formula_DTCCancelUnit_AUC_GRSD; } }
				public FormulaProfile Formula_DTCGrossDmdCostDlr_AUC { get { return _formula_DTCGrossDmdCostDlr_AUC; } }
				public FormulaProfile Formula_DTCGrossDmdCostDlr_SUM { get { return _formula_DTCGrossDmdCostDlr_SUM; } }
				public FormulaProfile Formula_DTCGrossDmdDlr_AUR { get { return _formula_DTCGrossDmdDlr_AUR; } }
				public FormulaProfile Formula_DTCGrossDmdDlr_GRSD_GM_PCT { get { return _formula_DTCGrossDmdDlr_GRSD_GM_PCT; } }
				public FormulaProfile Formula_DTCGrossDmdDlr_SUM { get { return _formula_DTCGrossDmdDlr_SUM; } }
				public FormulaProfile Formula_DTCGrossDmdGMDlr_DIFF { get { return _formula_DTCGrossDmdGMDlr_DIFF; } }
				public FormulaProfile Formula_DTCGrossDmdGMDlr_GM_PCT { get { return _formula_DTCGrossDmdGMDlr_GM_PCT; } }
				public FormulaProfile Formula_DTCGrossDmdUnit_AUC { get { return _formula_DTCGrossDmdUnit_AUC; } }
				public FormulaProfile Formula_DTCGrossDmdUnit_AUR { get { return _formula_DTCGrossDmdUnit_AUR; } }
				public FormulaProfile Formula_DTCGrossDmdUnit_SUM { get { return _formula_DTCGrossDmdUnit_SUM; } }
				public FormulaProfile Formula_DTCNetDmdCostDlr_AUC { get { return _formula_DTCNetDmdCostDlr_AUC; } }
				public FormulaProfile Formula_DTCNetDmdCostDlr_DIFF { get { return _formula_DTCNetDmdCostDlr_DIFF; } }
				public FormulaProfile Formula_DTCNetDmdCostDlr_GM_DIFFER { get { return _formula_DTCNetDmdCostDlr_GM_DIFFER; } }
				public FormulaProfile Formula_DTCNetDmdCostDlr_PCT_DTCPCT { get { return _formula_DTCNetDmdCostDlr_PCT_DTCPCT; } }
				public FormulaProfile Formula_DTCNetDmdCostDlr_PCT_NETPCT { get { return _formula_DTCNetDmdCostDlr_PCT_NETPCT; } }
				public FormulaProfile Formula_DTCNetDmdDlr_AUR { get { return _formula_DTCNetDmdDlr_AUR; } }
				public FormulaProfile Formula_DTCNetDmdDlr_DIFF { get { return _formula_DTCNetDmdDlr_DIFF; } }
				public FormulaProfile Formula_DTCNetDmdDlr_NETD_GM_PCT { get { return _formula_DTCNetDmdDlr_NETD_GM_PCT; } }
				public FormulaProfile Formula_DTCNetDmdGMDlr_DIFF { get { return _formula_DTCNetDmdGMDlr_DIFF; } }
				public FormulaProfile Formula_DTCNetDmdGMDlr_PCT { get { return _formula_DTCNetDmdGMDlr_PCT; } }
				public FormulaProfile Formula_DTCNetDmdUnit_AUC { get { return _formula_DTCNetDmdUnit_AUC; } }
				public FormulaProfile Formula_DTCNetDmdUnit_AUR { get { return _formula_DTCNetDmdUnit_AUR; } }
				public FormulaProfile Formula_DTCNetDmdUnit_DIFF { get { return _formula_DTCNetDmdUnit_DIFF; } }
				public FormulaProfile Formula_DTCNetDmdUnit_PCT_DTCPCT { get { return _formula_DTCNetDmdUnit_PCT_DTCPCT; } }
				public FormulaProfile Formula_DTCRtnCostDlr_AUC_GRSD { get { return _formula_DTCRtnCostDlr_AUC_GRSD; } }
				public FormulaProfile Formula_DTCRtnCostDlr_PCT_RTNPCT { get { return _formula_DTCRtnCostDlr_PCT_RTNPCT; } }
				public FormulaProfile Formula_DTCRtnDlr_AUR_GRSD { get { return _formula_DTCRtnDlr_AUR_GRSD; } }
				public FormulaProfile Formula_DTCRtnDlr_GRSD_GM_PCT { get { return _formula_DTCRtnDlr_GRSD_GM_PCT; } }
				public FormulaProfile Formula_DTCRtnUnit_AUC_GRSD { get { return _formula_DTCRtnUnit_AUC_GRSD; } }
				public FormulaProfile Formula_FreightCostPerUnit_Calc { get { return _formula_FreightCostPerUnit_Calc; } }
				public FormulaProfile Formula_GrossMarginTotDlr_DIFF { get { return _formula_GrossMarginTotDlr_DIFF; } }
				public FormulaProfile Formula_GrossMarginTotDlr_PCT { get { return _formula_GrossMarginTotDlr_PCT; } }
				public FormulaProfile Formula_GrossMarginTotStr_DIFF { get { return _formula_GrossMarginTotStr_DIFF; } }
				public FormulaProfile Formula_GrossMarginTotStr_PCT { get { return _formula_GrossMarginTotStr_PCT; } }
				public FormulaProfile Formula_InventoryRegularUnits_STORE_FLOW { get { return _formula_InventoryRegularUnits_STORE_FLOW; } }
				public FormulaProfile Formula_InventoryTotalUnits_AUC { get { return _formula_InventoryTotalUnits_AUC; } }
				public FormulaProfile Formula_InventoryTotalUnits_DTC_FWOS { get { return _formula_InventoryTotalUnits_DTC_FWOS; } }
				public FormulaProfile Formula_InventoryTotalUnits_FLOW { get { return _formula_InventoryTotalUnits_FLOW; } }
				public FormulaProfile Formula_InventoryTotalUnits_PLUG { get { return _formula_InventoryTotalUnits_PLUG; } }
				public FormulaProfile Formula_NonCompSlsDlr_Difference { get { return _formula_NonCompSlsDlr_Difference; } }
				public FormulaProfile Formula_NonCompSlsDlr_PCT { get { return _formula_NonCompSlsDlr_PCT; } }
				public FormulaProfile Formula_OnOrderCostDlr_AUC { get { return _formula_OnOrderCostDlr_AUC; } }
				public FormulaProfile Formula_OnOrderCostDlr_IMU { get { return _formula_OnOrderCostDlr_IMU; } }
				public FormulaProfile Formula_OnOrderDlr_AUR { get { return _formula_OnOrderDlr_AUR; } }
				public FormulaProfile Formula_OnOrderUnit_AUC { get { return _formula_OnOrderUnit_AUC; } }
				public FormulaProfile Formula_OnOrderUnit_AUR { get { return _formula_OnOrderUnit_AUR; } }
				public FormulaProfile Formula_SalesTotalUnits_AUC { get { return _formula_SalesTotalUnits_AUC; } }
				public FormulaProfile Formula_SalesTotalUnits_AUR { get { return _formula_SalesTotalUnits_AUR; } }
				public FormulaProfile Formula_SaleswithoutVATDlr_Calc { get { return _formula_SaleswithoutVATDlr_Calc; } }
				public FormulaProfile Formula_ShrinkCostDlrTot_BINV_AUC { get { return _formula_ShrinkCostDlrTot_BINV_AUC; } }
				public FormulaProfile Formula_ShrinkCostDlrTot_PCT { get { return _formula_ShrinkCostDlrTot_PCT; } }
				public FormulaProfile Formula_ShrinkUnitsTot_AUC_BINV { get { return _formula_ShrinkUnitsTot_AUC_BINV; } }
				public FormulaProfile Formula_TotBinvCostDlr_AUC { get { return _formula_TotBinvCostDlr_AUC; } }
				public FormulaProfile Formula_TotBinvCostDlr_FLOW { get { return _formula_TotBinvCostDlr_FLOW; } }
				public FormulaProfile Formula_TotBinvCostDlr_PLUG { get { return _formula_TotBinvCostDlr_PLUG; } }
				public FormulaProfile Formula_TotEinvCostDlr_AUC { get { return _formula_TotEinvCostDlr_AUC; } }
				public FormulaProfile Formula_TotEinvCostDlr_FLOW { get { return _formula_TotEinvCostDlr_FLOW; } }
				public FormulaProfile Formula_TotEinvCostDlr_PLUG { get { return _formula_TotEinvCostDlr_PLUG; } }
				public FormulaProfile Formula_TotEinvUnits_AUC { get { return _formula_TotEinvUnits_AUC; } }
				public FormulaProfile Formula_TotEinvUnits_DTC_FWOS { get { return _formula_TotEinvUnits_DTC_FWOS; } }
				public FormulaProfile Formula_TotEinvUnits_FLOW { get { return _formula_TotEinvUnits_FLOW; } }
				public FormulaProfile Formula_TotEinvUnits_PLUG { get { return _formula_TotEinvUnits_PLUG; } }
				public FormulaProfile Formula_TotEinvUnits_STR_BINV_SUM { get { return _formula_TotEinvUnits_STR_BINV_SUM; } }
				public FormulaProfile Formula_TotFreightCostDlr_Calc { get { return _formula_TotFreightCostDlr_Calc; } }
				public FormulaProfile Formula_TotMDDlr_PCT { get { return _formula_TotMDDlr_PCT; } }
				public FormulaProfile Formula_TotRecCostDlr_AUC { get { return _formula_TotRecCostDlr_AUC; } }
				public FormulaProfile Formula_TotRecCostDlr_FLOW { get { return _formula_TotRecCostDlr_FLOW; } }
				public FormulaProfile Formula_TotRecUnit_AUC { get { return _formula_TotRecUnit_AUC; } }
				public FormulaProfile Formula_TotRecUnit_FLOW { get { return _formula_TotRecUnit_FLOW; } }
				public FormulaProfile Formula_TotSalesCostDlr_AUC { get { return _formula_TotSalesCostDlr_AUC; } }
				public FormulaProfile Formula_TotSalesCostDlr_GRS_MARGIN { get { return _formula_TotSalesCostDlr_GRS_MARGIN; } }
				public FormulaProfile Formula_TotSalesDlr_AUR { get { return _formula_TotSalesDlr_AUR; } }
				public FormulaProfile Formula_TotSalesDlr_INVERSE_GM_PCT { get { return _formula_TotSalesDlr_INVERSE_GM_PCT; } }
				public FormulaProfile Formula_TotSalesDlr_SUM_GM { get { return _formula_TotSalesDlr_SUM_GM; } }
				public FormulaProfile Formula_TotSalesUnit_AUC { get { return _formula_TotSalesUnit_AUC; } }
				public FormulaProfile Formula_TotSalesUnit_AUR { get { return _formula_TotSalesUnit_AUR; } }
				public FormulaProfile Formula_TotSalesUnit_PCT_PCTTTL { get { return _formula_TotSalesUnit_PCT_PCTTTL; } }
				public FormulaProfile Formula_TotStrSalesCostDlr_AUC { get { return _formula_TotStrSalesCostDlr_AUC; } }
				public FormulaProfile Formula_TotStrSalesCostDlr_GM_DIFFER { get { return _formula_TotStrSalesCostDlr_GM_DIFFER; } }
				public FormulaProfile Formula_TotStrSalesCostDlr_GRS_MARGIN { get { return _formula_TotStrSalesCostDlr_GRS_MARGIN; } }
				public FormulaProfile Formula_TotStrSalesCostDlr_PCT_PCTTTL { get { return _formula_TotStrSalesCostDlr_PCT_PCTTTL; } }
				public FormulaProfile Formula_TotStrSalesDlr_AUR { get { return _formula_TotStrSalesDlr_AUR; } }
				public FormulaProfile Formula_TotStrSalesDlr_INVERSE_PCT { get { return _formula_TotStrSalesDlr_INVERSE_PCT; } }
				public FormulaProfile Formula_TotStrSalesDlr_SUM_GM { get { return _formula_TotStrSalesDlr_SUM_GM; } }
				public FormulaProfile Formula_VATDlr_Calc { get { return _formula_VATDlr_Calc; } }
				public FormulaProfile Init_AdjUntiPctTot { get { return _init_AdjUntiPctTot; } }
				public FormulaProfile Init_AdjUntiPctTotT1 { get { return _init_AdjUntiPctTotT1; } }
				public FormulaProfile Init_AfterDiscGMDlr { get { return _init_AfterDiscGMDlr; } }
				public FormulaProfile Init_AfterDiscountAUR { get { return _init_AfterDiscountAUR; } }
				public FormulaProfile Init_AfterDiscountAURT1 { get { return _init_AfterDiscountAURT1; } }
				public FormulaProfile Init_AvgStrSlsDlr { get { return _init_AvgStrSlsDlr; } }
				public FormulaProfile Init_AvgStrSlsUnit { get { return _init_AvgStrSlsUnit; } }
				public FormulaProfile Init_ClearStrBinvAURT1 { get { return _init_ClearStrBinvAURT1; } }
				public FormulaProfile Init_ClearStrBinvAURT2 { get { return _init_ClearStrBinvAURT2; } }
				public FormulaProfile Init_ClearStrBinvAURT3 { get { return _init_ClearStrBinvAURT3; } }
				public FormulaProfile Init_ClearStrBinvPctTtlDlrT1 { get { return _init_ClearStrBinvPctTtlDlrT1; } }
				public FormulaProfile Init_ClearStrBinvPctTtlDlrT2 { get { return _init_ClearStrBinvPctTtlDlrT2; } }
				public FormulaProfile Init_ClearStrBinvPctTtlDlrT3 { get { return _init_ClearStrBinvPctTtlDlrT3; } }
				public FormulaProfile Init_ClearStrBinvPctTtlUnitsT1 { get { return _init_ClearStrBinvPctTtlUnitsT1; } }
				public FormulaProfile Init_ClearStrBinvPctTtlUnitsT2 { get { return _init_ClearStrBinvPctTtlUnitsT2; } }
				public FormulaProfile Init_ClearStrBinvPctTtlUnitsT3 { get { return _init_ClearStrBinvPctTtlUnitsT3; } }
				public FormulaProfile Init_Commit1AUC { get { return _init_Commit1AUC; } }
				public FormulaProfile Init_Commit1AUCT1 { get { return _init_Commit1AUCT1; } }
				public FormulaProfile Init_Commit2AUC { get { return _init_Commit2AUC; } }
				public FormulaProfile Init_Commit2AUCT1 { get { return _init_Commit2AUCT1; } }
				public FormulaProfile Init_Commit3AUC { get { return _init_Commit3AUC; } }
				public FormulaProfile Init_Commit3AUCT1 { get { return _init_Commit3AUCT1; } }
				public FormulaProfile Init_CompPctTtl { get { return _init_CompPctTtl; } }
				public FormulaProfile Init_CompPctTtlT1 { get { return _init_CompPctTtlT1; } }
				public FormulaProfile Init_CurrXchgPct { get { return _init_CurrXchgPct; } }
				public FormulaProfile Init_CurrXchgPctT1 { get { return _init_CurrXchgPctT1; } }
				public FormulaProfile Init_DiscountPct { get { return _init_DiscountPct; } }
				public FormulaProfile Init_DiscountPctT1 { get { return _init_DiscountPctT1; } }
				public FormulaProfile Init_DTCAvgOrder { get { return _init_DTCAvgOrder; } }
				public FormulaProfile Init_DTCBOPct { get { return _init_DTCBOPct; } }
				public FormulaProfile Init_DTCBOPctT1 { get { return _init_DTCBOPctT1; } }
				public FormulaProfile Init_DTCCancelPct { get { return _init_DTCCancelPct; } }
				public FormulaProfile Init_DTCCancelPctT1 { get { return _init_DTCCancelPctT1; } }
				public FormulaProfile Init_DTCFWOSUnit { get { return _init_DTCFWOSUnit; } }
				public FormulaProfile Init_DTCGrossDmdAUC { get { return _init_DTCGrossDmdAUC; } }
				public FormulaProfile Init_DTCGrossDmdAUCT1 { get { return _init_DTCGrossDmdAUCT1; } }
				public FormulaProfile Init_DTCGrossDmdAUR { get { return _init_DTCGrossDmdAUR; } }
				public FormulaProfile Init_DTCGrossDmdAURT1 { get { return _init_DTCGrossDmdAURT1; } }
				public FormulaProfile Init_DTCGrsDmdGMPct { get { return _init_DTCGrsDmdGMPct; } }
				public FormulaProfile Init_DTCGrsDmdGMPctT1 { get { return _init_DTCGrsDmdGMPctT1; } }
				public FormulaProfile Init_DTCNetDmdAUC { get { return _init_DTCNetDmdAUC; } }
				public FormulaProfile Init_DTCNetDmdAUCT1 { get { return _init_DTCNetDmdAUCT1; } }
				public FormulaProfile Init_DTCNetDmdAUR { get { return _init_DTCNetDmdAUR; } }
				public FormulaProfile Init_DTCNetDmdAURT1 { get { return _init_DTCNetDmdAURT1; } }
				public FormulaProfile Init_DTCNetDmdGMDlrT1 { get { return _init_DTCNetDmdGMDlrT1; } }
				public FormulaProfile Init_DTCNetDmdGMPct { get { return _init_DTCNetDmdGMPct; } }
				public FormulaProfile Init_DTCNetDmdGMPctT1 { get { return _init_DTCNetDmdGMPctT1; } }
				public FormulaProfile Init_DTCNetDmdPct { get { return _init_DTCNetDmdPct; } }
				public FormulaProfile Init_DTCNetDmdPctT1 { get { return _init_DTCNetDmdPctT1; } }
				public FormulaProfile Init_DTCRtnPct { get { return _init_DTCRtnPct; } }
				public FormulaProfile Init_DTCRtnPctT1 { get { return _init_DTCRtnPctT1; } }
				public FormulaProfile Init_DTCSellThru { get { return _init_DTCSellThru; } }
				public FormulaProfile Init_DTCSellThruT1 { get { return _init_DTCSellThruT1; } }
				public FormulaProfile Init_DTCSlsStkRatio { get { return _init_DTCSlsStkRatio; } }
				public FormulaProfile Init_DTCSlsStkRatioT1 { get { return _init_DTCSlsStkRatioT1; } }
				public FormulaProfile Init_ForwardWOSClearlDlrT1 { get { return _init_ForwardWOSClearlDlrT1; } }
				public FormulaProfile Init_ForwardWOSClearlDlrT2 { get { return _init_ForwardWOSClearlDlrT2; } }
				public FormulaProfile Init_ForwardWOSMarkdown_Custom { get { return _init_ForwardWOSMarkdown_Custom; } }
				public FormulaProfile Init_ForwardWOSMarkdownT1_Custom { get { return _init_ForwardWOSMarkdownT1_Custom; } }
				public FormulaProfile Init_ForwardWOSReglDlrT1 { get { return _init_ForwardWOSReglDlrT1; } }
				public FormulaProfile Init_ForwardWOSReglDlrT2 { get { return _init_ForwardWOSReglDlrT2; } }
				public FormulaProfile Init_ForwardWOSRegPromo_Custom { get { return _init_ForwardWOSRegPromo_Custom; } }
				public FormulaProfile Init_ForwardWOSRegPromoT1_Custom { get { return _init_ForwardWOSRegPromoT1_Custom; } }
				public FormulaProfile Init_ForwardWOSTotal_Custom { get { return _init_ForwardWOSTotal_Custom; } }
				public FormulaProfile Init_ForwardWOSTotalT1_Custom { get { return _init_ForwardWOSTotalT1_Custom; } }
				public FormulaProfile Init_ForwardWOSTotalT2 { get { return _init_ForwardWOSTotalT2; } }
				public FormulaProfile Init_FreightCostPerUnitT1 { get { return _init_FreightCostPerUnitT1; } }
				public FormulaProfile Init_FWOSTotDlr { get { return _init_FWOSTotDlr; } }
				public FormulaProfile Init_FWOSTotDlrT1 { get { return _init_FWOSTotDlrT1; } }
				public FormulaProfile Init_FWOSTotDlrT2 { get { return _init_FWOSTotDlrT2; } }
				public FormulaProfile Init_GrossMarginPctStr { get { return _init_GrossMarginPctStr; } }
				public FormulaProfile Init_GrossMarginPctStrT1 { get { return _init_GrossMarginPctStrT1; } }
				public FormulaProfile Init_GrossMarginPctT1 { get { return _init_GrossMarginPctT1; } }
				public FormulaProfile Init_GrossMarginPctTot { get { return _init_GrossMarginPctTot; } }
				public FormulaProfile Init_GrossMarginT1 { get { return _init_GrossMarginT1; } }
				public FormulaProfile Init_GrossMarginTotDlr { get { return _init_GrossMarginTotDlr; } }
				public FormulaProfile Init_GrossMarginTotStrT1 { get { return _init_GrossMarginTotStrT1; } }
				public FormulaProfile Init_InventoryTotalUnits_Custom { get { return _init_InventoryTotalUnits_Custom; } }
				public FormulaProfile Init_InventoryTotalUnitsT4 { get { return _init_InventoryTotalUnitsT4; } }
				public FormulaProfile Init_NonCompPctTtl { get { return _init_NonCompPctTtl; } }
				public FormulaProfile Init_NonCompPctTtlT1 { get { return _init_NonCompPctTtlT1; } }
				public FormulaProfile Init_OnOrderAUC { get { return _init_OnOrderAUC; } }
				public FormulaProfile Init_OnOrderAUCT1 { get { return _init_OnOrderAUCT1; } }
				public FormulaProfile Init_OnOrderAUR { get { return _init_OnOrderAUR; } }
				public FormulaProfile Init_OnOrderAURT1 { get { return _init_OnOrderAURT1; } }
				public FormulaProfile Init_OTBCostDlr { get { return _init_OTBCostDlr; } }
				public FormulaProfile Init_OTBCostDlrCum { get { return _init_OTBCostDlrCum; } }
				public FormulaProfile Init_OTBUnit { get { return _init_OTBUnit; } }
				public FormulaProfile Init_OTBUnitCum { get { return _init_OTBUnitCum; } }
				public FormulaProfile Init_ReceiptAUCT1 { get { return _init_ReceiptAUCT1; } }
				public FormulaProfile Init_ReceiptAUCTot { get { return _init_ReceiptAUCTot; } }
				public FormulaProfile Init_ReceiptAUCTotT1 { get { return _init_ReceiptAUCTotT1; } }
				public FormulaProfile Init_ReceiptAUR { get { return _init_ReceiptAUR; } }
				public FormulaProfile Init_ReceiptAURT1 { get { return _init_ReceiptAURT1; } }
				public FormulaProfile Init_RegStrBinvAURT1 { get { return _init_RegStrBinvAURT1; } }
				public FormulaProfile Init_RegStrBinvAURT2 { get { return _init_RegStrBinvAURT2; } }
				public FormulaProfile Init_RegStrBinvAURT3 { get { return _init_RegStrBinvAURT3; } }
				public FormulaProfile Init_RegStrBinvDlrT4 { get { return _init_RegStrBinvDlrT4; } }
				public FormulaProfile Init_RegStrBinvPctTtlDlrT1 { get { return _init_RegStrBinvPctTtlDlrT1; } }
				public FormulaProfile Init_RegStrBinvPctTtlDlrT2 { get { return _init_RegStrBinvPctTtlDlrT2; } }
				public FormulaProfile Init_RegStrBinvPctTtlDlrT3 { get { return _init_RegStrBinvPctTtlDlrT3; } }
				public FormulaProfile Init_RegStrBinvPctTtlUnitsT1 { get { return _init_RegStrBinvPctTtlUnitsT1; } }
				public FormulaProfile Init_RegStrBinvPctTtlUnitsT2 { get { return _init_RegStrBinvPctTtlUnitsT2; } }
				public FormulaProfile Init_RegStrBinvPctTtlUnitsT3 { get { return _init_RegStrBinvPctTtlUnitsT3; } }
				public FormulaProfile Init_SalesAUCT1 { get { return _init_SalesAUCT1; } }
				public FormulaProfile Init_SalesClearAURT1 { get { return _init_SalesClearAURT1; } }
				public FormulaProfile Init_SalesClearPctTtlDlrT1 { get { return _init_SalesClearPctTtlDlrT1; } }
				public FormulaProfile Init_SalesClearPctTtlUnitsT1 { get { return _init_SalesClearPctTtlUnitsT1; } }
				public FormulaProfile Init_SalesMarginT1 { get { return _init_SalesMarginT1; } }
				public FormulaProfile Init_SalesRegAURT1 { get { return _init_SalesRegAURT1; } }
				public FormulaProfile Init_SalesRegPctTtlDlrT1 { get { return _init_SalesRegPctTtlDlrT1; } }
				public FormulaProfile Init_SalesRegPctTtlUnitsT1 { get { return _init_SalesRegPctTtlUnitsT1; } }
				public FormulaProfile Init_SalesRegPromoUnits_Custom { get { return _init_SalesRegPromoUnits_Custom; } }
				public FormulaProfile Init_SalesRegPromoUnitsT1_Custom { get { return _init_SalesRegPromoUnitsT1_Custom; } }
				public FormulaProfile Init_SalesTotalUnits_Custom { get { return _init_SalesTotalUnits_Custom; } }
				public FormulaProfile Init_SellThruUnitPctTot { get { return _init_SellThruUnitPctTot; } }
				public FormulaProfile Init_SellThruUnitPctTotT1 { get { return _init_SellThruUnitPctTotT1; } }
				public FormulaProfile Init_ShrinkPctT1 { get { return _init_ShrinkPctT1; } }
				public FormulaProfile Init_ShrinkPctTot { get { return _init_ShrinkPctTot; } }
				public FormulaProfile Init_ShrinkPctTotT1 { get { return _init_ShrinkPctTotT1; } }
				public FormulaProfile Init_TotBinvAUC { get { return _init_TotBinvAUC; } }
				public FormulaProfile Init_TotDTCSalesCostDlrPctTTL { get { return _init_TotDTCSalesCostDlrPctTTL; } }
				public FormulaProfile Init_TotDTCSalesCostDlrPctTTLT1 { get { return _init_TotDTCSalesCostDlrPctTTLT1; } }
				public FormulaProfile Init_TotDTCSalesUnitPctTTL { get { return _init_TotDTCSalesUnitPctTTL; } }
				public FormulaProfile Init_TotDTCSalesUnitPctTTLT1 { get { return _init_TotDTCSalesUnitPctTTLT1; } }
				public FormulaProfile Init_TotEinvAUC { get { return _init_TotEinvAUC; } }
				public FormulaProfile Init_TotEinvAUCT1 { get { return _init_TotEinvAUCT1; } }
				public FormulaProfile Init_TotEinvAUCT2 { get { return _init_TotEinvAUCT2; } }
				public FormulaProfile Init_TotEinvAUCT3 { get { return _init_TotEinvAUCT3; } }
				public FormulaProfile Init_TotEinvCostDlr { get { return _init_TotEinvCostDlr; } }
				public FormulaProfile Init_TotEinvUnits { get { return _init_TotEinvUnits; } }
				public FormulaProfile Init_TotFWOSUnit { get { return _init_TotFWOSUnit; } }
				public FormulaProfile Init_TotIMUPct { get { return _init_TotIMUPct; } }
				public FormulaProfile Init_TotMDPctT1 { get { return _init_TotMDPctT1; } }
				public FormulaProfile Init_TotSalesAUC { get { return _init_TotSalesAUC; } }
				public FormulaProfile Init_TotSalesAUCT1 { get { return _init_TotSalesAUCT1; } }
				public FormulaProfile Init_TotSalesAUR { get { return _init_TotSalesAUR; } }
				public FormulaProfile Init_TotSalesAURT1 { get { return _init_TotSalesAURT1; } }
				public FormulaProfile Init_TotSalesCostDlr { get { return _init_TotSalesCostDlr; } }
				public FormulaProfile Init_TotSalesDlr { get { return _init_TotSalesDlr; } }
				public FormulaProfile Init_TotStrAvgEndINVUnit { get { return _init_TotStrAvgEndINVUnit; } }
				public FormulaProfile Init_TotStrAvgINVUnit { get { return _init_TotStrAvgINVUnit; } }
				public FormulaProfile Init_TotStrBinvAUCT1 { get { return _init_TotStrBinvAUCT1; } }
				public FormulaProfile Init_TotStrBinvAUCT2 { get { return _init_TotStrBinvAUCT2; } }
				public FormulaProfile Init_TotStrBinvAUCT3 { get { return _init_TotStrBinvAUCT3; } }
				public FormulaProfile Init_TotStrBinvAURT1 { get { return _init_TotStrBinvAURT1; } }
				public FormulaProfile Init_TotStrBinvAURT2 { get { return _init_TotStrBinvAURT2; } }
				public FormulaProfile Init_TotStrBinvAURT3 { get { return _init_TotStrBinvAURT3; } }
				public FormulaProfile Init_TotStrSalesAUC { get { return _init_TotStrSalesAUC; } }
				public FormulaProfile Init_TotStrSalesAUCT1 { get { return _init_TotStrSalesAUCT1; } }
				public FormulaProfile Init_TotStrSalesAUR { get { return _init_TotStrSalesAUR; } }
				public FormulaProfile Init_TotStrSalesAURT1 { get { return _init_TotStrSalesAURT1; } }
				public FormulaProfile Init_TotStrSalesCostDlrPctTTL { get { return _init_TotStrSalesCostDlrPctTTL; } }
				public FormulaProfile Init_TotStrSalesCostDlrPctTTLT1 { get { return _init_TotStrSalesCostDlrPctTTLT1; } }
				public FormulaProfile Init_TotStrSalesUnitPctTTL { get { return _init_TotStrSalesUnitPctTTL; } }
				public FormulaProfile Init_TotStrSalesUnitPctTTLT1 { get { return _init_TotStrSalesUnitPctTTLT1; } }
				public FormulaProfile Init_VATPct { get { return _init_VATPct; } }
				public FormulaProfile Init_VATPctT1 { get { return _init_VATPctT1; } }
				public SpreadProfile Spread_DTCGrossDmdCostDlr_SPREAD { get { return _spread_DTCGrossDmdCostDlr_SPREAD; } }
				public SpreadProfile Spread_DTCGrossDmdCostDlr_SpreadDifference { get { return _spread_DTCGrossDmdCostDlr_SpreadDifference; } }
				public SpreadProfile Spread_DTCGrossDmdDlr_SPREAD { get { return _spread_DTCGrossDmdDlr_SPREAD; } }
				public SpreadProfile Spread_DTCGrossDmdDlr_SpreadDifference { get { return _spread_DTCGrossDmdDlr_SpreadDifference; } }
				public SpreadProfile Spread_DTCGrossDmdUnit_SPREAD { get { return _spread_DTCGrossDmdUnit_SPREAD; } }
				public SpreadProfile Spread_DTCGrossDmdUnit_SpreadDifference { get { return _spread_DTCGrossDmdUnit_SpreadDifference; } }
				public SpreadProfile Spread_InventoryTotalUnits_Spread { get { return _spread_InventoryTotalUnits_Spread; } }
				public SpreadProfile Spread_SalesTotalUnits_PREAD_REG_CLEAR { get { return _spread_SalesTotalUnits_PREAD_REG_CLEAR; } }
				public SpreadProfile Spread_SalesTotalUnits_SPREAD_DTC_STR { get { return _spread_SalesTotalUnits_SPREAD_DTC_STR; } }
				public SpreadProfile Spread_SalesTotalUnits_SpreadDifference { get { return _spread_SalesTotalUnits_SpreadDifference; } }
				public SpreadProfile Spread_TotEinvUnits_SPREAD_REG_CLEAR { get { return _spread_TotEinvUnits_SPREAD_REG_CLEAR; } }
				public SpreadProfile Spread_TotSalesCostDlr_SPREAD { get { return _spread_TotSalesCostDlr_SPREAD; } }
				public SpreadProfile Spread_TotSalesCostDlr_SpreadDifference { get { return _spread_TotSalesCostDlr_SpreadDifference; } }
				public SpreadProfile Spread_TotSalesDlr_SPREAD_DTC_STR { get { return _spread_TotSalesDlr_SPREAD_DTC_STR; } }
				public SpreadProfile Spread_TotSalesDlr_SpreadDifference { get { return _spread_TotSalesDlr_SpreadDifference; } }
				public FormulaProfile Init_SalesTotalUnits_Custom_STORE { get { return _init_SalesTotalUnits_Custom_STORE; } }
				public FormulaProfile Init_TotSalesDlr_STORE { get { return _init_TotSalesDlr_STORE; } }
				public FormulaProfile Init_TotSalesUnit { get { return _init_TotSalesUnit; } }
				public FormulaProfile Init_TotSalesCostDlr_STORE { get { return _init_TotSalesCostDlr_STORE; } }
				public FormulaProfile Init_GrossMarginTotDlr_STORE { get { return _init_GrossMarginTotDlr_STORE; } }
				public FormulaProfile Init_TotRecCostDlr_STORE { get { return _init_TotRecCostDlr_STORE; } }
				public SpreadProfile Spread_SalesRegPromoUnits_SPREAD_REG_PROMO { get { return _spread_SalesRegPromoUnits_SPREAD_REG_PROMO; } }
				public FormulaProfile Formula_SalesTotalUnits_SUM_RPC_for_STORE { get { return _formula_SalesTotalUnits_SUM_RPC_for_STORE; } }
				public FormulaProfile Init_SpaceConvPct { get { return _init_SpaceConvPct; } }
				public FormulaProfile Init_SpaceConvPctT1 { get { return _init_SpaceConvPctT1; } }
				public FormulaProfile Init_SalesUperSqSpace { get { return _init_SalesUperSqSpace; } }
				public FormulaProfile Init_SalesUperSqSpaceT1 { get { return _init_SalesUperSqSpaceT1; } }
				public FormulaProfile Init_SalesUperLinearSpaceT1 { get { return _init_SalesUperLinearSpaceT1; } }
				public FormulaProfile Init_SalesUperLinearSpace { get { return _init_SalesUperLinearSpace; } }
				public FormulaProfile Init_TotStrSalesDlrperLinearSpace { get { return _init_TotStrSalesDlrperLinearSpace; } }
				public FormulaProfile Init_TotStrSalesDlrperLinearSpaceT1 { get { return _init_TotStrSalesDlrperLinearSpaceT1; } }
				public FormulaProfile Init_TotStrSalesDlrperSqSpace { get { return _init_TotStrSalesDlrperSqSpace; } }
				public FormulaProfile Init_TotStrSalesDlrperSqSpaceT1 { get { return _init_TotStrSalesDlrperSqSpaceT1; } }
				public FormulaProfile Init_TotStrSalesCDlrperSqSpace { get { return _init_TotStrSalesCDlrperSqSpace; } }
				public FormulaProfile Init_TotStrSalesCDlrperSqSpaceT1 { get { return _init_TotStrSalesCDlrperSqSpaceT1; } }
				public FormulaProfile Init_TotStrSalesCDlrperLinearSpace { get { return _init_TotStrSalesCDlrperLinearSpace; } }
				public FormulaProfile Init_TotStrSalesCDlrperLinearSpaceT1 { get { return _init_TotStrSalesCDlrperLinearSpaceT1; } }
				public FormulaProfile Init_DensityU { get { return _init_DensityU; } }
				public FormulaProfile Init_DensityUT1 { get { return _init_DensityUT1; } }
				public FormulaProfile Init_SalesperSpaceU { get { return _init_SalesperSpaceU; } }
				public FormulaProfile Init_SalesperSpaceUT1 { get { return _init_SalesperSpaceUT1; } }
				public FormulaProfile Init_DTCPlacedOrdersDlr { get { return _init_DTCPlacedOrdersDlr; } }
				public FormulaProfile Init_DTCConvPct { get { return _init_DTCConvPct; } }
				public FormulaProfile Init_DTCConvPctT1 { get { return _init_DTCConvPctT1; } }
				public FormulaProfile Formula_LinearSpace_Calc_Conv { get { return _formula_LinearSpace_Calc_Conv; } }

        public DefaultPlanFormulasAndSpreads(BasePlanComputations aBasePlanComputations) : 
                base(aBasePlanComputations)
        {
            _formula_AdjCostDlrTot_BINV_AUC = new clsFormula_AdjCostDlrTot_BINV_AUC(aBasePlanComputations, NextSequence);
            _formula_AdjCostDlrTot_PCT = new clsFormula_AdjCostDlrTot_PCT(aBasePlanComputations, NextSequence);
            _formula_AdjUnitsTot_AUC_BINV = new clsFormula_AdjUnitsTot_AUC_BINV(aBasePlanComputations, NextSequence);
            _formula_AfterDiscountDlr_Calc = new clsFormula_AfterDiscountDlr_Calc(aBasePlanComputations, NextSequence);
            _formula_CompSlsDlr_Differerence = new clsFormula_CompSlsDlr_Differerence(aBasePlanComputations, NextSequence);
            _formula_CompSlsDlr_PCT = new clsFormula_CompSlsDlr_PCT(aBasePlanComputations, NextSequence);
            _formula_ConvertedSalesDlr_Calc = new clsFormula_ConvertedSalesDlr_Calc(aBasePlanComputations, NextSequence);
            _formula_DiscountDlr_Calc = new clsFormula_DiscountDlr_Calc(aBasePlanComputations, NextSequence);
            _formula_DTCBOCostDlr_AUC_GRSD = new clsFormula_DTCBOCostDlr_AUC_GRSD(aBasePlanComputations, NextSequence);
            _formula_DTCBOCostDlr_PCT_BOPCT = new clsFormula_DTCBOCostDlr_PCT_BOPCT(aBasePlanComputations, NextSequence);
            _formula_DTCBODlr_AUR_GRSD = new clsFormula_DTCBODlr_AUR_GRSD(aBasePlanComputations, NextSequence);
            _formula_DTCBODlr_GRSD_GM_PCT = new clsFormula_DTCBODlr_GRSD_GM_PCT(aBasePlanComputations, NextSequence);
            _formula_DTCBOUnit_AUC_GRSD = new clsFormula_DTCBOUnit_AUC_GRSD(aBasePlanComputations, NextSequence);
            _formula_DTCCancelCostDlr_AUC_GRSD = new clsFormula_DTCCancelCostDlr_AUC_GRSD(aBasePlanComputations, NextSequence);
            _formula_DTCCancelCostDlr_PCT_CANPCT = new clsFormula_DTCCancelCostDlr_PCT_CANPCT(aBasePlanComputations, NextSequence);
            _formula_DTCCancelDlr_AUR_GRSD = new clsFormula_DTCCancelDlr_AUR_GRSD(aBasePlanComputations, NextSequence);
            _formula_DTCCancelDlr_GRSD_GM_PCT = new clsFormula_DTCCancelDlr_GRSD_GM_PCT(aBasePlanComputations, NextSequence);
            _formula_DTCCancelUnit_AUC_GRSD = new clsFormula_DTCCancelUnit_AUC_GRSD(aBasePlanComputations, NextSequence);
            _formula_DTCGrossDmdCostDlr_AUC = new clsFormula_DTCGrossDmdCostDlr_AUC(aBasePlanComputations, NextSequence);
            _formula_DTCGrossDmdCostDlr_SUM = new clsFormula_DTCGrossDmdCostDlr_SUM(aBasePlanComputations, NextSequence);
            _formula_DTCGrossDmdDlr_AUR = new clsFormula_DTCGrossDmdDlr_AUR(aBasePlanComputations, NextSequence);
            _formula_DTCGrossDmdDlr_GRSD_GM_PCT = new clsFormula_DTCGrossDmdDlr_GRSD_GM_PCT(aBasePlanComputations, NextSequence);
            _formula_DTCGrossDmdDlr_SUM = new clsFormula_DTCGrossDmdDlr_SUM(aBasePlanComputations, NextSequence);
            _formula_DTCGrossDmdGMDlr_DIFF = new clsFormula_DTCGrossDmdGMDlr_DIFF(aBasePlanComputations, NextSequence);
            _formula_DTCGrossDmdGMDlr_GM_PCT = new clsFormula_DTCGrossDmdGMDlr_GM_PCT(aBasePlanComputations, NextSequence);
            _formula_DTCGrossDmdUnit_AUC = new clsFormula_DTCGrossDmdUnit_AUC(aBasePlanComputations, NextSequence);
            _formula_DTCGrossDmdUnit_AUR = new clsFormula_DTCGrossDmdUnit_AUR(aBasePlanComputations, NextSequence);
            _formula_DTCGrossDmdUnit_SUM = new clsFormula_DTCGrossDmdUnit_SUM(aBasePlanComputations, NextSequence);
            _formula_DTCNetDmdCostDlr_AUC = new clsFormula_DTCNetDmdCostDlr_AUC(aBasePlanComputations, NextSequence);
            _formula_DTCNetDmdCostDlr_DIFF = new clsFormula_DTCNetDmdCostDlr_DIFF(aBasePlanComputations, NextSequence);
            _formula_DTCNetDmdCostDlr_GM_DIFFER = new clsFormula_DTCNetDmdCostDlr_GM_DIFFER(aBasePlanComputations, NextSequence);
            _formula_DTCNetDmdCostDlr_PCT_DTCPCT = new clsFormula_DTCNetDmdCostDlr_PCT_DTCPCT(aBasePlanComputations, NextSequence);
            _formula_DTCNetDmdCostDlr_PCT_NETPCT = new clsFormula_DTCNetDmdCostDlr_PCT_NETPCT(aBasePlanComputations, NextSequence);
            _formula_DTCNetDmdDlr_AUR = new clsFormula_DTCNetDmdDlr_AUR(aBasePlanComputations, NextSequence);
            _formula_DTCNetDmdDlr_DIFF = new clsFormula_DTCNetDmdDlr_DIFF(aBasePlanComputations, NextSequence);
            _formula_DTCNetDmdDlr_NETD_GM_PCT = new clsFormula_DTCNetDmdDlr_NETD_GM_PCT(aBasePlanComputations, NextSequence);
            _formula_DTCNetDmdGMDlr_DIFF = new clsFormula_DTCNetDmdGMDlr_DIFF(aBasePlanComputations, NextSequence);
            _formula_DTCNetDmdGMDlr_PCT = new clsFormula_DTCNetDmdGMDlr_PCT(aBasePlanComputations, NextSequence);
            _formula_DTCNetDmdUnit_AUC = new clsFormula_DTCNetDmdUnit_AUC(aBasePlanComputations, NextSequence);
            _formula_DTCNetDmdUnit_AUR = new clsFormula_DTCNetDmdUnit_AUR(aBasePlanComputations, NextSequence);
            _formula_DTCNetDmdUnit_DIFF = new clsFormula_DTCNetDmdUnit_DIFF(aBasePlanComputations, NextSequence);
            _formula_DTCNetDmdUnit_PCT_DTCPCT = new clsFormula_DTCNetDmdUnit_PCT_DTCPCT(aBasePlanComputations, NextSequence);
            _formula_DTCRtnCostDlr_AUC_GRSD = new clsFormula_DTCRtnCostDlr_AUC_GRSD(aBasePlanComputations, NextSequence);
            _formula_DTCRtnCostDlr_PCT_RTNPCT = new clsFormula_DTCRtnCostDlr_PCT_RTNPCT(aBasePlanComputations, NextSequence);
            _formula_DTCRtnDlr_AUR_GRSD = new clsFormula_DTCRtnDlr_AUR_GRSD(aBasePlanComputations, NextSequence);
            _formula_DTCRtnDlr_GRSD_GM_PCT = new clsFormula_DTCRtnDlr_GRSD_GM_PCT(aBasePlanComputations, NextSequence);
            _formula_DTCRtnUnit_AUC_GRSD = new clsFormula_DTCRtnUnit_AUC_GRSD(aBasePlanComputations, NextSequence);
            _formula_FreightCostPerUnit_Calc = new clsFormula_FreightCostPerUnit_Calc(aBasePlanComputations, NextSequence);
            _formula_GrossMarginTotDlr_DIFF = new clsFormula_GrossMarginTotDlr_DIFF(aBasePlanComputations, NextSequence);
            _formula_GrossMarginTotDlr_PCT = new clsFormula_GrossMarginTotDlr_PCT(aBasePlanComputations, NextSequence);
            _formula_GrossMarginTotStr_DIFF = new clsFormula_GrossMarginTotStr_DIFF(aBasePlanComputations, NextSequence);
            _formula_GrossMarginTotStr_PCT = new clsFormula_GrossMarginTotStr_PCT(aBasePlanComputations, NextSequence);
            _formula_InventoryRegularUnits_STORE_FLOW = new clsFormula_InventoryRegularUnits_STORE_FLOW(aBasePlanComputations, NextSequence);
            _formula_InventoryTotalUnits_AUC = new clsFormula_InventoryTotalUnits_AUC(aBasePlanComputations, NextSequence);
            _formula_InventoryTotalUnits_DTC_FWOS = new clsFormula_InventoryTotalUnits_DTC_FWOS(aBasePlanComputations, NextSequence);
            _formula_InventoryTotalUnits_FLOW = new clsFormula_InventoryTotalUnits_FLOW(aBasePlanComputations, NextSequence);
            _formula_InventoryTotalUnits_PLUG = new clsFormula_InventoryTotalUnits_PLUG(aBasePlanComputations, NextSequence);
            _formula_NonCompSlsDlr_Difference = new clsFormula_NonCompSlsDlr_Difference(aBasePlanComputations, NextSequence);
            _formula_NonCompSlsDlr_PCT = new clsFormula_NonCompSlsDlr_PCT(aBasePlanComputations, NextSequence);
            _formula_OnOrderCostDlr_AUC = new clsFormula_OnOrderCostDlr_AUC(aBasePlanComputations, NextSequence);
            _formula_OnOrderCostDlr_IMU = new clsFormula_OnOrderCostDlr_IMU(aBasePlanComputations, NextSequence);
            _formula_OnOrderDlr_AUR = new clsFormula_OnOrderDlr_AUR(aBasePlanComputations, NextSequence);
            _formula_OnOrderUnit_AUC = new clsFormula_OnOrderUnit_AUC(aBasePlanComputations, NextSequence);
            _formula_OnOrderUnit_AUR = new clsFormula_OnOrderUnit_AUR(aBasePlanComputations, NextSequence);
            _formula_SalesTotalUnits_AUC = new clsFormula_SalesTotalUnits_AUC(aBasePlanComputations, NextSequence);
            _formula_SalesTotalUnits_AUR = new clsFormula_SalesTotalUnits_AUR(aBasePlanComputations, NextSequence);
            _formula_SaleswithoutVATDlr_Calc = new clsFormula_SaleswithoutVATDlr_Calc(aBasePlanComputations, NextSequence);
            _formula_ShrinkCostDlrTot_BINV_AUC = new clsFormula_ShrinkCostDlrTot_BINV_AUC(aBasePlanComputations, NextSequence);
            _formula_ShrinkCostDlrTot_PCT = new clsFormula_ShrinkCostDlrTot_PCT(aBasePlanComputations, NextSequence);
            _formula_ShrinkUnitsTot_AUC_BINV = new clsFormula_ShrinkUnitsTot_AUC_BINV(aBasePlanComputations, NextSequence);
            _formula_TotBinvCostDlr_AUC = new clsFormula_TotBinvCostDlr_AUC(aBasePlanComputations, NextSequence);
            _formula_TotBinvCostDlr_FLOW = new clsFormula_TotBinvCostDlr_FLOW(aBasePlanComputations, NextSequence);
            _formula_TotBinvCostDlr_PLUG = new clsFormula_TotBinvCostDlr_PLUG(aBasePlanComputations, NextSequence);
            _formula_TotEinvCostDlr_AUC = new clsFormula_TotEinvCostDlr_AUC(aBasePlanComputations, NextSequence);
            _formula_TotEinvCostDlr_FLOW = new clsFormula_TotEinvCostDlr_FLOW(aBasePlanComputations, NextSequence);
            _formula_TotEinvCostDlr_PLUG = new clsFormula_TotEinvCostDlr_PLUG(aBasePlanComputations, NextSequence);
            _formula_TotEinvUnits_AUC = new clsFormula_TotEinvUnits_AUC(aBasePlanComputations, NextSequence);
            _formula_TotEinvUnits_DTC_FWOS = new clsFormula_TotEinvUnits_DTC_FWOS(aBasePlanComputations, NextSequence);
            _formula_TotEinvUnits_FLOW = new clsFormula_TotEinvUnits_FLOW(aBasePlanComputations, NextSequence);
            _formula_TotEinvUnits_PLUG = new clsFormula_TotEinvUnits_PLUG(aBasePlanComputations, NextSequence);
            _formula_TotEinvUnits_STR_BINV_SUM = new clsFormula_TotEinvUnits_STR_BINV_SUM(aBasePlanComputations, NextSequence);
            _formula_TotFreightCostDlr_Calc = new clsFormula_TotFreightCostDlr_Calc(aBasePlanComputations, NextSequence);
            _formula_TotMDDlr_PCT = new clsFormula_TotMDDlr_PCT(aBasePlanComputations, NextSequence);
            _formula_TotRecCostDlr_AUC = new clsFormula_TotRecCostDlr_AUC(aBasePlanComputations, NextSequence);
            _formula_TotRecCostDlr_FLOW = new clsFormula_TotRecCostDlr_FLOW(aBasePlanComputations, NextSequence);
            _formula_TotRecUnit_AUC = new clsFormula_TotRecUnit_AUC(aBasePlanComputations, NextSequence);
            _formula_TotRecUnit_FLOW = new clsFormula_TotRecUnit_FLOW(aBasePlanComputations, NextSequence);
            _formula_TotSalesCostDlr_AUC = new clsFormula_TotSalesCostDlr_AUC(aBasePlanComputations, NextSequence);
            _formula_TotSalesCostDlr_GRS_MARGIN = new clsFormula_TotSalesCostDlr_GRS_MARGIN(aBasePlanComputations, NextSequence);
            _formula_TotSalesDlr_AUR = new clsFormula_TotSalesDlr_AUR(aBasePlanComputations, NextSequence);
            _formula_TotSalesDlr_INVERSE_GM_PCT = new clsFormula_TotSalesDlr_INVERSE_GM_PCT(aBasePlanComputations, NextSequence);
            _formula_TotSalesDlr_SUM_GM = new clsFormula_TotSalesDlr_SUM_GM(aBasePlanComputations, NextSequence);
            _formula_TotSalesUnit_AUC = new clsFormula_TotSalesUnit_AUC(aBasePlanComputations, NextSequence);
            _formula_TotSalesUnit_AUR = new clsFormula_TotSalesUnit_AUR(aBasePlanComputations, NextSequence);
            _formula_TotSalesUnit_PCT_PCTTTL = new clsFormula_TotSalesUnit_PCT_PCTTTL(aBasePlanComputations, NextSequence);
            _formula_TotStrSalesCostDlr_AUC = new clsFormula_TotStrSalesCostDlr_AUC(aBasePlanComputations, NextSequence);
            _formula_TotStrSalesCostDlr_GM_DIFFER = new clsFormula_TotStrSalesCostDlr_GM_DIFFER(aBasePlanComputations, NextSequence);
            _formula_TotStrSalesCostDlr_GRS_MARGIN = new clsFormula_TotStrSalesCostDlr_GRS_MARGIN(aBasePlanComputations, NextSequence);
            _formula_TotStrSalesCostDlr_PCT_PCTTTL = new clsFormula_TotStrSalesCostDlr_PCT_PCTTTL(aBasePlanComputations, NextSequence);
            _formula_TotStrSalesDlr_AUR = new clsFormula_TotStrSalesDlr_AUR(aBasePlanComputations, NextSequence);
            _formula_TotStrSalesDlr_INVERSE_PCT = new clsFormula_TotStrSalesDlr_INVERSE_PCT(aBasePlanComputations, NextSequence);
            _formula_TotStrSalesDlr_SUM_GM = new clsFormula_TotStrSalesDlr_SUM_GM(aBasePlanComputations, NextSequence);
            _formula_VATDlr_Calc = new clsFormula_VATDlr_Calc(aBasePlanComputations, NextSequence);
            _init_AdjUntiPctTot = new clsInit_AdjUntiPctTot(aBasePlanComputations, NextSequence);
            _init_AdjUntiPctTotT1 = new clsInit_AdjUntiPctTotT1(aBasePlanComputations, NextSequence);
            _init_AfterDiscGMDlr = new clsInit_AfterDiscGMDlr(aBasePlanComputations, NextSequence);
            _init_AfterDiscountAUR = new clsInit_AfterDiscountAUR(aBasePlanComputations, NextSequence);
            _init_AfterDiscountAURT1 = new clsInit_AfterDiscountAURT1(aBasePlanComputations, NextSequence);
            _init_AvgStrSlsDlr = new clsInit_AvgStrSlsDlr(aBasePlanComputations, NextSequence);
            _init_AvgStrSlsUnit = new clsInit_AvgStrSlsUnit(aBasePlanComputations, NextSequence);
            _init_ClearStrBinvAURT1 = new clsInit_ClearStrBinvAURT1(aBasePlanComputations, NextSequence);
            _init_ClearStrBinvAURT2 = new clsInit_ClearStrBinvAURT2(aBasePlanComputations, NextSequence);
            _init_ClearStrBinvAURT3 = new clsInit_ClearStrBinvAURT3(aBasePlanComputations, NextSequence);
            _init_ClearStrBinvPctTtlDlrT1 = new clsInit_ClearStrBinvPctTtlDlrT1(aBasePlanComputations, NextSequence);
            _init_ClearStrBinvPctTtlDlrT2 = new clsInit_ClearStrBinvPctTtlDlrT2(aBasePlanComputations, NextSequence);
            _init_ClearStrBinvPctTtlDlrT3 = new clsInit_ClearStrBinvPctTtlDlrT3(aBasePlanComputations, NextSequence);
            _init_ClearStrBinvPctTtlUnitsT1 = new clsInit_ClearStrBinvPctTtlUnitsT1(aBasePlanComputations, NextSequence);
            _init_ClearStrBinvPctTtlUnitsT2 = new clsInit_ClearStrBinvPctTtlUnitsT2(aBasePlanComputations, NextSequence);
            _init_ClearStrBinvPctTtlUnitsT3 = new clsInit_ClearStrBinvPctTtlUnitsT3(aBasePlanComputations, NextSequence);
            _init_Commit1AUC = new clsInit_Commit1AUC(aBasePlanComputations, NextSequence);
            _init_Commit1AUCT1 = new clsInit_Commit1AUCT1(aBasePlanComputations, NextSequence);
            _init_Commit2AUC = new clsInit_Commit2AUC(aBasePlanComputations, NextSequence);
            _init_Commit2AUCT1 = new clsInit_Commit2AUCT1(aBasePlanComputations, NextSequence);
            _init_Commit3AUC = new clsInit_Commit3AUC(aBasePlanComputations, NextSequence);
            _init_Commit3AUCT1 = new clsInit_Commit3AUCT1(aBasePlanComputations, NextSequence);
            _init_CompPctTtl = new clsInit_CompPctTtl(aBasePlanComputations, NextSequence);
            _init_CompPctTtlT1 = new clsInit_CompPctTtlT1(aBasePlanComputations, NextSequence);
            _init_CurrXchgPct = new clsInit_CurrXchgPct(aBasePlanComputations, NextSequence);
            _init_CurrXchgPctT1 = new clsInit_CurrXchgPctT1(aBasePlanComputations, NextSequence);
            _init_DiscountPct = new clsInit_DiscountPct(aBasePlanComputations, NextSequence);
            _init_DiscountPctT1 = new clsInit_DiscountPctT1(aBasePlanComputations, NextSequence);
            _init_DTCAvgOrder = new clsInit_DTCAvgOrder(aBasePlanComputations, NextSequence);
            _init_DTCBOPct = new clsInit_DTCBOPct(aBasePlanComputations, NextSequence);
            _init_DTCBOPctT1 = new clsInit_DTCBOPctT1(aBasePlanComputations, NextSequence);
            _init_DTCCancelPct = new clsInit_DTCCancelPct(aBasePlanComputations, NextSequence);
            _init_DTCCancelPctT1 = new clsInit_DTCCancelPctT1(aBasePlanComputations, NextSequence);
            _init_DTCFWOSUnit = new clsInit_DTCFWOSUnit(aBasePlanComputations, NextSequence);
            _init_DTCGrossDmdAUC = new clsInit_DTCGrossDmdAUC(aBasePlanComputations, NextSequence);
            _init_DTCGrossDmdAUCT1 = new clsInit_DTCGrossDmdAUCT1(aBasePlanComputations, NextSequence);
            _init_DTCGrossDmdAUR = new clsInit_DTCGrossDmdAUR(aBasePlanComputations, NextSequence);
            _init_DTCGrossDmdAURT1 = new clsInit_DTCGrossDmdAURT1(aBasePlanComputations, NextSequence);
            _init_DTCGrsDmdGMPct = new clsInit_DTCGrsDmdGMPct(aBasePlanComputations, NextSequence);
            _init_DTCGrsDmdGMPctT1 = new clsInit_DTCGrsDmdGMPctT1(aBasePlanComputations, NextSequence);
            _init_DTCNetDmdAUC = new clsInit_DTCNetDmdAUC(aBasePlanComputations, NextSequence);
            _init_DTCNetDmdAUCT1 = new clsInit_DTCNetDmdAUCT1(aBasePlanComputations, NextSequence);
            _init_DTCNetDmdAUR = new clsInit_DTCNetDmdAUR(aBasePlanComputations, NextSequence);
            _init_DTCNetDmdAURT1 = new clsInit_DTCNetDmdAURT1(aBasePlanComputations, NextSequence);
            _init_DTCNetDmdGMDlrT1 = new clsInit_DTCNetDmdGMDlrT1(aBasePlanComputations, NextSequence);
            _init_DTCNetDmdGMPct = new clsInit_DTCNetDmdGMPct(aBasePlanComputations, NextSequence);
            _init_DTCNetDmdGMPctT1 = new clsInit_DTCNetDmdGMPctT1(aBasePlanComputations, NextSequence);
            _init_DTCNetDmdPct = new clsInit_DTCNetDmdPct(aBasePlanComputations, NextSequence);
            _init_DTCNetDmdPctT1 = new clsInit_DTCNetDmdPctT1(aBasePlanComputations, NextSequence);
            _init_DTCRtnPct = new clsInit_DTCRtnPct(aBasePlanComputations, NextSequence);
            _init_DTCRtnPctT1 = new clsInit_DTCRtnPctT1(aBasePlanComputations, NextSequence);
            _init_DTCSellThru = new clsInit_DTCSellThru(aBasePlanComputations, NextSequence);
            _init_DTCSellThruT1 = new clsInit_DTCSellThruT1(aBasePlanComputations, NextSequence);
            _init_DTCSlsStkRatio = new clsInit_DTCSlsStkRatio(aBasePlanComputations, NextSequence);
            _init_DTCSlsStkRatioT1 = new clsInit_DTCSlsStkRatioT1(aBasePlanComputations, NextSequence);
            _init_ForwardWOSClearlDlrT1 = new clsInit_ForwardWOSClearlDlrT1(aBasePlanComputations, NextSequence);
            _init_ForwardWOSClearlDlrT2 = new clsInit_ForwardWOSClearlDlrT2(aBasePlanComputations, NextSequence);
            _init_ForwardWOSMarkdown_Custom = new clsInit_ForwardWOSMarkdown_Custom(aBasePlanComputations, NextSequence);
            _init_ForwardWOSMarkdownT1_Custom = new clsInit_ForwardWOSMarkdownT1_Custom(aBasePlanComputations, NextSequence);
            _init_ForwardWOSReglDlrT1 = new clsInit_ForwardWOSReglDlrT1(aBasePlanComputations, NextSequence);
            _init_ForwardWOSReglDlrT2 = new clsInit_ForwardWOSReglDlrT2(aBasePlanComputations, NextSequence);
            _init_ForwardWOSRegPromo_Custom = new clsInit_ForwardWOSRegPromo_Custom(aBasePlanComputations, NextSequence);
            _init_ForwardWOSRegPromoT1_Custom = new clsInit_ForwardWOSRegPromoT1_Custom(aBasePlanComputations, NextSequence);
            _init_ForwardWOSTotal_Custom = new clsInit_ForwardWOSTotal_Custom(aBasePlanComputations, NextSequence);
            _init_ForwardWOSTotalT1_Custom = new clsInit_ForwardWOSTotalT1_Custom(aBasePlanComputations, NextSequence);
            _init_ForwardWOSTotalT2 = new clsInit_ForwardWOSTotalT2(aBasePlanComputations, NextSequence);
            _init_FreightCostPerUnitT1 = new clsInit_FreightCostPerUnitT1(aBasePlanComputations, NextSequence);
            _init_FWOSTotDlr = new clsInit_FWOSTotDlr(aBasePlanComputations, NextSequence);
            _init_FWOSTotDlrT1 = new clsInit_FWOSTotDlrT1(aBasePlanComputations, NextSequence);
            _init_FWOSTotDlrT2 = new clsInit_FWOSTotDlrT2(aBasePlanComputations, NextSequence);
            _init_GrossMarginPctStr = new clsInit_GrossMarginPctStr(aBasePlanComputations, NextSequence);
            _init_GrossMarginPctStrT1 = new clsInit_GrossMarginPctStrT1(aBasePlanComputations, NextSequence);
            _init_GrossMarginPctT1 = new clsInit_GrossMarginPctT1(aBasePlanComputations, NextSequence);
            _init_GrossMarginPctTot = new clsInit_GrossMarginPctTot(aBasePlanComputations, NextSequence);
            _init_GrossMarginT1 = new clsInit_GrossMarginT1(aBasePlanComputations, NextSequence);
            _init_GrossMarginTotDlr = new clsInit_GrossMarginTotDlr(aBasePlanComputations, NextSequence);
            _init_GrossMarginTotStrT1 = new clsInit_GrossMarginTotStrT1(aBasePlanComputations, NextSequence);
            _init_InventoryTotalUnits_Custom = new clsInit_InventoryTotalUnits_Custom(aBasePlanComputations, NextSequence);
            _init_InventoryTotalUnitsT4 = new clsInit_InventoryTotalUnitsT4(aBasePlanComputations, NextSequence);
            _init_NonCompPctTtl = new clsInit_NonCompPctTtl(aBasePlanComputations, NextSequence);
            _init_NonCompPctTtlT1 = new clsInit_NonCompPctTtlT1(aBasePlanComputations, NextSequence);
            _init_OnOrderAUC = new clsInit_OnOrderAUC(aBasePlanComputations, NextSequence);
            _init_OnOrderAUCT1 = new clsInit_OnOrderAUCT1(aBasePlanComputations, NextSequence);
            _init_OnOrderAUR = new clsInit_OnOrderAUR(aBasePlanComputations, NextSequence);
            _init_OnOrderAURT1 = new clsInit_OnOrderAURT1(aBasePlanComputations, NextSequence);
            _init_OTBCostDlr = new clsInit_OTBCostDlr(aBasePlanComputations, NextSequence);
            _init_OTBCostDlrCum = new clsInit_OTBCostDlrCum(aBasePlanComputations, NextSequence);
            _init_OTBUnit = new clsInit_OTBUnit(aBasePlanComputations, NextSequence);
            _init_OTBUnitCum = new clsInit_OTBUnitCum(aBasePlanComputations, NextSequence);
            _init_ReceiptAUCT1 = new clsInit_ReceiptAUCT1(aBasePlanComputations, NextSequence);
            _init_ReceiptAUCTot = new clsInit_ReceiptAUCTot(aBasePlanComputations, NextSequence);
            _init_ReceiptAUCTotT1 = new clsInit_ReceiptAUCTotT1(aBasePlanComputations, NextSequence);
            _init_ReceiptAUR = new clsInit_ReceiptAUR(aBasePlanComputations, NextSequence);
            _init_ReceiptAURT1 = new clsInit_ReceiptAURT1(aBasePlanComputations, NextSequence);
            _init_RegStrBinvAURT1 = new clsInit_RegStrBinvAURT1(aBasePlanComputations, NextSequence);
            _init_RegStrBinvAURT2 = new clsInit_RegStrBinvAURT2(aBasePlanComputations, NextSequence);
            _init_RegStrBinvAURT3 = new clsInit_RegStrBinvAURT3(aBasePlanComputations, NextSequence);
            _init_RegStrBinvDlrT4 = new clsInit_RegStrBinvDlrT4(aBasePlanComputations, NextSequence);
            _init_RegStrBinvPctTtlDlrT1 = new clsInit_RegStrBinvPctTtlDlrT1(aBasePlanComputations, NextSequence);
            _init_RegStrBinvPctTtlDlrT2 = new clsInit_RegStrBinvPctTtlDlrT2(aBasePlanComputations, NextSequence);
            _init_RegStrBinvPctTtlDlrT3 = new clsInit_RegStrBinvPctTtlDlrT3(aBasePlanComputations, NextSequence);
            _init_RegStrBinvPctTtlUnitsT1 = new clsInit_RegStrBinvPctTtlUnitsT1(aBasePlanComputations, NextSequence);
            _init_RegStrBinvPctTtlUnitsT2 = new clsInit_RegStrBinvPctTtlUnitsT2(aBasePlanComputations, NextSequence);
            _init_RegStrBinvPctTtlUnitsT3 = new clsInit_RegStrBinvPctTtlUnitsT3(aBasePlanComputations, NextSequence);
            _init_SalesAUCT1 = new clsInit_SalesAUCT1(aBasePlanComputations, NextSequence);
            _init_SalesClearAURT1 = new clsInit_SalesClearAURT1(aBasePlanComputations, NextSequence);
            _init_SalesClearPctTtlDlrT1 = new clsInit_SalesClearPctTtlDlrT1(aBasePlanComputations, NextSequence);
            _init_SalesClearPctTtlUnitsT1 = new clsInit_SalesClearPctTtlUnitsT1(aBasePlanComputations, NextSequence);
            _init_SalesMarginT1 = new clsInit_SalesMarginT1(aBasePlanComputations, NextSequence);
            _init_SalesRegAURT1 = new clsInit_SalesRegAURT1(aBasePlanComputations, NextSequence);
            _init_SalesRegPctTtlDlrT1 = new clsInit_SalesRegPctTtlDlrT1(aBasePlanComputations, NextSequence);
            _init_SalesRegPctTtlUnitsT1 = new clsInit_SalesRegPctTtlUnitsT1(aBasePlanComputations, NextSequence);
            _init_SalesRegPromoUnits_Custom = new clsInit_SalesRegPromoUnits_Custom(aBasePlanComputations, NextSequence);
            _init_SalesRegPromoUnitsT1_Custom = new clsInit_SalesRegPromoUnitsT1_Custom(aBasePlanComputations, NextSequence);
            _init_SalesTotalUnits_Custom = new clsInit_SalesTotalUnits_Custom(aBasePlanComputations, NextSequence);
            _init_SellThruUnitPctTot = new clsInit_SellThruUnitPctTot(aBasePlanComputations, NextSequence);
            _init_SellThruUnitPctTotT1 = new clsInit_SellThruUnitPctTotT1(aBasePlanComputations, NextSequence);
            _init_ShrinkPctT1 = new clsInit_ShrinkPctT1(aBasePlanComputations, NextSequence);
            _init_ShrinkPctTot = new clsInit_ShrinkPctTot(aBasePlanComputations, NextSequence);
            _init_ShrinkPctTotT1 = new clsInit_ShrinkPctTotT1(aBasePlanComputations, NextSequence);
            _init_TotBinvAUC = new clsInit_TotBinvAUC(aBasePlanComputations, NextSequence);
            _init_TotDTCSalesCostDlrPctTTL = new clsInit_TotDTCSalesCostDlrPctTTL(aBasePlanComputations, NextSequence);
            _init_TotDTCSalesCostDlrPctTTLT1 = new clsInit_TotDTCSalesCostDlrPctTTLT1(aBasePlanComputations, NextSequence);
            _init_TotDTCSalesUnitPctTTL = new clsInit_TotDTCSalesUnitPctTTL(aBasePlanComputations, NextSequence);
            _init_TotDTCSalesUnitPctTTLT1 = new clsInit_TotDTCSalesUnitPctTTLT1(aBasePlanComputations, NextSequence);
            _init_TotEinvAUC = new clsInit_TotEinvAUC(aBasePlanComputations, NextSequence);
            _init_TotEinvAUCT1 = new clsInit_TotEinvAUCT1(aBasePlanComputations, NextSequence);
            _init_TotEinvAUCT2 = new clsInit_TotEinvAUCT2(aBasePlanComputations, NextSequence);
            _init_TotEinvAUCT3 = new clsInit_TotEinvAUCT3(aBasePlanComputations, NextSequence);
            _init_TotEinvCostDlr = new clsInit_TotEinvCostDlr(aBasePlanComputations, NextSequence);
            _init_TotEinvUnits = new clsInit_TotEinvUnits(aBasePlanComputations, NextSequence);
            _init_TotFWOSUnit = new clsInit_TotFWOSUnit(aBasePlanComputations, NextSequence);
            _init_TotIMUPct = new clsInit_TotIMUPct(aBasePlanComputations, NextSequence);
            _init_TotMDPctT1 = new clsInit_TotMDPctT1(aBasePlanComputations, NextSequence);
            _init_TotSalesAUC = new clsInit_TotSalesAUC(aBasePlanComputations, NextSequence);
            _init_TotSalesAUCT1 = new clsInit_TotSalesAUCT1(aBasePlanComputations, NextSequence);
            _init_TotSalesAUR = new clsInit_TotSalesAUR(aBasePlanComputations, NextSequence);
            _init_TotSalesAURT1 = new clsInit_TotSalesAURT1(aBasePlanComputations, NextSequence);
            _init_TotSalesCostDlr = new clsInit_TotSalesCostDlr(aBasePlanComputations, NextSequence);
            _init_TotSalesDlr = new clsInit_TotSalesDlr(aBasePlanComputations, NextSequence);
            _init_TotStrAvgEndINVUnit = new clsInit_TotStrAvgEndINVUnit(aBasePlanComputations, NextSequence);
            _init_TotStrAvgINVUnit = new clsInit_TotStrAvgINVUnit(aBasePlanComputations, NextSequence);
            _init_TotStrBinvAUCT1 = new clsInit_TotStrBinvAUCT1(aBasePlanComputations, NextSequence);
            _init_TotStrBinvAUCT2 = new clsInit_TotStrBinvAUCT2(aBasePlanComputations, NextSequence);
            _init_TotStrBinvAUCT3 = new clsInit_TotStrBinvAUCT3(aBasePlanComputations, NextSequence);
            _init_TotStrBinvAURT1 = new clsInit_TotStrBinvAURT1(aBasePlanComputations, NextSequence);
            _init_TotStrBinvAURT2 = new clsInit_TotStrBinvAURT2(aBasePlanComputations, NextSequence);
            _init_TotStrBinvAURT3 = new clsInit_TotStrBinvAURT3(aBasePlanComputations, NextSequence);
            _init_TotStrSalesAUC = new clsInit_TotStrSalesAUC(aBasePlanComputations, NextSequence);
            _init_TotStrSalesAUCT1 = new clsInit_TotStrSalesAUCT1(aBasePlanComputations, NextSequence);
            _init_TotStrSalesAUR = new clsInit_TotStrSalesAUR(aBasePlanComputations, NextSequence);
            _init_TotStrSalesAURT1 = new clsInit_TotStrSalesAURT1(aBasePlanComputations, NextSequence);
            _init_TotStrSalesCostDlrPctTTL = new clsInit_TotStrSalesCostDlrPctTTL(aBasePlanComputations, NextSequence);
            _init_TotStrSalesCostDlrPctTTLT1 = new clsInit_TotStrSalesCostDlrPctTTLT1(aBasePlanComputations, NextSequence);
            _init_TotStrSalesUnitPctTTL = new clsInit_TotStrSalesUnitPctTTL(aBasePlanComputations, NextSequence);
            _init_TotStrSalesUnitPctTTLT1 = new clsInit_TotStrSalesUnitPctTTLT1(aBasePlanComputations, NextSequence);
            _init_VATPct = new clsInit_VATPct(aBasePlanComputations, NextSequence);
            _init_VATPctT1 = new clsInit_VATPctT1(aBasePlanComputations, NextSequence);
            _spread_DTCGrossDmdCostDlr_SPREAD = new clsSpread_DTCGrossDmdCostDlr_SPREAD(aBasePlanComputations, NextSequence);
            _spread_DTCGrossDmdCostDlr_SpreadDifference = new clsSpread_DTCGrossDmdCostDlr_SpreadDifference(aBasePlanComputations, NextSequence);
            _spread_DTCGrossDmdDlr_SPREAD = new clsSpread_DTCGrossDmdDlr_SPREAD(aBasePlanComputations, NextSequence);
            _spread_DTCGrossDmdDlr_SpreadDifference = new clsSpread_DTCGrossDmdDlr_SpreadDifference(aBasePlanComputations, NextSequence);
            _spread_DTCGrossDmdUnit_SPREAD = new clsSpread_DTCGrossDmdUnit_SPREAD(aBasePlanComputations, NextSequence);
            _spread_DTCGrossDmdUnit_SpreadDifference = new clsSpread_DTCGrossDmdUnit_SpreadDifference(aBasePlanComputations, NextSequence);
            _spread_InventoryTotalUnits_Spread = new clsSpread_InventoryTotalUnits_Spread(aBasePlanComputations, NextSequence);
            _spread_SalesTotalUnits_PREAD_REG_CLEAR = new clsSpread_SalesTotalUnits_PREAD_REG_CLEAR(aBasePlanComputations, NextSequence);
            _spread_SalesTotalUnits_SPREAD_DTC_STR = new clsSpread_SalesTotalUnits_SPREAD_DTC_STR(aBasePlanComputations, NextSequence);
            _spread_SalesTotalUnits_SpreadDifference = new clsSpread_SalesTotalUnits_SpreadDifference(aBasePlanComputations, NextSequence);
            _spread_TotEinvUnits_SPREAD_REG_CLEAR = new clsSpread_TotEinvUnits_SPREAD_REG_CLEAR(aBasePlanComputations, NextSequence);
            _spread_TotSalesCostDlr_SPREAD = new clsSpread_TotSalesCostDlr_SPREAD(aBasePlanComputations, NextSequence);
            _spread_TotSalesCostDlr_SpreadDifference = new clsSpread_TotSalesCostDlr_SpreadDifference(aBasePlanComputations, NextSequence);
            _spread_TotSalesDlr_SPREAD_DTC_STR = new clsSpread_TotSalesDlr_SPREAD_DTC_STR(aBasePlanComputations, NextSequence);
            _spread_TotSalesDlr_SpreadDifference = new clsSpread_TotSalesDlr_SpreadDifference(aBasePlanComputations, NextSequence);
            _init_SalesTotalUnits_Custom_STORE = new clsInit_SalesTotalUnits_Custom_STORE(aBasePlanComputations, NextSequence);
            _init_TotSalesDlr_STORE = new clsInit_TotSalesDlr_STORE(aBasePlanComputations, NextSequence);
            _init_TotSalesUnit = new clsInit_TotSalesUnit(aBasePlanComputations, NextSequence);
            _init_TotSalesCostDlr_STORE = new clsInit_TotSalesCostDlr_STORE(aBasePlanComputations, NextSequence);
            _init_GrossMarginTotDlr_STORE = new clsInit_GrossMarginTotDlr_STORE(aBasePlanComputations, NextSequence);
            _init_TotRecCostDlr_STORE = new clsInit_TotRecCostDlr_STORE(aBasePlanComputations, NextSequence);
            _spread_SalesRegPromoUnits_SPREAD_REG_PROMO = new clsSpread_SalesRegPromoUnits_SPREAD_REG_PROMO(aBasePlanComputations, NextSequence);
            _formula_SalesTotalUnits_SUM_RPC_for_STORE = new clsFormula_SalesTotalUnits_SUM_RPC_for_STORE(aBasePlanComputations, NextSequence);
            _init_SpaceConvPct = new clsInit_SpaceConvPct(aBasePlanComputations, NextSequence);
            _init_SpaceConvPctT1 = new clsInit_SpaceConvPctT1(aBasePlanComputations, NextSequence);
            _init_SalesUperSqSpace = new clsInit_SalesUperSqSpace(aBasePlanComputations, NextSequence);
            _init_SalesUperSqSpaceT1 = new clsInit_SalesUperSqSpaceT1(aBasePlanComputations, NextSequence);
            _init_SalesUperLinearSpaceT1 = new clsInit_SalesUperLinearSpaceT1(aBasePlanComputations, NextSequence);
            _init_SalesUperLinearSpace = new clsInit_SalesUperLinearSpace(aBasePlanComputations, NextSequence);
            _init_TotStrSalesDlrperLinearSpace = new clsInit_TotStrSalesDlrperLinearSpace(aBasePlanComputations, NextSequence);
            _init_TotStrSalesDlrperLinearSpaceT1 = new clsInit_TotStrSalesDlrperLinearSpaceT1(aBasePlanComputations, NextSequence);
            _init_TotStrSalesDlrperSqSpace = new clsInit_TotStrSalesDlrperSqSpace(aBasePlanComputations, NextSequence);
            _init_TotStrSalesDlrperSqSpaceT1 = new clsInit_TotStrSalesDlrperSqSpaceT1(aBasePlanComputations, NextSequence);
            _init_TotStrSalesCDlrperSqSpace = new clsInit_TotStrSalesCDlrperSqSpace(aBasePlanComputations, NextSequence);
            _init_TotStrSalesCDlrperSqSpaceT1 = new clsInit_TotStrSalesCDlrperSqSpaceT1(aBasePlanComputations, NextSequence);
            _init_TotStrSalesCDlrperLinearSpace = new clsInit_TotStrSalesCDlrperLinearSpace(aBasePlanComputations, NextSequence);
            _init_TotStrSalesCDlrperLinearSpaceT1 = new clsInit_TotStrSalesCDlrperLinearSpaceT1(aBasePlanComputations, NextSequence);
            _init_DensityU = new clsInit_DensityU(aBasePlanComputations, NextSequence);
            _init_DensityUT1 = new clsInit_DensityUT1(aBasePlanComputations, NextSequence);
            _init_SalesperSpaceU = new clsInit_SalesperSpaceU(aBasePlanComputations, NextSequence);
            _init_SalesperSpaceUT1 = new clsInit_SalesperSpaceUT1(aBasePlanComputations, NextSequence);
            _init_DTCPlacedOrdersDlr = new clsInit_DTCPlacedOrdersDlr(aBasePlanComputations, NextSequence);
            _init_DTCConvPct = new clsInit_DTCConvPct(aBasePlanComputations, NextSequence);
            _init_DTCConvPctT1 = new clsInit_DTCConvPctT1(aBasePlanComputations, NextSequence);
            _formula_LinearSpace_Calc_Conv = new clsFormula_LinearSpace_Calc_Conv(aBasePlanComputations, NextSequence);
        }
        private class clsFormula_AdjCostDlrTot_BINV_AUC : PlanFormulaProfile
        {
			public clsFormula_AdjCostDlrTot_BINV_AUC(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "AdjCostDlrTot BINV AUC Formula")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).AdjUnitsTot, aSchdEntry.PlanCellRef.isCellHidden) 
					* BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotBinvAUC, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsFormula_AdjCostDlrTot_PCT : PlanFormulaProfile
        {
			public clsFormula_AdjCostDlrTot_PCT(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "AdjCostDlrTot PCT Formula")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotBinvCostDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					* ( BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).AdjUntiPctTot, aSchdEntry.PlanCellRef.isCellHidden) 
					/ 100 );

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsFormula_AdjUnitsTot_AUC_BINV : PlanFormulaProfile
        {
			public clsFormula_AdjUnitsTot_AUC_BINV(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "AdjUnitsTot AUC BINV Formula")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).AdjCostDlrTot, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotBinvAUC, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsFormula_AfterDiscountDlr_Calc : PlanFormulaProfile
        {
			public clsFormula_AfterDiscountDlr_Calc(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "AfterDiscountDlr Calc Formula")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					- BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DiscountDlr, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsFormula_CompSlsDlr_Differerence : PlanFormulaProfile
        {
			public clsFormula_CompSlsDlr_Differerence(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "CompSlsDlr Differerence Formula")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					- BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).NonCompSlsDlr, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsFormula_CompSlsDlr_PCT : PlanFormulaProfile
        {
			public clsFormula_CompSlsDlr_PCT(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "CompSlsDlr PCT Formula")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = (BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					* BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).CompPctTtl, aSchdEntry.PlanCellRef.isCellHidden) )
					/ 100 ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsFormula_ConvertedSalesDlr_Calc : PlanFormulaProfile
        {
			public clsFormula_ConvertedSalesDlr_Calc(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "ConvertedSalesDlr Calc Formula")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).SaleswithoutVATDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					* BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).CurrXchgPct, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsFormula_DiscountDlr_Calc : PlanFormulaProfile
        {
			public clsFormula_DiscountDlr_Calc(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "DiscountDlr Calc Formula")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					* ( BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DiscountPct, aSchdEntry.PlanCellRef.isCellHidden) 
					/ 100 );

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsFormula_DTCBOCostDlr_AUC_GRSD : PlanFormulaProfile
        {
			public clsFormula_DTCBOCostDlr_AUC_GRSD(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "DTCBOCostDlr AUC GRSD Formula")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCBOUnit, aSchdEntry.PlanCellRef.isCellHidden) 
					* BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCGrossDmdAUC, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsFormula_DTCBOCostDlr_PCT_BOPCT : PlanFormulaProfile
        {
			public clsFormula_DTCBOCostDlr_PCT_BOPCT(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "DTCBOCostDlr PCT BOPCT Formula")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = (BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCGrossDmdCostDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					* BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCBOPct, aSchdEntry.PlanCellRef.isCellHidden) )
					/ 100 ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsFormula_DTCBODlr_AUR_GRSD : PlanFormulaProfile
        {
			public clsFormula_DTCBODlr_AUR_GRSD(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "DTCBODlr AUR GRSD Formula")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCBOUnit, aSchdEntry.PlanCellRef.isCellHidden) 
					* BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCGrossDmdAUR, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsFormula_DTCBODlr_GRSD_GM_PCT : PlanFormulaProfile
        {
			public clsFormula_DTCBODlr_GRSD_GM_PCT(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "DTCBODlr GRSD GM PCT Formula")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCBOCostDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					/ ( 1 
					- ( BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCGrsDmdGMPct, aSchdEntry.PlanCellRef.isCellHidden) 
					/ 100 ));

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsFormula_DTCBOUnit_AUC_GRSD : PlanFormulaProfile
        {
			public clsFormula_DTCBOUnit_AUC_GRSD(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "DTCBOUnit AUC GRSD Formula")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCBOCostDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCGrossDmdAUC, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsFormula_DTCCancelCostDlr_AUC_GRSD : PlanFormulaProfile
        {
			public clsFormula_DTCCancelCostDlr_AUC_GRSD(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "DTCCancelCostDlr AUC GRSD Formula")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCCancelUnit, aSchdEntry.PlanCellRef.isCellHidden) 
					* BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCGrossDmdAUC, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsFormula_DTCCancelCostDlr_PCT_CANPCT : PlanFormulaProfile
        {
			public clsFormula_DTCCancelCostDlr_PCT_CANPCT(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "DTCCancelCostDlr PCT CANPCT Formula")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = (BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCGrossDmdCostDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					* BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCCancelPct, aSchdEntry.PlanCellRef.isCellHidden) )
					/ 100 ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsFormula_DTCCancelDlr_AUR_GRSD : PlanFormulaProfile
        {
			public clsFormula_DTCCancelDlr_AUR_GRSD(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "DTCCancelDlr AUR GRSD Formula")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCCancelUnit, aSchdEntry.PlanCellRef.isCellHidden) 
					* BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCGrossDmdAUR, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsFormula_DTCCancelDlr_GRSD_GM_PCT : PlanFormulaProfile
        {
			public clsFormula_DTCCancelDlr_GRSD_GM_PCT(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "DTCCancelDlr GRSD GM PCT Formula")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCCancelCostDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					/ ( 1 
					- ( BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCGrsDmdGMPct, aSchdEntry.PlanCellRef.isCellHidden) 
					/ 100 ));

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsFormula_DTCCancelUnit_AUC_GRSD : PlanFormulaProfile
        {
			public clsFormula_DTCCancelUnit_AUC_GRSD(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "DTCCancelUnit AUC GRSD Formula")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCCancelCostDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCGrossDmdAUC, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsFormula_DTCGrossDmdCostDlr_AUC : PlanFormulaProfile
        {
			public clsFormula_DTCGrossDmdCostDlr_AUC(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "DTCGrossDmdCostDlr AUC Formula")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCGrossDmdUnit, aSchdEntry.PlanCellRef.isCellHidden) 
					* BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCGrossDmdAUC, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsFormula_DTCGrossDmdCostDlr_SUM : PlanFormulaProfile
        {
			public clsFormula_DTCGrossDmdCostDlr_SUM(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "DTCGrossDmdCostDlr SUM Formula")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCBOCostDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					+ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCCancelCostDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					+ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdCostDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					+ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCRtnCostDlr, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsFormula_DTCGrossDmdDlr_AUR : PlanFormulaProfile
        {
			public clsFormula_DTCGrossDmdDlr_AUR(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "DTCGrossDmdDlr AUR Formula")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCGrossDmdUnit, aSchdEntry.PlanCellRef.isCellHidden) 
					* BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCGrossDmdAUR, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsFormula_DTCGrossDmdDlr_GRSD_GM_PCT : PlanFormulaProfile
        {
			public clsFormula_DTCGrossDmdDlr_GRSD_GM_PCT(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "DTCGrossDmdDlr GRSD GM PCT Formula")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCGrossDmdCostDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					/ ( 1 
					- ( BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCGrsDmdGMPct, aSchdEntry.PlanCellRef.isCellHidden) 
					/ 100 ));

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsFormula_DTCGrossDmdDlr_SUM : PlanFormulaProfile
        {
			public clsFormula_DTCGrossDmdDlr_SUM(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "DTCGrossDmdDlr SUM Formula")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCBODlr, aSchdEntry.PlanCellRef.isCellHidden) 
					+ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					+ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCRtnDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					+ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCCancelDlr, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsFormula_DTCGrossDmdGMDlr_DIFF : PlanFormulaProfile
        {
			public clsFormula_DTCGrossDmdGMDlr_DIFF(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "DTCGrossDmdGMDlr DIFF Formula")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCGrossDmdDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					- BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCGrossDmdCostDlr, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsFormula_DTCGrossDmdGMDlr_GM_PCT : PlanFormulaProfile
        {
			public clsFormula_DTCGrossDmdGMDlr_GM_PCT(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "DTCGrossDmdGMDlr GM PCT Formula")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCGrossDmdDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					* ( BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCGrsDmdGMPct, aSchdEntry.PlanCellRef.isCellHidden) 
					/ 100 );

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsFormula_DTCGrossDmdUnit_AUC : PlanFormulaProfile
        {
			public clsFormula_DTCGrossDmdUnit_AUC(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "DTCGrossDmdUnit AUC Formula")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCGrossDmdCostDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCGrossDmdAUC, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsFormula_DTCGrossDmdUnit_AUR : PlanFormulaProfile
        {
			public clsFormula_DTCGrossDmdUnit_AUR(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "DTCGrossDmdUnit AUR Formula")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCGrossDmdDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCGrossDmdAUR, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsFormula_DTCGrossDmdUnit_SUM : PlanFormulaProfile
        {
			public clsFormula_DTCGrossDmdUnit_SUM(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "DTCGrossDmdUnit SUM Formula")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCBOUnit, aSchdEntry.PlanCellRef.isCellHidden) 
					+ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCCancelUnit, aSchdEntry.PlanCellRef.isCellHidden) 
					+ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdUnit, aSchdEntry.PlanCellRef.isCellHidden) 
					+ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCRtnUnit, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsFormula_DTCNetDmdCostDlr_AUC : PlanFormulaProfile
        {
			public clsFormula_DTCNetDmdCostDlr_AUC(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "DTCNetDmdCostDlr AUC Formula")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdUnit, aSchdEntry.PlanCellRef.isCellHidden) 
					* BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdAUC, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsFormula_DTCNetDmdCostDlr_DIFF : PlanFormulaProfile
        {
			public clsFormula_DTCNetDmdCostDlr_DIFF(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "Formula DTCNetDmdCostDlr DIFF Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCGrossDmdCostDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					- BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCBOCostDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					- BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCCancelCostDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					- BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCRtnCostDlr, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsFormula_DTCNetDmdCostDlr_GM_DIFFER : PlanFormulaProfile
        {
			public clsFormula_DTCNetDmdCostDlr_GM_DIFFER(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "DTCNetDmdCostDlr GM DIFFER Formula")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					- BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdGMDlr, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsFormula_DTCNetDmdCostDlr_PCT_DTCPCT : PlanFormulaProfile
        {
			public clsFormula_DTCNetDmdCostDlr_PCT_DTCPCT(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "DTCNetDmdCostDlr PCT DTCPCT Formula")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = (BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesCostDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					* BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotDTCSalesCostDlrPctTTL, aSchdEntry.PlanCellRef.isCellHidden) )
					/ 100 ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsFormula_DTCNetDmdCostDlr_PCT_NETPCT : PlanFormulaProfile
        {
			public clsFormula_DTCNetDmdCostDlr_PCT_NETPCT(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "DTCNetDmdCostDlr PCT NETPCT Formula")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = (BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCGrossDmdCostDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					* BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdPct, aSchdEntry.PlanCellRef.isCellHidden) )
					/ 100 ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsFormula_DTCNetDmdDlr_AUR : PlanFormulaProfile
        {
			public clsFormula_DTCNetDmdDlr_AUR(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "DTCNetDmdDlr AUR Formula")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdUnit, aSchdEntry.PlanCellRef.isCellHidden) 
					* BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdAUR, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsFormula_DTCNetDmdDlr_DIFF : PlanFormulaProfile
        {
			public clsFormula_DTCNetDmdDlr_DIFF(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "Formula DTCNetDmdDlr DIFF Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCGrossDmdDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					- BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCBODlr, aSchdEntry.PlanCellRef.isCellHidden) 
					- BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCCancelDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					- BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCRtnDlr, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsFormula_DTCNetDmdDlr_NETD_GM_PCT : PlanFormulaProfile
        {
			public clsFormula_DTCNetDmdDlr_NETD_GM_PCT(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "DTCNetDmdDlr NETD GM PCT Formula")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdCostDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					/ ( 1 
					- ( BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdGMPct, aSchdEntry.PlanCellRef.isCellHidden) 
					/ 100 ));

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsFormula_DTCNetDmdGMDlr_DIFF : PlanFormulaProfile
        {
			public clsFormula_DTCNetDmdGMDlr_DIFF(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "DTCNetDmdGMDlr DIFF Formula")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					- BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdCostDlr, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsFormula_DTCNetDmdGMDlr_PCT : PlanFormulaProfile
        {
			public clsFormula_DTCNetDmdGMDlr_PCT(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "DTCNetDmdGMDlr PCT Formula")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = (BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdGMPct, aSchdEntry.PlanCellRef.isCellHidden) 
					* BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdDlr, aSchdEntry.PlanCellRef.isCellHidden) )
					/ 100 ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsFormula_DTCNetDmdUnit_AUC : PlanFormulaProfile
        {
			public clsFormula_DTCNetDmdUnit_AUC(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "DTCNetDmdUnit AUC Formula")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdCostDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdAUC, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsFormula_DTCNetDmdUnit_AUR : PlanFormulaProfile
        {
			public clsFormula_DTCNetDmdUnit_AUR(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "DTCNetDmdUnit AUR Formula")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdAUR, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsFormula_DTCNetDmdUnit_DIFF : PlanFormulaProfile
        {
			public clsFormula_DTCNetDmdUnit_DIFF(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "Formula DTCNetDmdUnit DIFF Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCGrossDmdUnit, aSchdEntry.PlanCellRef.isCellHidden) 
					- BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCBOUnit, aSchdEntry.PlanCellRef.isCellHidden) 
					- BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCCancelUnit, aSchdEntry.PlanCellRef.isCellHidden) 
					- BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCRtnUnit, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsFormula_DTCNetDmdUnit_PCT_DTCPCT : PlanFormulaProfile
        {
			public clsFormula_DTCNetDmdUnit_PCT_DTCPCT(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "DTCNetDmdUnit PCT DTCPCT Formula")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = (BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).SalesTotalUnits, aSchdEntry.PlanCellRef.isCellHidden) 
					* BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotDTCSalesUnitPctTTL, aSchdEntry.PlanCellRef.isCellHidden) )
					/ 100 ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsFormula_DTCRtnCostDlr_AUC_GRSD : PlanFormulaProfile
        {
			public clsFormula_DTCRtnCostDlr_AUC_GRSD(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "DTCRtnCostDlr AUC GRSD Formula")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCRtnUnit, aSchdEntry.PlanCellRef.isCellHidden) 
					* BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCGrossDmdAUC, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsFormula_DTCRtnCostDlr_PCT_RTNPCT : PlanFormulaProfile
        {
			public clsFormula_DTCRtnCostDlr_PCT_RTNPCT(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "DTCRtnCostDlr PCT RTNPCT Formula")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = (BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCGrossDmdCostDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					* BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCRtnPct, aSchdEntry.PlanCellRef.isCellHidden) )
					/ 100 ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsFormula_DTCRtnDlr_AUR_GRSD : PlanFormulaProfile
        {
			public clsFormula_DTCRtnDlr_AUR_GRSD(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "DTCRtnDlr AUR GRSD Formula")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCRtnUnit, aSchdEntry.PlanCellRef.isCellHidden) 
					* BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCGrossDmdAUR, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsFormula_DTCRtnDlr_GRSD_GM_PCT : PlanFormulaProfile
        {
			public clsFormula_DTCRtnDlr_GRSD_GM_PCT(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "DTCRtnDlr GRSD GM PCT Formula")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCRtnCostDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					/ ( 1 
					- ( BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCGrsDmdGMPct, aSchdEntry.PlanCellRef.isCellHidden) 
					/ 100 ));

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsFormula_DTCRtnUnit_AUC_GRSD : PlanFormulaProfile
        {
			public clsFormula_DTCRtnUnit_AUC_GRSD(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "DTCRtnUnit AUC GRSD Formula")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCRtnCostDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCGrossDmdAUC, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsFormula_FreightCostPerUnit_Calc : PlanFormulaProfile
        {
			public clsFormula_FreightCostPerUnit_Calc(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "Formula FreightCostPerUnit Calc Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotFreightCostDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).SalesTotalUnits, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsFormula_GrossMarginTotDlr_DIFF : PlanFormulaProfile
        {
			public clsFormula_GrossMarginTotDlr_DIFF(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "GrossMarginTotDlr DIFF Formula")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					- BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesCostDlr, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsFormula_GrossMarginTotDlr_PCT : PlanFormulaProfile
        {
			public clsFormula_GrossMarginTotDlr_PCT(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "GrossMarginTotDlr PCT Formula")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = (BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					* BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).GrossMarginPctTot, aSchdEntry.PlanCellRef.isCellHidden) )
					/ 100 ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsFormula_GrossMarginTotStr_DIFF : PlanFormulaProfile
        {
			public clsFormula_GrossMarginTotStr_DIFF(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "GrossMarginTotStr DIFF Formula")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					- ( BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesCostDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					+ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotFreightCostDlr, aSchdEntry.PlanCellRef.isCellHidden) );

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsFormula_GrossMarginTotStr_PCT : PlanFormulaProfile
        {
			public clsFormula_GrossMarginTotStr_PCT(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "GrossMarginTotStr PCT Formula")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = ((BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					- BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotFreightCostDlr, aSchdEntry.PlanCellRef.isCellHidden) )
					* BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).GrossMarginPctStr, aSchdEntry.PlanCellRef.isCellHidden) )
					/ 100 ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsFormula_InventoryRegularUnits_STORE_FLOW : PlanFormulaProfile
        {
			public clsFormula_InventoryRegularUnits_STORE_FLOW(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "InventoryRegularUnits STORE FLOW Formula")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                int currMinusOneTimeId;
                try
                {
                    currMinusOneTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aSchdEntry.PlanCellRef, -1);
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).InventoryRegularUnits, currMinusOneTimeId, aSchdEntry.PlanCellRef.isCellHidden) 
					- BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).SalesRegPromoUnits, currMinusOneTimeId, aSchdEntry.PlanCellRef.isCellHidden) 
					+ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).ReceiptRegularUnits, currMinusOneTimeId, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsFormula_InventoryTotalUnits_AUC : PlanFormulaProfile
        {
			public clsFormula_InventoryTotalUnits_AUC(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "InventoryTotalUnits AUC Formula")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    if ( BasePlanToolBox.isChain(aSchdEntry.PlanCellRef) )
                    {
                        newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotBinvCostDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotBinvAUC, aSchdEntry.PlanCellRef.isCellHidden) ;

                        BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    }
                    else
                    {
                        newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotBinvCostDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetChainOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotBinvAUC, aSchdEntry.PlanCellRef.isCellHidden) ;

                        BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    }
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsFormula_InventoryTotalUnits_DTC_FWOS : PlanFormulaProfile
        {
			public clsFormula_InventoryTotalUnits_DTC_FWOS(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "InventoryTotalUnits DTC FWOS Formula")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                int currTimeId;
                try
                {
                    currTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aSchdEntry.PlanCellRef);
                    newValue = BasePlanToolBox.CalculateFWOSInv(aSchdEntry, aGetCellMode, aSetCellMode, ((PlanVariables)BasePlanVariables).DTCFWOSUnit, ((PlanVariables)BasePlanVariables).DTCNetDmdUnit, currTimeId) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsFormula_InventoryTotalUnits_FLOW : PlanFormulaProfile
        {
			public clsFormula_InventoryTotalUnits_FLOW(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "InventoryTotalUnits FLOW Formula")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                int currMinusOneTimeId;
                try
                {
                    currMinusOneTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aSchdEntry.PlanCellRef, -1);
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).InventoryTotalUnits, currMinusOneTimeId, aSchdEntry.PlanCellRef.isCellHidden) 
					- BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).SalesTotalUnits, currMinusOneTimeId, aSchdEntry.PlanCellRef.isCellHidden) 
					+ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotRecUnit, currMinusOneTimeId, aSchdEntry.PlanCellRef.isCellHidden) 
					- BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).ShrinkUnitsTot, currMinusOneTimeId, aSchdEntry.PlanCellRef.isCellHidden) 
					- BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).AdjUnitsTot, currMinusOneTimeId, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsFormula_InventoryTotalUnits_PLUG : PlanFormulaProfile
        {
			public clsFormula_InventoryTotalUnits_PLUG(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "InventoryTotalUnits PLUG Formula")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                int currMinusOneTimeId;
                try
                {
                    currMinusOneTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aSchdEntry.PlanCellRef, -1);
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotEinvUnits, currMinusOneTimeId, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsFormula_NonCompSlsDlr_Difference : PlanFormulaProfile
        {
			public clsFormula_NonCompSlsDlr_Difference(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "NonCompSlsDlr Difference Formula")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					- BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).CompSlsDlr, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsFormula_NonCompSlsDlr_PCT : PlanFormulaProfile
        {
			public clsFormula_NonCompSlsDlr_PCT(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "NonCompSlsDlr PCT Formula")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = (BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					* BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).NonCompPctTtl, aSchdEntry.PlanCellRef.isCellHidden) )
					/ 100 ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsFormula_OnOrderCostDlr_AUC : PlanFormulaProfile
        {
			public clsFormula_OnOrderCostDlr_AUC(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "OnOrderCostDlr AUC Formula")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).OnOrderUnit, aSchdEntry.PlanCellRef.isCellHidden) 
					* BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).OnOrderAUC, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsFormula_OnOrderCostDlr_IMU : PlanFormulaProfile
        {
			public clsFormula_OnOrderCostDlr_IMU(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "OnOrderCostDlr IMU Formula")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).OnOrderDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					* ( 1 
					- ( BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotIMUPct, aSchdEntry.PlanCellRef.isCellHidden) 
					/ 100 ));

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsFormula_OnOrderDlr_AUR : PlanFormulaProfile
        {
			public clsFormula_OnOrderDlr_AUR(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "OnOrderDlr AUR Formula")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).OnOrderUnit, aSchdEntry.PlanCellRef.isCellHidden) 
					* BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).OnOrderAUR, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsFormula_OnOrderUnit_AUC : PlanFormulaProfile
        {
			public clsFormula_OnOrderUnit_AUC(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "OnOrderUnit AUC Formula")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).OnOrderCostDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).OnOrderAUC, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsFormula_OnOrderUnit_AUR : PlanFormulaProfile
        {
			public clsFormula_OnOrderUnit_AUR(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "OnOrderUnit AUR Formula")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).OnOrderDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).OnOrderAUR, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsFormula_SalesTotalUnits_AUC : PlanFormulaProfile
        {
			public clsFormula_SalesTotalUnits_AUC(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "SalesTotalUnits AUC Formula")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    if ( BasePlanToolBox.isChain(aSchdEntry.PlanCellRef) )
                    {
                        newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesCostDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesAUC, aSchdEntry.PlanCellRef.isCellHidden) ;

                        BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    }
                    else
                    {
                        newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesCostDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetChainOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesAUC, aSchdEntry.PlanCellRef.isCellHidden) ;

                        BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    }
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsFormula_SalesTotalUnits_AUR : PlanFormulaProfile
        {
			public clsFormula_SalesTotalUnits_AUR(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "SalesTotalUnits AUR Formula")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    if ( BasePlanToolBox.isChain(aSchdEntry.PlanCellRef) )
                    {
                        newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesAUR, aSchdEntry.PlanCellRef.isCellHidden) ;

                        BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    }
                    else
                    {
                        newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetChainOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesAUR, aSchdEntry.PlanCellRef.isCellHidden) ;

                        BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    }
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsFormula_SaleswithoutVATDlr_Calc : PlanFormulaProfile
        {
			public clsFormula_SaleswithoutVATDlr_Calc(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "SaleswithoutVATDlr Calc Formula")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).AfterDiscountDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					- BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).VATDlr, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsFormula_ShrinkCostDlrTot_BINV_AUC : PlanFormulaProfile
        {
			public clsFormula_ShrinkCostDlrTot_BINV_AUC(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "ShrinkCostDlrTot BINV AUC Formula")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).ShrinkUnitsTot, aSchdEntry.PlanCellRef.isCellHidden) 
					* BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotBinvAUC, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsFormula_ShrinkCostDlrTot_PCT : PlanFormulaProfile
        {
			public clsFormula_ShrinkCostDlrTot_PCT(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "ShrinkCostDlrTot PCT Formula")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotBinvCostDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					* ( BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).ShrinkPctTot, aSchdEntry.PlanCellRef.isCellHidden) 
					/ 100 );

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsFormula_ShrinkUnitsTot_AUC_BINV : PlanFormulaProfile
        {
			public clsFormula_ShrinkUnitsTot_AUC_BINV(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "ShrinkUnitsTot AUC BINV Formula")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).ShrinkCostDlrTot, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotBinvAUC, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsFormula_TotBinvCostDlr_AUC : PlanFormulaProfile
        {
			public clsFormula_TotBinvCostDlr_AUC(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "TotBinvCostDlr AUC Formula")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    if ( BasePlanToolBox.isChain(aSchdEntry.PlanCellRef) )
                    {
                        newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).InventoryTotalUnits, aSchdEntry.PlanCellRef.isCellHidden) 
					* BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotBinvAUC, aSchdEntry.PlanCellRef.isCellHidden) ;

                        BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    }
                    else
                    {
                        newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).InventoryTotalUnits, aSchdEntry.PlanCellRef.isCellHidden) 
					* BasePlanToolBox.GetChainOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotBinvAUC, aSchdEntry.PlanCellRef.isCellHidden) ;

                        BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    }
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsFormula_TotBinvCostDlr_FLOW : PlanFormulaProfile
        {
			public clsFormula_TotBinvCostDlr_FLOW(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "TotBinvCostDlr FLOW Formula")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                int currMinusOneTimeId;
                try
                {
                    currMinusOneTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aSchdEntry.PlanCellRef, -1);
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotBinvCostDlr, currMinusOneTimeId, aSchdEntry.PlanCellRef.isCellHidden) 
					- BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesCostDlr, currMinusOneTimeId, aSchdEntry.PlanCellRef.isCellHidden) 
					+ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotRecCostDlr, currMinusOneTimeId, aSchdEntry.PlanCellRef.isCellHidden) 
					- BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).ShrinkCostDlrTot, currMinusOneTimeId, aSchdEntry.PlanCellRef.isCellHidden) 
					- BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).AdjCostDlrTot, currMinusOneTimeId, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsFormula_TotBinvCostDlr_PLUG : PlanFormulaProfile
        {
			public clsFormula_TotBinvCostDlr_PLUG(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "TotBinvCostDlr PLUG Formula")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                int currMinusOneTimeId;
                try
                {
                    currMinusOneTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aSchdEntry.PlanCellRef, -1);
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotEinvCostDlr, currMinusOneTimeId, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsFormula_TotEinvCostDlr_AUC : PlanFormulaProfile
        {
			public clsFormula_TotEinvCostDlr_AUC(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "TotEinvCostDlr AUC Formula")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotEinvUnits, aSchdEntry.PlanCellRef.isCellHidden) 
					* BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotEinvAUC, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsFormula_TotEinvCostDlr_FLOW : PlanFormulaProfile
        {
			public clsFormula_TotEinvCostDlr_FLOW(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "TotEinvCostDlr FLOW Formula")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                int currMinusOneTimeId;
                try
                {
                    currMinusOneTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aSchdEntry.PlanCellRef, -1);
                    if ( BasePlanToolBox.GetCurrentPlanTimeDetail(aSchdEntry.PlanCellRef) == BasePlanToolBox.GetBeginPlanTimeDetail(aSchdEntry.PlanCellRef) )
                    {
                        newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotBinvCostDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					- BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesCostDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					+ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotRecCostDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					- BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).ShrinkCostDlrTot, aSchdEntry.PlanCellRef.isCellHidden) 
					- BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).AdjCostDlrTot, aSchdEntry.PlanCellRef.isCellHidden) ;

                        BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    }
                    else
                    {
                        newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotEinvCostDlr, currMinusOneTimeId, aSchdEntry.PlanCellRef.isCellHidden) 
					- BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesCostDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					+ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotRecCostDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					- BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).ShrinkCostDlrTot, aSchdEntry.PlanCellRef.isCellHidden) 
					- BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).AdjCostDlrTot, aSchdEntry.PlanCellRef.isCellHidden) ;

                        BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    }
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsFormula_TotEinvCostDlr_PLUG : PlanFormulaProfile
        {
			public clsFormula_TotEinvCostDlr_PLUG(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "TotEinvCostDlr PLUG Formula")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                int currPlusOneTimeId;
                try
                {
                    currPlusOneTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aSchdEntry.PlanCellRef, 1);
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotBinvCostDlr, currPlusOneTimeId, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsFormula_TotEinvUnits_AUC : PlanFormulaProfile
        {
			public clsFormula_TotEinvUnits_AUC(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "TotEinvUnits AUC Formula")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotEinvCostDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotEinvAUC, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsFormula_TotEinvUnits_DTC_FWOS : PlanFormulaProfile
        {
			public clsFormula_TotEinvUnits_DTC_FWOS(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "TotEinvUnits DTC FWOS Formula")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                int currPlusOneTimeId;
                try
                {
                    currPlusOneTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aSchdEntry.PlanCellRef, 1);
                    newValue = BasePlanToolBox.CalculateFWOSInv(aSchdEntry, aGetCellMode, aSetCellMode, ((PlanVariables)BasePlanVariables).DTCFWOSUnit, ((PlanVariables)BasePlanVariables).DTCNetDmdUnit, currPlusOneTimeId) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsFormula_TotEinvUnits_FLOW : PlanFormulaProfile
        {
			public clsFormula_TotEinvUnits_FLOW(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "TotEinvUnits FLOW Formula")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                int currMinusOneTimeId;
                try
                {
                    currMinusOneTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aSchdEntry.PlanCellRef, -1);
                    if ( BasePlanToolBox.GetCurrentPlanTimeDetail(aSchdEntry.PlanCellRef) == BasePlanToolBox.GetBeginPlanTimeDetail(aSchdEntry.PlanCellRef) )
                    {
                        newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).InventoryTotalUnits, aSchdEntry.PlanCellRef.isCellHidden) 
					- BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).SalesTotalUnits, aSchdEntry.PlanCellRef.isCellHidden) 
					+ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotRecUnit, aSchdEntry.PlanCellRef.isCellHidden) 
					- BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).AdjUnitsTot, aSchdEntry.PlanCellRef.isCellHidden) 
					- BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).ShrinkUnitsTot, aSchdEntry.PlanCellRef.isCellHidden) ;

                        BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    }
                    else
                    {
                        newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotEinvUnits, currMinusOneTimeId, aSchdEntry.PlanCellRef.isCellHidden) 
					- BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).SalesTotalUnits, aSchdEntry.PlanCellRef.isCellHidden) 
					+ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotRecUnit, aSchdEntry.PlanCellRef.isCellHidden) 
					- BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).AdjUnitsTot, aSchdEntry.PlanCellRef.isCellHidden) 
					- BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).ShrinkUnitsTot, aSchdEntry.PlanCellRef.isCellHidden) ;

                        BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    }
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsFormula_TotEinvUnits_PLUG : PlanFormulaProfile
        {
			public clsFormula_TotEinvUnits_PLUG(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "TotEinvUnits PLUG Formula")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                int currPlusOneTimeId;
                try
                {
                    currPlusOneTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aSchdEntry.PlanCellRef, 1);
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).InventoryTotalUnits, currPlusOneTimeId, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsFormula_TotEinvUnits_STR_BINV_SUM : PlanFormulaProfile
        {
			public clsFormula_TotEinvUnits_STR_BINV_SUM(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "TotEinvUnits STR BINV SUM Formula")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                int currPlusOneTimeId;
                try
                {
                    currPlusOneTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aSchdEntry.PlanCellRef, 1);
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).InventoryRegularUnits, currPlusOneTimeId, aSchdEntry.PlanCellRef.isCellHidden) 
					+ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).InventoryMarkdownUnits, currPlusOneTimeId, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsFormula_TotFreightCostDlr_Calc : PlanFormulaProfile
        {
			public clsFormula_TotFreightCostDlr_Calc(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "TotFreightCostDlr Calc Formula")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).FreightCostPerUnit, aSchdEntry.PlanCellRef.isCellHidden) 
					* BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).SalesTotalUnits, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsFormula_TotMDDlr_PCT : PlanFormulaProfile
        {
			public clsFormula_TotMDDlr_PCT(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "TotMDDlr PCT Formula")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = (BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					* BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotMDPct, aSchdEntry.PlanCellRef.isCellHidden) )
					/ 100 ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsFormula_TotRecCostDlr_AUC : PlanFormulaProfile
        {
			public clsFormula_TotRecCostDlr_AUC(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "TotRecCostDlr AUC Formula")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    if ( BasePlanToolBox.isChain(aSchdEntry.PlanCellRef) )
                    {
                        newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotRecUnit, aSchdEntry.PlanCellRef.isCellHidden) 
					* BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).ReceiptAUCTot, aSchdEntry.PlanCellRef.isCellHidden) ;

                        BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    }
                    else
                    {
                        newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotRecUnit, aSchdEntry.PlanCellRef.isCellHidden) 
					* BasePlanToolBox.GetChainOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).ReceiptAUCTot, aSchdEntry.PlanCellRef.isCellHidden) ;

                        BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    }
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsFormula_TotRecCostDlr_FLOW : PlanFormulaProfile
        {
			public clsFormula_TotRecCostDlr_FLOW(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "Formula TotRecCostDlr FLOW Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                int currPlusOneTimeId;
                try
                {
                    currPlusOneTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aSchdEntry.PlanCellRef, 1);
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotBinvCostDlr, currPlusOneTimeId, aSchdEntry.PlanCellRef.isCellHidden) 
					+ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesCostDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					+ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).ShrinkCostDlrTot, aSchdEntry.PlanCellRef.isCellHidden) 
					+ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).AdjCostDlrTot, aSchdEntry.PlanCellRef.isCellHidden) 
					- BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotBinvCostDlr, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsFormula_TotRecUnit_AUC : PlanFormulaProfile
        {
			public clsFormula_TotRecUnit_AUC(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "TotRecUnit AUC Formula")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    if ( BasePlanToolBox.isChain(aSchdEntry.PlanCellRef) )
                    {
                        newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotRecCostDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).ReceiptAUCTot, aSchdEntry.PlanCellRef.isCellHidden) ;

                        BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    }
                    else
                    {
                        newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotRecCostDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetChainOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).ReceiptAUCTot, aSchdEntry.PlanCellRef.isCellHidden) ;

                        BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    }
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsFormula_TotRecUnit_FLOW : PlanFormulaProfile
        {
			public clsFormula_TotRecUnit_FLOW(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "Formula TotRecUnit FLOW Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                int currPlusOneTimeId;
                try
                {
                    currPlusOneTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aSchdEntry.PlanCellRef, 1);
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).InventoryTotalUnits, currPlusOneTimeId, aSchdEntry.PlanCellRef.isCellHidden) 
					+ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).SalesTotalUnits, aSchdEntry.PlanCellRef.isCellHidden) 
					+ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).ShrinkUnitsTot, aSchdEntry.PlanCellRef.isCellHidden) 
					+ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).AdjUnitsTot, aSchdEntry.PlanCellRef.isCellHidden) 
					- BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).InventoryTotalUnits, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsFormula_TotSalesCostDlr_AUC : PlanFormulaProfile
        {
			public clsFormula_TotSalesCostDlr_AUC(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "TotSalesCostDlr AUC Formula")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    if ( BasePlanToolBox.isChain(aSchdEntry.PlanCellRef) )
                    {
                        newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).SalesTotalUnits, aSchdEntry.PlanCellRef.isCellHidden) 
					* BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesAUC, aSchdEntry.PlanCellRef.isCellHidden) ;

                        BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    }
                    else
                    {
                        newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).SalesTotalUnits, aSchdEntry.PlanCellRef.isCellHidden) 
					* BasePlanToolBox.GetChainOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesAUC, aSchdEntry.PlanCellRef.isCellHidden) ;

                        BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    }
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsFormula_TotSalesCostDlr_GRS_MARGIN : PlanFormulaProfile
        {
			public clsFormula_TotSalesCostDlr_GRS_MARGIN(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "TotSalesCostDlr GRS MARGIN Formula")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					- (( BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).GrossMarginPctTot, aSchdEntry.PlanCellRef.isCellHidden) 
					* BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesDlr, aSchdEntry.PlanCellRef.isCellHidden) )
					/ 100 );

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsFormula_TotSalesDlr_AUR : PlanFormulaProfile
        {
			public clsFormula_TotSalesDlr_AUR(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "TotSalesDlr AUR Formula")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    if ( BasePlanToolBox.isChain(aSchdEntry.PlanCellRef) )
                    {
                        newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).SalesTotalUnits, aSchdEntry.PlanCellRef.isCellHidden) 
					* BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesAUR, aSchdEntry.PlanCellRef.isCellHidden) ;

                        BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    }
                    else
                    {
                        newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).SalesTotalUnits, aSchdEntry.PlanCellRef.isCellHidden) 
					* BasePlanToolBox.GetChainOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesAUR, aSchdEntry.PlanCellRef.isCellHidden) ;

                        BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    }
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsFormula_TotSalesDlr_INVERSE_GM_PCT : PlanFormulaProfile
        {
			public clsFormula_TotSalesDlr_INVERSE_GM_PCT(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "TotSalesDlr INVERSE GM PCT Formula")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesCostDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					/ ( 1 
					- ( BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).GrossMarginPctTot, aSchdEntry.PlanCellRef.isCellHidden) 
					/ 100 ));

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsFormula_TotSalesDlr_SUM_GM : PlanFormulaProfile
        {
			public clsFormula_TotSalesDlr_SUM_GM(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "TotSalesDlr SUM GM Formula")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).GrossMarginTotDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					+ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesCostDlr, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsFormula_TotSalesUnit_AUC : PlanFormulaProfile
        {
			public clsFormula_TotSalesUnit_AUC(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "TotSalesUnit AUC Formula")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    if ( BasePlanToolBox.isChain(aSchdEntry.PlanCellRef) )
                    {
                        newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesCostDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesAUC, aSchdEntry.PlanCellRef.isCellHidden) ;

                        BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    }
                    else
                    {
                        newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesCostDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetChainOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesAUC, aSchdEntry.PlanCellRef.isCellHidden) ;

                        BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    }
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsFormula_TotSalesUnit_AUR : PlanFormulaProfile
        {
			public clsFormula_TotSalesUnit_AUR(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "TotSalesUnit AUR Formula")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    if ( BasePlanToolBox.isChain(aSchdEntry.PlanCellRef) )
                    {
                        newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesAUR, aSchdEntry.PlanCellRef.isCellHidden) ;

                        BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    }
                    else
                    {
                        newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetChainOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesAUR, aSchdEntry.PlanCellRef.isCellHidden) ;

                        BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    }
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsFormula_TotSalesUnit_PCT_PCTTTL : PlanFormulaProfile
        {
			public clsFormula_TotSalesUnit_PCT_PCTTTL(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "TotSalesUnit PCT PCTTTL Formula")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = (BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).SalesTotalUnits, aSchdEntry.PlanCellRef.isCellHidden) 
					* BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesUnitPctTTL, aSchdEntry.PlanCellRef.isCellHidden) )
					/ 100 ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsFormula_TotStrSalesCostDlr_AUC : PlanFormulaProfile
        {
			public clsFormula_TotStrSalesCostDlr_AUC(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "TotStrSalesCostDlr AUC Formula")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    if ( BasePlanToolBox.isChain(aSchdEntry.PlanCellRef) )
                    {
                        newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesUnit, aSchdEntry.PlanCellRef.isCellHidden) 
					* BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesAUC, aSchdEntry.PlanCellRef.isCellHidden) ;

                        BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    }
                    else
                    {
                        newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesUnit, aSchdEntry.PlanCellRef.isCellHidden) 
					* BasePlanToolBox.GetChainOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesAUC, aSchdEntry.PlanCellRef.isCellHidden) ;

                        BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    }
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsFormula_TotStrSalesCostDlr_GM_DIFFER : PlanFormulaProfile
        {
			public clsFormula_TotStrSalesCostDlr_GM_DIFFER(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "TotStrSalesCostDlr GM DIFFER Formula")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					- BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).GrossMarginTotStr, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsFormula_TotStrSalesCostDlr_GRS_MARGIN : PlanFormulaProfile
        {
			public clsFormula_TotStrSalesCostDlr_GRS_MARGIN(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "TotStrSalesCostDlr GRS MARGIN Formula")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					- (( BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).GrossMarginPctStr, aSchdEntry.PlanCellRef.isCellHidden) 
					* BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesCostDlr, aSchdEntry.PlanCellRef.isCellHidden) )
					/ 100 );

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsFormula_TotStrSalesCostDlr_PCT_PCTTTL : PlanFormulaProfile
        {
			public clsFormula_TotStrSalesCostDlr_PCT_PCTTTL(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "TotStrSalesCostDlr PCT PCTTTL Formula")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = (BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesCostDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					* BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesCostDlrPctTTL, aSchdEntry.PlanCellRef.isCellHidden) )
					/ 100 ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsFormula_TotStrSalesDlr_AUR : PlanFormulaProfile
        {
			public clsFormula_TotStrSalesDlr_AUR(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "TotStrSalesDlr AUR Formula")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    if ( BasePlanToolBox.isChain(aSchdEntry.PlanCellRef) )
                    {
                        newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesUnit, aSchdEntry.PlanCellRef.isCellHidden) 
					* BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesAUR, aSchdEntry.PlanCellRef.isCellHidden) ;

                        BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    }
                    else
                    {
                        newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesUnit, aSchdEntry.PlanCellRef.isCellHidden) 
					* BasePlanToolBox.GetChainOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesAUR, aSchdEntry.PlanCellRef.isCellHidden) ;

                        BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    }
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsFormula_TotStrSalesDlr_INVERSE_PCT : PlanFormulaProfile
        {
			public clsFormula_TotStrSalesDlr_INVERSE_PCT(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "TotStrSalesDlr INVERSE PCT Formula")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesCostDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					/ ( 1 
					- ( BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).GrossMarginPctStr, aSchdEntry.PlanCellRef.isCellHidden) 
					/ 100 ));

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsFormula_TotStrSalesDlr_SUM_GM : PlanFormulaProfile
        {
			public clsFormula_TotStrSalesDlr_SUM_GM(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "TotStrSalesDlr SUM GM Formula")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).GrossMarginTotStr, aSchdEntry.PlanCellRef.isCellHidden) 
					+ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesCostDlr, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsFormula_VATDlr_Calc : PlanFormulaProfile
        {
			public clsFormula_VATDlr_Calc(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "VATDlr Calc Formula")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = (BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).VATPct, aSchdEntry.PlanCellRef.isCellHidden) 
					/ 100 )
					* BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).AfterDiscountDlr, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_AdjUntiPctTot : PlanFormulaProfile
        {
			public clsInit_AdjUntiPctTot(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "AdjUntiPctTot Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = (BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).AdjCostDlrTot, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotBinvCostDlr, aSchdEntry.PlanCellRef.isCellHidden) )
					* 100 ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_AdjUntiPctTotT1 : PlanFormulaProfile
        {
			public clsInit_AdjUntiPctTotT1(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "AdjUntiPctTotT1 Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = (BasePlanToolBox.AverageTotalDetailComponents(aSchdEntry, aGetCellMode, aSetCellMode, BasePlanToolBox.GetTimeTotalOperandCell(null, eSetCellMode.Entry, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).AdjCostDlrTotT1)) 
					/ BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).TotBinvCostDlrT2, aSchdEntry.PlanCellRef.isCellHidden) )
					* 100 ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_AfterDiscGMDlr : PlanFormulaProfile
        {
			public clsInit_AfterDiscGMDlr(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "AfterDiscGMDlr Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).AfterDiscountDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					- ( BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesCostDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					+ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotFreightCostDlr, aSchdEntry.PlanCellRef.isCellHidden) );

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_AfterDiscountAUR : PlanFormulaProfile
        {
			public clsInit_AfterDiscountAUR(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "AfterDiscountAUR Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).AfterDiscountDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).SalesTotalUnits, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_AfterDiscountAURT1 : PlanFormulaProfile
        {
			public clsInit_AfterDiscountAURT1(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "AfterDiscountAURT1 Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).AfterDiscountDlrT1, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).SalesTotalUnitsT1, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_AvgStrSlsDlr : PlanFormulaProfile
        {
			public clsInit_AvgStrSlsDlr(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "AvgStrSlsDlr Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).OpenStores, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_AvgStrSlsUnit : PlanFormulaProfile
        {
			public clsInit_AvgStrSlsUnit(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "AvgStrSlsUnit Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesUnit, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).OpenStores, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_ClearStrBinvAURT1 : PlanFormulaProfile
        {
			public clsInit_ClearStrBinvAURT1(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "ClearStrBinvAURT1 Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).ClearStrBinvDlrT1, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).InventoryMarkdownUnitsT1, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_ClearStrBinvAURT2 : PlanFormulaProfile
        {
			public clsInit_ClearStrBinvAURT2(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "ClearStrBinvAURT2 Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).ClearStrBinvDlrT2, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).InventoryMarkdownUnitsT2, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_ClearStrBinvAURT3 : PlanFormulaProfile
        {
			public clsInit_ClearStrBinvAURT3(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "ClearStrBinvAURT3 Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).ClearStrBinvDlrT3, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).InventoryMarkdownUnitsT3, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_ClearStrBinvPctTtlDlrT1 : PlanFormulaProfile
        {
			public clsInit_ClearStrBinvPctTtlDlrT1(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "ClearStrBinvPctTtlDlrT1 Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = (BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).ClearStrBinvDlrT1, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).TotStrBinvDlrT1, aSchdEntry.PlanCellRef.isCellHidden) )
					* 100 ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_ClearStrBinvPctTtlDlrT2 : PlanFormulaProfile
        {
			public clsInit_ClearStrBinvPctTtlDlrT2(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "ClearStrBinvPctTtlDlrT2 Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = (BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).ClearStrBinvDlrT2, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).TotStrBinvDlrT2, aSchdEntry.PlanCellRef.isCellHidden) )
					* 100 ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_ClearStrBinvPctTtlDlrT3 : PlanFormulaProfile
        {
			public clsInit_ClearStrBinvPctTtlDlrT3(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "ClearStrBinvPctTtlDlrT3 Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = (BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).ClearStrBinvDlrT3, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).TotStrBinvDlrT3, aSchdEntry.PlanCellRef.isCellHidden) )
					* 100 ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_ClearStrBinvPctTtlUnitsT1 : PlanFormulaProfile
        {
			public clsInit_ClearStrBinvPctTtlUnitsT1(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "ClearStrBinvPctTtlUnitsT1 Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = (BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).InventoryMarkdownUnitsT1, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).InventoryTotalUnitsT1, aSchdEntry.PlanCellRef.isCellHidden) )
					* 100 ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_ClearStrBinvPctTtlUnitsT2 : PlanFormulaProfile
        {
			public clsInit_ClearStrBinvPctTtlUnitsT2(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "ClearStrBinvPctTtlUnitsT2 Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = (BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).InventoryMarkdownUnitsT2, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).InventoryTotalUnitsT2, aSchdEntry.PlanCellRef.isCellHidden) )
					* 100 ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_ClearStrBinvPctTtlUnitsT3 : PlanFormulaProfile
        {
			public clsInit_ClearStrBinvPctTtlUnitsT3(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "ClearStrBinvPctTtlUnitsT3 Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = (BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).InventoryMarkdownUnitsT3, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).InventoryTotalUnitsT3, aSchdEntry.PlanCellRef.isCellHidden) )
					* 100 ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_Commit1AUC : PlanFormulaProfile
        {
			public clsInit_Commit1AUC(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "Commit1AUC Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).Commit1CostDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).Commit1Unit, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_Commit1AUCT1 : PlanFormulaProfile
        {
			public clsInit_Commit1AUCT1(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "Commit1AUCT1 Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).Commit1CostDlrT1, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).Commit1UnitT1, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_Commit2AUC : PlanFormulaProfile
        {
			public clsInit_Commit2AUC(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "Commit2AUC Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).Commit2CostDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).Commit2Unit, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_Commit2AUCT1 : PlanFormulaProfile
        {
			public clsInit_Commit2AUCT1(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "Commit2AUCT1 Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).Commit2CostDlrT1, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).Commit2UnitT1, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_Commit3AUC : PlanFormulaProfile
        {
			public clsInit_Commit3AUC(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "Commit3AUC Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).Commit3CostDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).Commit3Unit, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_Commit3AUCT1 : PlanFormulaProfile
        {
			public clsInit_Commit3AUCT1(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "Commit3AUCT1 Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).Commit3CostDlrT1, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).Commit3UnitT1, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_CompPctTtl : PlanFormulaProfile
        {
			public clsInit_CompPctTtl(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "CompPctTtl Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = (BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).CompSlsDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesDlr, aSchdEntry.PlanCellRef.isCellHidden) )
					* 100 ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_CompPctTtlT1 : PlanFormulaProfile
        {
			public clsInit_CompPctTtlT1(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "CompPctTtlT1 Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = (BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).CompSlsDlrT1, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).SalesDlrT1, aSchdEntry.PlanCellRef.isCellHidden) )
					* 100 ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_CurrXchgPct : PlanFormulaProfile
        {
			public clsInit_CurrXchgPct(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "CurrXchgPct Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).ConvertedSalesDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).SaleswithoutVATDlr, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_CurrXchgPctT1 : PlanFormulaProfile
        {
			public clsInit_CurrXchgPctT1(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "CurrXchgPctT1 Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).ConvertedSalesDlrT1, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).SaleswithoutVATDlrT1, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_DiscountPct : PlanFormulaProfile
        {
			public clsInit_DiscountPct(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "DiscountPct Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = (BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DiscountDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesDlr, aSchdEntry.PlanCellRef.isCellHidden) )
					* 100 ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_DiscountPctT1 : PlanFormulaProfile
        {
			public clsInit_DiscountPctT1(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "DiscountPctT1 Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = (BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).DiscountDlrT1, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).TotSalesDlrT1, aSchdEntry.PlanCellRef.isCellHidden) )
					* 100 ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_DTCAvgOrder : PlanFormulaProfile
        {
			public clsInit_DTCAvgOrder(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "DTCAvgOrder Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCNoOfOrders, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_DTCBOPct : PlanFormulaProfile
        {
			public clsInit_DTCBOPct(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "DTCBOPct Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = (BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCBOCostDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCGrossDmdCostDlr, aSchdEntry.PlanCellRef.isCellHidden) )
					* 100 ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_DTCBOPctT1 : PlanFormulaProfile
        {
			public clsInit_DTCBOPctT1(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "DTCBOPctT1 Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = (BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).DTCBOCostDlrT1, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).DTCGrossDmdCostDlrT1, aSchdEntry.PlanCellRef.isCellHidden) )
					* 100 ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_DTCCancelPct : PlanFormulaProfile
        {
			public clsInit_DTCCancelPct(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "DTCCancelPct Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = (BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCCancelCostDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCGrossDmdCostDlr, aSchdEntry.PlanCellRef.isCellHidden) )
					* 100 ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_DTCCancelPctT1 : PlanFormulaProfile
        {
			public clsInit_DTCCancelPctT1(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "DTCCancelPctT1 Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = (BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).DTCCancelCostDlrT1, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).DTCGrossDmdCostDlrT1, aSchdEntry.PlanCellRef.isCellHidden) )
					* 100 ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_DTCFWOSUnit : PlanFormulaProfile
        {
			public clsInit_DTCFWOSUnit(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "DTCFWOSUnit Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.CalculateFWOS(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).InventoryTotalUnits, ((PlanVariables)BasePlanVariables).DTCNetDmdUnit) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_DTCGrossDmdAUC : PlanFormulaProfile
        {
			public clsInit_DTCGrossDmdAUC(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "DTCGrossDmdAUC Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCGrossDmdCostDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCGrossDmdUnit, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_DTCGrossDmdAUCT1 : PlanFormulaProfile
        {
			public clsInit_DTCGrossDmdAUCT1(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "DTCGrossDmdAUCT1 Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).DTCGrossDmdCostDlrT1, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).DTCGrossDmdUnitT1, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_DTCGrossDmdAUR : PlanFormulaProfile
        {
			public clsInit_DTCGrossDmdAUR(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "DTCGrossDmdAUR Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCGrossDmdDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCGrossDmdUnit, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_DTCGrossDmdAURT1 : PlanFormulaProfile
        {
			public clsInit_DTCGrossDmdAURT1(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "DTCGrossDmdAURT1 Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).DTCGrossDmdDlrT1, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).DTCGrossDmdUnitT1, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_DTCGrsDmdGMPct : PlanFormulaProfile
        {
			public clsInit_DTCGrsDmdGMPct(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "DTCGrsDmdGMPct Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = (BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCGrossDmdGMDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCGrossDmdDlr, aSchdEntry.PlanCellRef.isCellHidden) )
					* 100 ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_DTCGrsDmdGMPctT1 : PlanFormulaProfile
        {
			public clsInit_DTCGrsDmdGMPctT1(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "DTCGrsDmdGMPctT1 Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = (BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).DTCGrossDmdGMDlrT1, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).DTCGrossDmdDlrT1, aSchdEntry.PlanCellRef.isCellHidden) )
					* 100 ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_DTCNetDmdAUC : PlanFormulaProfile
        {
			public clsInit_DTCNetDmdAUC(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "DTCNetDmdAUC Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdCostDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdUnit, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_DTCNetDmdAUCT1 : PlanFormulaProfile
        {
			public clsInit_DTCNetDmdAUCT1(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "DTCNetDmdAUCT1 Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).DTCNetDmdCostDlrT1, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).DTCNetDmdUnitT1, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_DTCNetDmdAUR : PlanFormulaProfile
        {
			public clsInit_DTCNetDmdAUR(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "DTCNetDmdAUR Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdUnit, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_DTCNetDmdAURT1 : PlanFormulaProfile
        {
			public clsInit_DTCNetDmdAURT1(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "DTCNetDmdAURT1 Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).DTCNetDmdDlrT1, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).DTCNetDmdUnitT1, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_DTCNetDmdGMDlrT1 : PlanFormulaProfile
        {
			public clsInit_DTCNetDmdGMDlrT1(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "DTCNetDmdGMDlrT1 Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).DTCNetDmdDlrT1, aSchdEntry.PlanCellRef.isCellHidden) 
					- BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).DTCNetDmdCostDlrT1, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_DTCNetDmdGMPct : PlanFormulaProfile
        {
			public clsInit_DTCNetDmdGMPct(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "DTCNetDmdGMPct Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = (BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdGMDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdDlr, aSchdEntry.PlanCellRef.isCellHidden) )
					* 100 ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_DTCNetDmdGMPctT1 : PlanFormulaProfile
        {
			public clsInit_DTCNetDmdGMPctT1(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "DTCNetDmdGMPctT1 Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = (BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).DTCNetDmdGMDlrT1, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).DTCNetDmdDlrT1, aSchdEntry.PlanCellRef.isCellHidden) )
					* 100 ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_DTCNetDmdPct : PlanFormulaProfile
        {
			public clsInit_DTCNetDmdPct(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "DTCNetDmdPct Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = (BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdCostDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCGrossDmdCostDlr, aSchdEntry.PlanCellRef.isCellHidden) )
					* 100 ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_DTCNetDmdPctT1 : PlanFormulaProfile
        {
			public clsInit_DTCNetDmdPctT1(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "DTCNetDmdPctT1 Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = (BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).DTCNetDmdCostDlrT1, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).DTCGrossDmdCostDlrT1, aSchdEntry.PlanCellRef.isCellHidden) )
					* 100 ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_DTCRtnPct : PlanFormulaProfile
        {
			public clsInit_DTCRtnPct(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "DTCRtnPct Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = (BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCRtnCostDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCGrossDmdCostDlr, aSchdEntry.PlanCellRef.isCellHidden) )
					* 100 ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_DTCRtnPctT1 : PlanFormulaProfile
        {
			public clsInit_DTCRtnPctT1(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "DTCRtnPctT1 Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = (BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).DTCRtnCostDlrT1, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).DTCGrossDmdCostDlrT1, aSchdEntry.PlanCellRef.isCellHidden) )
					* 100 ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_DTCSellThru : PlanFormulaProfile
        {
			public clsInit_DTCSellThru(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "DTCSellThru Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdUnit, aSchdEntry.PlanCellRef.isCellHidden) 
					/ (( BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).InventoryTotalUnits, aSchdEntry.PlanCellRef.isCellHidden) 
					+ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotEinvUnits, aSchdEntry.PlanCellRef.isCellHidden) )
					/ 2 );

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_DTCSellThruT1 : PlanFormulaProfile
        {
			public clsInit_DTCSellThruT1(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "DTCSellThruT1 Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).TotSalesUnitT2, aSchdEntry.PlanCellRef.isCellHidden) 
					/ (( BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).InventoryTotalUnitsT1, aSchdEntry.PlanCellRef.isCellHidden) 
					+ BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).TotEinvUnitsT3, aSchdEntry.PlanCellRef.isCellHidden) )
					/ 2 );

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_DTCSlsStkRatio : PlanFormulaProfile
        {
			public clsInit_DTCSlsStkRatio(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "DTCSlsStkRatio Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).InventoryTotalUnits, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdUnit, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_DTCSlsStkRatioT1 : PlanFormulaProfile
        {
			public clsInit_DTCSlsStkRatioT1(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "DTCSlsStkRatioT1 Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).InventoryTotalUnitsT2, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).TotSalesUnitT2, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_ForwardWOSClearlDlrT1 : PlanFormulaProfile
        {
			public clsInit_ForwardWOSClearlDlrT1(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "ForwardWOSClearlDlrT1 Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).ClearStrBinvDlrT2, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.AverageTotalDetailComponents(aSchdEntry, aGetCellMode, aSetCellMode, BasePlanToolBox.GetTimeTotalOperandCell(null, eSetCellMode.Entry, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).SalesClearDlrT1)) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_ForwardWOSClearlDlrT2 : PlanFormulaProfile
        {
			public clsInit_ForwardWOSClearlDlrT2(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "ForwardWOSClearlDlrT2 Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).SalesClearDlrT1, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).ClearStrBinvDlrT2, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_ForwardWOSMarkdown_Custom : PlanFormulaProfile
        {
			public clsInit_ForwardWOSMarkdown_Custom(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "ForwardWOSMarkdown Custom Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.CalculateFWOS(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).InventoryMarkdownUnits, ((PlanVariables)BasePlanVariables).SalesMarkdownUnits) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_ForwardWOSMarkdownT1_Custom : PlanFormulaProfile
        {
			public clsInit_ForwardWOSMarkdownT1_Custom(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "ForwardWOSMarkdownT1 Custom Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).InventoryMarkdownUnitsT2, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.AverageTotalDetailComponents(aSchdEntry, aGetCellMode, aSetCellMode, BasePlanToolBox.GetTimeTotalOperandCell(null, eSetCellMode.Entry, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).SalesMarkdownUnitsT1)) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_ForwardWOSReglDlrT1 : PlanFormulaProfile
        {
			public clsInit_ForwardWOSReglDlrT1(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "ForwardWOSReglDlrT1 Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).RegStrBinvDlrT2, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.AverageTotalDetailComponents(aSchdEntry, aGetCellMode, aSetCellMode, BasePlanToolBox.GetTimeTotalOperandCell(null, eSetCellMode.Entry, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).SalesRegDlrT1)) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_ForwardWOSReglDlrT2 : PlanFormulaProfile
        {
			public clsInit_ForwardWOSReglDlrT2(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "ForwardWOSReglDlrT2 Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).SalesRegDlrT1, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).RegStrBinvDlrT2, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_ForwardWOSRegPromo_Custom : PlanFormulaProfile
        {
			public clsInit_ForwardWOSRegPromo_Custom(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "ForwardWOSRegPromo Custom Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.CalculateFWOS(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).InventoryRegularUnits, ((PlanVariables)BasePlanVariables).SalesRegPromoUnits) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_ForwardWOSRegPromoT1_Custom : PlanFormulaProfile
        {
			public clsInit_ForwardWOSRegPromoT1_Custom(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "ForwardWOSRegPromoT1 Custom Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).InventoryRegularUnitsT2, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.AverageTotalDetailComponents(aSchdEntry, aGetCellMode, aSetCellMode, BasePlanToolBox.GetTimeTotalOperandCell(null, eSetCellMode.Entry, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).SalesRegPromoUnitsT1)) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_ForwardWOSTotal_Custom : PlanFormulaProfile
        {
			public clsInit_ForwardWOSTotal_Custom(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "ForwardWOSTotal Custom Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.CalculateFWOS(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).InventoryTotalUnits, ((PlanVariables)BasePlanVariables).SalesTotalUnits) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_ForwardWOSTotalT1_Custom : PlanFormulaProfile
        {
			public clsInit_ForwardWOSTotalT1_Custom(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "ForwardWOSTotalT1 Custom Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).InventoryTotalUnitsT2, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.AverageTotalDetailComponents(aSchdEntry, aGetCellMode, aSetCellMode, BasePlanToolBox.GetTimeTotalOperandCell(null, eSetCellMode.Entry, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).SalesTotalUnitsT1)) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_ForwardWOSTotalT2 : PlanFormulaProfile
        {
			public clsInit_ForwardWOSTotalT2(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "ForwardWOSTotalT2 Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).SalesTotalUnitsT1, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).InventoryTotalUnitsT2, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_FreightCostPerUnitT1 : PlanFormulaProfile
        {
			public clsInit_FreightCostPerUnitT1(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "FreightCostPerUnitT1 Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).TotFreightCostDlrT1, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).SalesTotalUnitsT1, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_FWOSTotDlr : PlanFormulaProfile
        {
			public clsInit_FWOSTotDlr(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "FWOSTotDlr Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.CalcFWOS(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotStrBinvDlr, ((PlanVariables)BasePlanVariables).TotStrSalesDlr) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_FWOSTotDlrT1 : PlanFormulaProfile
        {
			public clsInit_FWOSTotDlrT1(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "FWOSTotDlrT1 Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).TotStrBinvDlrT2, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.AverageTotalDetailComponents(aSchdEntry, aGetCellMode, aSetCellMode, BasePlanToolBox.GetTimeTotalOperandCell(null, eSetCellMode.Entry, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).SalesDlrT1)) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_FWOSTotDlrT2 : PlanFormulaProfile
        {
			public clsInit_FWOSTotDlrT2(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "FWOSTotDlrT2 Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).SalesDlrT1, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).TotStrBinvDlrT2, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_GrossMarginPctStr : PlanFormulaProfile
        {
			public clsInit_GrossMarginPctStr(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "GrossMarginPctStr Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = (BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).GrossMarginTotStr, aSchdEntry.PlanCellRef.isCellHidden) 
					/ ( BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					- BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotFreightCostDlr, aSchdEntry.PlanCellRef.isCellHidden) ))
					* 100 ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_GrossMarginPctStrT1 : PlanFormulaProfile
        {
			public clsInit_GrossMarginPctStrT1(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "GrossMarginPctStrT1 Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = (BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).GrossMarginTotStrT1, aSchdEntry.PlanCellRef.isCellHidden) 
					/ ( BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).SalesDlrT1, aSchdEntry.PlanCellRef.isCellHidden) 
					- BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).TotFreightCostDlrT1, aSchdEntry.PlanCellRef.isCellHidden) ))
					* 100 ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_GrossMarginPctT1 : PlanFormulaProfile
        {
			public clsInit_GrossMarginPctT1(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "GrossMarginPctT1 Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = (BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).GrossMarginT1, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).TotSalesDlrT1, aSchdEntry.PlanCellRef.isCellHidden) )
					* 100 ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_GrossMarginPctTot : PlanFormulaProfile
        {
			public clsInit_GrossMarginPctTot(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "GrossMarginPctTot Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = (BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).GrossMarginTotDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesDlr, aSchdEntry.PlanCellRef.isCellHidden) )
					* 100 ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_GrossMarginT1 : PlanFormulaProfile
        {
			public clsInit_GrossMarginT1(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "GrossMarginT1 Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).TotSalesDlrT1, aSchdEntry.PlanCellRef.isCellHidden) 
					- BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).TotSalesCostDlrT1, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_GrossMarginTotDlr : PlanFormulaProfile
        {
			public clsInit_GrossMarginTotDlr(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "GrossMarginTotDlr Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdGMDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					+ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).GrossMarginTotStr, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_GrossMarginTotStrT1 : PlanFormulaProfile
        {
			public clsInit_GrossMarginTotStrT1(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "GrossMarginTotStrT1 Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).SalesDlrT1, aSchdEntry.PlanCellRef.isCellHidden) 
					- ( BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).TotStrSalesCostDlrT1, aSchdEntry.PlanCellRef.isCellHidden) 
					+ BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).TotFreightCostDlrT1, aSchdEntry.PlanCellRef.isCellHidden) );

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_InventoryTotalUnits_Custom : PlanFormulaProfile
        {
			public clsInit_InventoryTotalUnits_Custom(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "InventoryTotalUnits Custom Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).InventoryRegularUnits, aSchdEntry.PlanCellRef.isCellHidden) 
					+ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).InventoryMarkdownUnits, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_InventoryTotalUnitsT4 : PlanFormulaProfile
        {
			public clsInit_InventoryTotalUnitsT4(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "InventoryTotalUnitsT4 Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).InventoryTotalUnitsT2, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.AverageTotalDetailComponents(aSchdEntry, aGetCellMode, aSetCellMode, BasePlanToolBox.GetTimeTotalOperandCell(null, eSetCellMode.Entry, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).TotSalesUnitT1)) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_NonCompPctTtl : PlanFormulaProfile
        {
			public clsInit_NonCompPctTtl(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "NonCompPctTtl Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = (BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).NonCompSlsDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesDlr, aSchdEntry.PlanCellRef.isCellHidden) )
					* 100 ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_NonCompPctTtlT1 : PlanFormulaProfile
        {
			public clsInit_NonCompPctTtlT1(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "NonCompPctTtlT1 Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = (BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).NonCompSlsDlrT1, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).SalesDlrT1, aSchdEntry.PlanCellRef.isCellHidden) )
					* 100 ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_OnOrderAUC : PlanFormulaProfile
        {
			public clsInit_OnOrderAUC(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "OnOrderAUC Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).OnOrderCostDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).OnOrderUnit, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_OnOrderAUCT1 : PlanFormulaProfile
        {
			public clsInit_OnOrderAUCT1(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "OnOrderAUCT1 Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).OnOrderCostT1, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).OnOrderUnitT1, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_OnOrderAUR : PlanFormulaProfile
        {
			public clsInit_OnOrderAUR(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "OnOrderAUR Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).OnOrderDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).OnOrderUnit, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_OnOrderAURT1 : PlanFormulaProfile
        {
			public clsInit_OnOrderAURT1(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "OnOrderAURT1 Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).OnOrderDlrT1, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).OnOrderUnitT1, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_OTBCostDlr : PlanFormulaProfile
        {
			public clsInit_OTBCostDlr(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "OTBCostDlr Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    if ( BasePlanToolBox.GetCurrentPlanTimeDetail(aSchdEntry.PlanCellRef) < aSchdEntry.PlanCellRef.Cube.SAB.ApplicationServerSession.Calendar.CurrentWeek.Key )
                    {
                        BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, 0) ;
                    }
                    else
                    {
                        newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotRecCostDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					- ( BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).Commit1CostDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					+ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).Commit2CostDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					+ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).Commit3CostDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					+ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).OnOrderCostDlr, aSchdEntry.PlanCellRef.isCellHidden) );

                        BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    }
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_OTBCostDlrCum : PlanFormulaProfile
        {
			public clsInit_OTBCostDlrCum(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "OTBCostDlrCum Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                int currMinusOneTimeId;
                try
                {
                    currMinusOneTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aSchdEntry.PlanCellRef, -1);
                    if ( BasePlanToolBox.GetCurrentPlanTimeDetail(aSchdEntry.PlanCellRef) < aSchdEntry.PlanCellRef.Cube.SAB.ApplicationServerSession.Calendar.CurrentWeek.Key )
                    {
                        BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, 0) ;
                    }
                    else
                    {
                        if ( BasePlanToolBox.GetCurrentPlanTimeDetail(aSchdEntry.PlanCellRef) == aSchdEntry.PlanCellRef.Cube.SAB.ApplicationServerSession.Calendar.CurrentWeek.Key )
                        {
                            newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).OTBCostDlr, aSchdEntry.PlanCellRef.isCellHidden) ;

                            BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                        }
                        else
                        {
                            newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).OTBCostDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					+ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).OTBCostDlrCum, currMinusOneTimeId, aSchdEntry.PlanCellRef.isCellHidden) ;

                            BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                        }
                    }
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_OTBUnit : PlanFormulaProfile
        {
			public clsInit_OTBUnit(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "OTBUnit Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    if ( BasePlanToolBox.GetCurrentPlanTimeDetail(aSchdEntry.PlanCellRef) < aSchdEntry.PlanCellRef.Cube.SAB.ApplicationServerSession.Calendar.CurrentWeek.Key )
                    {
                        BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, 0) ;
                    }
                    else
                    {
                        newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotRecUnit, aSchdEntry.PlanCellRef.isCellHidden) 
					- ( BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).Commit1Unit, aSchdEntry.PlanCellRef.isCellHidden) 
					+ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).Commit2Unit, aSchdEntry.PlanCellRef.isCellHidden) 
					+ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).Commit3Unit, aSchdEntry.PlanCellRef.isCellHidden) 
					+ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).OnOrderUnit, aSchdEntry.PlanCellRef.isCellHidden) );

                        BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    }
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_OTBUnitCum : PlanFormulaProfile
        {
			public clsInit_OTBUnitCum(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "OTBUnitCum Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                int currMinusOneTimeId;
                try
                {
                    currMinusOneTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aSchdEntry.PlanCellRef, -1);
                    if ( BasePlanToolBox.GetCurrentPlanTimeDetail(aSchdEntry.PlanCellRef) < aSchdEntry.PlanCellRef.Cube.SAB.ApplicationServerSession.Calendar.CurrentWeek.Key )
                    {
                        BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, 0) ;
                    }
                    else
                    {
                        if ( BasePlanToolBox.GetCurrentPlanTimeDetail(aSchdEntry.PlanCellRef) == aSchdEntry.PlanCellRef.Cube.SAB.ApplicationServerSession.Calendar.CurrentWeek.Key )
                        {
                            newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).OTBUnit, aSchdEntry.PlanCellRef.isCellHidden) ;

                            BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                        }
                        else
                        {
                            newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).OTBUnit, aSchdEntry.PlanCellRef.isCellHidden) 
					+ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).OTBUnitCum, currMinusOneTimeId, aSchdEntry.PlanCellRef.isCellHidden) ;

                            BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                        }
                    }
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_ReceiptAUCT1 : PlanFormulaProfile
        {
			public clsInit_ReceiptAUCT1(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "ReceiptAUCT1 Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).ReceiptCostT1, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).ReceiptTotalUnitsT1, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_ReceiptAUCTot : PlanFormulaProfile
        {
			public clsInit_ReceiptAUCTot(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "ReceiptAUCTot Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotRecCostDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotRecUnit, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_ReceiptAUCTotT1 : PlanFormulaProfile
        {
			public clsInit_ReceiptAUCTotT1(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "ReceiptAUCTotT1 Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).ReceiptCostT1, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).ReceiptUnitT1, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_ReceiptAUR : PlanFormulaProfile
        {
			public clsInit_ReceiptAUR(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "ReceiptAUR Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotRecUnit, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).ReceiptTotalUnits, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_ReceiptAURT1 : PlanFormulaProfile
        {
			public clsInit_ReceiptAURT1(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "ReceiptAURT1 Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).ReceiptUnitT1, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).ReceiptTotalUnitsT1, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_RegStrBinvAURT1 : PlanFormulaProfile
        {
			public clsInit_RegStrBinvAURT1(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "RegStrBinvAURT1 Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).RegStrBinvDlrT1, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).InventoryRegularUnitsT1, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_RegStrBinvAURT2 : PlanFormulaProfile
        {
			public clsInit_RegStrBinvAURT2(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "RegStrBinvAURT2 Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).RegStrBinvDlrT2, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).InventoryRegularUnitsT2, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_RegStrBinvAURT3 : PlanFormulaProfile
        {
			public clsInit_RegStrBinvAURT3(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "RegStrBinvAURT3 Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).RegStrBinvDlrT3, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).InventoryRegularUnitsT3, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_RegStrBinvDlrT4 : PlanFormulaProfile
        {
			public clsInit_RegStrBinvDlrT4(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "RegStrBinvDlrT4 Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
                try
                {
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_RegStrBinvPctTtlDlrT1 : PlanFormulaProfile
        {
			public clsInit_RegStrBinvPctTtlDlrT1(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "RegStrBinvPctTtlDlrT1 Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = (BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).RegStrBinvDlrT1, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).TotStrBinvDlrT1, aSchdEntry.PlanCellRef.isCellHidden) )
					* 100 ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_RegStrBinvPctTtlDlrT2 : PlanFormulaProfile
        {
			public clsInit_RegStrBinvPctTtlDlrT2(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "RegStrBinvPctTtlDlrT2 Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = (BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).RegStrBinvDlrT2, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).TotStrBinvDlrT2, aSchdEntry.PlanCellRef.isCellHidden) )
					* 100 ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_RegStrBinvPctTtlDlrT3 : PlanFormulaProfile
        {
			public clsInit_RegStrBinvPctTtlDlrT3(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "RegStrBinvPctTtlDlrT3 Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = (BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).RegStrBinvDlrT3, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).TotStrBinvDlrT3, aSchdEntry.PlanCellRef.isCellHidden) )
					* 100 ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_RegStrBinvPctTtlUnitsT1 : PlanFormulaProfile
        {
			public clsInit_RegStrBinvPctTtlUnitsT1(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "RegStrBinvPctTtlUnitsT1 Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = (BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).InventoryRegularUnitsT1, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).InventoryTotalUnitsT1, aSchdEntry.PlanCellRef.isCellHidden) )
					* 100 ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_RegStrBinvPctTtlUnitsT2 : PlanFormulaProfile
        {
			public clsInit_RegStrBinvPctTtlUnitsT2(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "RegStrBinvPctTtlUnitsT2 Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = (BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).InventoryRegularUnitsT2, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).InventoryTotalUnitsT2, aSchdEntry.PlanCellRef.isCellHidden) )
					* 100 ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_RegStrBinvPctTtlUnitsT3 : PlanFormulaProfile
        {
			public clsInit_RegStrBinvPctTtlUnitsT3(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "RegStrBinvPctTtlUnitsT3 Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = (BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).InventoryRegularUnitsT3, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).InventoryTotalUnitsT3, aSchdEntry.PlanCellRef.isCellHidden) )
					* 100 ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_SalesAUCT1 : PlanFormulaProfile
        {
			public clsInit_SalesAUCT1(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "SalesAUCT1 Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).SalesCostT1, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).SalesTotalUnitsT1, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_SalesClearAURT1 : PlanFormulaProfile
        {
			public clsInit_SalesClearAURT1(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "SalesClearAURT1 Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).SalesClearDlrT1, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).SalesMarkdownUnitsT1, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_SalesClearPctTtlDlrT1 : PlanFormulaProfile
        {
			public clsInit_SalesClearPctTtlDlrT1(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "SalesClearPctTtlDlrT1 Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = (BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).SalesClearDlrT1, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).SalesDlrT1, aSchdEntry.PlanCellRef.isCellHidden) )
					* 100 ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_SalesClearPctTtlUnitsT1 : PlanFormulaProfile
        {
			public clsInit_SalesClearPctTtlUnitsT1(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "SalesClearPctTtlUnitsT1 Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = (BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).SalesMarkdownUnitsT1, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).SalesTotalUnitsT1, aSchdEntry.PlanCellRef.isCellHidden) )
					* 100 ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_SalesMarginT1 : PlanFormulaProfile
        {
			public clsInit_SalesMarginT1(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "SalesMarginT1 Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).SalesDlrT1, aSchdEntry.PlanCellRef.isCellHidden) 
					- BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).SalesCostT1, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_SalesRegAURT1 : PlanFormulaProfile
        {
			public clsInit_SalesRegAURT1(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "SalesRegAURT1 Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).SalesRegDlrT1, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).SalesRegularUnitsT1, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_SalesRegPctTtlDlrT1 : PlanFormulaProfile
        {
			public clsInit_SalesRegPctTtlDlrT1(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "SalesRegPctTtlDlrT1 Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = (BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).SalesRegDlrT1, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).SalesDlrT1, aSchdEntry.PlanCellRef.isCellHidden) )
					* 100 ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_SalesRegPctTtlUnitsT1 : PlanFormulaProfile
        {
			public clsInit_SalesRegPctTtlUnitsT1(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "SalesRegPctTtlUnitsT1 Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = (BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).SalesRegularUnitsT1, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).SalesTotalUnitsT1, aSchdEntry.PlanCellRef.isCellHidden) )
					* 100 ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_SalesRegPromoUnits_Custom : PlanFormulaProfile
        {
			public clsInit_SalesRegPromoUnits_Custom(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "SalesRegPromoUnits Custom Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).SalesRegularUnits, aSchdEntry.PlanCellRef.isCellHidden) 
					+ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).SalesPromoUnits, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_SalesRegPromoUnitsT1_Custom : PlanFormulaProfile
        {
			public clsInit_SalesRegPromoUnitsT1_Custom(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "SalesRegPromoUnitsT1 Custom Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).SalesRegularUnitsT1, aSchdEntry.PlanCellRef.isCellHidden) 
					+ BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).SalesPromoUnitsT1, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_SalesTotalUnits_Custom : PlanFormulaProfile
        {
			public clsInit_SalesTotalUnits_Custom(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "SalesTotalUnits Custom Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    if ( BasePlanToolBox.isActual(aSchdEntry.PlanCellRef) )
                    {
                        newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).SalesRegularUnits, aSchdEntry.PlanCellRef.isCellHidden) 
					+ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).SalesMarkdownUnits, aSchdEntry.PlanCellRef.isCellHidden) 
					+ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).SalesPromoUnits, aSchdEntry.PlanCellRef.isCellHidden) ;

                        BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    }
                    else
                    {
                        newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesUnit, aSchdEntry.PlanCellRef.isCellHidden) 
					+ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdUnit, aSchdEntry.PlanCellRef.isCellHidden) ;

                        BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    }
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_SellThruUnitPctTot : PlanFormulaProfile
        {
			public clsInit_SellThruUnitPctTot(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "SellThruUnitPctTot Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).SalesTotalUnits, aSchdEntry.PlanCellRef.isCellHidden) 
					/ (( BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).InventoryTotalUnits, aSchdEntry.PlanCellRef.isCellHidden) 
					+ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotEinvUnits, aSchdEntry.PlanCellRef.isCellHidden) )
					/ 2 );

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_SellThruUnitPctTotT1 : PlanFormulaProfile
        {
			public clsInit_SellThruUnitPctTotT1(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "SellThruUnitPctTotT1 Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).InventoryTotalUnitsT2, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.AverageTotalDetailComponents(aSchdEntry, aGetCellMode, aSetCellMode, BasePlanToolBox.GetTimeTotalOperandCell(null, eSetCellMode.Entry, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).TotSalesUnitT1)) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_ShrinkPctT1 : PlanFormulaProfile
        {
			public clsInit_ShrinkPctT1(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "ShrinkPctT1 Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = (BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).ShrinkDlrT1, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).SalesDlrT1, aSchdEntry.PlanCellRef.isCellHidden) )
					* 100 ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_ShrinkPctTot : PlanFormulaProfile
        {
			public clsInit_ShrinkPctTot(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "ShrinkPctTot Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = (BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).ShrinkCostDlrTot, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotBinvCostDlr, aSchdEntry.PlanCellRef.isCellHidden) )
					* 100 ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_ShrinkPctTotT1 : PlanFormulaProfile
        {
			public clsInit_ShrinkPctTotT1(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "ShrinkPctTotT1 Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = (BasePlanToolBox.AverageTotalDetailComponents(aSchdEntry, aGetCellMode, aSetCellMode, BasePlanToolBox.GetTimeTotalOperandCell(null, eSetCellMode.Entry, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).ShrinkCostDlrTotT1)) 
					/ BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).TotBinvCostDlrT2, aSchdEntry.PlanCellRef.isCellHidden) )
					* 100 ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_TotBinvAUC : PlanFormulaProfile
        {
			public clsInit_TotBinvAUC(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "TotBinvAUC Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotBinvCostDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).InventoryTotalUnits, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_TotDTCSalesCostDlrPctTTL : PlanFormulaProfile
        {
			public clsInit_TotDTCSalesCostDlrPctTTL(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "TotDTCSalesCostDlrPctTTL Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = (BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdCostDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesCostDlr, aSchdEntry.PlanCellRef.isCellHidden) )
					* 100 ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_TotDTCSalesCostDlrPctTTLT1 : PlanFormulaProfile
        {
			public clsInit_TotDTCSalesCostDlrPctTTLT1(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "TotDTCSalesCostDlrPctTTLT1 Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = (BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).DTCNetDmdCostDlrT1, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).TotSalesCostDlrT1, aSchdEntry.PlanCellRef.isCellHidden) )
					* 100 ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_TotDTCSalesUnitPctTTL : PlanFormulaProfile
        {
			public clsInit_TotDTCSalesUnitPctTTL(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "TotDTCSalesUnitPctTTL Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = (BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdUnit, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).SalesTotalUnits, aSchdEntry.PlanCellRef.isCellHidden) )
					* 100 ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_TotDTCSalesUnitPctTTLT1 : PlanFormulaProfile
        {
			public clsInit_TotDTCSalesUnitPctTTLT1(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "TotDTCSalesUnitPctTTLT1 Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = (BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).DTCNetDmdUnitT1, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).SalesTotalUnitsT1, aSchdEntry.PlanCellRef.isCellHidden) )
					* 100 ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_TotEinvAUC : PlanFormulaProfile
        {
			public clsInit_TotEinvAUC(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "TotEinvAUC Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotEinvCostDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotEinvUnits, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_TotEinvAUCT1 : PlanFormulaProfile
        {
			public clsInit_TotEinvAUCT1(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "TotEinvAUCT1 Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).TotEinvCostDlrT1, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).TotEinvUnitsT1, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_TotEinvAUCT2 : PlanFormulaProfile
        {
			public clsInit_TotEinvAUCT2(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "TotEinvAUCT2 Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).TotEinvCostDlrT2, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).TotEinvUnitsT2, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_TotEinvAUCT3 : PlanFormulaProfile
        {
			public clsInit_TotEinvAUCT3(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "TotEinvAUCT3 Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).TotEinvCostDlrT3, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).TotEinvUnitsT3, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_TotEinvCostDlr : PlanFormulaProfile
        {
			public clsInit_TotEinvCostDlr(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "TotEinvCostDlr Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                int currPlusOneTimeId;
                try
                {
                    currPlusOneTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aSchdEntry.PlanCellRef, 1);
                    if ( BasePlanToolBox.isActual(aSchdEntry.PlanCellRef) )
                    {
                        newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotBinvCostDlr, currPlusOneTimeId, aSchdEntry.PlanCellRef.isCellHidden) ;

                        BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    }
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_TotEinvUnits : PlanFormulaProfile
        {
			public clsInit_TotEinvUnits(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "TotEinvUnits Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                int currPlusOneTimeId;
                try
                {
                    currPlusOneTimeId = BasePlanToolBox.GetCurrentPlanTimeDetail(aSchdEntry.PlanCellRef, 1);
                    if ( BasePlanToolBox.isActual(aSchdEntry.PlanCellRef) )
                    {
                        newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).InventoryTotalUnits, currPlusOneTimeId, aSchdEntry.PlanCellRef.isCellHidden) ;

                        BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    }
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_TotFWOSUnit : PlanFormulaProfile
        {
			public clsInit_TotFWOSUnit(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "TotFWOSUnit Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.CalculateFWOS(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).InventoryTotalUnits, ((PlanVariables)BasePlanVariables).TotSalesUnit) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_TotIMUPct : PlanFormulaProfile
        {
			public clsInit_TotIMUPct(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "TotIMUPct Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = ((BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).OnOrderDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					- BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).OnOrderCostDlr, aSchdEntry.PlanCellRef.isCellHidden) )
					/ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).OnOrderDlr, aSchdEntry.PlanCellRef.isCellHidden) )
					* 100 ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_TotMDPctT1 : PlanFormulaProfile
        {
			public clsInit_TotMDPctT1(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "TotMDPctT1 Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = 100 
					* ( BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).TotMDDlrT1, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).SalesDlrT1, aSchdEntry.PlanCellRef.isCellHidden) );

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_TotSalesAUC : PlanFormulaProfile
        {
			public clsInit_TotSalesAUC(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "TotSalesAUC Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesCostDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).SalesTotalUnits, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_TotSalesAUCT1 : PlanFormulaProfile
        {
			public clsInit_TotSalesAUCT1(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "TotSalesAUCT1 Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).TotSalesCostDlrT1, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).SalesTotalUnitsT1, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_TotSalesAUR : PlanFormulaProfile
        {
			public clsInit_TotSalesAUR(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "TotSalesAUR Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).SalesTotalUnits, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_TotSalesAURT1 : PlanFormulaProfile
        {
			public clsInit_TotSalesAURT1(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "TotSalesAURT1 Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).TotSalesDlrT1, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).SalesTotalUnitsT1, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_TotSalesCostDlr : PlanFormulaProfile
        {
			public clsInit_TotSalesCostDlr(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "TotSalesCostDlr Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdCostDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					+ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesCostDlr, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_TotSalesDlr : PlanFormulaProfile
        {
			public clsInit_TotSalesDlr(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "TotSalesDlr Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					+ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesDlr, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_TotStrAvgEndINVUnit : PlanFormulaProfile
        {
			public clsInit_TotStrAvgEndINVUnit(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "TotStrAvgEndINVUnit Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotEinvUnits, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).OpenStores, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_TotStrAvgINVUnit : PlanFormulaProfile
        {
			public clsInit_TotStrAvgINVUnit(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "TotStrAvgINVUnit Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).InventoryTotalUnits, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).OpenStores, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_TotStrBinvAUCT1 : PlanFormulaProfile
        {
			public clsInit_TotStrBinvAUCT1(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "TotStrBinvAUCT1 Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).TotBinvCostDlrT1, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).InventoryTotalUnitsT1, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_TotStrBinvAUCT2 : PlanFormulaProfile
        {
			public clsInit_TotStrBinvAUCT2(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "TotStrBinvAUCT2 Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).TotBinvCostDlrT2, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).InventoryTotalUnitsT2, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_TotStrBinvAUCT3 : PlanFormulaProfile
        {
			public clsInit_TotStrBinvAUCT3(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "TotStrBinvAUCT3 Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).TotBinvCostDlrT3, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).InventoryTotalUnitsT3, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_TotStrBinvAURT1 : PlanFormulaProfile
        {
			public clsInit_TotStrBinvAURT1(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "TotStrBinvAURT1 Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).TotBinvCostDlrT1, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).InventoryTotalUnitsT1, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_TotStrBinvAURT2 : PlanFormulaProfile
        {
			public clsInit_TotStrBinvAURT2(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "TotStrBinvAURT2 Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).TotBinvCostDlrT2, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).InventoryTotalUnitsT2, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_TotStrBinvAURT3 : PlanFormulaProfile
        {
			public clsInit_TotStrBinvAURT3(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "TotStrBinvAURT3 Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).TotBinvCostDlrT3, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).InventoryTotalUnitsT3, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_TotStrSalesAUC : PlanFormulaProfile
        {
			public clsInit_TotStrSalesAUC(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "TotStrSalesAUC Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesCostDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesUnit, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_TotStrSalesAUCT1 : PlanFormulaProfile
        {
			public clsInit_TotStrSalesAUCT1(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "TotStrSalesAUCT1 Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).TotStrSalesCostDlrT1, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).TotSalesUnitT1, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_TotStrSalesAUR : PlanFormulaProfile
        {
			public clsInit_TotStrSalesAUR(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "TotStrSalesAUR Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesUnit, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_TotStrSalesAURT1 : PlanFormulaProfile
        {
			public clsInit_TotStrSalesAURT1(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "TotStrSalesAURT1 Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).SalesDlrT1, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).TotSalesUnitT1, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_TotStrSalesCostDlrPctTTL : PlanFormulaProfile
        {
			public clsInit_TotStrSalesCostDlrPctTTL(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "TotStrSalesCostDlrPctTTL Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = (BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesCostDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesCostDlr, aSchdEntry.PlanCellRef.isCellHidden) )
					* 100 ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_TotStrSalesCostDlrPctTTLT1 : PlanFormulaProfile
        {
			public clsInit_TotStrSalesCostDlrPctTTLT1(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "TotStrSalesCostDlrPctTTLT1 Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = (BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).TotStrSalesCostDlrT1, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).TotSalesCostDlrT1, aSchdEntry.PlanCellRef.isCellHidden) )
					* 100 ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_TotStrSalesUnitPctTTL : PlanFormulaProfile
        {
			public clsInit_TotStrSalesUnitPctTTL(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "TotStrSalesUnitPctTTL Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = (BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesUnit, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).SalesTotalUnits, aSchdEntry.PlanCellRef.isCellHidden) )
					* 100 ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_TotStrSalesUnitPctTTLT1 : PlanFormulaProfile
        {
			public clsInit_TotStrSalesUnitPctTTLT1(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "TotStrSalesUnitPctTTLT1 Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = (BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).TotSalesUnitT1, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).SalesTotalUnitsT1, aSchdEntry.PlanCellRef.isCellHidden) )
					* 100 ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_VATPct : PlanFormulaProfile
        {
			public clsInit_VATPct(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "VATPct Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = (BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).VATDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).AfterDiscountDlr, aSchdEntry.PlanCellRef.isCellHidden) )
					* 100 ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_VATPctT1 : PlanFormulaProfile
        {
			public clsInit_VATPctT1(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "VATPctT1 Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = (BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).VATDlrT1, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).AfterDiscountDlrT1, aSchdEntry.PlanCellRef.isCellHidden) )
					* 100 ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsSpread_DTCGrossDmdCostDlr_SPREAD : clsSpread_BaseTotalNoCascade
        {
			public clsSpread_DTCGrossDmdCostDlr_SPREAD(BasePlanComputations aComputations, int aKey)
				 : base(aComputations, aKey, "DTCGrossDmdCostDlr SPREAD Spread")
			{
			}

            public override ArrayList GetSpreadToCellReferenceList(PlanCellReference aPlanCellRef)
            {
                ArrayList cellRefArray;
                try
                {
                    cellRefArray = new ArrayList();
                    cellRefArray.Add(BasePlanToolBox.GetOperandCell(null, eSetCellMode.Computation, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCBOCostDlr, false));
                    cellRefArray.Add(BasePlanToolBox.GetOperandCell(null, eSetCellMode.Computation, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCCancelCostDlr, false));
                    cellRefArray.Add(BasePlanToolBox.GetOperandCell(null, eSetCellMode.Computation, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdCostDlr, false));
                    cellRefArray.Add(BasePlanToolBox.GetOperandCell(null, eSetCellMode.Computation, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCRtnCostDlr, false));
                    return cellRefArray;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsSpread_DTCGrossDmdCostDlr_SpreadDifference : clsSpread_BaseTotalNoCascade
        {
			public clsSpread_DTCGrossDmdCostDlr_SpreadDifference(BasePlanComputations aComputations, int aKey)
				 : base(aComputations, aKey, "DTCGrossDmdCostDlr SpreadDifference Spread")
			{
			}

            public override ArrayList GetSpreadToCellReferenceList(PlanCellReference aPlanCellRef)
            {
                ArrayList cellRefArray;
                try
                {
                    cellRefArray = new ArrayList();
                    ComputationVariableProfile cfp = aPlanCellRef.GetCalcVariableProfile();
					if (cfp == ((PlanVariables)BasePlanVariables).DTCBOCostDlr)
					{
						cellRefArray.Add(BasePlanToolBox.GetOperandCell(null, eSetCellMode.Computation, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCCancelCostDlr, false));
						cellRefArray.Add(BasePlanToolBox.GetOperandCell(null, eSetCellMode.Computation, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdCostDlr, false));
						cellRefArray.Add(BasePlanToolBox.GetOperandCell(null, eSetCellMode.Computation, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCRtnCostDlr, false));
					}
					else if (cfp == ((PlanVariables)BasePlanVariables).DTCCancelCostDlr)
					{
						cellRefArray.Add(BasePlanToolBox.GetOperandCell(null, eSetCellMode.Computation, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCBOCostDlr, false));
						cellRefArray.Add(BasePlanToolBox.GetOperandCell(null, eSetCellMode.Computation, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdCostDlr, false));
						cellRefArray.Add(BasePlanToolBox.GetOperandCell(null, eSetCellMode.Computation, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCRtnCostDlr, false));
					}
					else if (cfp == ((PlanVariables)BasePlanVariables).DTCNetDmdCostDlr)
					{
						cellRefArray.Add(BasePlanToolBox.GetOperandCell(null, eSetCellMode.Computation, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCBOCostDlr, false));
						cellRefArray.Add(BasePlanToolBox.GetOperandCell(null, eSetCellMode.Computation, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCCancelCostDlr, false));
						cellRefArray.Add(BasePlanToolBox.GetOperandCell(null, eSetCellMode.Computation, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCRtnCostDlr, false));
					}
					else if (cfp == ((PlanVariables)BasePlanVariables).DTCRtnCostDlr)
					{
						cellRefArray.Add(BasePlanToolBox.GetOperandCell(null, eSetCellMode.Computation, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCBOCostDlr, false));
						cellRefArray.Add(BasePlanToolBox.GetOperandCell(null, eSetCellMode.Computation, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCCancelCostDlr, false));
						cellRefArray.Add(BasePlanToolBox.GetOperandCell(null, eSetCellMode.Computation, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdCostDlr, false));
					}

                    return cellRefArray;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
            public override eComputationFormulaReturnType Execute(PlanScheduleSpreadEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue = 0;
				double totValue = 0;
				double spreadValue = 0;
                try
                {
					newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, eGetCellMode.Current, aSetCellMode, aSchdEntry.PlanCellRef, aSchdEntry.PlanCellRef.isCellHidden);
					totValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCGrossDmdCostDlr, aSchdEntry.PlanCellRef.isCellHidden);
					spreadValue = totValue - newValue;
					BasePlanToolBox.ExecutePctContributionSpread(
						aSchdEntry,
						aSetCellMode,
						aSchdEntry.SpreadCellRefList,
						aSchdEntry.PlanCellRef.GetFormatTypeVariableProfile().NumDecimals,
						spreadValue);
					return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsSpread_DTCGrossDmdDlr_SPREAD : clsSpread_BaseTotalNoCascade
        {
			public clsSpread_DTCGrossDmdDlr_SPREAD(BasePlanComputations aComputations, int aKey)
				 : base(aComputations, aKey, "DTCGrossDmdDlr SPREAD Spread")
			{
			}

            public override ArrayList GetSpreadToCellReferenceList(PlanCellReference aPlanCellRef)
            {
                ArrayList cellRefArray;
                try
                {
                    cellRefArray = new ArrayList();
                    cellRefArray.Add(BasePlanToolBox.GetOperandCell(null, eSetCellMode.Computation, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCBODlr, false));
                    cellRefArray.Add(BasePlanToolBox.GetOperandCell(null, eSetCellMode.Computation, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCCancelDlr, false));
                    cellRefArray.Add(BasePlanToolBox.GetOperandCell(null, eSetCellMode.Computation, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdDlr, false));
                    cellRefArray.Add(BasePlanToolBox.GetOperandCell(null, eSetCellMode.Computation, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCRtnDlr, false));
                    return cellRefArray;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsSpread_DTCGrossDmdDlr_SpreadDifference : clsSpread_BaseTotalNoCascade
        {
			public clsSpread_DTCGrossDmdDlr_SpreadDifference(BasePlanComputations aComputations, int aKey)
				 : base(aComputations, aKey, "DTCGrossDmdDlr SpreadDifference Spread")
			{
			}

            public override ArrayList GetSpreadToCellReferenceList(PlanCellReference aPlanCellRef)
            {
                ArrayList cellRefArray;
                try
                {
                    cellRefArray = new ArrayList();
                    ComputationVariableProfile cfp = aPlanCellRef.GetCalcVariableProfile();
					if (cfp == ((PlanVariables)BasePlanVariables).DTCBODlr)
					{
						cellRefArray.Add(BasePlanToolBox.GetOperandCell(null, eSetCellMode.Computation, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCCancelDlr, false));
						cellRefArray.Add(BasePlanToolBox.GetOperandCell(null, eSetCellMode.Computation, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdDlr, false));
						cellRefArray.Add(BasePlanToolBox.GetOperandCell(null, eSetCellMode.Computation, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCRtnDlr, false));
					}
					else if (cfp == ((PlanVariables)BasePlanVariables).DTCCancelDlr)
					{
						cellRefArray.Add(BasePlanToolBox.GetOperandCell(null, eSetCellMode.Computation, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCBODlr, false));
						cellRefArray.Add(BasePlanToolBox.GetOperandCell(null, eSetCellMode.Computation, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdDlr, false));
						cellRefArray.Add(BasePlanToolBox.GetOperandCell(null, eSetCellMode.Computation, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCRtnDlr, false));
					}
					else if (cfp == ((PlanVariables)BasePlanVariables).DTCNetDmdDlr)
					{
						cellRefArray.Add(BasePlanToolBox.GetOperandCell(null, eSetCellMode.Computation, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCBODlr, false));
						cellRefArray.Add(BasePlanToolBox.GetOperandCell(null, eSetCellMode.Computation, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCCancelDlr, false));
						cellRefArray.Add(BasePlanToolBox.GetOperandCell(null, eSetCellMode.Computation, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCRtnDlr, false));
					}
					else if (cfp == ((PlanVariables)BasePlanVariables).DTCRtnDlr)
					{
						cellRefArray.Add(BasePlanToolBox.GetOperandCell(null, eSetCellMode.Computation, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCBODlr, false));
						cellRefArray.Add(BasePlanToolBox.GetOperandCell(null, eSetCellMode.Computation, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCCancelDlr, false));
						cellRefArray.Add(BasePlanToolBox.GetOperandCell(null, eSetCellMode.Computation, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdDlr, false));
					}

                    return cellRefArray;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
            public override eComputationFormulaReturnType Execute(PlanScheduleSpreadEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue = 0;
				double totValue = 0;
				double spreadValue = 0;
                try
                {
					newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, eGetCellMode.Current, aSetCellMode, aSchdEntry.PlanCellRef, aSchdEntry.PlanCellRef.isCellHidden);
					totValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCGrossDmdDlr, aSchdEntry.PlanCellRef.isCellHidden);
					spreadValue = totValue - newValue;
					BasePlanToolBox.ExecutePctContributionSpread(
						aSchdEntry,
						aSetCellMode,
						aSchdEntry.SpreadCellRefList,
						aSchdEntry.PlanCellRef.GetFormatTypeVariableProfile().NumDecimals,
						spreadValue);
					return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsSpread_DTCGrossDmdUnit_SPREAD : clsSpread_BaseTotalNoCascade
        {
			public clsSpread_DTCGrossDmdUnit_SPREAD(BasePlanComputations aComputations, int aKey)
				 : base(aComputations, aKey, "DTCGrossDmdUnit SPREAD Spread")
			{
			}

            public override ArrayList GetSpreadToCellReferenceList(PlanCellReference aPlanCellRef)
            {
                ArrayList cellRefArray;
                try
                {
                    cellRefArray = new ArrayList();
                    cellRefArray.Add(BasePlanToolBox.GetOperandCell(null, eSetCellMode.Computation, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCRtnUnit, false));
                    cellRefArray.Add(BasePlanToolBox.GetOperandCell(null, eSetCellMode.Computation, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCCancelUnit, false));
                    cellRefArray.Add(BasePlanToolBox.GetOperandCell(null, eSetCellMode.Computation, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdUnit, false));
                    cellRefArray.Add(BasePlanToolBox.GetOperandCell(null, eSetCellMode.Computation, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCBOUnit, false));
                    return cellRefArray;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsSpread_DTCGrossDmdUnit_SpreadDifference : clsSpread_BaseTotalNoCascade
        {
			public clsSpread_DTCGrossDmdUnit_SpreadDifference(BasePlanComputations aComputations, int aKey)
				 : base(aComputations, aKey, "DTCGrossDmdUnit SpreadDifference Spread")
			{
			}

            public override ArrayList GetSpreadToCellReferenceList(PlanCellReference aPlanCellRef)
            {
                ArrayList cellRefArray;
                try
                {
                    cellRefArray = new ArrayList();
                    ComputationVariableProfile cfp = aPlanCellRef.GetCalcVariableProfile();
					if (cfp == ((PlanVariables)BasePlanVariables).DTCRtnUnit)
					{
						cellRefArray.Add(BasePlanToolBox.GetOperandCell(null, eSetCellMode.Computation, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCCancelUnit, false));
						cellRefArray.Add(BasePlanToolBox.GetOperandCell(null, eSetCellMode.Computation, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdUnit, false));
						cellRefArray.Add(BasePlanToolBox.GetOperandCell(null, eSetCellMode.Computation, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCBOUnit, false));
					}
					else if (cfp == ((PlanVariables)BasePlanVariables).DTCCancelUnit)
					{
						cellRefArray.Add(BasePlanToolBox.GetOperandCell(null, eSetCellMode.Computation, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCRtnUnit, false));
						cellRefArray.Add(BasePlanToolBox.GetOperandCell(null, eSetCellMode.Computation, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdUnit, false));
						cellRefArray.Add(BasePlanToolBox.GetOperandCell(null, eSetCellMode.Computation, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCBOUnit, false));
					}
					else if (cfp == ((PlanVariables)BasePlanVariables).DTCNetDmdUnit)
					{
						cellRefArray.Add(BasePlanToolBox.GetOperandCell(null, eSetCellMode.Computation, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCRtnUnit, false));
						cellRefArray.Add(BasePlanToolBox.GetOperandCell(null, eSetCellMode.Computation, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCCancelUnit, false));
						cellRefArray.Add(BasePlanToolBox.GetOperandCell(null, eSetCellMode.Computation, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCBOUnit, false));
					}
					else if (cfp == ((PlanVariables)BasePlanVariables).DTCBOUnit)
					{
						cellRefArray.Add(BasePlanToolBox.GetOperandCell(null, eSetCellMode.Computation, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCRtnUnit, false));
						cellRefArray.Add(BasePlanToolBox.GetOperandCell(null, eSetCellMode.Computation, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCCancelUnit, false));
						cellRefArray.Add(BasePlanToolBox.GetOperandCell(null, eSetCellMode.Computation, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdUnit, false));
					}

                    return cellRefArray;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
            public override eComputationFormulaReturnType Execute(PlanScheduleSpreadEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue = 0;
				double totValue = 0;
				double spreadValue = 0;
                try
                {
					newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, eGetCellMode.Current, aSetCellMode, aSchdEntry.PlanCellRef, aSchdEntry.PlanCellRef.isCellHidden);
					totValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCGrossDmdUnit, aSchdEntry.PlanCellRef.isCellHidden);
					spreadValue = totValue - newValue;
					BasePlanToolBox.ExecutePctContributionSpread(
						aSchdEntry,
						aSetCellMode,
						aSchdEntry.SpreadCellRefList,
						aSchdEntry.PlanCellRef.GetFormatTypeVariableProfile().NumDecimals,
						spreadValue);
					return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsSpread_InventoryTotalUnits_Spread : clsSpread_BaseTotalNoCascade
        {
			public clsSpread_InventoryTotalUnits_Spread(BasePlanComputations aComputations, int aKey)
				 : base(aComputations, aKey, "InventoryTotalUnits Spread Spread")
			{
			}

            public override ArrayList GetSpreadToCellReferenceList(PlanCellReference aPlanCellRef)
            {
                ArrayList cellRefArray;
                try
                {
                    cellRefArray = new ArrayList();
                    cellRefArray.Add(BasePlanToolBox.GetOperandCell(null, eSetCellMode.Computation, aPlanCellRef, ((PlanVariables)BasePlanVariables).InventoryMarkdownUnits, false));
                    cellRefArray.Add(BasePlanToolBox.GetOperandCell(null, eSetCellMode.Computation, aPlanCellRef, ((PlanVariables)BasePlanVariables).InventoryRegularUnits, false));
                    return cellRefArray;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsSpread_SalesTotalUnits_PREAD_REG_CLEAR : clsSpread_BaseTotalNoCascade
        {
			public clsSpread_SalesTotalUnits_PREAD_REG_CLEAR(BasePlanComputations aComputations, int aKey)
				 : base(aComputations, aKey, "SalesTotalUnits PREAD REG CLEAR Spread")
			{
			}

            public override ArrayList GetSpreadToCellReferenceList(PlanCellReference aPlanCellRef)
            {
                ArrayList cellRefArray;
                try
                {
                    cellRefArray = new ArrayList();
                    cellRefArray.Add(BasePlanToolBox.GetOperandCell(null, eSetCellMode.Computation, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesMarkdownUnits, false));
                    cellRefArray.Add(BasePlanToolBox.GetOperandCell(null, eSetCellMode.Computation, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesRegularUnits, false));
                    return cellRefArray;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsSpread_SalesTotalUnits_SPREAD_DTC_STR : clsSpread_BaseTotalNoCascade
        {
			public clsSpread_SalesTotalUnits_SPREAD_DTC_STR(BasePlanComputations aComputations, int aKey)
				 : base(aComputations, aKey, "SalesTotalUnits SPREAD DTC STR Spread")
			{
			}

            public override ArrayList GetSpreadToCellReferenceList(PlanCellReference aPlanCellRef)
            {
                ArrayList cellRefArray;
                try
                {
                    cellRefArray = new ArrayList();
                    cellRefArray.Add(BasePlanToolBox.GetOperandCell(null, eSetCellMode.Computation, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesUnit, false));
                    cellRefArray.Add(BasePlanToolBox.GetOperandCell(null, eSetCellMode.Computation, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdUnit, false));
                    return cellRefArray;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsSpread_SalesTotalUnits_SpreadDifference : clsSpread_BaseTotalNoCascade
        {
			public clsSpread_SalesTotalUnits_SpreadDifference(BasePlanComputations aComputations, int aKey)
				 : base(aComputations, aKey, "SalesTotalUnits SpreadDifference Spread")
			{
			}

            public override ArrayList GetSpreadToCellReferenceList(PlanCellReference aPlanCellRef)
            {
                ArrayList cellRefArray;
                try
                {
                    cellRefArray = new ArrayList();
                    ComputationVariableProfile cfp = aPlanCellRef.GetCalcVariableProfile();
					if (cfp == ((PlanVariables)BasePlanVariables).TotSalesUnit)
					{
						cellRefArray.Add(BasePlanToolBox.GetOperandCell(null, eSetCellMode.Computation, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdUnit, false));
					}
					else if (cfp == ((PlanVariables)BasePlanVariables).DTCNetDmdUnit)
					{
						cellRefArray.Add(BasePlanToolBox.GetOperandCell(null, eSetCellMode.Computation, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesUnit, false));
					}

                    return cellRefArray;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
            public override eComputationFormulaReturnType Execute(PlanScheduleSpreadEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue = 0;
				double totValue = 0;
				double spreadValue = 0;
                try
                {
					newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, eGetCellMode.Current, aSetCellMode, aSchdEntry.PlanCellRef, aSchdEntry.PlanCellRef.isCellHidden);
					totValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).SalesTotalUnits, aSchdEntry.PlanCellRef.isCellHidden);
					spreadValue = totValue - newValue;
					BasePlanToolBox.ExecutePctContributionSpread(
						aSchdEntry,
						aSetCellMode,
						aSchdEntry.SpreadCellRefList,
						aSchdEntry.PlanCellRef.GetFormatTypeVariableProfile().NumDecimals,
						spreadValue);
					return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsSpread_TotEinvUnits_SPREAD_REG_CLEAR : clsSpread_BaseTotalNoCascade
        {
			public clsSpread_TotEinvUnits_SPREAD_REG_CLEAR(BasePlanComputations aComputations, int aKey)
				 : base(aComputations, aKey, "TotEinvUnits SPREAD REG CLEAR Spread")
			{
			}

            public override ArrayList GetSpreadToCellReferenceList(PlanCellReference aPlanCellRef)
            {
                ArrayList cellRefArray;
                try
                {
                    cellRefArray = new ArrayList();
                    cellRefArray.Add(BasePlanToolBox.GetOperandCell(null, eSetCellMode.Computation, aPlanCellRef, ((PlanVariables)BasePlanVariables).InventoryMarkdownUnits, false));
                    cellRefArray.Add(BasePlanToolBox.GetOperandCell(null, eSetCellMode.Computation, aPlanCellRef, ((PlanVariables)BasePlanVariables).InventoryRegularUnits, false));
                    return cellRefArray;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsSpread_TotSalesCostDlr_SPREAD : clsSpread_BaseTotalNoCascade
        {
			public clsSpread_TotSalesCostDlr_SPREAD(BasePlanComputations aComputations, int aKey)
				 : base(aComputations, aKey, "TotSalesCostDlr SPREAD Spread")
			{
			}

            public override ArrayList GetSpreadToCellReferenceList(PlanCellReference aPlanCellRef)
            {
                ArrayList cellRefArray;
                try
                {
                    cellRefArray = new ArrayList();
                    cellRefArray.Add(BasePlanToolBox.GetOperandCell(null, eSetCellMode.Computation, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesCostDlr, false));
                    cellRefArray.Add(BasePlanToolBox.GetOperandCell(null, eSetCellMode.Computation, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdCostDlr, false));
                    return cellRefArray;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsSpread_TotSalesCostDlr_SpreadDifference : clsSpread_BaseTotalNoCascade
        {
			public clsSpread_TotSalesCostDlr_SpreadDifference(BasePlanComputations aComputations, int aKey)
				 : base(aComputations, aKey, "TotSalesCostDlr SpreadDifference Spread")
			{
			}

            public override ArrayList GetSpreadToCellReferenceList(PlanCellReference aPlanCellRef)
            {
                ArrayList cellRefArray;
                try
                {
                    cellRefArray = new ArrayList();
                    ComputationVariableProfile cfp = aPlanCellRef.GetCalcVariableProfile();
					if (cfp == ((PlanVariables)BasePlanVariables).TotStrSalesCostDlr)
					{
						cellRefArray.Add(BasePlanToolBox.GetOperandCell(null, eSetCellMode.Computation, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdCostDlr, false));
					}
					else if (cfp == ((PlanVariables)BasePlanVariables).DTCNetDmdCostDlr)
					{
						cellRefArray.Add(BasePlanToolBox.GetOperandCell(null, eSetCellMode.Computation, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesCostDlr, false));
					}

                    return cellRefArray;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
            public override eComputationFormulaReturnType Execute(PlanScheduleSpreadEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue = 0;
				double totValue = 0;
				double spreadValue = 0;
                try
                {
					newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, eGetCellMode.Current, aSetCellMode, aSchdEntry.PlanCellRef, aSchdEntry.PlanCellRef.isCellHidden);
					totValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesCostDlr, aSchdEntry.PlanCellRef.isCellHidden);
					spreadValue = totValue - newValue;
					BasePlanToolBox.ExecutePctContributionSpread(
						aSchdEntry,
						aSetCellMode,
						aSchdEntry.SpreadCellRefList,
						aSchdEntry.PlanCellRef.GetFormatTypeVariableProfile().NumDecimals,
						spreadValue);
					return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsSpread_TotSalesDlr_SPREAD_DTC_STR : clsSpread_BaseTotalNoCascade
        {
			public clsSpread_TotSalesDlr_SPREAD_DTC_STR(BasePlanComputations aComputations, int aKey)
				 : base(aComputations, aKey, "TotSalesDlr SPREAD DTC STR Spread")
			{
			}

            public override ArrayList GetSpreadToCellReferenceList(PlanCellReference aPlanCellRef)
            {
                ArrayList cellRefArray;
                try
                {
                    cellRefArray = new ArrayList();
                    cellRefArray.Add(BasePlanToolBox.GetOperandCell(null, eSetCellMode.Computation, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesDlr, false));
                    cellRefArray.Add(BasePlanToolBox.GetOperandCell(null, eSetCellMode.Computation, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdDlr, false));
                    return cellRefArray;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsSpread_TotSalesDlr_SpreadDifference : clsSpread_BaseTotalNoCascade
        {
			public clsSpread_TotSalesDlr_SpreadDifference(BasePlanComputations aComputations, int aKey)
				 : base(aComputations, aKey, "TotSalesDlr SpreadDifference Spread")
			{
			}

            public override ArrayList GetSpreadToCellReferenceList(PlanCellReference aPlanCellRef)
            {
                ArrayList cellRefArray;
                try
                {
                    cellRefArray = new ArrayList();
                    ComputationVariableProfile cfp = aPlanCellRef.GetCalcVariableProfile();
					if (cfp == ((PlanVariables)BasePlanVariables).TotStrSalesDlr)
					{
						cellRefArray.Add(BasePlanToolBox.GetOperandCell(null, eSetCellMode.Computation, aPlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdDlr, false));
					}
					else if (cfp == ((PlanVariables)BasePlanVariables).DTCNetDmdDlr)
					{
						cellRefArray.Add(BasePlanToolBox.GetOperandCell(null, eSetCellMode.Computation, aPlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesDlr, false));
					}

                    return cellRefArray;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
            public override eComputationFormulaReturnType Execute(PlanScheduleSpreadEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue = 0;
				double totValue = 0;
				double spreadValue = 0;
                try
                {
					newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, eGetCellMode.Current, aSetCellMode, aSchdEntry.PlanCellRef, aSchdEntry.PlanCellRef.isCellHidden);
					totValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesDlr, aSchdEntry.PlanCellRef.isCellHidden);
					spreadValue = totValue - newValue;
					BasePlanToolBox.ExecutePctContributionSpread(
						aSchdEntry,
						aSetCellMode,
						aSchdEntry.SpreadCellRefList,
						aSchdEntry.PlanCellRef.GetFormatTypeVariableProfile().NumDecimals,
						spreadValue);
					return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_SalesTotalUnits_Custom_STORE : PlanFormulaProfile
        {
			public clsInit_SalesTotalUnits_Custom_STORE(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "SalesTotalUnits Custom STORE Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    if ( BasePlanToolBox.isStore(aSchdEntry.PlanCellRef) )
                    {
                        newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).SalesRegularUnits, aSchdEntry.PlanCellRef.isCellHidden) 
					+ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).SalesMarkdownUnits, aSchdEntry.PlanCellRef.isCellHidden) 
					+ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).SalesPromoUnits, aSchdEntry.PlanCellRef.isCellHidden) ;

                        BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    }
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_TotSalesDlr_STORE : PlanFormulaProfile
        {
			public clsInit_TotSalesDlr_STORE(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "TotSalesDlr STORE Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).SalesTotalUnits, aSchdEntry.PlanCellRef.isCellHidden) 
					* BasePlanToolBox.GetChainOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesAUR, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_TotSalesUnit : PlanFormulaProfile
        {
			public clsInit_TotSalesUnit(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "TotSalesUnit Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
                try
                {
                    if ( BasePlanToolBox.isStore(aSchdEntry.PlanCellRef) )
                    {
                        BasePlanToolBox.SetCellDisplayOnly(aSchdEntry.PlanCellRef, true) ;
                    }
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_TotSalesCostDlr_STORE : PlanFormulaProfile
        {
			public clsInit_TotSalesCostDlr_STORE(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "TotSalesCostDlr STORE Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    if ( BasePlanToolBox.isStore(aSchdEntry.PlanCellRef) )
                    {
                        newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).SalesTotalUnits, aSchdEntry.PlanCellRef.isCellHidden) 
					* BasePlanToolBox.GetChainOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesAUC, aSchdEntry.PlanCellRef.isCellHidden) ;

                        BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    }
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_GrossMarginTotDlr_STORE : PlanFormulaProfile
        {
			public clsInit_GrossMarginTotDlr_STORE(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "GrossMarginTotDlr STORE Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					- BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotSalesCostDlr, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_TotRecCostDlr_STORE : PlanFormulaProfile
        {
			public clsInit_TotRecCostDlr_STORE(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "TotRecCostDlr STORE Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    if ( BasePlanToolBox.isStore(aSchdEntry.PlanCellRef) )
                    {
                        newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotRecUnit, aSchdEntry.PlanCellRef.isCellHidden) 
					* BasePlanToolBox.GetChainOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).ReceiptAUCTot, aSchdEntry.PlanCellRef.isCellHidden) ;

                        BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    }
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsSpread_SalesRegPromoUnits_SPREAD_REG_PROMO : clsSpread_BaseTotalNoCascade
        {
			public clsSpread_SalesRegPromoUnits_SPREAD_REG_PROMO(BasePlanComputations aComputations, int aKey)
				 : base(aComputations, aKey, "SalesRegPromoUnits SPREAD REG PROMO Spread")
			{
			}

            public override ArrayList GetSpreadToCellReferenceList(PlanCellReference aPlanCellRef)
            {
                ArrayList cellRefArray;
                try
                {
                    cellRefArray = new ArrayList();
                    cellRefArray.Add(BasePlanToolBox.GetOperandCell(null, eSetCellMode.Computation, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesPromoUnits, false));
                    cellRefArray.Add(BasePlanToolBox.GetOperandCell(null, eSetCellMode.Computation, aPlanCellRef, ((PlanVariables)BasePlanVariables).SalesRegularUnits, false));
                    return cellRefArray;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsFormula_SalesTotalUnits_SUM_RPC_for_STORE : PlanFormulaProfile
        {
			public clsFormula_SalesTotalUnits_SUM_RPC_for_STORE(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "SalesTotalUnits SUM RPC for STORE Formula")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).SalesMarkdownUnits, aSchdEntry.PlanCellRef.isCellHidden) 
					+ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).SalesRegularUnits, aSchdEntry.PlanCellRef.isCellHidden) 
					+ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).SalesPromoUnits, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_SpaceConvPct : PlanFormulaProfile
        {
			public clsInit_SpaceConvPct(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "SpaceConvPct Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = (BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).LinearSpace, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).SquareSpace, aSchdEntry.PlanCellRef.isCellHidden) )
					* 100 ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_SpaceConvPctT1 : PlanFormulaProfile
        {
			public clsInit_SpaceConvPctT1(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "SpaceConvPctT1 Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = (BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).LinearSpaceT1, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).SquareSpaceT1, aSchdEntry.PlanCellRef.isCellHidden) )
					* 100 ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_SalesUperSqSpace : PlanFormulaProfile
        {
			public clsInit_SalesUperSqSpace(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "SalesUperSqSpace Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).SalesRegPromoUnits, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).SquareSpace, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_SalesUperSqSpaceT1 : PlanFormulaProfile
        {
			public clsInit_SalesUperSqSpaceT1(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "SalesUperSqSpaceT1 Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).SalesRegPromoUnitsT1, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).SquareSpaceT1, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_SalesUperLinearSpaceT1 : PlanFormulaProfile
        {
			public clsInit_SalesUperLinearSpaceT1(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "SalesUperLinearSpaceT1 Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).SalesRegPromoUnitsT1, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).LinearSpaceT1, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_SalesUperLinearSpace : PlanFormulaProfile
        {
			public clsInit_SalesUperLinearSpace(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "SalesUperLinearSpace Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).SalesRegPromoUnits, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).LinearSpace, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_TotStrSalesDlrperLinearSpace : PlanFormulaProfile
        {
			public clsInit_TotStrSalesDlrperLinearSpace(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "TotStrSalesDlrperLinearSpace Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).LinearSpace, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_TotStrSalesDlrperLinearSpaceT1 : PlanFormulaProfile
        {
			public clsInit_TotStrSalesDlrperLinearSpaceT1(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "TotStrSalesDlrperLinearSpaceT1 Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).SalesDlrT1, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).LinearSpaceT1, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_TotStrSalesDlrperSqSpace : PlanFormulaProfile
        {
			public clsInit_TotStrSalesDlrperSqSpace(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "TotStrSalesDlrperSqSpace Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).SquareSpace, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_TotStrSalesDlrperSqSpaceT1 : PlanFormulaProfile
        {
			public clsInit_TotStrSalesDlrperSqSpaceT1(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "TotStrSalesDlrperSqSpaceT1 Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).SalesDlrT1, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).SquareSpaceT1, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_TotStrSalesCDlrperSqSpace : PlanFormulaProfile
        {
			public clsInit_TotStrSalesCDlrperSqSpace(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "TotStrSalesCDlrperSqSpace Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesCostDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).SquareSpace, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_TotStrSalesCDlrperSqSpaceT1 : PlanFormulaProfile
        {
			public clsInit_TotStrSalesCDlrperSqSpaceT1(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "TotStrSalesCDlrperSqSpaceT1 Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).TotStrSalesCostDlrT1, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).SquareSpaceT1, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_TotStrSalesCDlrperLinearSpace : PlanFormulaProfile
        {
			public clsInit_TotStrSalesCDlrperLinearSpace(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "TotStrSalesCDlrperLinearSpace Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).TotStrSalesCostDlr, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).LinearSpace, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_TotStrSalesCDlrperLinearSpaceT1 : PlanFormulaProfile
        {
			public clsInit_TotStrSalesCDlrperLinearSpaceT1(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "TotStrSalesCDlrperLinearSpaceT1 Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).TotStrSalesCostDlrT1, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).LinearSpaceT1, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_DensityU : PlanFormulaProfile
        {
			public clsInit_DensityU(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "DensityU Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).InventoryRegularUnits, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).FloorSpace, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_DensityUT1 : PlanFormulaProfile
        {
			public clsInit_DensityUT1(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "DensityUT1 Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).InventoryRegularUnitsT2, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).FloorSpaceT1, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_SalesperSpaceU : PlanFormulaProfile
        {
			public clsInit_SalesperSpaceU(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "SalesperSpaceU Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).SalesRegPromoUnits, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).FloorSpace, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_SalesperSpaceUT1 : PlanFormulaProfile
        {
			public clsInit_SalesperSpaceUT1(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "SalesperSpaceUT1 Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).SalesRegPromoUnitsT1, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).FloorSpaceT1, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_DTCPlacedOrdersDlr : PlanFormulaProfile
        {
			public clsInit_DTCPlacedOrdersDlr(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "DTCPlacedOrdersDlr Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCNoOfOrders, aSchdEntry.PlanCellRef.isCellHidden) 
					* BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCNetDmdAUR, aSchdEntry.PlanCellRef.isCellHidden) ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_DTCConvPct : PlanFormulaProfile
        {
			public clsInit_DTCConvPct(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "DTCConvPct Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = (BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCTransactions, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).DTCVisits, aSchdEntry.PlanCellRef.isCellHidden) )
					* 100 ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsInit_DTCConvPctT1 : PlanFormulaProfile
        {
			public clsInit_DTCConvPctT1(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "DTCConvPctT1 Init")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = (BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).DTCTransactionsT1, aSchdEntry.PlanCellRef.isCellHidden) 
					/ BasePlanToolBox.GetTimeTotalOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanTimeTotalVariables)BasePlanTimeTotalVariables).DTCVisitsT1, aSchdEntry.PlanCellRef.isCellHidden) )
					* 100 ;

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
        private class clsFormula_LinearSpace_Calc_Conv : PlanFormulaProfile
        {
			public clsFormula_LinearSpace_Calc_Conv(BasePlanComputations aBasePlanComputations, int aKey)
				 : base(aBasePlanComputations, aKey, "LinearSpace Calc Conv Formula")
			{
			}

            public override eComputationFormulaReturnType Execute(PlanScheduleFormulaEntry aSchdEntry, eGetCellMode aGetCellMode, eSetCellMode aSetCellMode)
            {
				double newValue;
                try
                {
                    newValue = BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).SquareSpace, aSchdEntry.PlanCellRef.isCellHidden) 
					* ( BasePlanToolBox.GetOperandCellValue(aSchdEntry, aGetCellMode, aSetCellMode, aSchdEntry.PlanCellRef, ((PlanVariables)BasePlanVariables).SpaceConvPct, aSchdEntry.PlanCellRef.isCellHidden) 
					/ 100 );

                    BasePlanToolBox.SetCellValue(aSetCellMode, aSchdEntry.PlanCellRef, newValue);
                    return eComputationFormulaReturnType.Successful;
                }
                catch (Exception exc)
                {
                    string message = exc.ToString();
                    throw;
                }
            }
        }
    }
    /// <summary>
    /// This class is where the variable initialization routines are defined.
    /// </summary>
    /// <remarks>
    /// This class is where the variable initialization routines are defined.
    /// </remarks>
    public class DefaultPlanVariableInitialization : BasePlanVariableInitialization
    {
        public DefaultPlanVariableInitialization(BasePlanComputations aBasePlanComputations) : 
                base(aBasePlanComputations)
        {
        }
        protected PlanVariables DefaultPlanVariables
        {
            get
            {
                return (PlanVariables)BasePlanVariables;
            }
        }
        protected PlanTimeTotalVariables DefaultPlanTimeTotalVariables
        {
            get
            {
                return (PlanTimeTotalVariables)BasePlanTimeTotalVariables;
            }
        }
        protected DefaultPlanChangeMethods DefaultPlanChangeMethods
        {
            get
            {
                return (DefaultPlanChangeMethods)BasePlanChangeMethods;
            }
        }
        protected DefaultPlanFormulasAndSpreads DefaultPlanFormulasAndSpreads
        {
            get
            {
                return (DefaultPlanFormulasAndSpreads)BasePlanFormulasAndSpreads;
            }
        }
        public override void ChainBasisDetail(PlanCube aPlanCube)
        {
            try
            {
                base.ChainBasisDetail(aPlanCube);
                aPlanCube.OverrideInitRule(DefaultPlanVariables.ForwardWOSRegPromo, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_ForwardWOSRegPromo_Custom);
					aPlanCube.AddRule(DefaultPlanVariables.ReceiptTotalUnits, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.ReceiptMarkdownUnits, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.ReceiptRegularUnits, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesStockRatioTotal, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesStockRatioMarkdown, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesStockRatioRegPromo, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.OverrideInitRule(DefaultPlanVariables.SalesTotalUnits, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_SalesTotalUnits_Custom);
					aPlanCube.AddRule(DefaultPlanVariables.SalesMarkdownUnits, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesPromoUnits, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.OverrideInitRule(DefaultPlanVariables.SalesRegPromoUnits, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_SalesRegPromoUnits_Custom);
					aPlanCube.AddRule(DefaultPlanVariables.SalesRegularUnits, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctTotal, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctMarkdown, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctRegPromo, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.OverrideInitRule(DefaultPlanVariables.InventoryTotalUnits, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_InventoryTotalUnits_Custom);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryMarkdownUnits, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryRegularUnits, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotRecCostDlr, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Formula_TotRecCostDlr_FLOW, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.AdjUnitsTot, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.WOSTotal, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.WOSRegPromo, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.OverrideInitRule(DefaultPlanVariables.ForwardWOSTotal, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_ForwardWOSTotal_Custom);
					aPlanCube.AddRule(DefaultPlanVariables.TotSalesAUR, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotSalesAUR, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.NewStores, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.OpenStores, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.AvgStrSlsUnit, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_AvgStrSlsUnit, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.AvgStrSlsDlr, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_AvgStrSlsDlr, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrAvgINVUnit, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotStrAvgINVUnit, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotFWOSUnit, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotFWOSUnit, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruUnitPctTot, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_SellThruUnitPctTot, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCBOPct, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_DTCBOPct, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCCancelPct, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_DTCCancelPct, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.AdjCostDlrTot, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DiscountDlr, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.AfterDiscountDlr, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotFreightCostDlr, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.AfterDiscGMDlr, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_AfterDiscGMDlr, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.VATDlr, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.ConvertedSalesDlr, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.SaleswithoutVATDlr, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrAvgEndINVUnit, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotStrAvgEndINVUnit, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCCancelCostDlr, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCGrossDmdDlr, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCBOUnit, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCGrossDmdCostDlr, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCCancelDlr, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCBODlr, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCBOCostDlr, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotSalesDlr, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotSalesDlr, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotSalesCostDlr, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotSalesCostDlr, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotSalesUnit, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotSalesUnit, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.GrossMarginPctStr, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_GrossMarginPctStr, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.GrossMarginTotStr, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.CompSlsDlr, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.NonCompSlsDlr, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesCostDlr, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesDlr, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.GrossMarginTotDlr, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_GrossMarginTotDlr, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.GrossMarginPctTot, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_GrossMarginPctTot, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.OTBCostDlr, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_OTBCostDlr, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.OTBUnit, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_OTBUnit, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.OnOrderDlr, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotRecUnit, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Formula_TotRecUnit_FLOW, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.OnOrderUnit, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.OTBCostDlrCum, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_OTBCostDlrCum, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.OTBUnitCum, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_OTBUnitCum, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.Commit1Unit, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.Commit2Unit, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.Commit3Unit, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.CurrXchgPct, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_CurrXchgPct, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.VATPct, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_VATPct, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DiscountPct, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_DiscountPct, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotEinvCostDlr, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotEinvCostDlr, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotEinvUnits, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotEinvUnits, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.AdjUntiPctTot, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_AdjUntiPctTot, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotBinvCostDlr, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.ShrinkUnitsTot, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCRtnUnit, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCCancelUnit, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.ShrinkCostDlrTot, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCGrsDmdGMPct, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_DTCGrsDmdGMPct, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCGrossDmdUnit, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNetDmdUnit, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Formula_DTCNetDmdUnit_DIFF, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNetDmdDlr, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Formula_DTCNetDmdDlr_DIFF, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNetDmdCostDlr, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Formula_DTCNetDmdCostDlr_DIFF, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNetDmdPct, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_DTCNetDmdPct, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNetDmdAUR, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_DTCNetDmdAUR, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNetDmdAUC, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_DTCNetDmdAUC, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNetDmdGMDlr, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNetDmdGMPct, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_DTCNetDmdGMPct, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCRtnDlr, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCRtnCostDlr, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCRtnPct, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_DTCRtnPct, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCAvgOrder, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_DTCAvgOrder, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCFWOSUnit, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_DTCFWOSUnit, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNoOfOrders, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCVisits, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCPlacement, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCSlsStkRatio, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_DTCSlsStkRatio, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCSellThru, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_DTCSellThru, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCSpace, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.FreightCostPerUnit, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Formula_FreightCostPerUnit_Calc, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.SquareSpace, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.LinearSpace, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.FloorSpace, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCTransactions, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.SpaceConvPct, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_SpaceConvPct, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesUperSqSpace, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_SalesUperSqSpace, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesUperLinearSpace, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_SalesUperLinearSpace, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DensityU, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_DensityU, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesperSpaceU, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_SalesperSpaceU, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesCDlrperSqSpace, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotStrSalesCDlrperSqSpace, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesDlrperSqSpace, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotStrSalesDlrperSqSpace, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesCDlrperLinearSpace, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotStrSalesCDlrperLinearSpace, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesDlrperLinearSpace, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotStrSalesDlrperLinearSpace, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCPlacedOrdersDlr, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_DTCPlacedOrdersDlr, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCConvPct, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_DTCConvPct, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesUnitPctTTL, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotStrSalesUnitPctTTL, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesCostDlrPctTTL, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotStrSalesCostDlrPctTTL, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotDTCSalesUnitPctTTL, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotDTCSalesUnitPctTTL, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotDTCSalesCostDlrPctTTL, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotDTCSalesCostDlrPctTTL, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.ShrinkPctTot, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_ShrinkPctTot, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCGrossDmdGMDlr, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotIMUPct, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotIMUPct, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesAUC, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotStrSalesAUC, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.AfterDiscountAUR, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_AfterDiscountAUR, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCGrossDmdAUR, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_DTCGrossDmdAUR, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCGrossDmdAUC, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_DTCGrossDmdAUC, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.Commit2AUC, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_Commit2AUC, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.Commit1AUC, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_Commit1AUC, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.Commit3AUC, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_Commit3AUC, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.OnOrderAUC, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_OnOrderAUC, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.OnOrderAUR, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_OnOrderAUR, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.ReceiptAUCTot, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_ReceiptAUCTot, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotSalesAUC, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotSalesAUC, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesAUR, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotStrSalesAUR, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.CompPctTtl, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_CompPctTtl, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.NonCompPctTtl, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_NonCompPctTtl, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotBinvAUC, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotBinvAUC, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotEinvAUC, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotEinvAUC, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.Commit3CostDlr, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.Commit2CostDlr, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.Commit1CostDlr, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.OnOrderCostDlr, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.OverrideInitRule(DefaultPlanVariables.ForwardWOSMarkdown, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_ForwardWOSMarkdown_Custom);
            }
            catch (Exception exc)
            {
                string message = exc.ToString();
                throw;
            }
        }
        public override void ChainBasisWeekDetail(PlanCube aPlanCube)
        {
            try
            {
                base.ChainBasisWeekDetail(aPlanCube);
                ChainTimeDetailPctChange(aPlanCube);
                ChainTimeDetailPctToTimePeriod(aPlanCube);
                ChainTimeDetailPctToLowLevelTotal(aPlanCube);
                ChainTimeDetailDifference(aPlanCube);
                ChainTimeDetailPctChangeToPlan(aPlanCube);
                aPlanCube.AddRule(DefaultPlanVariables.TotRecCostDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.AdjUnitsTot, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.WOSTotal, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.WOSRegPromo, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSTotal, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_ForwardWOSTotal_Custom, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSRegPromo, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.ReceiptTotalUnits, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.ReceiptMarkdownUnits, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.ReceiptRegularUnits, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesStockRatioTotal, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesStockRatioMarkdown, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesStockRatioRegPromo, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesTotalUnits, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesMarkdownUnits, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesPromoUnits, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesRegPromoUnits, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_SalesRegPromoUnits_Custom, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesRegularUnits, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctTotal, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctMarkdown, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctRegPromo, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryTotalUnits, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryMarkdownUnits, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryRegularUnits, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotSalesAUR, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotSalesAUR, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruUnitPctTot, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_SellThruUnitPctTot, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.NewStores, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.OpenStores, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.AvgStrSlsUnit, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_AvgStrSlsUnit, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.AvgStrSlsDlr, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_AvgStrSlsDlr, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrAvgINVUnit, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotStrAvgINVUnit, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotFWOSUnit, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotFWOSUnit, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCBOPct, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_DTCBOPct, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCCancelPct, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_DTCCancelPct, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.AdjCostDlrTot, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DiscountDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.AfterDiscountDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotFreightCostDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.AfterDiscGMDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.VATDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.Commit3CostDlr, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.ConvertedSalesDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.SaleswithoutVATDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrAvgEndINVUnit, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.Commit1CostDlr, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.Commit2CostDlr, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCCancelDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCBOUnit, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCGrossDmdCostDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCCancelCostDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCGrossDmdDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCBODlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCBOCostDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotSalesDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotSalesCostDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotSalesUnit, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.GrossMarginPctStr, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_GrossMarginPctStr, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.GrossMarginTotStr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.CompSlsDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.NonCompSlsDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.GrossMarginTotDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.GrossMarginPctTot, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_GrossMarginPctTot, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesCostDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotRecUnit, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.OTBCostDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.OTBUnit, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.OnOrderDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.OnOrderUnit, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.OTBCostDlrCum, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.OTBUnitCum, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.Commit3Unit, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.Commit2Unit, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.Commit1Unit, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotEinvCostDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DiscountPct, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_DiscountPct, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.CurrXchgPct, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_CurrXchgPct, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.VATPct, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_VATPct, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotEinvUnits, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.AdjUntiPctTot, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_AdjUntiPctTot, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotBinvCostDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.ShrinkUnitsTot, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCRtnUnit, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCCancelUnit, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCGrossDmdUnit, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCGrossDmdGMDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCGrsDmdGMPct, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_DTCGrsDmdGMPct, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.ShrinkCostDlrTot, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNetDmdUnit, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNetDmdDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNetDmdCostDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNetDmdPct, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_DTCNetDmdPct, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNetDmdAUR, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_DTCNetDmdAUR, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNetDmdAUC, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_DTCNetDmdAUC, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNetDmdGMDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNetDmdGMPct, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_DTCNetDmdGMPct, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCRtnDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCRtnCostDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCRtnPct, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_DTCRtnPct, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCAvgOrder, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCFWOSUnit, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_DTCFWOSUnit, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNoOfOrders, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCVisits, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCPlacement, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCSlsStkRatio, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_DTCSlsStkRatio, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCSellThru, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_DTCSellThru, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCSpace, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.FreightCostPerUnit, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.SquareSpace, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_AvgDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.LinearSpace, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_AvgDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.FloorSpace, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_AvgDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCTransactions, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.SpaceConvPct, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesUperSqSpace, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesUperLinearSpace, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DensityU, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesperSpaceU, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesCDlrperSqSpace, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesDlrperSqSpace, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesCDlrperLinearSpace, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesDlrperLinearSpace, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCPlacedOrdersDlr, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCConvPct, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesUnitPctTTL, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotStrSalesUnitPctTTL, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesCostDlrPctTTL, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotStrSalesCostDlrPctTTL, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotDTCSalesUnitPctTTL, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotDTCSalesUnitPctTTL, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotDTCSalesCostDlrPctTTL, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotDTCSalesCostDlrPctTTL, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.ShrinkPctTot, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_ShrinkPctTot, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesAUR, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotStrSalesAUR, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotSalesAUC, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotSalesAUC, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesAUC, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotStrSalesAUC, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.CompPctTtl, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_CompPctTtl, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.NonCompPctTtl, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_NonCompPctTtl, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotBinvAUC, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotBinvAUC, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotEinvAUC, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotEinvAUC, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.ReceiptAUCTot, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_ReceiptAUCTot, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.OnOrderAUC, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_OnOrderAUC, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.Commit1AUC, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.Commit3AUC, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.Commit2AUC, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.OnOrderAUR, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_OnOrderAUR, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesStockRatioTotal, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctTotal, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotIMUPct, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotIMUPct, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCGrossDmdAUR, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_DTCGrossDmdAUR, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCGrossDmdAUC, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_DTCGrossDmdAUC, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.AfterDiscountAUR, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_AfterDiscountAUR, null, null);
            }
            catch (Exception exc)
            {
                string message = exc.ToString();
                throw;
            }
        }
        private void ChainTimeDetailPctChangeToPlan(PlanCube aPlanCube)
        {
            try
            {
                aPlanCube.AddRule(DefaultPlanVariables.WOSTotal, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.WOSRegPromo, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSTotal, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSRegPromo, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.ReceiptTotalUnits, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.ReceiptMarkdownUnits, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.ReceiptRegularUnits, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesStockRatioTotal, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesStockRatioMarkdown, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesStockRatioRegPromo, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesTotalUnits, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesMarkdownUnits, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesPromoUnits, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesRegPromoUnits, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesRegularUnits, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctTotal, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctMarkdown, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctRegPromo, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryTotalUnits, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryMarkdownUnits, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryRegularUnits, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotRecCostDlr, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.AdjUnitsTot, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotSalesAUR, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotEinvUnits, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.AdjUntiPctTot, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.NewStores, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.OpenStores, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.AvgStrSlsUnit, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.AvgStrSlsDlr, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrAvgINVUnit, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotFWOSUnit, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruUnitPctTot, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCBOPct, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCCancelPct, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.AdjCostDlrTot, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.DiscountPct, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.DiscountDlr, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.AfterDiscountDlr, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotEinvCostDlr, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.Commit3AUC, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.Commit3CostDlr, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotFreightCostDlr, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.AfterDiscGMDlr, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.VATPct, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.VATDlr, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.CurrXchgPct, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.ConvertedSalesDlr, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.SaleswithoutVATDlr, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrAvgEndINVUnit, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotEinvAUC, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.Commit1CostDlr, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.Commit1AUC, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.Commit2CostDlr, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.Commit2AUC, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCCancelDlr, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCGrossDmdDlr, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCBOUnit, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCCancelCostDlr, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCBODlr, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCBOCostDlr, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCGrossDmdCostDlr, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotSalesDlr, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotSalesCostDlr, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotSalesUnit, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.GrossMarginPctStr, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.GrossMarginTotStr, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.CompSlsDlr, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.NonCompSlsDlr, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesDlr, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.GrossMarginTotDlr, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.GrossMarginPctTot, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesCostDlr, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.OTBCostDlr, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.OTBUnit, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.OnOrderDlr, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.OnOrderUnit, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotRecUnit, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.OTBCostDlrCum, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.OTBUnitCum, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.Commit3Unit, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.Commit2Unit, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.Commit1Unit, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.ShrinkCostDlrTot, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.FreightCostPerUnit, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCGrossDmdGMDlr, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCGrsDmdGMPct, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.SquareSpace, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.LinearSpace, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.FloorSpace, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCTransactions, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.SpaceConvPct, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesUperSqSpace, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesUperLinearSpace, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.DensityU, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesperSpaceU, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesCDlrperSqSpace, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesDlrperSqSpace, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesCDlrperLinearSpace, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesDlrperLinearSpace, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCPlacedOrdersDlr, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCConvPct, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCRtnUnit, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCGrossDmdUnit, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCCancelUnit, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNetDmdUnit, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNetDmdDlr, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNetDmdCostDlr, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNetDmdPct, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNetDmdAUR, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNetDmdAUC, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNetDmdGMDlr, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNetDmdGMPct, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCRtnDlr, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCRtnCostDlr, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCRtnPct, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCAvgOrder, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCFWOSUnit, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNoOfOrders, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCVisits, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCPlacement, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCSlsStkRatio, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCSellThru, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCSpace, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.ShrinkUnitsTot, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.ShrinkPctTot, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesUnitPctTTL, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesCostDlrPctTTL, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotDTCSalesUnitPctTTL, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotDTCSalesCostDlrPctTTL, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotIMUPct, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesAUC, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCGrossDmdAUR, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCGrossDmdAUC, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.AfterDiscountAUR, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
            }
            catch (Exception exc)
            {
                string message = exc.ToString();
                throw;
            }
        }
        public override void ChainPlanWeekDetail(PlanCube aPlanCube)
        {
            try
            {
                base.ChainPlanWeekDetail(aPlanCube);
                ChainTimeDetailPctChange(aPlanCube);
                ChainTimeDetailPctToTimePeriod(aPlanCube);
                ChainTimeDetailPctToLowLevelTotal(aPlanCube);
                ChainTimeDetailDifference(aPlanCube);
                ChainTimeDetailPctChangeToPlan(aPlanCube);
                aPlanCube.OverrideInitRule(DefaultPlanVariables.ForwardWOSRegPromo, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_ForwardWOSRegPromo_Custom);
					aPlanCube.AddRule(DefaultPlanVariables.ReceiptTotalUnits, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.ReceiptMarkdownUnits, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.ReceiptRegularUnits, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesStockRatioTotal, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesStockRatioMarkdown, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesStockRatioRegPromo, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.OverrideInitRule(DefaultPlanVariables.SalesTotalUnits, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_SalesTotalUnits_Custom);
					aPlanCube.OverridePrimaryChangeRule(DefaultPlanVariables.SalesTotalUnits, BasePlanQuantityVariables.Value, DefaultPlanChangeMethods.Change_SalesTotalUnits_Custom);
					aPlanCube.AddRule(DefaultPlanVariables.SalesMarkdownUnits, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesPromoUnits, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.OverrideInitRule(DefaultPlanVariables.SalesRegPromoUnits, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_SalesRegPromoUnits_Custom);
					aPlanCube.OverridePrimaryChangeRule(DefaultPlanVariables.SalesRegPromoUnits, BasePlanQuantityVariables.Value, DefaultPlanChangeMethods.Change_SalesRegPromoUnits_Custom);
					aPlanCube.OverridePrimaryChangeRule(DefaultPlanVariables.SalesRegularUnits, BasePlanQuantityVariables.Value, DefaultPlanChangeMethods.Change_SalesRegularUnits_Custom);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctTotal, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctMarkdown, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctRegPromo, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.OverrideInitRule(DefaultPlanVariables.InventoryTotalUnits, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_InventoryTotalUnits_Custom);
					aPlanCube.OverridePrimaryChangeRule(DefaultPlanVariables.InventoryTotalUnits, BasePlanQuantityVariables.Value, DefaultPlanChangeMethods.Change_InventoryTotalUnits_Custom);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryMarkdownUnits, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.OverridePrimaryChangeRule(DefaultPlanVariables.InventoryRegularUnits, BasePlanQuantityVariables.Value, DefaultPlanChangeMethods.Change_InventoryRegularUnits_Custom);
					aPlanCube.AddRule(DefaultPlanVariables.TotRecCostDlr, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Formula_TotRecCostDlr_FLOW, DefaultPlanChangeMethods.Change_TotRecCostDlr, null);
					aPlanCube.AddRule(DefaultPlanVariables.AdjUnitsTot, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.WOSTotal, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.WOSRegPromo, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.OverrideInitRule(DefaultPlanVariables.ForwardWOSTotal, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_ForwardWOSTotal_Custom);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruUnitPctTot, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_SellThruUnitPctTot, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotSalesAUR, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotSalesAUR, DefaultPlanChangeMethods.Change_TotSalesAUR, null);
					aPlanCube.AddRule(DefaultPlanVariables.NewStores, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.OpenStores, BasePlanQuantityVariables.Value, DefaultPlanChangeMethods.Change_OpenStores, null);
					aPlanCube.AddRule(DefaultPlanVariables.AvgStrSlsUnit, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_AvgStrSlsUnit, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.AvgStrSlsDlr, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_AvgStrSlsDlr, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrAvgINVUnit, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotStrAvgINVUnit, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotFWOSUnit, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotFWOSUnit, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCBOPct, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_DTCBOPct, DefaultPlanChangeMethods.Change_DTCBOPct, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCCancelPct, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_DTCCancelPct, DefaultPlanChangeMethods.Change_DTCCancelPct, null);
					aPlanCube.AddRule(DefaultPlanVariables.AdjCostDlrTot, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DiscountDlr, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.AfterDiscountDlr, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotFreightCostDlr, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.AfterDiscGMDlr, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_AfterDiscGMDlr, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.VATDlr, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.ConvertedSalesDlr, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.SaleswithoutVATDlr, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrAvgEndINVUnit, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotStrAvgEndINVUnit, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCCancelDlr, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCCancelCostDlr, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCGrossDmdDlr, BasePlanQuantityVariables.Value, DefaultPlanChangeMethods.Change_DTCGrossDmdDlr, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCBOUnit, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCGrossDmdCostDlr, BasePlanQuantityVariables.Value, DefaultPlanChangeMethods.Change_DTCGrossDmdCostDlr, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCBODlr, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCBOCostDlr, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotSalesDlr, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotSalesDlr, DefaultPlanChangeMethods.Change_TotSalesDlr, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotSalesCostDlr, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotSalesCostDlr, DefaultPlanChangeMethods.Change_TotSalesCostDlr, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotSalesUnit, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotSalesUnit, DefaultPlanChangeMethods.Change_TotSalesUnit, null);
					aPlanCube.AddRule(DefaultPlanVariables.GrossMarginPctStr, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_GrossMarginPctStr, DefaultPlanChangeMethods.Change_GrossMarginPctStr, null);
					aPlanCube.AddRule(DefaultPlanVariables.GrossMarginTotStr, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.CompSlsDlr, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.NonCompSlsDlr, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.GrossMarginTotDlr, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_GrossMarginTotDlr, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.GrossMarginPctTot, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_GrossMarginPctTot, DefaultPlanChangeMethods.Change_GrossMarginPctTot, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesCostDlr, BasePlanQuantityVariables.Value, DefaultPlanChangeMethods.Change_TotStrSalesCostDlr, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesDlr, BasePlanQuantityVariables.Value, DefaultPlanChangeMethods.Change_TotStrSalesDlr, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotRecUnit, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Formula_TotRecUnit_FLOW, DefaultPlanChangeMethods.Change_TotRecUnit, null);
					aPlanCube.AddRule(DefaultPlanVariables.OTBCostDlr, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_OTBCostDlr, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.OTBUnit, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_OTBUnit, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.OnOrderDlr, BasePlanQuantityVariables.Value, DefaultPlanChangeMethods.Change_OnOrderDlr, null);
					aPlanCube.AddRule(DefaultPlanVariables.OTBCostDlrCum, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_OTBCostDlrCum, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.OTBUnitCum, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_OTBUnitCum, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.OnOrderUnit, BasePlanQuantityVariables.Value, DefaultPlanChangeMethods.Change_OnOrderUnit, null);
					aPlanCube.AddRule(DefaultPlanVariables.Commit1Unit, BasePlanQuantityVariables.Value, DefaultPlanChangeMethods.Change_Commit1Unit, null);
					aPlanCube.AddRule(DefaultPlanVariables.Commit2Unit, BasePlanQuantityVariables.Value, DefaultPlanChangeMethods.Change_Commit2Unit, null);
					aPlanCube.AddRule(DefaultPlanVariables.Commit3Unit, BasePlanQuantityVariables.Value, DefaultPlanChangeMethods.Change_Commit3Unit, null);
					aPlanCube.AddRule(DefaultPlanVariables.CurrXchgPct, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_CurrXchgPct, DefaultPlanChangeMethods.Change_CurrXchgPct, null);
					aPlanCube.AddRule(DefaultPlanVariables.VATPct, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_VATPct, DefaultPlanChangeMethods.Change_VATPct, null);
					aPlanCube.AddRule(DefaultPlanVariables.DiscountPct, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_DiscountPct, DefaultPlanChangeMethods.Change_DiscountPct, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotEinvCostDlr, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotEinvCostDlr, DefaultPlanChangeMethods.Change_TotEinvCostDlr, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotEinvUnits, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotEinvUnits, DefaultPlanChangeMethods.Change_TotEinvUnits, null);
					aPlanCube.AddRule(DefaultPlanVariables.AdjUntiPctTot, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_AdjUntiPctTot, DefaultPlanChangeMethods.Change_AdjUntiPctTot, null);
					aPlanCube.AddRule(DefaultPlanVariables.ShrinkUnitsTot, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCCancelUnit, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCRtnUnit, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCGrossDmdGMDlr, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCGrsDmdGMPct, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_DTCGrsDmdGMPct, DefaultPlanChangeMethods.Change_DTCGrsDmdGMPct, null);
					aPlanCube.AddRule(DefaultPlanVariables.ShrinkCostDlrTot, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCGrossDmdUnit, BasePlanQuantityVariables.Value, DefaultPlanChangeMethods.Change_DTCGrossDmdUnit, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNetDmdUnit, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Formula_DTCNetDmdUnit_DIFF, DefaultPlanChangeMethods.Change_DTCNetDmdUnit, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNetDmdDlr, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Formula_DTCNetDmdDlr_DIFF, DefaultPlanChangeMethods.Change_DTCNetDmdDlr, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNetDmdCostDlr, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Formula_DTCNetDmdCostDlr_DIFF, DefaultPlanChangeMethods.Change_DTCNetDmdCostDlr, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNetDmdPct, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_DTCNetDmdPct, DefaultPlanChangeMethods.Change_DTCNetDmdPct, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNetDmdAUR, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_DTCNetDmdAUR, DefaultPlanChangeMethods.Change_DTCNetDmdAUR, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNetDmdAUC, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_DTCNetDmdAUC, DefaultPlanChangeMethods.Change_DTCNetDmdAUC, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNetDmdGMDlr, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNetDmdGMPct, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_DTCNetDmdGMPct, DefaultPlanChangeMethods.Change_DTCNetDmdGMPct, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCRtnDlr, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCRtnCostDlr, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCRtnPct, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_DTCRtnPct, DefaultPlanChangeMethods.Change_DTCRtnPct, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCAvgOrder, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_DTCAvgOrder, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCFWOSUnit, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_DTCFWOSUnit, DefaultPlanChangeMethods.Change_DTCFWOSUnit, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNoOfOrders, BasePlanQuantityVariables.Value, DefaultPlanChangeMethods.Change_DTCNoOfOrders, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCVisits, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCPlacement, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCSlsStkRatio, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_DTCSlsStkRatio, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCSellThru, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_DTCSellThru, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCSpace, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.FreightCostPerUnit, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Formula_FreightCostPerUnit_Calc, DefaultPlanChangeMethods.Change_FreightCostPerUnit, null);
					aPlanCube.AddRule(DefaultPlanVariables.SquareSpace, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.LinearSpace, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.FloorSpace, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCTransactions, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.SpaceConvPct, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_SpaceConvPct, DefaultPlanChangeMethods.Change_SpaceConvPct, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesUperSqSpace, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_SalesUperSqSpace, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesUperLinearSpace, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_SalesUperLinearSpace, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DensityU, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_DensityU, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesperSpaceU, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_SalesperSpaceU, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesCDlrperSqSpace, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotStrSalesCDlrperSqSpace, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesDlrperSqSpace, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotStrSalesDlrperSqSpace, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesCDlrperLinearSpace, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotStrSalesCDlrperLinearSpace, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesDlrperLinearSpace, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotStrSalesDlrperLinearSpace, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCPlacedOrdersDlr, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_DTCPlacedOrdersDlr, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCConvPct, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_DTCConvPct, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesUnitPctTTL, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotStrSalesUnitPctTTL, DefaultPlanChangeMethods.Change_TotStrSalesUnitPctTTL, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesCostDlrPctTTL, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotStrSalesCostDlrPctTTL, DefaultPlanChangeMethods.Change_TotStrSalesCostDlrPctTTL, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotDTCSalesUnitPctTTL, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotDTCSalesUnitPctTTL, DefaultPlanChangeMethods.Change_TotDTCSalesUnitPctTTL, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotDTCSalesCostDlrPctTTL, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotDTCSalesCostDlrPctTTL, DefaultPlanChangeMethods.Change_TotDTCSalesCostDlrPctTTL, null);
					aPlanCube.AddRule(DefaultPlanVariables.ShrinkPctTot, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_ShrinkPctTot, DefaultPlanChangeMethods.Change_ShrinkPctTot, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotIMUPct, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotIMUPct, DefaultPlanChangeMethods.Change_TotIMUPct, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesAUC, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotStrSalesAUC, DefaultPlanChangeMethods.Change_TotStrSalesAUC, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCGrossDmdAUR, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_DTCGrossDmdAUR, DefaultPlanChangeMethods.Change_DTCGrossDmdAUR, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCGrossDmdAUC, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_DTCGrossDmdAUC, DefaultPlanChangeMethods.Change_DTCGrossDmdAUC, null);
					aPlanCube.AddRule(DefaultPlanVariables.AfterDiscountAUR, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_AfterDiscountAUR, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.Commit2AUC, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_Commit2AUC, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.Commit1AUC, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_Commit1AUC, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.Commit3AUC, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_Commit3AUC, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.OnOrderAUC, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_OnOrderAUC, DefaultPlanChangeMethods.Change_OnOrderAUC, null);
					aPlanCube.AddRule(DefaultPlanVariables.OnOrderAUR, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_OnOrderAUR, DefaultPlanChangeMethods.Change_OnOrderAUR, null);
					aPlanCube.AddRule(DefaultPlanVariables.ReceiptAUCTot, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_ReceiptAUCTot, DefaultPlanChangeMethods.Change_ReceiptAUCTot, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotSalesAUC, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotSalesAUC, DefaultPlanChangeMethods.Change_TotSalesAUC, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesAUR, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotStrSalesAUR, DefaultPlanChangeMethods.Change_TotStrSalesAUR, null);
					aPlanCube.AddRule(DefaultPlanVariables.CompPctTtl, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_CompPctTtl, DefaultPlanChangeMethods.Change_CompPctTtl, null);
					aPlanCube.AddRule(DefaultPlanVariables.NonCompPctTtl, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_NonCompPctTtl, DefaultPlanChangeMethods.Change_NonCompPctTtl, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotBinvAUC, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotBinvAUC, DefaultPlanChangeMethods.Change_TotBinvAUC, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotEinvAUC, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotEinvAUC, DefaultPlanChangeMethods.Change_TotEinvAUC, null);
					aPlanCube.AddRule(DefaultPlanVariables.Commit3CostDlr, BasePlanQuantityVariables.Value, DefaultPlanChangeMethods.Change_Commit3CostDlr, null);
					aPlanCube.AddRule(DefaultPlanVariables.Commit2CostDlr, BasePlanQuantityVariables.Value, DefaultPlanChangeMethods.Change_Commit2CostDlr, null);
					aPlanCube.AddRule(DefaultPlanVariables.Commit1CostDlr, BasePlanQuantityVariables.Value, DefaultPlanChangeMethods.Change_Commit1CostDlr, null);
					aPlanCube.AddRule(DefaultPlanVariables.OnOrderCostDlr, BasePlanQuantityVariables.Value, DefaultPlanChangeMethods.Change_OnOrderCostDlr, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotBinvCostDlr, BasePlanQuantityVariables.Value, DefaultPlanChangeMethods.Change_TotBinvCostDlr, null);
					aPlanCube.OverrideInitRule(DefaultPlanVariables.ForwardWOSMarkdown, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_ForwardWOSMarkdown_Custom);
            }
            catch (Exception exc)
            {
                string message = exc.ToString();
                throw;
            }
        }
        public override void ChainPlanLowLevelTotalWeekDetail(PlanCube aPlanCube)
        {
            try
            {
                base.ChainPlanLowLevelTotalWeekDetail(aPlanCube);
                ChainTimeDetailPctChange(aPlanCube);
                ChainTimeDetailPctToTimePeriod(aPlanCube);
                ChainTimeDetailLowLevelAverage(aPlanCube);
                ChainTimeDetailBalance(aPlanCube);
                ChainTimeDetailPctChangeToPlan(aPlanCube);
                aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSRegPromo, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_ForwardWOSRegPromo_Custom, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.ReceiptTotalUnits, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.ReceiptMarkdownUnits, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.ReceiptRegularUnits, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SalesStockRatioTotal, BasePlanQuantityVariables.Value, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SalesStockRatioMarkdown, BasePlanQuantityVariables.Value, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SalesStockRatioRegPromo, BasePlanQuantityVariables.Value, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SalesTotalUnits, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SalesMarkdownUnits, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SalesPromoUnits, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SalesRegPromoUnits, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SalesRegularUnits, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctTotal, BasePlanQuantityVariables.Value, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctMarkdown, BasePlanQuantityVariables.Value, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctRegPromo, BasePlanQuantityVariables.Value, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryTotalUnits, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryMarkdownUnits, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryRegularUnits, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotRecCostDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.AdjUnitsTot, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.WOSTotal, BasePlanQuantityVariables.Value, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.WOSRegPromo, BasePlanQuantityVariables.Value, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSTotal, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_ForwardWOSTotal_Custom, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotSalesAUR, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotSalesAUR, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruUnitPctTot, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_SellThruUnitPctTot, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.NewStores, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.OpenStores, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.AvgStrSlsUnit, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_AvgStrSlsUnit, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.AvgStrSlsDlr, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_AvgStrSlsDlr, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrAvgINVUnit, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotStrAvgINVUnit, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotFWOSUnit, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotFWOSUnit, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCBOPct, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_DTCBOPct, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCCancelPct, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_DTCCancelPct, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.AdjCostDlrTot, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DiscountDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.AfterDiscountDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotFreightCostDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.AfterDiscGMDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.VATDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.Commit3CostDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.ConvertedSalesDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SaleswithoutVATDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrAvgEndINVUnit, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotStrAvgEndINVUnit, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.Commit1CostDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.Commit2CostDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCCancelDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCBOUnit, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCGrossDmdCostDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCCancelCostDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCGrossDmdDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCBODlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCBOCostDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotSalesDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotSalesCostDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotSalesUnit, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.GrossMarginPctStr, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_GrossMarginPctStr, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.GrossMarginTotStr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.CompSlsDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.NonCompSlsDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.GrossMarginTotDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.GrossMarginPctTot, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_GrossMarginPctTot, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesCostDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotRecUnit, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.OTBCostDlr, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_OTBCostDlr, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.OTBUnit, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_OTBUnit, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.OnOrderDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.OnOrderUnit, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.OTBCostDlrCum, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_OTBCostDlrCum, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.OTBUnitCum, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_OTBUnitCum, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.Commit3Unit, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.Commit2Unit, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.Commit1Unit, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotEinvCostDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DiscountPct, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_DiscountPct, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.CurrXchgPct, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_CurrXchgPct, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.VATPct, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_VATPct, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotEinvUnits, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.AdjUntiPctTot, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_AdjUntiPctTot, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotBinvCostDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.ReceiptAUCTot, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_ReceiptAUCTot, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSMarkdown, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_ForwardWOSMarkdown_Custom, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.ShrinkUnitsTot, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCRtnUnit, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCCancelUnit, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCGrossDmdUnit, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCGrossDmdGMDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCGrsDmdGMPct, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_DTCGrsDmdGMPct, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.ShrinkCostDlrTot, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNetDmdUnit, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNetDmdDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNetDmdCostDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNetDmdPct, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_DTCNetDmdPct, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNetDmdAUR, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_DTCNetDmdAUR, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNetDmdAUC, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_DTCNetDmdAUC, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNetDmdGMDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNetDmdGMPct, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_DTCNetDmdGMPct, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCRtnDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCRtnCostDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCRtnPct, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_DTCRtnPct, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCAvgOrder, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCFWOSUnit, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_DTCFWOSUnit, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNoOfOrders, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCVisits, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCPlacement, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCSlsStkRatio, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_DTCSlsStkRatio, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCSellThru, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_DTCSellThru, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCSpace, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.FreightCostPerUnit, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SquareSpace, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.LinearSpace, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.FloorSpace, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCTransactions, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SpaceConvPct, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_SpaceConvPct, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SalesUperSqSpace, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_SalesUperSqSpace, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SalesUperLinearSpace, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_SalesUperLinearSpace, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DensityU, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_DensityU, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SalesperSpaceU, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_SalesperSpaceU, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesCDlrperSqSpace, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotStrSalesCDlrperSqSpace, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesDlrperSqSpace, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotStrSalesDlrperSqSpace, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesCDlrperLinearSpace, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotStrSalesCDlrperLinearSpace, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesDlrperLinearSpace, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotStrSalesDlrperLinearSpace, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCPlacedOrdersDlr, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_DTCPlacedOrdersDlr, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCConvPct, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_DTCConvPct, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesUnitPctTTL, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotStrSalesUnitPctTTL, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesCostDlrPctTTL, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotStrSalesCostDlrPctTTL, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotDTCSalesUnitPctTTL, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotDTCSalesUnitPctTTL, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotDTCSalesCostDlrPctTTL, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotDTCSalesCostDlrPctTTL, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.ShrinkPctTot, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_ShrinkPctTot, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotBinvAUC, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotBinvAUC, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.CompPctTtl, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_CompPctTtl, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotSalesAUC, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotSalesAUC, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.OnOrderAUC, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_OnOrderAUC, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.Commit1AUC, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_Commit1AUC, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotEinvAUC, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotEinvAUC, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.Commit3AUC, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_Commit3AUC, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.Commit2AUC, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_Commit2AUC, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.OnOrderAUR, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_OnOrderAUR, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.NonCompPctTtl, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_NonCompPctTtl, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesAUR, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotStrSalesAUR, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotIMUPct, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCGrossDmdAUR, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_DTCGrossDmdAUR, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCGrossDmdAUC, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_DTCGrossDmdAUC, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesAUC, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotStrSalesAUC, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.AfterDiscountAUR, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_AfterDiscountAUR, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
            }
            catch (Exception exc)
            {
                string message = exc.ToString();
                throw;
            }
        }
        public override void ChainPlanPeriodDetail(PlanCube aPlanCube)
        {
            try
            {
                base.ChainPlanPeriodDetail(aPlanCube);
                ChainTimeDetailPctChange(aPlanCube);
                ChainTimeDetailPctToTimePeriod(aPlanCube);
                ChainTimeDetailPctToLowLevelTotal(aPlanCube);
                ChainTimeDetailDifference(aPlanCube);
                ChainTimeDetailPctChangeToPlan(aPlanCube);
                aPlanCube.AddRule(DefaultPlanVariables.TotRecCostDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_PeriodSumDetail, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.AdjUnitsTot, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_PeriodSumDetail, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSRegPromo, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_ForwardWOSRegPromo_Custom, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.ReceiptTotalUnits, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_PeriodSumDetail, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.ReceiptMarkdownUnits, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_PeriodSumDetail, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.ReceiptRegularUnits, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_PeriodSumDetail, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SalesTotalUnits, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_PeriodSumDetail, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SalesMarkdownUnits, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_PeriodSumDetail, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SalesPromoUnits, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_PeriodSumDetail, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SalesRegPromoUnits, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_PeriodSumDetail, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SalesRegularUnits, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_PeriodSumDetail, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryTotalUnits, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_PeriodSumDetail, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryMarkdownUnits, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_PeriodSumDetail, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryRegularUnits, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_PeriodSumDetail, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSTotal, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_ForwardWOSTotal_Custom, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotSalesAUR, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotSalesAUR, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.NewStores, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.OpenStores, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.AvgStrSlsUnit, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_AvgStrSlsUnit, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.AvgStrSlsDlr, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_AvgStrSlsDlr, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrAvgINVUnit, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotStrAvgINVUnit, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotFWOSUnit, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotFWOSUnit, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruUnitPctTot, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_SellThruUnitPctTot, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCBOPct, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_DTCBOPct, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCCancelPct, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_DTCCancelPct, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.AdjCostDlrTot, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_PeriodSumDetail, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DiscountDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_PeriodSumDetail, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.AfterDiscountDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_PeriodSumDetail, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotFreightCostDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_PeriodSumDetail, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.AfterDiscGMDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_PeriodSumDetail, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.VATDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_PeriodSumDetail, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.ConvertedSalesDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_PeriodSumDetail, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SaleswithoutVATDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_PeriodSumDetail, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrAvgEndINVUnit, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotStrAvgEndINVUnit, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCCancelCostDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_PeriodSumDetail, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCGrossDmdDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_PeriodSumDetail, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCBOUnit, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_PeriodSumDetail, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCCancelDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_PeriodSumDetail, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCBODlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_PeriodSumDetail, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCBOCostDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_PeriodSumDetail, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotSalesDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_PeriodSumDetail, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotSalesCostDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_PeriodSumDetail, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotSalesUnit, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_PeriodSumDetail, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.GrossMarginPctStr, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_GrossMarginPctStr, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.GrossMarginTotStr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_PeriodSumDetail, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.CompSlsDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_PeriodSumDetail, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.NonCompSlsDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_PeriodSumDetail, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCGrossDmdCostDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_PeriodSumDetail, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.GrossMarginTotDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_PeriodSumDetail, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.GrossMarginPctTot, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_GrossMarginPctTot, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesCostDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_PeriodSumDetail, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_PeriodSumDetail, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotRecUnit, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_PeriodSumDetail, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.OTBCostDlr, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_OTBCostDlr, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.OTBUnit, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_OTBUnit, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.OnOrderDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_PeriodSumDetail, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.OnOrderUnit, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_PeriodSumDetail, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.OTBCostDlrCum, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_OTBCostDlrCum, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.OTBUnitCum, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_OTBUnitCum, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.Commit1Unit, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_PeriodSumDetail, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.Commit2Unit, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_PeriodSumDetail, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.Commit3Unit, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_PeriodSumDetail, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.CurrXchgPct, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_CurrXchgPct, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.VATPct, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_PeriodAvgDetail, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DiscountPct, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_DiscountPct, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotEinvCostDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_PeriodSumDetail, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotEinvUnits, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_PeriodSumDetail, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.AdjUntiPctTot, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_AdjUntiPctTot, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSMarkdown, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_ForwardWOSMarkdown_Custom, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.ShrinkUnitsTot, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_PeriodSumDetail, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCRtnUnit, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_PeriodSumDetail, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNetDmdUnit, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_PeriodSumDetail, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNetDmdDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_PeriodSumDetail, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNetDmdCostDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_PeriodSumDetail, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNetDmdPct, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_DTCNetDmdPct, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNetDmdAUR, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_DTCNetDmdAUR, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNetDmdAUC, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_DTCNetDmdAUC, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNetDmdGMDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_PeriodSumDetail, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNetDmdGMPct, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_DTCNetDmdGMPct, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCRtnDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_PeriodSumDetail, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCRtnCostDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_PeriodSumDetail, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCRtnPct, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_DTCRtnPct, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCAvgOrder, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_DTCAvgOrder, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCFWOSUnit, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_DTCFWOSUnit, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNoOfOrders, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_PeriodSumDetail, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCVisits, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCPlacement, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_PeriodSumDetail, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCSlsStkRatio, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_DTCSlsStkRatio, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCSellThru, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_DTCSellThru, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCSpace, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_PeriodSumDetail, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCGrossDmdGMDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_PeriodSumDetail, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCGrsDmdGMPct, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_DTCGrsDmdGMPct, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.ShrinkCostDlrTot, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_PeriodSumDetail, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.FreightCostPerUnit, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_PeriodAvgDetail, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCCancelUnit, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_PeriodSumDetail, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCGrossDmdUnit, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_PeriodSumDetail, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SquareSpace, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_PeriodAvgDetail, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.LinearSpace, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_PeriodAvgDetail, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.FloorSpace, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_PeriodAvgDetail, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCTransactions, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_PeriodSumDetail, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SpaceConvPct, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_SpaceConvPct, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SalesUperSqSpace, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_SalesUperSqSpace, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SalesUperLinearSpace, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_SalesUperLinearSpace, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DensityU, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_DensityU, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SalesperSpaceU, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_SalesperSpaceU, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesCDlrperSqSpace, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotStrSalesCDlrperSqSpace, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesDlrperSqSpace, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotStrSalesDlrperSqSpace, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesCDlrperLinearSpace, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotStrSalesCDlrperLinearSpace, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesDlrperLinearSpace, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotStrSalesDlrperLinearSpace, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCPlacedOrdersDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCConvPct, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_DTCConvPct, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesUnitPctTTL, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotStrSalesUnitPctTTL, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesCostDlrPctTTL, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotStrSalesCostDlrPctTTL, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotDTCSalesUnitPctTTL, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotDTCSalesUnitPctTTL, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotDTCSalesCostDlrPctTTL, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotDTCSalesCostDlrPctTTL, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.ShrinkPctTot, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_ShrinkPctTot, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesAUR, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotStrSalesAUR, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotBinvCostDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_PeriodSumDetail, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotSalesAUC, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotSalesAUC, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.OnOrderCostDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_PeriodSumDetail, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.Commit3CostDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_PeriodSumDetail, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.Commit2CostDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_PeriodSumDetail, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.Commit1CostDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_PeriodSumDetail, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.CompPctTtl, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_CompPctTtl, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.NonCompPctTtl, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_NonCompPctTtl, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotBinvAUC, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotBinvAUC, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotEinvAUC, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotEinvAUC, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.ReceiptAUCTot, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_ReceiptAUCTot, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.OnOrderAUC, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_OnOrderAUC, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.Commit1AUC, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_Commit1AUC, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.Commit2AUC, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_Commit2AUC, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.Commit3AUC, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_Commit3AUC, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.OnOrderAUR, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_OnOrderAUR, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SalesStockRatioTotal, BasePlanQuantityVariables.Value, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctTotal, BasePlanQuantityVariables.Value, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotIMUPct, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotIMUPct, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.AfterDiscountAUR, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_AfterDiscountAUR, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesAUC, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotStrSalesAUC, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCGrossDmdAUR, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_DTCGrossDmdAUR, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCGrossDmdAUC, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_DTCGrossDmdAUC, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
            }
            catch (Exception exc)
            {
                string message = exc.ToString();
                throw;
            }
        }
        public override void ChainPlanLowLevelTotalPeriodDetail(PlanCube aPlanCube)
        {
            try
            {
                base.ChainPlanLowLevelTotalPeriodDetail(aPlanCube);
                ChainTimeDetailPctChange(aPlanCube);
                ChainTimeDetailPctToTimePeriod(aPlanCube);
                ChainTimeDetailLowLevelAverage(aPlanCube);
                ChainTimeDetailBalance(aPlanCube);
                ChainTimeDetailPctChangeToPlan(aPlanCube);
                aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSRegPromo, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_ForwardWOSRegPromo_Custom, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.ReceiptTotalUnits, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.ReceiptMarkdownUnits, BasePlanQuantityVariables.Value, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.ReceiptRegularUnits, BasePlanQuantityVariables.Value, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SalesStockRatioTotal, BasePlanQuantityVariables.Value, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SalesStockRatioMarkdown, BasePlanQuantityVariables.Value, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SalesStockRatioRegPromo, BasePlanQuantityVariables.Value, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SalesTotalUnits, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SalesMarkdownUnits, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SalesPromoUnits, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SalesRegPromoUnits, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SalesRegularUnits, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctTotal, BasePlanQuantityVariables.Value, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctMarkdown, BasePlanQuantityVariables.Value, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctRegPromo, BasePlanQuantityVariables.Value, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryTotalUnits, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_InventoryTotalUnits_Custom, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryMarkdownUnits, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryRegularUnits, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotRecCostDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.WOSTotal, BasePlanQuantityVariables.Value, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.WOSRegPromo, BasePlanQuantityVariables.Value, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSTotal, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_ForwardWOSTotal_Custom, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotSalesAUR, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotSalesAUR, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruUnitPctTot, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_SellThruUnitPctTot, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.NewStores, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.OpenStores, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.AvgStrSlsUnit, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_AvgStrSlsUnit, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.AvgStrSlsDlr, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_AvgStrSlsDlr, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrAvgINVUnit, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotStrAvgINVUnit, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotFWOSUnit, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotFWOSUnit, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCBOPct, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_DTCBOPct, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCCancelPct, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_DTCCancelPct, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.AdjCostDlrTot, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DiscountDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.AfterDiscountDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotFreightCostDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.AfterDiscGMDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.Commit3CostDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.ConvertedSalesDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SaleswithoutVATDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrAvgEndINVUnit, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotStrAvgEndINVUnit, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.VATDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.Commit1CostDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.Commit2CostDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCGrossDmdDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCBOUnit, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCGrossDmdCostDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCCancelCostDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCCancelDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCBODlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCBOCostDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotSalesDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotSalesCostDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotSalesUnit, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.GrossMarginPctStr, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_GrossMarginPctStr, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.GrossMarginTotStr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.CompSlsDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.NonCompSlsDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.GrossMarginTotDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.GrossMarginPctTot, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_GrossMarginPctTot, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesCostDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotRecUnit, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.OTBCostDlr, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_OTBCostDlr, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.OTBUnit, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_OTBUnit, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.OnOrderDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.OnOrderUnit, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.OTBCostDlrCum, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_OTBCostDlrCum, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.OTBUnitCum, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_OTBUnitCum, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.Commit1Unit, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.Commit2Unit, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.Commit3Unit, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.CurrXchgPct, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_CurrXchgPct, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.VATPct, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_VATPct, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DiscountPct, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_DiscountPct, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotEinvCostDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotEinvUnits, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.AdjUntiPctTot, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_AdjUntiPctTot, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSMarkdown, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_ForwardWOSMarkdown_Custom, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.ShrinkUnitsTot, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCRtnUnit, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCCancelUnit, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCGrossDmdUnit, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCGrossDmdGMDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCGrsDmdGMPct, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_DTCGrsDmdGMPct, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.FreightCostPerUnit, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.ShrinkCostDlrTot, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNetDmdUnit, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNetDmdDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNetDmdCostDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNetDmdPct, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_DTCNetDmdPct, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNetDmdAUR, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_DTCNetDmdAUR, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNetDmdAUC, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_DTCNetDmdAUC, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNetDmdGMDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNetDmdGMPct, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_DTCNetDmdGMPct, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCRtnDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCRtnCostDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCRtnPct, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_DTCRtnPct, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCAvgOrder, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_DTCAvgOrder, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCFWOSUnit, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_DTCFWOSUnit, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNoOfOrders, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCVisits, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCPlacement, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCSlsStkRatio, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_DTCSlsStkRatio, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCSellThru, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_DTCSellThru, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCSpace, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SquareSpace, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.LinearSpace, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.FloorSpace, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCTransactions, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SpaceConvPct, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_SpaceConvPct, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SalesUperSqSpace, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_SalesUperSqSpace, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SalesUperLinearSpace, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_SalesUperLinearSpace, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DensityU, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_DensityU, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SalesperSpaceU, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_SalesperSpaceU, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesCDlrperSqSpace, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotStrSalesCDlrperSqSpace, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesDlrperSqSpace, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotStrSalesDlrperSqSpace, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesCDlrperLinearSpace, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotStrSalesCDlrperLinearSpace, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesDlrperLinearSpace, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotStrSalesDlrperLinearSpace, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCPlacedOrdersDlr, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_DTCPlacedOrdersDlr, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCConvPct, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_DTCConvPct, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesUnitPctTTL, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotStrSalesUnitPctTTL, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesCostDlrPctTTL, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotStrSalesCostDlrPctTTL, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotDTCSalesUnitPctTTL, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotDTCSalesUnitPctTTL, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotDTCSalesCostDlrPctTTL, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotDTCSalesCostDlrPctTTL, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.ShrinkPctTot, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_ShrinkPctTot, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.AdjUnitsTot, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.CompPctTtl, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_CompPctTtl, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.NonCompPctTtl, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_NonCompPctTtl, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotBinvAUC, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotBinvAUC, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotEinvAUC, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotEinvAUC, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotBinvCostDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.OnOrderAUC, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_OnOrderAUC, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.Commit1AUC, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_Commit1AUC, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.Commit3AUC, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_Commit3AUC, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.Commit2AUC, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_Commit2AUC, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.OnOrderAUR, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_OnOrderAUR, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.ReceiptAUCTot, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_ReceiptAUCTot, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotSalesAUC, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotSalesAUC, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesAUR, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotStrSalesAUR, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotIMUPct, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotIMUPct, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesAUC, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotStrSalesAUC, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCGrossDmdAUR, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_DTCGrossDmdAUR, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCGrossDmdAUC, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_DTCGrossDmdAUC, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.AfterDiscountAUR, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_AfterDiscountAUR, BasePlanChangeMethods.Change_LowLevelTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
            }
            catch (Exception exc)
            {
                string message = exc.ToString();
                throw;
            }
        }
        private void ChainTimeDetailPctChange(PlanCube aPlanCube)
        {
            try
            {
                aPlanCube.AddRule(DefaultPlanVariables.WOSTotal, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.WOSRegPromo, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSTotal, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSRegPromo, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.ReceiptTotalUnits, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.ReceiptMarkdownUnits, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.ReceiptRegularUnits, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesStockRatioTotal, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesStockRatioMarkdown, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesStockRatioRegPromo, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesTotalUnits, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesMarkdownUnits, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesPromoUnits, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesRegPromoUnits, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesRegularUnits, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctTotal, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctMarkdown, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctRegPromo, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryTotalUnits, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryMarkdownUnits, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryRegularUnits, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotRecCostDlr, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.AdjUnitsTot, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotSalesAUR, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.NewStores, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.OpenStores, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.AvgStrSlsUnit, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.AvgStrSlsDlr, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrAvgINVUnit, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotFWOSUnit, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruUnitPctTot, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCBOPct, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCCancelPct, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.AdjCostDlrTot, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.DiscountDlr, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.AfterDiscountDlr, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotFreightCostDlr, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.AfterDiscGMDlr, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.Commit3AUC, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.Commit3CostDlr, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.ConvertedSalesDlr, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.SaleswithoutVATDlr, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrAvgEndINVUnit, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotEinvAUC, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.VATDlr, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.Commit1CostDlr, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.Commit1AUC, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.Commit2CostDlr, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.Commit2AUC, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCCancelDlr, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCGrossDmdDlr, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCBOUnit, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCCancelCostDlr, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCBODlr, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCBOCostDlr, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCGrossDmdCostDlr, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotSalesDlr, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotSalesCostDlr, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotSalesUnit, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.GrossMarginPctStr, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.GrossMarginTotStr, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.CompSlsDlr, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.NonCompSlsDlr, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesDlr, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.GrossMarginTotDlr, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.GrossMarginPctTot, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesCostDlr, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.OTBCostDlr, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.OTBUnit, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.OnOrderDlr, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.OnOrderUnit, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotRecUnit, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.OTBCostDlrCum, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.OTBUnitCum, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.Commit3Unit, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.Commit2Unit, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.Commit1Unit, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.CurrXchgPct, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.DiscountPct, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotEinvCostDlr, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.VATPct, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotEinvUnits, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.AdjUntiPctTot, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCRtnUnit, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCGrossDmdUnit, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCCancelUnit, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNetDmdUnit, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNetDmdDlr, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNetDmdCostDlr, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNetDmdPct, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNetDmdAUR, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNetDmdAUC, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNetDmdGMDlr, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNetDmdGMPct, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCRtnDlr, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCRtnCostDlr, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCRtnPct, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCAvgOrder, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCFWOSUnit, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNoOfOrders, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCVisits, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCPlacement, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCSlsStkRatio, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCSellThru, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCSpace, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.ShrinkUnitsTot, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCGrossDmdGMDlr, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCGrsDmdGMPct, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.ShrinkCostDlrTot, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.SquareSpace, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.LinearSpace, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.FloorSpace, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCTransactions, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.SpaceConvPct, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesUperSqSpace, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesUperLinearSpace, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.DensityU, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesperSpaceU, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesCDlrperSqSpace, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesDlrperSqSpace, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesCDlrperLinearSpace, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesDlrperLinearSpace, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCPlacedOrdersDlr, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCConvPct, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.FreightCostPerUnit, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesUnitPctTTL, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesCostDlrPctTTL, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotDTCSalesUnitPctTTL, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotDTCSalesCostDlrPctTTL, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.ShrinkPctTot, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotIMUPct, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesAUC, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCGrossDmdAUR, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCGrossDmdAUC, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.AfterDiscountAUR, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
            }
            catch (Exception exc)
            {
                string message = exc.ToString();
                throw;
            }
        }
        private void ChainTimeDetailPctToTimePeriod(PlanCube aPlanCube)
        {
            try
            {
                aPlanCube.AddRule(DefaultPlanVariables.WOSTotal, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.WOSRegPromo, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSTotal, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSRegPromo, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.ReceiptTotalUnits, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.ReceiptMarkdownUnits, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.ReceiptRegularUnits, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesStockRatioTotal, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesStockRatioMarkdown, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesStockRatioRegPromo, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesTotalUnits, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesMarkdownUnits, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesPromoUnits, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesRegPromoUnits, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesRegularUnits, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctTotal, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctMarkdown, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctRegPromo, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryTotalUnits, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryMarkdownUnits, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryRegularUnits, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotRecCostDlr, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.AdjUnitsTot, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotSalesAUR, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.NewStores, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.OpenStores, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.AvgStrSlsUnit, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.AvgStrSlsDlr, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrAvgINVUnit, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotFWOSUnit, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruUnitPctTot, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCBOPct, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCCancelPct, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.AdjCostDlrTot, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.DiscountDlr, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.AfterDiscountDlr, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotFreightCostDlr, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.AfterDiscGMDlr, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.Commit3AUC, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.Commit3CostDlr, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.ConvertedSalesDlr, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.SaleswithoutVATDlr, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrAvgEndINVUnit, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotEinvAUC, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.VATDlr, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.Commit1CostDlr, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.Commit1AUC, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.Commit2CostDlr, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.Commit2AUC, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCCancelDlr, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCGrossDmdDlr, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCBOUnit, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCCancelCostDlr, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCBODlr, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCBOCostDlr, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCGrossDmdCostDlr, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotSalesDlr, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotSalesCostDlr, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotSalesUnit, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.GrossMarginPctStr, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.GrossMarginTotStr, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.CompSlsDlr, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.NonCompSlsDlr, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesDlr, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.GrossMarginTotDlr, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.GrossMarginPctTot, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesCostDlr, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.OTBCostDlr, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.OTBUnit, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.OnOrderDlr, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.OnOrderUnit, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotRecUnit, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.OTBCostDlrCum, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.OTBUnitCum, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.Commit3Unit, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.Commit2Unit, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.Commit1Unit, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.CurrXchgPct, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.DiscountPct, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotEinvCostDlr, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.VATPct, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotEinvUnits, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.AdjUntiPctTot, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCRtnUnit, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCGrossDmdUnit, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCCancelUnit, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNetDmdUnit, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNetDmdDlr, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNetDmdCostDlr, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNetDmdPct, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNetDmdAUR, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNetDmdAUC, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNetDmdGMDlr, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNetDmdGMPct, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCRtnDlr, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCRtnCostDlr, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCRtnPct, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCAvgOrder, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCFWOSUnit, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNoOfOrders, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCVisits, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCPlacement, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCSlsStkRatio, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCSellThru, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCSpace, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.ShrinkUnitsTot, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCGrossDmdGMDlr, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCGrsDmdGMPct, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.ShrinkCostDlrTot, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.SquareSpace, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.LinearSpace, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.FloorSpace, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCTransactions, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.SpaceConvPct, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesUperSqSpace, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesUperLinearSpace, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.DensityU, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesperSpaceU, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesCDlrperSqSpace, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesDlrperSqSpace, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesCDlrperLinearSpace, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesDlrperLinearSpace, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCPlacedOrdersDlr, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCConvPct, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.FreightCostPerUnit, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesUnitPctTTL, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesCostDlrPctTTL, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotDTCSalesUnitPctTTL, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotDTCSalesCostDlrPctTTL, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.ShrinkPctTot, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotIMUPct, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesAUC, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCGrossDmdAUR, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCGrossDmdAUC, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.AfterDiscountAUR, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
            }
            catch (Exception exc)
            {
                string message = exc.ToString();
                throw;
            }
        }
        private void ChainTimeDetailPctToLowLevelTotal(PlanCube aPlanCube)
        {
            try
            {
                aPlanCube.AddRule(DefaultPlanVariables.WOSTotal, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.WOSRegPromo, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSTotal, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSRegPromo, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.ReceiptTotalUnits, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.ReceiptMarkdownUnits, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.ReceiptRegularUnits, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesStockRatioTotal, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesStockRatioMarkdown, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesStockRatioRegPromo, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesTotalUnits, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesMarkdownUnits, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesPromoUnits, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesRegPromoUnits, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesRegularUnits, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctTotal, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctMarkdown, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctRegPromo, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryTotalUnits, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryMarkdownUnits, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryRegularUnits, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotRecCostDlr, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.AdjUnitsTot, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotSalesAUR, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.NewStores, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.OpenStores, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.AvgStrSlsUnit, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.AvgStrSlsDlr, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrAvgINVUnit, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotFWOSUnit, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruUnitPctTot, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCBOPct, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCCancelPct, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.AdjCostDlrTot, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.DiscountDlr, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.AfterDiscountDlr, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotFreightCostDlr, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.AfterDiscGMDlr, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.Commit3AUC, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.Commit3CostDlr, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.ConvertedSalesDlr, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.SaleswithoutVATDlr, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrAvgEndINVUnit, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotEinvAUC, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.VATDlr, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.Commit1CostDlr, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.Commit1AUC, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.Commit2CostDlr, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.Commit2AUC, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCCancelDlr, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCGrossDmdDlr, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCBOUnit, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCCancelCostDlr, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCBODlr, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCBOCostDlr, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCGrossDmdCostDlr, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotSalesDlr, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotSalesCostDlr, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotSalesUnit, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.GrossMarginPctStr, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.GrossMarginTotStr, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.CompSlsDlr, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.NonCompSlsDlr, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesDlr, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.GrossMarginTotDlr, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.GrossMarginPctTot, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesCostDlr, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.OTBCostDlr, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.OTBUnit, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.OnOrderDlr, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.OnOrderUnit, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotRecUnit, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.OTBCostDlrCum, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.OTBUnitCum, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.Commit3Unit, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.Commit2Unit, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.Commit1Unit, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.CurrXchgPct, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.DiscountPct, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotEinvCostDlr, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.VATPct, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotEinvUnits, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.AdjUntiPctTot, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCRtnUnit, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCGrossDmdUnit, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCCancelUnit, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNetDmdUnit, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNetDmdDlr, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNetDmdCostDlr, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNetDmdPct, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNetDmdAUR, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNetDmdAUC, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNetDmdGMDlr, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNetDmdGMPct, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCRtnDlr, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCRtnCostDlr, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCRtnPct, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCAvgOrder, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCFWOSUnit, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNoOfOrders, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCVisits, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCPlacement, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCSlsStkRatio, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCSellThru, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCSpace, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.ShrinkUnitsTot, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCGrossDmdGMDlr, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCGrsDmdGMPct, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.ShrinkCostDlrTot, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.SquareSpace, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.LinearSpace, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.FloorSpace, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCTransactions, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.SpaceConvPct, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesUperSqSpace, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesUperLinearSpace, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.DensityU, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesperSpaceU, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesCDlrperSqSpace, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesDlrperSqSpace, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesCDlrperLinearSpace, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesDlrperLinearSpace, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCPlacedOrdersDlr, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCConvPct, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.FreightCostPerUnit, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesUnitPctTTL, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesCostDlrPctTTL, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotDTCSalesUnitPctTTL, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotDTCSalesCostDlrPctTTL, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.ShrinkPctTot, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotIMUPct, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesAUC, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCGrossDmdAUR, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCGrossDmdAUC, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.AfterDiscountAUR, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
            }
            catch (Exception exc)
            {
                string message = exc.ToString();
                throw;
            }
        }
        private void ChainTimeDetailLowLevelAverage(PlanCube aPlanCube)
        {
            try
            {
                aPlanCube.AddRule(DefaultPlanVariables.WOSTotal, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.WOSRegPromo, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSTotal, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSRegPromo, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.ReceiptTotalUnits, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.ReceiptMarkdownUnits, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.ReceiptRegularUnits, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SalesStockRatioTotal, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SalesStockRatioMarkdown, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SalesStockRatioRegPromo, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SalesTotalUnits, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SalesMarkdownUnits, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SalesPromoUnits, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SalesRegPromoUnits, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SalesRegularUnits, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctTotal, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctMarkdown, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctRegPromo, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryTotalUnits, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryMarkdownUnits, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryRegularUnits, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotRecCostDlr, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.AdjUnitsTot, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotSalesAUR, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.NewStores, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.OpenStores, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.AvgStrSlsUnit, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.AvgStrSlsDlr, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrAvgINVUnit, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotFWOSUnit, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruUnitPctTot, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCBOPct, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCCancelPct, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.AdjCostDlrTot, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DiscountDlr, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.AfterDiscountDlr, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotFreightCostDlr, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.AfterDiscGMDlr, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.Commit3AUC, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.Commit3CostDlr, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.ConvertedSalesDlr, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SaleswithoutVATDlr, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrAvgEndINVUnit, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotEinvAUC, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.VATDlr, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.Commit1CostDlr, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.Commit1AUC, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.Commit2CostDlr, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.Commit2AUC, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCCancelDlr, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCGrossDmdDlr, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCBOUnit, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCCancelCostDlr, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCBODlr, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCBOCostDlr, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCGrossDmdCostDlr, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotSalesDlr, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotSalesCostDlr, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotSalesUnit, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.GrossMarginPctStr, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.GrossMarginTotStr, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.CompSlsDlr, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.NonCompSlsDlr, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesDlr, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.GrossMarginTotDlr, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.GrossMarginPctTot, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesCostDlr, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.OTBCostDlr, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.OTBUnit, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.OnOrderDlr, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.OnOrderUnit, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotRecUnit, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.OTBCostDlrCum, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.OTBUnitCum, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.Commit3Unit, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.Commit2Unit, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.Commit1Unit, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.CurrXchgPct, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DiscountPct, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotEinvCostDlr, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.VATPct, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotEinvUnits, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.AdjUntiPctTot, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCRtnUnit, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCGrossDmdUnit, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCCancelUnit, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNetDmdUnit, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNetDmdDlr, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNetDmdCostDlr, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNetDmdPct, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNetDmdAUR, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNetDmdAUC, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNetDmdGMDlr, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNetDmdGMPct, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCRtnDlr, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCRtnCostDlr, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCRtnPct, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCAvgOrder, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCFWOSUnit, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNoOfOrders, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCVisits, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCPlacement, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCSlsStkRatio, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCSellThru, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCSpace, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.ShrinkUnitsTot, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCGrossDmdGMDlr, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCGrsDmdGMPct, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.ShrinkCostDlrTot, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SquareSpace, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.LinearSpace, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.FloorSpace, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCTransactions, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SpaceConvPct, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SalesUperSqSpace, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SalesUperLinearSpace, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DensityU, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SalesperSpaceU, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesCDlrperSqSpace, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesDlrperSqSpace, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesCDlrperLinearSpace, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesDlrperLinearSpace, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCPlacedOrdersDlr, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCConvPct, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.FreightCostPerUnit, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesUnitPctTTL, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesCostDlrPctTTL, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotDTCSalesUnitPctTTL, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotDTCSalesCostDlrPctTTL, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.ShrinkPctTot, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotIMUPct, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesAUC, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCGrossDmdAUR, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DTCGrossDmdAUC, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.AfterDiscountAUR, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
            }
            catch (Exception exc)
            {
                string message = exc.ToString();
                throw;
            }
        }
        private void ChainTimeDetailDifference(PlanCube aPlanCube)
        {
            try
            {
                aPlanCube.AddRule(DefaultPlanVariables.WOSTotal, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.WOSRegPromo, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSTotal, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSRegPromo, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.ReceiptTotalUnits, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.ReceiptMarkdownUnits, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.ReceiptRegularUnits, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesStockRatioTotal, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesStockRatioMarkdown, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesStockRatioRegPromo, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesTotalUnits, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesMarkdownUnits, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesPromoUnits, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesRegPromoUnits, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesRegularUnits, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctTotal, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctMarkdown, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctRegPromo, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryTotalUnits, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryMarkdownUnits, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryRegularUnits, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotRecCostDlr, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.AdjUnitsTot, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotSalesAUR, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.NewStores, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.OpenStores, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.AvgStrSlsUnit, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.AvgStrSlsDlr, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrAvgINVUnit, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotFWOSUnit, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruUnitPctTot, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCBOPct, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCCancelPct, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.AdjCostDlrTot, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.DiscountDlr, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.AfterDiscountDlr, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotFreightCostDlr, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.AfterDiscGMDlr, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.Commit3AUC, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.Commit3CostDlr, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.ConvertedSalesDlr, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.SaleswithoutVATDlr, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrAvgEndINVUnit, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotEinvAUC, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.VATDlr, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.Commit1CostDlr, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.Commit1AUC, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.Commit2CostDlr, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.Commit2AUC, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCCancelDlr, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCGrossDmdDlr, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCBOUnit, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCCancelCostDlr, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCBODlr, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCBOCostDlr, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCGrossDmdCostDlr, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotSalesDlr, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotSalesCostDlr, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotSalesUnit, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.GrossMarginPctStr, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.GrossMarginTotStr, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.CompSlsDlr, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.NonCompSlsDlr, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesDlr, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.GrossMarginTotDlr, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.GrossMarginPctTot, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesCostDlr, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.OTBCostDlr, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.OTBUnit, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.OnOrderDlr, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.OnOrderUnit, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotRecUnit, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.OTBCostDlrCum, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.OTBUnitCum, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.Commit3Unit, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.Commit2Unit, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.Commit1Unit, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.CurrXchgPct, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.DiscountPct, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotEinvCostDlr, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.VATPct, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotEinvUnits, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.AdjUntiPctTot, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCRtnUnit, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCGrossDmdUnit, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCCancelUnit, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNetDmdUnit, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNetDmdDlr, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNetDmdCostDlr, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNetDmdPct, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNetDmdAUR, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNetDmdAUC, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNetDmdGMDlr, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNetDmdGMPct, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCRtnDlr, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCRtnCostDlr, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCRtnPct, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCAvgOrder, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCFWOSUnit, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNoOfOrders, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCVisits, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCPlacement, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCSlsStkRatio, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCSellThru, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCSpace, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.ShrinkUnitsTot, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCGrossDmdGMDlr, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCGrsDmdGMPct, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.ShrinkCostDlrTot, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.SquareSpace, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.LinearSpace, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.FloorSpace, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCTransactions, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.SpaceConvPct, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesUperSqSpace, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesUperLinearSpace, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.DensityU, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesperSpaceU, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesCDlrperSqSpace, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesDlrperSqSpace, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesCDlrperLinearSpace, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesDlrperLinearSpace, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCPlacedOrdersDlr, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCConvPct, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.FreightCostPerUnit, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesUnitPctTTL, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesCostDlrPctTTL, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotDTCSalesUnitPctTTL, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotDTCSalesCostDlrPctTTL, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.ShrinkPctTot, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotIMUPct, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesAUC, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCGrossDmdAUR, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCGrossDmdAUC, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
					aPlanCube.AddRule(DefaultPlanVariables.AfterDiscountAUR, BasePlanQuantityVariables.Difference, BasePlanFormulasAndSpreads.Init_Difference, BasePlanChangeMethods.Change_ChainStoreDifference, null);
            }
            catch (Exception exc)
            {
                string message = exc.ToString();
                throw;
            }
        }
        private void ChainTimeDetailBalance(PlanCube aPlanCube)
        {
            try
            {
                aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSRegPromo, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.ReceiptTotalUnits, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.ReceiptMarkdownUnits, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.ReceiptRegularUnits, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesStockRatioTotal, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesStockRatioMarkdown, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesStockRatioRegPromo, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesTotalUnits, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesMarkdownUnits, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesPromoUnits, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesRegPromoUnits, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesRegularUnits, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctTotal, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctMarkdown, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctRegPromo, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryTotalUnits, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryMarkdownUnits, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryRegularUnits, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotRecCostDlr, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.AdjUnitsTot, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.WOSTotal, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.WOSRegPromo, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSTotal, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotSalesAUR, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruUnitPctTot, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.NewStores, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.OpenStores, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.AvgStrSlsUnit, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.AvgStrSlsDlr, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrAvgINVUnit, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotFWOSUnit, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCBOPct, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCCancelPct, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.AdjCostDlrTot, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.DiscountDlr, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.AfterDiscountDlr, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotFreightCostDlr, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.AfterDiscGMDlr, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.Commit3AUC, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.Commit3CostDlr, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.ConvertedSalesDlr, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.SaleswithoutVATDlr, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrAvgEndINVUnit, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotEinvAUC, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.VATDlr, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.Commit1CostDlr, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.Commit1AUC, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.Commit2CostDlr, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.Commit2AUC, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCGrossDmdDlr, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCBOUnit, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCGrossDmdCostDlr, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCCancelCostDlr, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCCancelDlr, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCBODlr, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCBOCostDlr, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotSalesDlr, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotSalesCostDlr, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotSalesUnit, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.GrossMarginPctStr, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.GrossMarginTotStr, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.CompSlsDlr, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.NonCompSlsDlr, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.GrossMarginTotDlr, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.GrossMarginPctTot, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesCostDlr, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesDlr, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotRecUnit, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.OTBCostDlr, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.OTBUnit, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.OnOrderDlr, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.OnOrderUnit, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.OTBCostDlrCum, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.OTBUnitCum, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.Commit3Unit, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.Commit2Unit, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.Commit1Unit, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.CurrXchgPct, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.VATPct, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.DiscountPct, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotEinvCostDlr, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotEinvUnits, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.AdjUntiPctTot, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSMarkdown, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotSalesAUC, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesAUR, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.CompPctTtl, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.NonCompPctTtl, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotBinvCostDlr, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotBinvAUC, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.ReceiptAUCTot, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.OnOrderCostDlr, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCGrossDmdUnit, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCCancelUnit, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCRtnUnit, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.ShrinkUnitsTot, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.OnOrderAUC, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCGrossDmdGMDlr, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCGrsDmdGMPct, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.FreightCostPerUnit, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.ShrinkCostDlrTot, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNetDmdUnit, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNetDmdDlr, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNetDmdCostDlr, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNetDmdPct, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNetDmdAUR, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNetDmdAUC, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNetDmdGMDlr, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNetDmdGMPct, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCRtnDlr, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCRtnCostDlr, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCRtnPct, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCAvgOrder, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCFWOSUnit, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCNoOfOrders, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCVisits, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCPlacement, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCSlsStkRatio, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCSellThru, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCSpace, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.SquareSpace, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.LinearSpace, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.FloorSpace, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCTransactions, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.SpaceConvPct, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesUperSqSpace, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesUperLinearSpace, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.DensityU, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesperSpaceU, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesCDlrperSqSpace, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesDlrperSqSpace, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesCDlrperLinearSpace, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesDlrperLinearSpace, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCPlacedOrdersDlr, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCConvPct, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesUnitPctTTL, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesCostDlrPctTTL, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotDTCSalesUnitPctTTL, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotDTCSalesCostDlrPctTTL, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.OnOrderAUR, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.ShrinkPctTot, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotIMUPct, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotStrSalesAUC, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCGrossDmdAUR, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.DTCGrossDmdAUC, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.AfterDiscountAUR, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
            }
            catch (Exception exc)
            {
                string message = exc.ToString();
                throw;
            }
        }
        public override void ChainPlanDateTotal(PlanCube aPlanCube)
        {
            try
            {
                base.ChainPlanDateTotal(aPlanCube);
                ChainTimeTotalValue(aPlanCube, BasePlanQuantityVariables.Value);
                ChainTimeTotalPctChange(aPlanCube);
                ChainTimeTotalPctChangeToPlan(aPlanCube);
                aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesDlrT2, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotStrSalesAURT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.CompPctTtlT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.NonCompPctTtlT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ReceiptUnitT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ReceiptCostT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.AdjUnitsT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ShrinkPctTotT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.WOSTotalT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.WOSRegPromoT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ForwardWOSTotalT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ForwardWOSMarkdownT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ForwardWOSRegPromoT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ReceiptTotalUnitsT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ReceiptMarkdownUnitsT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ReceiptRegularUnitsT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesStockRatioTotalT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesStockRatioMarkdownT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesStockRatioRegPromoT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesTotalUnitsT2, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesTotalUnitsT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesMarkdownUnitsT2, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesMarkdownUnitsT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesPromoUnitsT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesRegPromoUnitsT2, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesRegPromoUnitsT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesRegularUnitsT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SellThruPctTotalT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SellThruPctMarkdownT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SellThruPctRegPromoT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryTotalUnitsT2, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryTotalUnitsT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryTotalUnitsT3, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryTotalUnitsT4, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryMarkdownUnitsT2, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryMarkdownUnitsT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryMarkdownUnitsT3, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryRegularUnitsT2, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryRegularUnitsT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryRegularUnitsT3, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotSalesAUCT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesCostT2, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotStrSalesCostDlrT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotBinvCostDlrT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotBinvCostDlrT2, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotBinvCostDlrT3, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ReceiptAUCTotT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InitialMUPctT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.GrossMarginT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.GrossMarginPctT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.OTBCostDlrT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.OTBUnitT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.OnOrderDlrT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.OnOrderAUCT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.OnOrderCostT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.OnOrderUnitT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ShrinkUnitsTotT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotEinvUnitsT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotEinvUnitsT2, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotEinvUnitsT3, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.AdjUntiPctTotT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SellThruUnitPctTotT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotStrSalesAUCT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotSalesAURT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotSalesDlrT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotSalesDlrT2, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotSalesCostDlrT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotSalesCostDlrT2, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotSalesUnitT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotSalesUnitT2, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.GrossMarginPctStrT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.GrossMarginTotStrT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.CompSlsDlrT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.NonCompSlsDlrT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.NewStoresT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.OpenStoresT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCRtnUnitT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCBODlrT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCBOCostDlrT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCBOPctT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCCancelUnitT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCCancelDlrT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCCancelPctT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCCancelCostDlrT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCGrossDmdUnitT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCGrossDmdDlrT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCGrossDmdAURT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCGrossDmdAUCT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCGrossDmdCostDlrT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCNetDmdUnitT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCNetDmdDlrT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCNetDmdCostDlrT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCNetDmdPctT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCNetDmdAURT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCNetDmdAUCT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCNetDmdGMDlrT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCNetDmdGMPctT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCRtnDlrT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCRtnCostDlrT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCRtnPctT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCAvgOrderT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCNoOfOrdersT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCVisitsT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCPlacementT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCSlsStkRatioT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCSellThruT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCSpaceT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCBOUnitT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotStrSalesUnitPctTTLT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotStrSalesCostDlrPctTTLT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotDTCSalesUnitPctTTLT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotDTCSalesCostDlrPctTTLT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.AdjCostDlrTotT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ShrinkCostDlrTotT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotEinvCostDlrT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotEinvCostDlrT2, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotEinvCostDlrT3, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCGrossDmdGMDlrT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCGrsDmdGMPctT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DiscountPctT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DiscountDlrT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.AfterDiscountDlrT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.AfterDiscountAURT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.FreightCostPerUnitT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotFreightCostDlrT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.AfterDiscGMDlrT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.VATPctT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.VATDlrT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.CurrXchgPctT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ConvertedSalesDlrT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SaleswithoutVATDlrT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotEinvAUCT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotEinvAUCT2, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotEinvAUCT3, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.Commit1UnitT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.Commit1CostDlrT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.Commit1AUCT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.Commit2UnitT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.Commit2CostDlrT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.Commit2AUCT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.Commit3UnitT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.Commit3AUCT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.Commit3CostDlrT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DensityUT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCConvPctT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCPlacedOrdersDlrT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCTransactionsT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.FloorSpaceT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.LinearSpaceT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesUperLinearSpaceT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesUperSqSpaceT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesperSpaceUT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SpaceConvPctT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SquareSpaceT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotStrSalesDlrperLinearSpaceT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotStrSalesDlrperSqSpaceT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotStrSalesCDlrperLinearSpaceT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotStrSalesCDlrperSqSpaceT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesDlrT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotBinvAUCT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotBinvAUCT2, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotBinvAUCT3, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
            }
            catch (Exception exc)
            {
                string message = exc.ToString();
                throw;
            }
        }
        public override void ChainPlanLowLevelTotalDateTotal(PlanCube aPlanCube)
        {
            try
            {
                base.ChainPlanLowLevelTotalDateTotal(aPlanCube);
                ChainTimeTotalValue(aPlanCube, BasePlanQuantityVariables.Value);
                ChainTimeTotalPctChange(aPlanCube);
                ChainTimeTotalPctChangeToPlan(aPlanCube);
                ChainTimeTotalValue(aPlanCube, BasePlanQuantityVariables.LowLevelAverage);
                aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesDlrT2, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotStrSalesAURT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.CompPctTtlT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.NonCompPctTtlT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ReceiptUnitT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ReceiptCostT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.AdjUnitsT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ShrinkPctTotT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.WOSTotalT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.WOSRegPromoT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ForwardWOSTotalT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ForwardWOSMarkdownT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ForwardWOSRegPromoT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ReceiptTotalUnitsT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ReceiptMarkdownUnitsT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ReceiptRegularUnitsT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesStockRatioTotalT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesStockRatioMarkdownT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesStockRatioRegPromoT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesTotalUnitsT2, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesTotalUnitsT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesMarkdownUnitsT2, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesMarkdownUnitsT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesPromoUnitsT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesRegPromoUnitsT2, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesRegPromoUnitsT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesRegularUnitsT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SellThruPctTotalT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SellThruPctMarkdownT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SellThruPctRegPromoT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryTotalUnitsT2, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryTotalUnitsT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryTotalUnitsT3, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryTotalUnitsT4, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryMarkdownUnitsT2, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryMarkdownUnitsT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryMarkdownUnitsT3, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryRegularUnitsT2, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryRegularUnitsT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryRegularUnitsT3, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotSalesAUCT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesCostT2, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotStrSalesCostDlrT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotBinvCostDlrT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotBinvCostDlrT2, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotBinvCostDlrT3, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ReceiptAUCTotT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InitialMUPctT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.GrossMarginT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.GrossMarginPctT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.OTBCostDlrT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.OTBUnitT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.OnOrderDlrT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.OnOrderAUCT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.OnOrderCostT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.OnOrderUnitT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ShrinkUnitsTotT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotEinvUnitsT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotEinvUnitsT2, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotEinvUnitsT3, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.AdjUntiPctTotT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SellThruUnitPctTotT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotStrSalesAUCT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotSalesAURT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotSalesDlrT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotSalesDlrT2, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotSalesCostDlrT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotSalesCostDlrT2, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotSalesUnitT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotSalesUnitT2, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.GrossMarginPctStrT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.GrossMarginTotStrT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.CompSlsDlrT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.NonCompSlsDlrT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.NewStoresT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.OpenStoresT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCRtnUnitT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCBODlrT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCBOCostDlrT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCBOPctT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCCancelUnitT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCCancelDlrT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCCancelPctT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCCancelCostDlrT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCGrossDmdUnitT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCGrossDmdDlrT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCGrossDmdAURT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCGrossDmdAUCT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCGrossDmdCostDlrT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCNetDmdUnitT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCNetDmdDlrT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCNetDmdCostDlrT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCNetDmdPctT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCNetDmdAURT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCNetDmdAUCT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCNetDmdGMDlrT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCNetDmdGMPctT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCRtnDlrT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCRtnCostDlrT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCRtnPctT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCAvgOrderT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCNoOfOrdersT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCVisitsT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCPlacementT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCSlsStkRatioT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCSellThruT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCSpaceT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCBOUnitT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotStrSalesUnitPctTTLT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotStrSalesCostDlrPctTTLT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotDTCSalesUnitPctTTLT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotDTCSalesCostDlrPctTTLT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.AdjCostDlrTotT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ShrinkCostDlrTotT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotEinvCostDlrT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotEinvCostDlrT2, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotEinvCostDlrT3, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCGrossDmdGMDlrT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCGrsDmdGMPctT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DiscountPctT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DiscountDlrT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.AfterDiscountDlrT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.AfterDiscountAURT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.FreightCostPerUnitT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotFreightCostDlrT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.AfterDiscGMDlrT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.VATPctT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.VATDlrT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.CurrXchgPctT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ConvertedSalesDlrT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SaleswithoutVATDlrT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotEinvAUCT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotEinvAUCT2, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotEinvAUCT3, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.Commit1UnitT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.Commit1CostDlrT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.Commit1AUCT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.Commit2UnitT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.Commit2CostDlrT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.Commit2AUCT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.Commit3UnitT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.Commit3AUCT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.Commit3CostDlrT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DensityUT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCConvPctT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCPlacedOrdersDlrT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCTransactionsT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.FloorSpaceT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.LinearSpaceT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesUperLinearSpaceT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesUperSqSpaceT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesperSpaceUT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SpaceConvPctT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SquareSpaceT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotStrSalesDlrperLinearSpaceT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotStrSalesDlrperSqSpaceT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotStrSalesCDlrperLinearSpaceT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotStrSalesCDlrperSqSpaceT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesDlrT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotBinvAUCT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotBinvAUCT2, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotBinvAUCT3, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_ChainBalance, BasePlanChangeMethods.Change_ChainLowLevelBalance, null);
            }
            catch (Exception exc)
            {
                string message = exc.ToString();
                throw;
            }
        }
        private void ChainTimeTotalValue(PlanCube aPlanCube, QuantityVariableProfile aQuantVarProf)
        {
            try
            {
                aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesDlrT2, aQuantVarProf, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotStrSalesAURT1, aQuantVarProf, DefaultPlanFormulasAndSpreads.Init_TotStrSalesAURT1, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.CompPctTtlT1, aQuantVarProf, DefaultPlanFormulasAndSpreads.Init_CompPctTtlT1, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.NonCompPctTtlT1, aQuantVarProf, DefaultPlanFormulasAndSpreads.Init_NonCompPctTtlT1, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ReceiptUnitT1, aQuantVarProf, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ReceiptCostT1, aQuantVarProf, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.AdjUnitsT1, aQuantVarProf, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ShrinkPctTotT1, aQuantVarProf, DefaultPlanFormulasAndSpreads.Init_ShrinkPctTotT1, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ForwardWOSTotalT1, aQuantVarProf, DefaultPlanFormulasAndSpreads.Init_ForwardWOSTotalT1_Custom, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ForwardWOSMarkdownT1, aQuantVarProf, DefaultPlanFormulasAndSpreads.Init_ForwardWOSMarkdownT1_Custom, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ForwardWOSRegPromoT1, aQuantVarProf, DefaultPlanFormulasAndSpreads.Init_ForwardWOSRegPromoT1_Custom, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ReceiptTotalUnitsT1, aQuantVarProf, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ReceiptMarkdownUnitsT1, aQuantVarProf, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ReceiptRegularUnitsT1, aQuantVarProf, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesTotalUnitsT2, aQuantVarProf, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesTotalUnitsT1, aQuantVarProf, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesMarkdownUnitsT1, aQuantVarProf, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesPromoUnitsT1, aQuantVarProf, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesRegPromoUnitsT1, aQuantVarProf, DefaultPlanFormulasAndSpreads.Init_SalesRegPromoUnitsT1_Custom, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesRegularUnitsT1, aQuantVarProf, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryTotalUnitsT2, aQuantVarProf, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryTotalUnitsT1, aQuantVarProf, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryTotalUnitsT3, aQuantVarProf, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryTotalUnitsT4, aQuantVarProf, DefaultPlanFormulasAndSpreads.Init_InventoryTotalUnitsT4, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryMarkdownUnitsT2, aQuantVarProf, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryMarkdownUnitsT1, aQuantVarProf, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryMarkdownUnitsT3, aQuantVarProf, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryRegularUnitsT2, aQuantVarProf, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryRegularUnitsT1, aQuantVarProf, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryRegularUnitsT3, aQuantVarProf, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotSalesAUCT1, aQuantVarProf, DefaultPlanFormulasAndSpreads.Init_TotSalesAUCT1, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesCostT2, aQuantVarProf, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotStrSalesCostDlrT1, aQuantVarProf, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotBinvCostDlrT1, aQuantVarProf, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotBinvCostDlrT2, aQuantVarProf, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotBinvCostDlrT3, aQuantVarProf, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ReceiptAUCTotT1, aQuantVarProf, DefaultPlanFormulasAndSpreads.Init_ReceiptAUCTotT1, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InitialMUPctT1, aQuantVarProf, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.GrossMarginT1, aQuantVarProf, DefaultPlanFormulasAndSpreads.Init_GrossMarginT1, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.GrossMarginPctT1, aQuantVarProf, DefaultPlanFormulasAndSpreads.Init_GrossMarginPctT1, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.OTBCostDlrT1, aQuantVarProf, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.OTBUnitT1, aQuantVarProf, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.OnOrderDlrT1, aQuantVarProf, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.OnOrderAUCT1, aQuantVarProf, DefaultPlanFormulasAndSpreads.Init_OnOrderAUCT1, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.OnOrderCostT1, aQuantVarProf, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.OnOrderUnitT1, aQuantVarProf, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ShrinkUnitsTotT1, aQuantVarProf, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotEinvUnitsT1, aQuantVarProf, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotEinvUnitsT2, aQuantVarProf, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotEinvUnitsT3, aQuantVarProf, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.AdjUntiPctTotT1, aQuantVarProf, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SellThruUnitPctTotT1, aQuantVarProf, DefaultPlanFormulasAndSpreads.Init_SellThruUnitPctTotT1, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotStrSalesAUCT1, aQuantVarProf, DefaultPlanFormulasAndSpreads.Init_TotStrSalesAUCT1, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotSalesAURT1, aQuantVarProf, DefaultPlanFormulasAndSpreads.Init_TotSalesAURT1, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotSalesDlrT1, aQuantVarProf, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotSalesDlrT2, aQuantVarProf, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotSalesCostDlrT1, aQuantVarProf, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotSalesCostDlrT2, aQuantVarProf, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotSalesUnitT1, aQuantVarProf, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotSalesUnitT2, aQuantVarProf, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.GrossMarginPctStrT1, aQuantVarProf, DefaultPlanFormulasAndSpreads.Init_GrossMarginPctStrT1, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.GrossMarginTotStrT1, aQuantVarProf, DefaultPlanFormulasAndSpreads.Init_GrossMarginTotStrT1, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.CompSlsDlrT1, aQuantVarProf, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.NonCompSlsDlrT1, aQuantVarProf, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.NewStoresT1, aQuantVarProf, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.OpenStoresT1, aQuantVarProf, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCRtnUnitT1, aQuantVarProf, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCBODlrT1, aQuantVarProf, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCBOCostDlrT1, aQuantVarProf, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCBOPctT1, aQuantVarProf, DefaultPlanFormulasAndSpreads.Init_DTCBOPctT1, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCCancelUnitT1, aQuantVarProf, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCCancelDlrT1, aQuantVarProf, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCCancelPctT1, aQuantVarProf, DefaultPlanFormulasAndSpreads.Init_DTCCancelPctT1, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCCancelCostDlrT1, aQuantVarProf, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCGrossDmdUnitT1, aQuantVarProf, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCGrossDmdDlrT1, aQuantVarProf, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCGrossDmdAURT1, aQuantVarProf, DefaultPlanFormulasAndSpreads.Init_DTCGrossDmdAURT1, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCGrossDmdAUCT1, aQuantVarProf, DefaultPlanFormulasAndSpreads.Init_DTCGrossDmdAUCT1, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCGrossDmdCostDlrT1, aQuantVarProf, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCNetDmdUnitT1, aQuantVarProf, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCNetDmdDlrT1, aQuantVarProf, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCNetDmdCostDlrT1, aQuantVarProf, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCNetDmdPctT1, aQuantVarProf, DefaultPlanFormulasAndSpreads.Init_DTCNetDmdPctT1, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCNetDmdAURT1, aQuantVarProf, DefaultPlanFormulasAndSpreads.Init_DTCNetDmdAURT1, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCNetDmdAUCT1, aQuantVarProf, DefaultPlanFormulasAndSpreads.Init_DTCNetDmdAUCT1, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCNetDmdGMDlrT1, aQuantVarProf, DefaultPlanFormulasAndSpreads.Init_DTCNetDmdGMDlrT1, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCNetDmdGMPctT1, aQuantVarProf, DefaultPlanFormulasAndSpreads.Init_DTCNetDmdGMPctT1, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCRtnDlrT1, aQuantVarProf, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCRtnCostDlrT1, aQuantVarProf, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCRtnPctT1, aQuantVarProf, DefaultPlanFormulasAndSpreads.Init_DTCRtnPctT1, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCAvgOrderT1, aQuantVarProf, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCNoOfOrdersT1, aQuantVarProf, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCVisitsT1, aQuantVarProf, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCPlacementT1, aQuantVarProf, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCSlsStkRatioT1, aQuantVarProf, DefaultPlanFormulasAndSpreads.Init_DTCSlsStkRatioT1, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCSellThruT1, aQuantVarProf, DefaultPlanFormulasAndSpreads.Init_DTCSellThruT1, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCSpaceT1, aQuantVarProf, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCBOUnitT1, aQuantVarProf, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotStrSalesUnitPctTTLT1, aQuantVarProf, DefaultPlanFormulasAndSpreads.Init_TotStrSalesUnitPctTTLT1, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotStrSalesCostDlrPctTTLT1, aQuantVarProf, DefaultPlanFormulasAndSpreads.Init_TotStrSalesCostDlrPctTTLT1, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotDTCSalesUnitPctTTLT1, aQuantVarProf, DefaultPlanFormulasAndSpreads.Init_TotDTCSalesUnitPctTTLT1, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotDTCSalesCostDlrPctTTLT1, aQuantVarProf, DefaultPlanFormulasAndSpreads.Init_TotDTCSalesCostDlrPctTTLT1, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.AdjCostDlrTotT1, aQuantVarProf, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ShrinkCostDlrTotT1, aQuantVarProf, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotEinvCostDlrT1, aQuantVarProf, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotEinvCostDlrT2, aQuantVarProf, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotEinvCostDlrT3, aQuantVarProf, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCGrossDmdGMDlrT1, aQuantVarProf, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCGrsDmdGMPctT1, aQuantVarProf, DefaultPlanFormulasAndSpreads.Init_DTCGrsDmdGMPctT1, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DiscountPctT1, aQuantVarProf, DefaultPlanFormulasAndSpreads.Init_DiscountPctT1, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DiscountDlrT1, aQuantVarProf, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.AfterDiscountDlrT1, aQuantVarProf, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.AfterDiscountAURT1, aQuantVarProf, DefaultPlanFormulasAndSpreads.Init_AfterDiscountAURT1, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.FreightCostPerUnitT1, aQuantVarProf, DefaultPlanFormulasAndSpreads.Init_FreightCostPerUnitT1, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotFreightCostDlrT1, aQuantVarProf, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.AfterDiscGMDlrT1, aQuantVarProf, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.VATPctT1, aQuantVarProf, DefaultPlanFormulasAndSpreads.Init_VATPctT1, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.VATDlrT1, aQuantVarProf, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.CurrXchgPctT1, aQuantVarProf, DefaultPlanFormulasAndSpreads.Init_CurrXchgPctT1, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ConvertedSalesDlrT1, aQuantVarProf, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SaleswithoutVATDlrT1, aQuantVarProf, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotEinvAUCT1, aQuantVarProf, DefaultPlanFormulasAndSpreads.Init_TotEinvAUCT1, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotEinvAUCT2, aQuantVarProf, DefaultPlanFormulasAndSpreads.Init_TotEinvAUCT2, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotEinvAUCT3, aQuantVarProf, DefaultPlanFormulasAndSpreads.Init_TotEinvAUCT3, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.Commit1UnitT1, aQuantVarProf, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.Commit1CostDlrT1, aQuantVarProf, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.Commit1AUCT1, aQuantVarProf, DefaultPlanFormulasAndSpreads.Init_Commit1AUCT1, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.Commit2UnitT1, aQuantVarProf, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.Commit2CostDlrT1, aQuantVarProf, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.Commit2AUCT1, aQuantVarProf, DefaultPlanFormulasAndSpreads.Init_Commit2AUCT1, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.Commit3UnitT1, aQuantVarProf, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.Commit3AUCT1, aQuantVarProf, DefaultPlanFormulasAndSpreads.Init_Commit3AUCT1, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.Commit3CostDlrT1, aQuantVarProf, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DensityUT1, aQuantVarProf, DefaultPlanFormulasAndSpreads.Init_DensityUT1, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCConvPctT1, aQuantVarProf, DefaultPlanFormulasAndSpreads.Init_DTCConvPctT1, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCPlacedOrdersDlrT1, aQuantVarProf, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCTransactionsT1, aQuantVarProf, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.FloorSpaceT1, aQuantVarProf, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.LinearSpaceT1, aQuantVarProf, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesUperLinearSpaceT1, aQuantVarProf, DefaultPlanFormulasAndSpreads.Init_SalesUperLinearSpaceT1, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesUperSqSpaceT1, aQuantVarProf, DefaultPlanFormulasAndSpreads.Init_SalesUperSqSpaceT1, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesperSpaceUT1, aQuantVarProf, DefaultPlanFormulasAndSpreads.Init_SalesperSpaceUT1, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SpaceConvPctT1, aQuantVarProf, DefaultPlanFormulasAndSpreads.Init_SpaceConvPctT1, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SquareSpaceT1, aQuantVarProf, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotStrSalesDlrperLinearSpaceT1, aQuantVarProf, DefaultPlanFormulasAndSpreads.Init_TotStrSalesDlrperLinearSpaceT1, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotStrSalesDlrperSqSpaceT1, aQuantVarProf, DefaultPlanFormulasAndSpreads.Init_TotStrSalesDlrperSqSpaceT1, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotStrSalesCDlrperLinearSpaceT1, aQuantVarProf, DefaultPlanFormulasAndSpreads.Init_TotStrSalesCDlrperLinearSpaceT1, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotStrSalesCDlrperSqSpaceT1, aQuantVarProf, DefaultPlanFormulasAndSpreads.Init_TotStrSalesCDlrperSqSpaceT1, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesDlrT1, aQuantVarProf, BasePlanFormulasAndSpreads.Init_SumDetail, DefaultPlanChangeMethods.Change_SalesDlrT1, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotBinvAUCT1, aQuantVarProf, DefaultPlanFormulasAndSpreads.Init_TotStrBinvAURT1, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotBinvAUCT2, aQuantVarProf, DefaultPlanFormulasAndSpreads.Init_TotStrBinvAURT2, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotBinvAUCT3, aQuantVarProf, DefaultPlanFormulasAndSpreads.Init_TotStrBinvAURT3, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
            }
            catch (Exception exc)
            {
                string message = exc.ToString();
                throw;
            }
        }
        private void ChainTimeTotalPctChange(PlanCube aPlanCube)
        {
            try
            {
                aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesDlrT2, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotStrSalesAURT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.CompPctTtlT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.NonCompPctTtlT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ReceiptUnitT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ReceiptCostT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.AdjUnitsT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ShrinkPctTotT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.WOSTotalT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.WOSRegPromoT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ForwardWOSTotalT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ForwardWOSMarkdownT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ForwardWOSRegPromoT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ReceiptTotalUnitsT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ReceiptMarkdownUnitsT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ReceiptRegularUnitsT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesStockRatioTotalT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesStockRatioMarkdownT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesStockRatioRegPromoT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesTotalUnitsT2, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesTotalUnitsT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesMarkdownUnitsT2, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesMarkdownUnitsT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesPromoUnitsT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesRegPromoUnitsT2, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesRegPromoUnitsT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesRegularUnitsT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SellThruPctTotalT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SellThruPctMarkdownT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SellThruPctRegPromoT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryTotalUnitsT2, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryTotalUnitsT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryTotalUnitsT3, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryTotalUnitsT4, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryMarkdownUnitsT2, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryMarkdownUnitsT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryMarkdownUnitsT3, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryRegularUnitsT2, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryRegularUnitsT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryRegularUnitsT3, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotSalesAUCT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesCostT2, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotStrSalesCostDlrT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotBinvCostDlrT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotBinvCostDlrT2, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotBinvCostDlrT3, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ReceiptAUCTotT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InitialMUPctT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.GrossMarginT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.GrossMarginPctT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.OTBCostDlrT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.OTBUnitT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.OnOrderDlrT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.OnOrderAUCT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.OnOrderCostT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.OnOrderUnitT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ShrinkUnitsTotT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotEinvUnitsT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotEinvUnitsT2, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotEinvUnitsT3, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.AdjUntiPctTotT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SellThruUnitPctTotT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotStrSalesAUCT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotSalesAURT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotSalesDlrT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotSalesDlrT2, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotSalesCostDlrT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotSalesCostDlrT2, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotSalesUnitT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotSalesUnitT2, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.GrossMarginPctStrT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.GrossMarginTotStrT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.CompSlsDlrT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.NonCompSlsDlrT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.NewStoresT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.OpenStoresT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCRtnUnitT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCBODlrT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCBOCostDlrT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCBOPctT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCCancelUnitT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCCancelDlrT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCCancelPctT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCCancelCostDlrT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCGrossDmdUnitT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCGrossDmdDlrT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCGrossDmdAURT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCGrossDmdAUCT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCGrossDmdCostDlrT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCNetDmdUnitT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCNetDmdDlrT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCNetDmdCostDlrT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCNetDmdPctT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCNetDmdAURT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCNetDmdAUCT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCNetDmdGMDlrT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCNetDmdGMPctT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCRtnDlrT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCRtnCostDlrT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCRtnPctT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCAvgOrderT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCNoOfOrdersT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCVisitsT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCPlacementT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCSlsStkRatioT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCSellThruT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCSpaceT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCBOUnitT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotStrSalesUnitPctTTLT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotStrSalesCostDlrPctTTLT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotDTCSalesUnitPctTTLT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotDTCSalesCostDlrPctTTLT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.AdjCostDlrTotT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ShrinkCostDlrTotT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotEinvCostDlrT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotEinvCostDlrT2, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotEinvCostDlrT3, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCGrossDmdGMDlrT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCGrsDmdGMPctT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DiscountPctT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DiscountDlrT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.AfterDiscountDlrT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.AfterDiscountAURT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.FreightCostPerUnitT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotFreightCostDlrT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.AfterDiscGMDlrT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.VATPctT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.VATDlrT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.CurrXchgPctT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ConvertedSalesDlrT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SaleswithoutVATDlrT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotEinvAUCT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotEinvAUCT2, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotEinvAUCT3, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.Commit1UnitT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.Commit1CostDlrT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.Commit1AUCT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.Commit2UnitT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.Commit2CostDlrT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.Commit2AUCT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.Commit3UnitT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.Commit3AUCT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.Commit3CostDlrT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DensityUT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCConvPctT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCPlacedOrdersDlrT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCTransactionsT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.FloorSpaceT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.LinearSpaceT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesUperLinearSpaceT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesUperSqSpaceT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesperSpaceUT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SpaceConvPctT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SquareSpaceT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotStrSalesDlrperLinearSpaceT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotStrSalesDlrperSqSpaceT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotStrSalesCDlrperLinearSpaceT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotStrSalesCDlrperSqSpaceT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesDlrT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotBinvAUCT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotBinvAUCT2, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotBinvAUCT3, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
            }
            catch (Exception exc)
            {
                string message = exc.ToString();
                throw;
            }
        }
        private void ChainTimeTotalPctChangeToPlan(PlanCube aPlanCube)
        {
            try
            {
                aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesDlrT2, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotStrSalesAURT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.CompPctTtlT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.NonCompPctTtlT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ReceiptUnitT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ReceiptCostT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.AdjUnitsT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ShrinkPctTotT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.WOSTotalT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.WOSRegPromoT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ForwardWOSTotalT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ForwardWOSMarkdownT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ForwardWOSRegPromoT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ReceiptTotalUnitsT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ReceiptMarkdownUnitsT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ReceiptRegularUnitsT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesStockRatioTotalT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesStockRatioMarkdownT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesStockRatioRegPromoT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesTotalUnitsT2, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesTotalUnitsT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesMarkdownUnitsT2, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesMarkdownUnitsT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesPromoUnitsT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesRegPromoUnitsT2, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesRegPromoUnitsT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesRegularUnitsT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SellThruPctTotalT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SellThruPctMarkdownT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SellThruPctRegPromoT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryTotalUnitsT2, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryTotalUnitsT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryTotalUnitsT3, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryTotalUnitsT4, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryMarkdownUnitsT2, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryMarkdownUnitsT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryMarkdownUnitsT3, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryRegularUnitsT2, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryRegularUnitsT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryRegularUnitsT3, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotSalesAUCT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesCostT2, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotStrSalesCostDlrT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotBinvCostDlrT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotBinvCostDlrT2, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotBinvCostDlrT3, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ReceiptAUCTotT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InitialMUPctT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.GrossMarginT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.GrossMarginPctT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.OTBCostDlrT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.OTBUnitT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.OnOrderDlrT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.OnOrderAUCT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.OnOrderCostT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.OnOrderUnitT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ShrinkUnitsTotT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotEinvUnitsT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotEinvUnitsT2, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotEinvUnitsT3, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.AdjUntiPctTotT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SellThruUnitPctTotT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotStrSalesAUCT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotSalesAURT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotSalesDlrT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotSalesDlrT2, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotSalesCostDlrT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotSalesCostDlrT2, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotSalesUnitT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotSalesUnitT2, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.GrossMarginPctStrT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.GrossMarginTotStrT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.CompSlsDlrT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.NonCompSlsDlrT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.NewStoresT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.OpenStoresT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCRtnUnitT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCBODlrT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCBOCostDlrT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCBOPctT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCCancelUnitT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCCancelDlrT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCCancelPctT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCCancelCostDlrT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCGrossDmdUnitT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCGrossDmdDlrT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCGrossDmdAURT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCGrossDmdAUCT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCGrossDmdCostDlrT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCNetDmdUnitT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCNetDmdDlrT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCNetDmdCostDlrT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCNetDmdPctT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCNetDmdAURT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCNetDmdAUCT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCNetDmdGMDlrT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCNetDmdGMPctT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCRtnDlrT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCRtnCostDlrT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCRtnPctT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCAvgOrderT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCNoOfOrdersT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCVisitsT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCPlacementT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCSlsStkRatioT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCSellThruT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCSpaceT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCBOUnitT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotStrSalesUnitPctTTLT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotStrSalesCostDlrPctTTLT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotDTCSalesUnitPctTTLT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotDTCSalesCostDlrPctTTLT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.AdjCostDlrTotT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ShrinkCostDlrTotT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotEinvCostDlrT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotEinvCostDlrT2, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotEinvCostDlrT3, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCGrossDmdGMDlrT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCGrsDmdGMPctT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DiscountPctT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DiscountDlrT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.AfterDiscountDlrT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.AfterDiscountAURT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.FreightCostPerUnitT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotFreightCostDlrT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.AfterDiscGMDlrT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.VATPctT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.VATDlrT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.CurrXchgPctT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ConvertedSalesDlrT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SaleswithoutVATDlrT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotEinvAUCT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotEinvAUCT2, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotEinvAUCT3, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.Commit1UnitT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.Commit1CostDlrT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.Commit1AUCT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.Commit2UnitT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.Commit2CostDlrT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.Commit2AUCT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.Commit3UnitT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.Commit3AUCT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.Commit3CostDlrT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DensityUT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCConvPctT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCPlacedOrdersDlrT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCTransactionsT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.FloorSpaceT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.LinearSpaceT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesUperLinearSpaceT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesUperSqSpaceT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesperSpaceUT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SpaceConvPctT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SquareSpaceT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotStrSalesDlrperLinearSpaceT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotStrSalesDlrperSqSpaceT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotStrSalesCDlrperLinearSpaceT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotStrSalesCDlrperSqSpaceT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesDlrT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotBinvAUCT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotBinvAUCT2, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotBinvAUCT3, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
            }
            catch (Exception exc)
            {
                string message = exc.ToString();
                throw;
            }
        }
        public override void StoreBasisDetail(PlanCube aPlanCube)
        {
            try
            {
                base.StoreBasisDetail(aPlanCube);
                aPlanCube.AddRule(DefaultPlanVariables.TotRecUnit, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Formula_TotRecUnit_FLOW, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotRecCostDlr, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotRecCostDlr_STORE, null, null);
					aPlanCube.OverrideInitRule(DefaultPlanVariables.ForwardWOSTotal, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_ForwardWOSTotal_Custom);
					aPlanCube.OverrideInitRule(DefaultPlanVariables.ForwardWOSMarkdown, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_ForwardWOSMarkdown_Custom);
					aPlanCube.OverrideInitRule(DefaultPlanVariables.ForwardWOSRegPromo, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_ForwardWOSRegPromo_Custom);
					aPlanCube.AddRule(DefaultPlanVariables.ReceiptTotalUnits, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.OverrideInitRule(DefaultPlanVariables.SalesTotalUnits, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_SalesTotalUnits_Custom_STORE);
					aPlanCube.AddRule(DefaultPlanVariables.SalesMarkdownUnits, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryMarkdownUnits, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotBinvCostDlr, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.GrossMarginTotDlr, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_GrossMarginTotDlr_STORE, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.GrossMarginPctTot, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_GrossMarginPctTot, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotSalesCostDlr, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotSalesCostDlr_STORE, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DiscountPct, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_DiscountPct, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DiscountDlr, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.AfterDiscountDlr, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.VATPct, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_VATPct, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.VATDlr, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.CurrXchgPct, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_CurrXchgPct, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.ConvertedSalesDlr, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.SaleswithoutVATDlr, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.SquareSpace, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.LinearSpace, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.FloorSpace, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.SpaceConvPct, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_SpaceConvPct, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesUperSqSpace, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_SalesUperSqSpace, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesUperLinearSpace, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_SalesUperLinearSpace, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DensityU, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_DensityU, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesperSpaceU, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_SalesperSpaceU, null, null);
					aPlanCube.OverrideInitRule(DefaultPlanVariables.InventoryTotalUnits, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_InventoryTotalUnits_Custom);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryRegularUnits, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesRegularUnits, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesRegPromoUnits, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_SalesRegPromoUnits_Custom, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotSalesDlr, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotSalesDlr_STORE, null, null);
            }
            catch (Exception exc)
            {
                string message = exc.ToString();
                throw;
            }
        }
        public override void StoreBasisWeekDetail(PlanCube aPlanCube)
        {
            try
            {
                base.StoreBasisWeekDetail(aPlanCube);
                StoreTimeDetailPctChange(aPlanCube);
                StoreTimeDetailPctChangeToPlan(aPlanCube);
                StoreTimeDetailPctToSet(aPlanCube);
                StoreTimeDetailPctToAllStore(aPlanCube);
                StoreTimeDetailPctToTimePeriod(aPlanCube);
                StoreTimeDetailPctToLowLevelTotal(aPlanCube);
                aPlanCube.AddRule(DefaultPlanVariables.TotBinvCostDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.GrossMarginTotDlr, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_GrossMarginTotDlr_STORE, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.GrossMarginPctTot, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_GrossMarginPctTot, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotSalesDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotSalesCostDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DiscountPct, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_DiscountPct, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DiscountDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.AfterDiscountDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.VATPct, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_VATPct, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.VATDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.CurrXchgPct, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_CurrXchgPct, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.ConvertedSalesDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.SaleswithoutVATDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.SquareSpace, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_AvgDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.LinearSpace, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_AvgDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.FloorSpace, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_AvgDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.SpaceConvPct, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_SpaceConvPct, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesUperSqSpace, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_SalesUperSqSpace, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesUperLinearSpace, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_SalesUperLinearSpace, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DensityU, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_DensityU, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesperSpaceU, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_SalesperSpaceU, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotRecUnit, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Formula_TotRecUnit_FLOW, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotRecCostDlr, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Formula_TotRecCostDlr_FLOW, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSTotal, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_ForwardWOSTotal_Custom, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSMarkdown, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSRegPromo, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryTotalUnits, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesTotalUnits, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryMarkdownUnits, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesMarkdownUnits, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesPromoUnits, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesRegPromoUnits, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_SalesRegPromoUnits_Custom, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryRegularUnits, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesRegularUnits, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, null, null);
            }
            catch (Exception exc)
            {
                string message = exc.ToString();
                throw;
            }
        }
        public override void StorePlanWeekDetail(PlanCube aPlanCube)
        {
            try
            {
                base.StorePlanWeekDetail(aPlanCube);
                StoreTimeDetailPctChange(aPlanCube);
                StoreTimeDetailPctChangeToPlan(aPlanCube);
                StoreTimeDetailPctToSet(aPlanCube);
                StoreTimeDetailPctToAllStore(aPlanCube);
                StoreTimeDetailPctToTimePeriod(aPlanCube);
                StoreTimeDetailPctToLowLevelTotal(aPlanCube);
                aPlanCube.AddRule(DefaultPlanVariables.TotSalesCostDlr, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotSalesCostDlr_STORE, DefaultPlanChangeMethods.Change_TotSalesCostDlr, null);
					aPlanCube.AddRule(DefaultPlanVariables.DiscountPct, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_DiscountPct, DefaultPlanChangeMethods.Change_DiscountPct, null);
					aPlanCube.AddRule(DefaultPlanVariables.DiscountDlr, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.AfterDiscountDlr, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.VATPct, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_VATPct, DefaultPlanChangeMethods.Change_VATPct, null);
					aPlanCube.AddRule(DefaultPlanVariables.VATDlr, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.CurrXchgPct, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_CurrXchgPct, DefaultPlanChangeMethods.Change_CurrXchgPct, null);
					aPlanCube.AddRule(DefaultPlanVariables.ConvertedSalesDlr, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.SaleswithoutVATDlr, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.SquareSpace, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.LinearSpace, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.FloorSpace, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.SpaceConvPct, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_SpaceConvPct, DefaultPlanChangeMethods.Change_SpaceConvPct, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesUperSqSpace, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_SalesUperSqSpace, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesUperLinearSpace, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_SalesUperLinearSpace, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DensityU, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_DensityU, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesperSpaceU, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_SalesperSpaceU, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotRecUnit, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Formula_TotRecUnit_FLOW, DefaultPlanChangeMethods.Change_TotRecUnit, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotRecCostDlr, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotRecCostDlr_STORE, DefaultPlanChangeMethods.Change_TotRecCostDlr, null);
					aPlanCube.OverrideInitRule(DefaultPlanVariables.ForwardWOSTotal, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_ForwardWOSTotal_Custom);
					aPlanCube.OverrideInitRule(DefaultPlanVariables.ForwardWOSMarkdown, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_ForwardWOSMarkdown_Custom);
					aPlanCube.OverrideInitRule(DefaultPlanVariables.ForwardWOSRegPromo, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_ForwardWOSRegPromo_Custom);
					aPlanCube.AddRule(DefaultPlanVariables.ReceiptTotalUnits, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.OverrideInitRule(DefaultPlanVariables.SalesTotalUnits, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_SalesTotalUnits_Custom_STORE);
					aPlanCube.OverridePrimaryChangeRule(DefaultPlanVariables.SalesTotalUnits, BasePlanQuantityVariables.Value, DefaultPlanChangeMethods.Change_SalesTotalUnits_Custom);
					aPlanCube.AddRule(DefaultPlanVariables.SalesMarkdownUnits, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryMarkdownUnits, BasePlanQuantityVariables.Value, null, null);
					aPlanCube.OverridePrimaryChangeRule(DefaultPlanVariables.InventoryRegularUnits, BasePlanQuantityVariables.Value, DefaultPlanChangeMethods.Change_InventoryRegularUnits_Custom);
					aPlanCube.AddRule(DefaultPlanVariables.TotBinvCostDlr, BasePlanQuantityVariables.Value, DefaultPlanChangeMethods.Change_TotBinvCostDlr, null);
					aPlanCube.AddRule(DefaultPlanVariables.GrossMarginTotDlr, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_GrossMarginTotDlr_STORE, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.GrossMarginPctTot, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_GrossMarginPctTot, DefaultPlanChangeMethods.Change_GrossMarginPctTot, null);
					aPlanCube.OverridePrimaryChangeRule(DefaultPlanVariables.SalesRegularUnits, BasePlanQuantityVariables.Value, DefaultPlanChangeMethods.Change_SalesRegularUnits_Custom);
					aPlanCube.OverrideInitRule(DefaultPlanVariables.InventoryTotalUnits, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_InventoryTotalUnits_Custom);
					aPlanCube.OverridePrimaryChangeRule(DefaultPlanVariables.InventoryTotalUnits, BasePlanQuantityVariables.Value, DefaultPlanChangeMethods.Change_InventoryTotalUnits_Custom);
					aPlanCube.OverrideInitRule(DefaultPlanVariables.SalesRegPromoUnits, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_SalesRegPromoUnits_Custom);
					aPlanCube.OverridePrimaryChangeRule(DefaultPlanVariables.SalesRegPromoUnits, BasePlanQuantityVariables.Value, DefaultPlanChangeMethods.Change_SalesRegPromoUnits_Custom);
					aPlanCube.AddRule(DefaultPlanVariables.TotSalesDlr, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_TotSalesDlr_STORE, DefaultPlanChangeMethods.Change_TotSalesDlr, null);
            }
            catch (Exception exc)
            {
                string message = exc.ToString();
                throw;
            }
        }
        public override void StorePlanLowLevelTotalWeekDetail(PlanCube aPlanCube)
        {
            try
            {
                base.StorePlanLowLevelTotalWeekDetail(aPlanCube);
                StoreTimeDetailTotalValue(aPlanCube, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal);
                StoreTimeDetailPctChange(aPlanCube);
                StoreTimeDetailPctChangeToPlan(aPlanCube);
                StoreTimeDetailPctToSet(aPlanCube);
                StoreTimeDetailPctToAllStore(aPlanCube);
                StoreTimeDetailPctToTimePeriod(aPlanCube);
                StoreTimeDetailLowLevelAverage(aPlanCube);
                StoreTimeDetailBalance(aPlanCube);
                aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSRegPromo, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_AvgDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctRegPromo, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_AvgDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSMarkdown, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_AvgDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSTotal, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_AvgDetail, null, null);
            }
            catch (Exception exc)
            {
                string message = exc.ToString();
                throw;
            }
        }
        public override void StorePlanGroupTotalWeekDetail(PlanCube aPlanCube)
        {
            try
            {
                base.StorePlanGroupTotalWeekDetail(aPlanCube);
                StoreTimeDetailTotalValue(aPlanCube, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_SetTotal);
                StoreTimeDetailPctChange(aPlanCube);
                StoreTimeDetailPctChangeToPlan(aPlanCube);
                StoreTimeDetailPctToAllStore(aPlanCube);
                StoreTimeDetailPctToTimePeriod(aPlanCube);
                StoreTimeDetailPctToLowLevelTotal(aPlanCube);
                StoreTimeDetailStoreAverage(aPlanCube);
                StoreTimeDetailTotalValue(aPlanCube, BasePlanQuantityVariables.Comp, BasePlanFormulasAndSpreads.Init_SumCompStore, BasePlanChangeMethods.Change_SetCompTotal);
                StoreTimeDetailTotalValue(aPlanCube, BasePlanQuantityVariables.NonComp, BasePlanFormulasAndSpreads.Init_SumNonCompStore, BasePlanChangeMethods.Change_SetNonCompTotal);
                StoreTimeDetailTotalValue(aPlanCube, BasePlanQuantityVariables.New, BasePlanFormulasAndSpreads.Init_SumNewStore, BasePlanChangeMethods.Change_SetNewTotal);
                aPlanCube.AddRule(DefaultPlanVariables.SellThruPctRegPromo, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_AvgDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSRegPromo, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_AvgDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSMarkdown, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_AvgDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSTotal, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_AvgDetail, null, null);
					aPlanCube.OverrideInitRule(DefaultPlanVariables.CurrXchgPct, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_AvgDetail);
					aPlanCube.OverrideInitRule(DefaultPlanVariables.DiscountPct, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_AvgDetail);
					aPlanCube.OverrideInitRule(DefaultPlanVariables.GrossMarginPctTot, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_AvgDetail);
					aPlanCube.OverrideInitRule(DefaultPlanVariables.VATPct, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_AvgDetail);
					aPlanCube.AddRule(DefaultPlanVariables.TotRecUnit, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.SpaceConvPct, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_AvgDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesUperLinearSpace, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesUperSqSpace, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotRecCostDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesperSpaceU, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DensityU, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.FloorSpace, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.SquareSpace, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.LinearSpace, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, null, null);
            }
            catch (Exception exc)
            {
                string message = exc.ToString();
                throw;
            }
        }
        public override void StorePlanLowLevelTotalGroupTotalWeekDetail(PlanCube aPlanCube)
        {
            try
            {
                base.StorePlanLowLevelTotalGroupTotalWeekDetail(aPlanCube);
                StoreTimeDetailTotalValue(aPlanCube, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_SetTotal);
                StoreTimeDetailPctChange(aPlanCube);
                StoreTimeDetailPctChangeToPlan(aPlanCube);
                StoreTimeDetailPctToAllStore(aPlanCube);
                StoreTimeDetailPctToTimePeriod(aPlanCube);
                StoreTimeDetailStoreAverage(aPlanCube);
                StoreTimeDetailTotalValue(aPlanCube, BasePlanQuantityVariables.Comp, BasePlanFormulasAndSpreads.Init_SumCompStore, BasePlanChangeMethods.Change_SetCompTotal);
                StoreTimeDetailTotalValue(aPlanCube, BasePlanQuantityVariables.NonComp, BasePlanFormulasAndSpreads.Init_SumNonCompStore, BasePlanChangeMethods.Change_SetNonCompTotal);
                StoreTimeDetailTotalValue(aPlanCube, BasePlanQuantityVariables.New, BasePlanFormulasAndSpreads.Init_SumNewStore, BasePlanChangeMethods.Change_SetNewTotal);
                StoreTimeDetailTotalValue(aPlanCube, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_SetTotal);
                StoreTimeDetailBalance(aPlanCube);
            }
            catch (Exception exc)
            {
                string message = exc.ToString();
                throw;
            }
        }
        public override void StorePlanStoreTotalWeekDetail(PlanCube aPlanCube)
        {
            try
            {
                base.StorePlanStoreTotalWeekDetail(aPlanCube);
                StoreTimeDetailTotalValue(aPlanCube, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_AllTotal);
                StoreTimeDetailPctChange(aPlanCube);
                StoreTimeDetailPctChangeToPlan(aPlanCube);
                StoreTimeDetailPctToTimePeriod(aPlanCube);
                StoreTimeDetailPctToLowLevelTotal(aPlanCube);
                StoreTimeDetailStoreAverage(aPlanCube);
                StoreTimeDetailTotalValue(aPlanCube, BasePlanQuantityVariables.Comp, BasePlanFormulasAndSpreads.Init_SumCompStore, BasePlanChangeMethods.Change_AllCompTotal);
                StoreTimeDetailTotalValue(aPlanCube, BasePlanQuantityVariables.NonComp, BasePlanFormulasAndSpreads.Init_SumNonCompStore, BasePlanChangeMethods.Change_AllNonCompTotal);
                StoreTimeDetailTotalValue(aPlanCube, BasePlanQuantityVariables.New, BasePlanFormulasAndSpreads.Init_SumNewStore, BasePlanChangeMethods.Change_AllNewTotal);
                aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSRegPromo, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_AvgDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctRegPromo, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_AvgDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSMarkdown, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_AvgDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSTotal, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_AvgDetail, null, null);
					aPlanCube.OverrideInitRule(DefaultPlanVariables.CurrXchgPct, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_AvgDetail);
					aPlanCube.OverrideInitRule(DefaultPlanVariables.DiscountPct, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_AvgDetail);
					aPlanCube.OverrideInitRule(DefaultPlanVariables.GrossMarginPctStr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_AvgDetail);
					aPlanCube.OverrideInitRule(DefaultPlanVariables.VATPct, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_AvgDetail);
					aPlanCube.AddRule(DefaultPlanVariables.TotRecCostDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.SpaceConvPct, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_AvgDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DensityU, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotRecUnit, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesUperLinearSpace, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesUperSqSpace, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesperSpaceU, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.LinearSpace, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.FloorSpace, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.SquareSpace, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, null, null);
            }
            catch (Exception exc)
            {
                string message = exc.ToString();
                throw;
            }
        }
        public override void StorePlanLowLevelTotalStoreTotalWeekDetail(PlanCube aPlanCube)
        {
            try
            {
                base.StorePlanLowLevelTotalStoreTotalWeekDetail(aPlanCube);
                StoreTimeDetailTotalValue(aPlanCube, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_AllTotal);
                StoreTimeDetailPctChange(aPlanCube);
                StoreTimeDetailPctChangeToPlan(aPlanCube);
                StoreTimeDetailPctToTimePeriod(aPlanCube);
                StoreTimeDetailStoreAverage(aPlanCube);
                StoreTimeDetailTotalValue(aPlanCube, BasePlanQuantityVariables.Comp, BasePlanFormulasAndSpreads.Init_SumCompStore, BasePlanChangeMethods.Change_AllCompTotal);
                StoreTimeDetailTotalValue(aPlanCube, BasePlanQuantityVariables.NonComp, BasePlanFormulasAndSpreads.Init_SumNonCompStore, BasePlanChangeMethods.Change_AllNonCompTotal);
                StoreTimeDetailTotalValue(aPlanCube, BasePlanQuantityVariables.New, BasePlanFormulasAndSpreads.Init_SumNewStore, BasePlanChangeMethods.Change_AllNewTotal);
                StoreTimeDetailTotalValue(aPlanCube, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_AllTotal);
                StoreTimeDetailBalance(aPlanCube);
            }
            catch (Exception exc)
            {
                string message = exc.ToString();
                throw;
            }
        }
        public override void StorePlanPeriodDetail(PlanCube aPlanCube)
        {
            try
            {
                base.StorePlanPeriodDetail(aPlanCube);
                StoreTimeDetailPctChange(aPlanCube);
                StoreTimeDetailPctChangeToPlan(aPlanCube);
                StoreTimeDetailPctToSet(aPlanCube);
                StoreTimeDetailPctToAllStore(aPlanCube);
                StoreTimeDetailPctToTimePeriod(aPlanCube);
                StoreTimeDetailPctToLowLevelTotal(aPlanCube);
                aPlanCube.AddRule(DefaultPlanVariables.TotRecUnit, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_PeriodSumDetail, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotRecCostDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_PeriodSumDetail, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSTotal, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSMarkdown, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSRegPromo, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.ReceiptTotalUnits, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_PeriodSumDetail, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.ReceiptMarkdownUnits, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_PeriodSumDetail, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.ReceiptRegularUnits, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_PeriodSumDetail, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SalesTotalUnits, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_PeriodSumDetail, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SalesMarkdownUnits, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_PeriodSumDetail, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SalesPromoUnits, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_PeriodSumDetail, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SalesRegPromoUnits, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_PeriodSumDetail, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SalesRegularUnits, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_PeriodSumDetail, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryTotalUnits, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_PeriodSumDetail, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryMarkdownUnits, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_PeriodSumDetail, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryRegularUnits, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_PeriodSumDetail, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotBinvCostDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_PeriodSumDetail, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.GrossMarginTotDlr, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_GrossMarginTotDlr_STORE, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.GrossMarginPctTot, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_GrossMarginPctTot, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotSalesDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_PeriodSumDetail, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotSalesCostDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_PeriodSumDetail, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DiscountPct, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_DiscountPct, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DiscountDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_PeriodSumDetail, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.AfterDiscountDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_PeriodSumDetail, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.VATPct, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_VATPct, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.VATDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_PeriodSumDetail, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.CurrXchgPct, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_CurrXchgPct, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.ConvertedSalesDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_PeriodSumDetail, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SaleswithoutVATDlr, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_PeriodSumDetail, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SquareSpace, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_PeriodAvgDetail, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.LinearSpace, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_PeriodAvgDetail, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.FloorSpace, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_PeriodAvgDetail, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SpaceConvPct, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_SpaceConvPct, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SalesUperSqSpace, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_SalesUperSqSpace, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SalesUperLinearSpace, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_SalesUperLinearSpace, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DensityU, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_DensityU, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SalesperSpaceU, BasePlanQuantityVariables.Value, DefaultPlanFormulasAndSpreads.Init_SalesperSpaceU, BasePlanChangeMethods.Change_PeriodTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
            }
            catch (Exception exc)
            {
                string message = exc.ToString();
                throw;
            }
        }
        public override void StorePlanLowLevelTotalPeriodDetail(PlanCube aPlanCube)
        {
            try
            {
                base.StorePlanLowLevelTotalPeriodDetail(aPlanCube);
                StoreTimeDetailTotalValue(aPlanCube, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_LowLevelTotal);
                StoreTimeDetailPctChange(aPlanCube);
                StoreTimeDetailPctChangeToPlan(aPlanCube);
                StoreTimeDetailPctToSet(aPlanCube);
                StoreTimeDetailPctToAllStore(aPlanCube);
                StoreTimeDetailPctToTimePeriod(aPlanCube);
                StoreTimeDetailLowLevelAverage(aPlanCube);
                StoreTimeDetailBalance(aPlanCube);
            }
            catch (Exception exc)
            {
                string message = exc.ToString();
                throw;
            }
        }
        public override void StorePlanGroupTotalPeriodDetail(PlanCube aPlanCube)
        {
            try
            {
                base.StorePlanGroupTotalPeriodDetail(aPlanCube);
                StoreTimeDetailTotalValue(aPlanCube, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_SetTotal);
                StoreTimeDetailPctChange(aPlanCube);
                StoreTimeDetailPctChangeToPlan(aPlanCube);
                StoreTimeDetailPctToAllStore(aPlanCube);
                StoreTimeDetailPctToTimePeriod(aPlanCube);
                StoreTimeDetailPctToLowLevelTotal(aPlanCube);
                StoreTimeDetailTotalValue(aPlanCube, BasePlanQuantityVariables.StoreAverage, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_SetTotal);
                StoreTimeDetailTotalValue(aPlanCube, BasePlanQuantityVariables.Comp, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_TotalPeriodToWeeks);
                StoreTimeDetailTotalValue(aPlanCube, BasePlanQuantityVariables.NonComp, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_TotalPeriodToWeeks);
                StoreTimeDetailTotalValue(aPlanCube, BasePlanQuantityVariables.New, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_TotalPeriodToWeeks);
                aPlanCube.AddRule(DefaultPlanVariables.SellThruPctRegPromo, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSRegPromo, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSMarkdown, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSTotal, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, null, null);
					aPlanCube.OverrideInitRule(DefaultPlanVariables.CurrXchgPct, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_AvgDetail);
					aPlanCube.OverrideInitRule(DefaultPlanVariables.DiscountPct, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_AvgDetail);
					aPlanCube.OverrideInitRule(DefaultPlanVariables.VATPct, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_AvgDetail);
					aPlanCube.OverrideInitRule(DefaultPlanVariables.GrossMarginPctTot, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_AvgDetail);
					aPlanCube.AddRule(DefaultPlanVariables.LinearSpace, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_AvgDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.SpaceConvPct, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_AvgDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.SquareSpace, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_AvgDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.FloorSpace, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_AvgDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesUperLinearSpace, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_AvgDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesUperSqSpace, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_AvgDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesperSpaceU, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_AvgDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DensityU, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_AvgDetail, null, null);
            }
            catch (Exception exc)
            {
                string message = exc.ToString();
                throw;
            }
        }
        public override void StorePlanLowLevelTotalGroupTotalPeriodDetail(PlanCube aPlanCube)
        {
            try
            {
                base.StorePlanLowLevelTotalGroupTotalPeriodDetail(aPlanCube);
                StoreTimeDetailTotalValue(aPlanCube, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_SetTotal);
                StoreTimeDetailPctChange(aPlanCube);
                StoreTimeDetailPctChangeToPlan(aPlanCube);
                StoreTimeDetailPctToAllStore(aPlanCube);
                StoreTimeDetailPctToTimePeriod(aPlanCube);
                StoreTimeDetailTotalValue(aPlanCube, BasePlanQuantityVariables.StoreAverage, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_SetTotal);
                StoreTimeDetailTotalValue(aPlanCube, BasePlanQuantityVariables.Comp, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_TotalPeriodToWeeks);
                StoreTimeDetailTotalValue(aPlanCube, BasePlanQuantityVariables.NonComp, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_TotalPeriodToWeeks);
                StoreTimeDetailTotalValue(aPlanCube, BasePlanQuantityVariables.New, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_TotalPeriodToWeeks);
                StoreTimeDetailTotalValue(aPlanCube, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_SetTotal);
                StoreTimeDetailBalance(aPlanCube);
            }
            catch (Exception exc)
            {
                string message = exc.ToString();
                throw;
            }
        }
        public override void StorePlanStoreTotalPeriodDetail(PlanCube aPlanCube)
        {
            try
            {
                base.StorePlanStoreTotalPeriodDetail(aPlanCube);
                StoreTimeDetailTotalValue(aPlanCube, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_AllTotal);
                StoreTimeDetailPctChange(aPlanCube);
                StoreTimeDetailPctChangeToPlan(aPlanCube);
                StoreTimeDetailPctToTimePeriod(aPlanCube);
                StoreTimeDetailPctToLowLevelTotal(aPlanCube);
                StoreTimeDetailTotalValue(aPlanCube, BasePlanQuantityVariables.StoreAverage, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_AllTotal);
                StoreTimeDetailTotalValue(aPlanCube, BasePlanQuantityVariables.Comp, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_TotalPeriodToWeeks);
                StoreTimeDetailTotalValue(aPlanCube, BasePlanQuantityVariables.NonComp, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_TotalPeriodToWeeks);
                StoreTimeDetailTotalValue(aPlanCube, BasePlanQuantityVariables.New, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_TotalPeriodToWeeks);
                aPlanCube.AddRule(DefaultPlanVariables.SellThruPctRegPromo, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSRegPromo, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, null, null);
					aPlanCube.OverrideInitRule(DefaultPlanVariables.CurrXchgPct, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_AvgDetail);
					aPlanCube.OverrideInitRule(DefaultPlanVariables.DiscountPct, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_AvgDetail);
					aPlanCube.OverrideInitRule(DefaultPlanVariables.VATPct, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_AvgDetail);
					aPlanCube.OverrideInitRule(DefaultPlanVariables.GrossMarginPctTot, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_AvgDetail);
					aPlanCube.AddRule(DefaultPlanVariables.SpaceConvPct, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_AvgDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.FloorSpace, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_AvgDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.LinearSpace, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_AvgDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesUperLinearSpace, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_AvgDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesUperSqSpace, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_AvgDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesperSpaceU, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_AvgDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.SquareSpace, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_AvgDetail, null, null);
					aPlanCube.AddRule(DefaultPlanVariables.DensityU, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_AvgDetail, null, null);
            }
            catch (Exception exc)
            {
                string message = exc.ToString();
                throw;
            }
        }
        public override void StorePlanLowLevelTotalStoreTotalPeriodDetail(PlanCube aPlanCube)
        {
            try
            {
                base.StorePlanLowLevelTotalStoreTotalPeriodDetail(aPlanCube);
                StoreTimeDetailTotalValue(aPlanCube, BasePlanQuantityVariables.Value, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_AllTotal);
                StoreTimeDetailPctChange(aPlanCube);
                StoreTimeDetailPctChangeToPlan(aPlanCube);
                StoreTimeDetailPctToTimePeriod(aPlanCube);
                StoreTimeDetailTotalValue(aPlanCube, BasePlanQuantityVariables.StoreAverage, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_AllTotal);
                StoreTimeDetailTotalValue(aPlanCube, BasePlanQuantityVariables.Comp, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_TotalPeriodToWeeks);
                StoreTimeDetailTotalValue(aPlanCube, BasePlanQuantityVariables.NonComp, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_TotalPeriodToWeeks);
                StoreTimeDetailTotalValue(aPlanCube, BasePlanQuantityVariables.New, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_TotalPeriodToWeeks);
                StoreTimeDetailTotalValue(aPlanCube, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_AllTotal);
                StoreTimeDetailBalance(aPlanCube);
            }
            catch (Exception exc)
            {
                string message = exc.ToString();
                throw;
            }
        }
        private void StoreTimeDetailTotalValue(PlanCube aPlanCube, QuantityVariableProfile aQuantVarProf, FormulaProfile aInitSumFormula, ChangeMethodProfile aPrimaryChangeMethod)
        {
            try
            {
                aPlanCube.AddRule(DefaultPlanVariables.TotRecUnit, aQuantVarProf, aInitSumFormula, aPrimaryChangeMethod, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotRecCostDlr, aQuantVarProf, aInitSumFormula, aPrimaryChangeMethod, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSTotal, aQuantVarProf, aInitSumFormula, aPrimaryChangeMethod, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSMarkdown, aQuantVarProf, aInitSumFormula, aPrimaryChangeMethod, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSRegPromo, aQuantVarProf, aInitSumFormula, aPrimaryChangeMethod, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.ReceiptTotalUnits, aQuantVarProf, aInitSumFormula, aPrimaryChangeMethod, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.ReceiptMarkdownUnits, aQuantVarProf, aInitSumFormula, aPrimaryChangeMethod, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.ReceiptRegularUnits, aQuantVarProf, aInitSumFormula, aPrimaryChangeMethod, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SalesStockRatioTotal, aQuantVarProf, aInitSumFormula, aPrimaryChangeMethod, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SalesStockRatioMarkdown, aQuantVarProf, aInitSumFormula, aPrimaryChangeMethod, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SalesStockRatioRegPromo, aQuantVarProf, aInitSumFormula, aPrimaryChangeMethod, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SalesTotalUnits, aQuantVarProf, aInitSumFormula, aPrimaryChangeMethod, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SalesMarkdownUnits, aQuantVarProf, aInitSumFormula, aPrimaryChangeMethod, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SalesPromoUnits, aQuantVarProf, aInitSumFormula, aPrimaryChangeMethod, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SalesRegPromoUnits, aQuantVarProf, aInitSumFormula, aPrimaryChangeMethod, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SalesRegularUnits, aQuantVarProf, aInitSumFormula, aPrimaryChangeMethod, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctTotal, aQuantVarProf, aInitSumFormula, aPrimaryChangeMethod, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctMarkdown, aQuantVarProf, aInitSumFormula, aPrimaryChangeMethod, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctRegPromo, aQuantVarProf, aInitSumFormula, aPrimaryChangeMethod, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryTotalUnits, aQuantVarProf, aInitSumFormula, aPrimaryChangeMethod, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryMarkdownUnits, aQuantVarProf, aInitSumFormula, aPrimaryChangeMethod, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryRegularUnits, aQuantVarProf, aInitSumFormula, aPrimaryChangeMethod, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotBinvCostDlr, aQuantVarProf, aInitSumFormula, aPrimaryChangeMethod, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.GrossMarginTotDlr, aQuantVarProf, aInitSumFormula, aPrimaryChangeMethod, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.GrossMarginPctTot, aQuantVarProf, aInitSumFormula, aPrimaryChangeMethod, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotSalesDlr, aQuantVarProf, aInitSumFormula, aPrimaryChangeMethod, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotSalesCostDlr, aQuantVarProf, aInitSumFormula, aPrimaryChangeMethod, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DiscountPct, aQuantVarProf, aInitSumFormula, aPrimaryChangeMethod, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DiscountDlr, aQuantVarProf, aInitSumFormula, aPrimaryChangeMethod, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.AfterDiscountDlr, aQuantVarProf, aInitSumFormula, aPrimaryChangeMethod, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.VATPct, aQuantVarProf, aInitSumFormula, aPrimaryChangeMethod, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.VATDlr, aQuantVarProf, aInitSumFormula, aPrimaryChangeMethod, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.CurrXchgPct, aQuantVarProf, aInitSumFormula, aPrimaryChangeMethod, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.ConvertedSalesDlr, aQuantVarProf, aInitSumFormula, aPrimaryChangeMethod, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SaleswithoutVATDlr, aQuantVarProf, aInitSumFormula, aPrimaryChangeMethod, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SquareSpace, aQuantVarProf, aInitSumFormula, aPrimaryChangeMethod, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.LinearSpace, aQuantVarProf, aInitSumFormula, aPrimaryChangeMethod, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.FloorSpace, aQuantVarProf, aInitSumFormula, aPrimaryChangeMethod, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SpaceConvPct, aQuantVarProf, aInitSumFormula, aPrimaryChangeMethod, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SalesUperSqSpace, aQuantVarProf, aInitSumFormula, aPrimaryChangeMethod, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SalesUperLinearSpace, aQuantVarProf, aInitSumFormula, aPrimaryChangeMethod, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DensityU, aQuantVarProf, aInitSumFormula, aPrimaryChangeMethod, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SalesperSpaceU, aQuantVarProf, aInitSumFormula, aPrimaryChangeMethod, BasePlanChangeMethods.Change_AutototalSpreadLock);
            }
            catch (Exception exc)
            {
                string message = exc.ToString();
                throw;
            }
        }
        private void StoreTimeDetailPctChange(PlanCube aPlanCube)
        {
            try
            {
                aPlanCube.AddRule(DefaultPlanVariables.TotRecUnit, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotRecCostDlr, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSTotalAllStoreIndex, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSMarkdownAllStoreIndex, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSRegPromoAllStoreIndex, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesTotalAllStoreIndex, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesMarkdownAllStoreIndex, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesPromoAllStoreIndex, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesRegPromoAllStoreIndex, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesRegularAllStoreIndex, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctTotalAllStoreIndex, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctMarkdownAllStoreIndex, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctRegPromoAllStoreIndex, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryTotalAllStoreIndex, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryMarkdownAllStoreIndex, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryRegularAllStoreIndex, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSTotal, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSMarkdown, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSRegPromo, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.ReceiptTotalUnits, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.ReceiptMarkdownUnits, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.ReceiptRegularUnits, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesStockRatioTotal, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesStockRatioMarkdown, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesStockRatioRegPromo, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesTotalUnits, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesMarkdownUnits, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesPromoUnits, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesRegPromoUnits, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesRegularUnits, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctTotal, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctMarkdown, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctRegPromo, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSTotalSetIndex, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSMarkdownSetIndex, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSRegPromoSetIndex, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesTotalSetIndex, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesMarkdownSetIndex, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesPromoSetIndex, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesRegPromoSetIndex, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesRegularSetIndex, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctTotalSetIndex, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctMarkdownSetIndex, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctRegPromoSetIndex, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryTotalSetIndex, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryMarkdownSetIndex, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryRegularSetIndex, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryTotalUnits, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryMarkdownUnits, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryRegularUnits, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotBinvCostDlr, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.GrossMarginTotDlr, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.GrossMarginPctTot, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotSalesDlr, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotSalesCostDlr, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.DiscountPct, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.DiscountDlr, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.AfterDiscountDlr, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.VATPct, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.VATDlr, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.CurrXchgPct, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.ConvertedSalesDlr, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.SaleswithoutVATDlr, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.SquareSpace, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.LinearSpace, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.FloorSpace, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.SpaceConvPct, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesUperSqSpace, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesUperLinearSpace, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.DensityU, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesperSpaceU, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
            }
            catch (Exception exc)
            {
                string message = exc.ToString();
                throw;
            }
        }
        private void StoreTimeDetailPctChangeToPlan(PlanCube aPlanCube)
        {
            try
            {
                aPlanCube.AddRule(DefaultPlanVariables.TotRecUnit, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotRecCostDlr, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSTotalAllStoreIndex, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSMarkdownAllStoreIndex, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSRegPromoAllStoreIndex, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesTotalAllStoreIndex, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesMarkdownAllStoreIndex, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesPromoAllStoreIndex, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesRegPromoAllStoreIndex, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesRegularAllStoreIndex, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctTotalAllStoreIndex, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctMarkdownAllStoreIndex, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctRegPromoAllStoreIndex, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryTotalAllStoreIndex, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryMarkdownAllStoreIndex, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryRegularAllStoreIndex, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSTotal, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSMarkdown, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSRegPromo, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.ReceiptTotalUnits, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.ReceiptMarkdownUnits, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.ReceiptRegularUnits, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesStockRatioTotal, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesStockRatioMarkdown, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesStockRatioRegPromo, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesTotalUnits, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesMarkdownUnits, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesPromoUnits, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesRegPromoUnits, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesRegularUnits, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctTotal, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctMarkdown, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctRegPromo, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSTotalSetIndex, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSMarkdownSetIndex, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSRegPromoSetIndex, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesTotalSetIndex, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesMarkdownSetIndex, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesPromoSetIndex, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesRegPromoSetIndex, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesRegularSetIndex, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctTotalSetIndex, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctMarkdownSetIndex, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctRegPromoSetIndex, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryTotalSetIndex, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryMarkdownSetIndex, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryRegularSetIndex, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryTotalUnits, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryMarkdownUnits, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryRegularUnits, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotBinvCostDlr, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.GrossMarginTotDlr, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.GrossMarginPctTot, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotSalesDlr, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotSalesCostDlr, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.DiscountPct, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.DiscountDlr, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.AfterDiscountDlr, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.VATPct, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.VATDlr, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.CurrXchgPct, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.ConvertedSalesDlr, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.SaleswithoutVATDlr, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.SquareSpace, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.LinearSpace, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.FloorSpace, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.SpaceConvPct, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesUperSqSpace, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesUperLinearSpace, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.DensityU, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesperSpaceU, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
            }
            catch (Exception exc)
            {
                string message = exc.ToString();
                throw;
            }
        }
        private void StoreTimeDetailPctToSet(PlanCube aPlanCube)
        {
            try
            {
                aPlanCube.AddRule(DefaultPlanVariables.TotRecUnit, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotRecCostDlr, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSTotalAllStoreIndex, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSMarkdownAllStoreIndex, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSRegPromoAllStoreIndex, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesTotalAllStoreIndex, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesMarkdownAllStoreIndex, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesPromoAllStoreIndex, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesRegPromoAllStoreIndex, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesRegularAllStoreIndex, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctTotalAllStoreIndex, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctMarkdownAllStoreIndex, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctRegPromoAllStoreIndex, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryTotalAllStoreIndex, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryMarkdownAllStoreIndex, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryRegularAllStoreIndex, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSTotal, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSMarkdown, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSRegPromo, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanVariables.ReceiptTotalUnits, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanVariables.ReceiptMarkdownUnits, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanVariables.ReceiptRegularUnits, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesStockRatioTotal, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesStockRatioMarkdown, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesStockRatioRegPromo, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesTotalUnits, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesMarkdownUnits, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesPromoUnits, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesRegPromoUnits, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesRegularUnits, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctTotal, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctMarkdown, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctRegPromo, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSTotalSetIndex, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSMarkdownSetIndex, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSRegPromoSetIndex, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesTotalSetIndex, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesMarkdownSetIndex, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesPromoSetIndex, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesRegPromoSetIndex, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesRegularSetIndex, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctTotalSetIndex, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctMarkdownSetIndex, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctRegPromoSetIndex, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryTotalSetIndex, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryMarkdownSetIndex, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryRegularSetIndex, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryTotalUnits, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryMarkdownUnits, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryRegularUnits, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotBinvCostDlr, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanVariables.GrossMarginTotDlr, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanVariables.GrossMarginPctTot, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotSalesDlr, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotSalesCostDlr, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanVariables.DiscountPct, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanVariables.DiscountDlr, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanVariables.AfterDiscountDlr, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanVariables.VATPct, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanVariables.VATDlr, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanVariables.CurrXchgPct, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanVariables.ConvertedSalesDlr, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanVariables.SaleswithoutVATDlr, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanVariables.SquareSpace, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanVariables.LinearSpace, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanVariables.FloorSpace, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanVariables.SpaceConvPct, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesUperSqSpace, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesUperLinearSpace, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanVariables.DensityU, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesperSpaceU, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
            }
            catch (Exception exc)
            {
                string message = exc.ToString();
                throw;
            }
        }
        private void StoreTimeDetailPctToAllStore(PlanCube aPlanCube)
        {
            try
            {
                aPlanCube.AddRule(DefaultPlanVariables.TotRecUnit, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotRecCostDlr, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSTotalAllStoreIndex, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSMarkdownAllStoreIndex, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSRegPromoAllStoreIndex, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesTotalAllStoreIndex, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesMarkdownAllStoreIndex, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesPromoAllStoreIndex, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesRegPromoAllStoreIndex, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesRegularAllStoreIndex, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctTotalAllStoreIndex, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctMarkdownAllStoreIndex, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctRegPromoAllStoreIndex, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryTotalAllStoreIndex, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryMarkdownAllStoreIndex, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryRegularAllStoreIndex, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSTotal, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSMarkdown, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSRegPromo, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanVariables.ReceiptTotalUnits, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanVariables.ReceiptMarkdownUnits, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanVariables.ReceiptRegularUnits, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesStockRatioTotal, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesStockRatioMarkdown, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesStockRatioRegPromo, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesTotalUnits, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesMarkdownUnits, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesPromoUnits, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesRegPromoUnits, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesRegularUnits, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctTotal, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctMarkdown, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctRegPromo, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSTotalSetIndex, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSMarkdownSetIndex, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSRegPromoSetIndex, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesTotalSetIndex, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesMarkdownSetIndex, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesPromoSetIndex, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesRegPromoSetIndex, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesRegularSetIndex, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctTotalSetIndex, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctMarkdownSetIndex, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctRegPromoSetIndex, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryTotalSetIndex, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryMarkdownSetIndex, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryRegularSetIndex, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryTotalUnits, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryMarkdownUnits, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryRegularUnits, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotBinvCostDlr, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanVariables.GrossMarginTotDlr, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanVariables.GrossMarginPctTot, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotSalesDlr, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotSalesCostDlr, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanVariables.DiscountPct, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanVariables.DiscountDlr, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanVariables.AfterDiscountDlr, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanVariables.VATPct, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanVariables.VATDlr, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanVariables.CurrXchgPct, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanVariables.ConvertedSalesDlr, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanVariables.SaleswithoutVATDlr, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanVariables.SquareSpace, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanVariables.LinearSpace, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanVariables.FloorSpace, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanVariables.SpaceConvPct, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesUperSqSpace, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesUperLinearSpace, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanVariables.DensityU, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesperSpaceU, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
            }
            catch (Exception exc)
            {
                string message = exc.ToString();
                throw;
            }
        }
        private void StoreTimeDetailPctToTimePeriod(PlanCube aPlanCube)
        {
            try
            {
                aPlanCube.AddRule(DefaultPlanVariables.TotRecUnit, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotRecCostDlr, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSTotalAllStoreIndex, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSMarkdownAllStoreIndex, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSRegPromoAllStoreIndex, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesTotalAllStoreIndex, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesMarkdownAllStoreIndex, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesPromoAllStoreIndex, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesRegPromoAllStoreIndex, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesRegularAllStoreIndex, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctTotalAllStoreIndex, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctMarkdownAllStoreIndex, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctRegPromoAllStoreIndex, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryTotalAllStoreIndex, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryMarkdownAllStoreIndex, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryRegularAllStoreIndex, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSTotal, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSMarkdown, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSRegPromo, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.ReceiptTotalUnits, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.ReceiptMarkdownUnits, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.ReceiptRegularUnits, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesStockRatioTotal, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesStockRatioMarkdown, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesStockRatioRegPromo, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesTotalUnits, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesMarkdownUnits, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesPromoUnits, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesRegPromoUnits, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesRegularUnits, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctTotal, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctMarkdown, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctRegPromo, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSTotalSetIndex, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSMarkdownSetIndex, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSRegPromoSetIndex, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesTotalSetIndex, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesMarkdownSetIndex, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesPromoSetIndex, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesRegPromoSetIndex, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesRegularSetIndex, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctTotalSetIndex, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctMarkdownSetIndex, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctRegPromoSetIndex, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryTotalSetIndex, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryMarkdownSetIndex, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryRegularSetIndex, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryTotalUnits, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryMarkdownUnits, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryRegularUnits, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotBinvCostDlr, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.GrossMarginTotDlr, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.GrossMarginPctTot, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotSalesDlr, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotSalesCostDlr, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.DiscountPct, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.DiscountDlr, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.AfterDiscountDlr, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.VATPct, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.VATDlr, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.CurrXchgPct, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.ConvertedSalesDlr, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.SaleswithoutVATDlr, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.SquareSpace, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.LinearSpace, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.FloorSpace, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.SpaceConvPct, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesUperSqSpace, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesUperLinearSpace, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.DensityU, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesperSpaceU, BasePlanQuantityVariables.PctToTimePeriod, BasePlanFormulasAndSpreads.Init_PctToTimePeriod, BasePlanChangeMethods.Change_PctToTimeTotal, null);
            }
            catch (Exception exc)
            {
                string message = exc.ToString();
                throw;
            }
        }
        private void StoreTimeDetailPctToLowLevelTotal(PlanCube aPlanCube)
        {
            try
            {
                aPlanCube.AddRule(DefaultPlanVariables.TotRecUnit, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotRecCostDlr, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSTotalAllStoreIndex, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSMarkdownAllStoreIndex, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSRegPromoAllStoreIndex, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesTotalAllStoreIndex, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesMarkdownAllStoreIndex, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesPromoAllStoreIndex, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesRegPromoAllStoreIndex, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesRegularAllStoreIndex, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctTotalAllStoreIndex, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctMarkdownAllStoreIndex, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctRegPromoAllStoreIndex, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryTotalAllStoreIndex, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryMarkdownAllStoreIndex, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryRegularAllStoreIndex, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSTotal, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSMarkdown, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSRegPromo, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.ReceiptTotalUnits, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.ReceiptMarkdownUnits, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.ReceiptRegularUnits, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesStockRatioTotal, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesStockRatioMarkdown, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesStockRatioRegPromo, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesTotalUnits, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesMarkdownUnits, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesPromoUnits, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesRegPromoUnits, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesRegularUnits, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctTotal, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctMarkdown, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctRegPromo, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSTotalSetIndex, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSMarkdownSetIndex, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSRegPromoSetIndex, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesTotalSetIndex, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesMarkdownSetIndex, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesPromoSetIndex, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesRegPromoSetIndex, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesRegularSetIndex, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctTotalSetIndex, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctMarkdownSetIndex, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctRegPromoSetIndex, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryTotalSetIndex, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryMarkdownSetIndex, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryRegularSetIndex, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryTotalUnits, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryMarkdownUnits, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryRegularUnits, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotBinvCostDlr, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.GrossMarginTotDlr, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.GrossMarginPctTot, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotSalesDlr, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotSalesCostDlr, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.DiscountPct, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.DiscountDlr, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.AfterDiscountDlr, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.VATPct, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.VATDlr, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.CurrXchgPct, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.ConvertedSalesDlr, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.SaleswithoutVATDlr, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.SquareSpace, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.LinearSpace, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.FloorSpace, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.SpaceConvPct, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesUperSqSpace, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesUperLinearSpace, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.DensityU, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesperSpaceU, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
            }
            catch (Exception exc)
            {
                string message = exc.ToString();
                throw;
            }
        }
        private void StoreTimeDetailLowLevelAverage(PlanCube aPlanCube)
        {
            try
            {
                aPlanCube.AddRule(DefaultPlanVariables.TotRecUnit, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotRecCostDlr, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSTotalAllStoreIndex, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSMarkdownAllStoreIndex, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSRegPromoAllStoreIndex, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SalesTotalAllStoreIndex, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SalesMarkdownAllStoreIndex, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SalesPromoAllStoreIndex, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SalesRegPromoAllStoreIndex, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SalesRegularAllStoreIndex, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctTotalAllStoreIndex, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctMarkdownAllStoreIndex, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctRegPromoAllStoreIndex, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryTotalAllStoreIndex, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryMarkdownAllStoreIndex, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryRegularAllStoreIndex, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSTotal, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSMarkdown, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSRegPromo, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.ReceiptTotalUnits, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.ReceiptMarkdownUnits, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.ReceiptRegularUnits, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SalesStockRatioTotal, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SalesStockRatioMarkdown, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SalesStockRatioRegPromo, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SalesTotalUnits, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SalesMarkdownUnits, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SalesPromoUnits, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SalesRegPromoUnits, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SalesRegularUnits, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctTotal, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctMarkdown, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctRegPromo, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSTotalSetIndex, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSMarkdownSetIndex, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSRegPromoSetIndex, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SalesTotalSetIndex, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SalesMarkdownSetIndex, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SalesPromoSetIndex, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SalesRegPromoSetIndex, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SalesRegularSetIndex, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctTotalSetIndex, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctMarkdownSetIndex, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctRegPromoSetIndex, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryTotalSetIndex, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryMarkdownSetIndex, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryRegularSetIndex, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryTotalUnits, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryMarkdownUnits, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryRegularUnits, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotBinvCostDlr, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.GrossMarginTotDlr, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.GrossMarginPctTot, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotSalesDlr, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.TotSalesCostDlr, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DiscountPct, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DiscountDlr, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.AfterDiscountDlr, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.VATPct, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.VATDlr, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.CurrXchgPct, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.ConvertedSalesDlr, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SaleswithoutVATDlr, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SquareSpace, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.LinearSpace, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.FloorSpace, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SpaceConvPct, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SalesUperSqSpace, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SalesUperLinearSpace, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.DensityU, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanVariables.SalesperSpaceU, BasePlanQuantityVariables.LowLevelAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_LowLevelAverage, BasePlanChangeMethods.Change_AutototalSpreadLock);
            }
            catch (Exception exc)
            {
                string message = exc.ToString();
                throw;
            }
        }
        private void StoreTimeDetailBalance(PlanCube aPlanCube)
        {
            try
            {
                aPlanCube.AddRule(DefaultPlanVariables.TotRecUnit, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotRecCostDlr, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSTotalAllStoreIndex, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSMarkdownAllStoreIndex, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSRegPromoAllStoreIndex, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesTotalAllStoreIndex, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesMarkdownAllStoreIndex, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesPromoAllStoreIndex, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesRegPromoAllStoreIndex, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesRegularAllStoreIndex, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctTotalAllStoreIndex, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctMarkdownAllStoreIndex, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctRegPromoAllStoreIndex, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryTotalAllStoreIndex, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryMarkdownAllStoreIndex, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryRegularAllStoreIndex, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSTotal, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSMarkdown, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSRegPromo, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.ReceiptTotalUnits, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.ReceiptMarkdownUnits, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.ReceiptRegularUnits, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesStockRatioTotal, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesStockRatioMarkdown, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesStockRatioRegPromo, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesTotalUnits, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesMarkdownUnits, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesPromoUnits, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesRegPromoUnits, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesRegularUnits, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctTotal, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctMarkdown, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctRegPromo, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSTotalSetIndex, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSMarkdownSetIndex, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSRegPromoSetIndex, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesTotalSetIndex, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesMarkdownSetIndex, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesPromoSetIndex, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesRegPromoSetIndex, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesRegularSetIndex, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctTotalSetIndex, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctMarkdownSetIndex, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctRegPromoSetIndex, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryTotalSetIndex, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryMarkdownSetIndex, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryRegularSetIndex, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryTotalUnits, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryMarkdownUnits, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryRegularUnits, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotBinvCostDlr, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.GrossMarginTotDlr, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.GrossMarginPctTot, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotSalesDlr, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotSalesCostDlr, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.DiscountPct, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.DiscountDlr, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.AfterDiscountDlr, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.VATPct, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.VATDlr, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.CurrXchgPct, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.ConvertedSalesDlr, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.SaleswithoutVATDlr, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.SquareSpace, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.LinearSpace, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.FloorSpace, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.SpaceConvPct, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesUperSqSpace, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesUperLinearSpace, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.DensityU, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesperSpaceU, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
            }
            catch (Exception exc)
            {
                string message = exc.ToString();
                throw;
            }
        }
        private void StoreTimeDetailStoreAverage(PlanCube aPlanCube)
        {
            try
            {
                aPlanCube.AddRule(DefaultPlanVariables.TotRecUnit, BasePlanQuantityVariables.StoreAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_SetAverage, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotRecCostDlr, BasePlanQuantityVariables.StoreAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_SetAverage, null);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSTotalAllStoreIndex, BasePlanQuantityVariables.StoreAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_SetAverage, null);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSMarkdownAllStoreIndex, BasePlanQuantityVariables.StoreAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_SetAverage, null);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSRegPromoAllStoreIndex, BasePlanQuantityVariables.StoreAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_SetAverage, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesTotalAllStoreIndex, BasePlanQuantityVariables.StoreAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_SetAverage, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesMarkdownAllStoreIndex, BasePlanQuantityVariables.StoreAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_SetAverage, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesPromoAllStoreIndex, BasePlanQuantityVariables.StoreAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_SetAverage, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesRegPromoAllStoreIndex, BasePlanQuantityVariables.StoreAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_SetAverage, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesRegularAllStoreIndex, BasePlanQuantityVariables.StoreAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_SetAverage, null);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctTotalAllStoreIndex, BasePlanQuantityVariables.StoreAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_SetAverage, null);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctMarkdownAllStoreIndex, BasePlanQuantityVariables.StoreAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_SetAverage, null);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctRegPromoAllStoreIndex, BasePlanQuantityVariables.StoreAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_SetAverage, null);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryTotalAllStoreIndex, BasePlanQuantityVariables.StoreAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_SetAverage, null);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryMarkdownAllStoreIndex, BasePlanQuantityVariables.StoreAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_SetAverage, null);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryRegularAllStoreIndex, BasePlanQuantityVariables.StoreAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_SetAverage, null);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSTotal, BasePlanQuantityVariables.StoreAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_SetAverage, null);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSMarkdown, BasePlanQuantityVariables.StoreAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_SetAverage, null);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSRegPromo, BasePlanQuantityVariables.StoreAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_SetAverage, null);
					aPlanCube.AddRule(DefaultPlanVariables.ReceiptTotalUnits, BasePlanQuantityVariables.StoreAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_SetAverage, null);
					aPlanCube.AddRule(DefaultPlanVariables.ReceiptMarkdownUnits, BasePlanQuantityVariables.StoreAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_SetAverage, null);
					aPlanCube.AddRule(DefaultPlanVariables.ReceiptRegularUnits, BasePlanQuantityVariables.StoreAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_SetAverage, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesStockRatioTotal, BasePlanQuantityVariables.StoreAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_SetAverage, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesStockRatioMarkdown, BasePlanQuantityVariables.StoreAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_SetAverage, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesStockRatioRegPromo, BasePlanQuantityVariables.StoreAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_SetAverage, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesTotalUnits, BasePlanQuantityVariables.StoreAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_SetAverage, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesMarkdownUnits, BasePlanQuantityVariables.StoreAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_SetAverage, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesPromoUnits, BasePlanQuantityVariables.StoreAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_SetAverage, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesRegPromoUnits, BasePlanQuantityVariables.StoreAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_SetAverage, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesRegularUnits, BasePlanQuantityVariables.StoreAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_SetAverage, null);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctTotal, BasePlanQuantityVariables.StoreAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_SetAverage, null);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctMarkdown, BasePlanQuantityVariables.StoreAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_SetAverage, null);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctRegPromo, BasePlanQuantityVariables.StoreAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_SetAverage, null);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSTotalSetIndex, BasePlanQuantityVariables.StoreAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_SetAverage, null);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSMarkdownSetIndex, BasePlanQuantityVariables.StoreAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_SetAverage, null);
					aPlanCube.AddRule(DefaultPlanVariables.ForwardWOSRegPromoSetIndex, BasePlanQuantityVariables.StoreAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_SetAverage, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesTotalSetIndex, BasePlanQuantityVariables.StoreAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_SetAverage, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesMarkdownSetIndex, BasePlanQuantityVariables.StoreAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_SetAverage, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesPromoSetIndex, BasePlanQuantityVariables.StoreAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_SetAverage, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesRegPromoSetIndex, BasePlanQuantityVariables.StoreAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_SetAverage, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesRegularSetIndex, BasePlanQuantityVariables.StoreAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_SetAverage, null);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctTotalSetIndex, BasePlanQuantityVariables.StoreAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_SetAverage, null);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctMarkdownSetIndex, BasePlanQuantityVariables.StoreAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_SetAverage, null);
					aPlanCube.AddRule(DefaultPlanVariables.SellThruPctRegPromoSetIndex, BasePlanQuantityVariables.StoreAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_SetAverage, null);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryTotalSetIndex, BasePlanQuantityVariables.StoreAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_SetAverage, null);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryMarkdownSetIndex, BasePlanQuantityVariables.StoreAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_SetAverage, null);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryRegularSetIndex, BasePlanQuantityVariables.StoreAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_SetAverage, null);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryTotalUnits, BasePlanQuantityVariables.StoreAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_SetAverage, null);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryMarkdownUnits, BasePlanQuantityVariables.StoreAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_SetAverage, null);
					aPlanCube.AddRule(DefaultPlanVariables.InventoryRegularUnits, BasePlanQuantityVariables.StoreAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_SetAverage, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotBinvCostDlr, BasePlanQuantityVariables.StoreAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_SetAverage, null);
					aPlanCube.AddRule(DefaultPlanVariables.GrossMarginTotDlr, BasePlanQuantityVariables.StoreAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_SetAverage, null);
					aPlanCube.AddRule(DefaultPlanVariables.GrossMarginPctTot, BasePlanQuantityVariables.StoreAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_SetAverage, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotSalesDlr, BasePlanQuantityVariables.StoreAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_SetAverage, null);
					aPlanCube.AddRule(DefaultPlanVariables.TotSalesCostDlr, BasePlanQuantityVariables.StoreAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_SetAverage, null);
					aPlanCube.AddRule(DefaultPlanVariables.DiscountPct, BasePlanQuantityVariables.StoreAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_SetAverage, null);
					aPlanCube.AddRule(DefaultPlanVariables.DiscountDlr, BasePlanQuantityVariables.StoreAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_SetAverage, null);
					aPlanCube.AddRule(DefaultPlanVariables.AfterDiscountDlr, BasePlanQuantityVariables.StoreAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_SetAverage, null);
					aPlanCube.AddRule(DefaultPlanVariables.VATPct, BasePlanQuantityVariables.StoreAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_SetAverage, null);
					aPlanCube.AddRule(DefaultPlanVariables.VATDlr, BasePlanQuantityVariables.StoreAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_SetAverage, null);
					aPlanCube.AddRule(DefaultPlanVariables.CurrXchgPct, BasePlanQuantityVariables.StoreAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_SetAverage, null);
					aPlanCube.AddRule(DefaultPlanVariables.ConvertedSalesDlr, BasePlanQuantityVariables.StoreAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_SetAverage, null);
					aPlanCube.AddRule(DefaultPlanVariables.SaleswithoutVATDlr, BasePlanQuantityVariables.StoreAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_SetAverage, null);
					aPlanCube.AddRule(DefaultPlanVariables.SquareSpace, BasePlanQuantityVariables.StoreAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_SetAverage, null);
					aPlanCube.AddRule(DefaultPlanVariables.LinearSpace, BasePlanQuantityVariables.StoreAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_SetAverage, null);
					aPlanCube.AddRule(DefaultPlanVariables.FloorSpace, BasePlanQuantityVariables.StoreAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_SetAverage, null);
					aPlanCube.AddRule(DefaultPlanVariables.SpaceConvPct, BasePlanQuantityVariables.StoreAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_SetAverage, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesUperSqSpace, BasePlanQuantityVariables.StoreAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_SetAverage, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesUperLinearSpace, BasePlanQuantityVariables.StoreAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_SetAverage, null);
					aPlanCube.AddRule(DefaultPlanVariables.DensityU, BasePlanQuantityVariables.StoreAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_SetAverage, null);
					aPlanCube.AddRule(DefaultPlanVariables.SalesperSpaceU, BasePlanQuantityVariables.StoreAverage, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_SetAverage, null);
            }
            catch (Exception exc)
            {
                string message = exc.ToString();
                throw;
            }
        }
        public override void StorePlanDateTotal(PlanCube aPlanCube)
        {
            try
            {
                base.StorePlanDateTotal(aPlanCube);
                StoreTimeTotalValue(aPlanCube, BasePlanQuantityVariables.Value);
                StoreTimeTotalPctChange(aPlanCube);
                StoreTimeTotalPctChangeToPlan(aPlanCube);
                StoreTimeTotalPctToSet(aPlanCube);
                StoreTimeTotalPctToAllStore(aPlanCube);
                StoreTimeTotalPctToLowLevelTotal(aPlanCube);
            }
            catch (Exception exc)
            {
                string message = exc.ToString();
                throw;
            }
        }
        public override void StorePlanLowLevelTotalDateTotal(PlanCube aPlanCube)
        {
            try
            {
                base.StorePlanLowLevelTotalDateTotal(aPlanCube);
                StoreTimeTotalValue(aPlanCube, BasePlanQuantityVariables.Value);
                StoreTimeTotalPctChange(aPlanCube);
                StoreTimeTotalPctChangeToPlan(aPlanCube);
                StoreTimeTotalPctToSet(aPlanCube);
                StoreTimeTotalPctToAllStore(aPlanCube);
                StoreTimeTotalValue(aPlanCube, BasePlanQuantityVariables.LowLevelAverage);
                StoreTimeTotalBalance(aPlanCube);
            }
            catch (Exception exc)
            {
                string message = exc.ToString();
                throw;
            }
        }
        public override void StorePlanGroupTotalDateTotal(PlanCube aPlanCube)
        {
            try
            {
                base.StorePlanGroupTotalDateTotal(aPlanCube);
                StoreTimeTotalValue(aPlanCube, BasePlanQuantityVariables.Value);
                StoreTimeTotalValue(aPlanCube, BasePlanQuantityVariables.StoreAverage);
                StoreTimeTotalPctChange(aPlanCube);
                StoreTimeTotalPctChangeToPlan(aPlanCube);
                StoreTimeTotalPctToAllStore(aPlanCube);
                StoreTimeTotalPctToLowLevelTotal(aPlanCube);
                StoreTimeTotalValue(aPlanCube, BasePlanQuantityVariables.Comp);
                StoreTimeTotalValue(aPlanCube, BasePlanQuantityVariables.NonComp);
                StoreTimeTotalValue(aPlanCube, BasePlanQuantityVariables.New);
            }
            catch (Exception exc)
            {
                string message = exc.ToString();
                throw;
            }
        }
        public override void StorePlanLowLevelTotalGroupTotalDateTotal(PlanCube aPlanCube)
        {
            try
            {
                base.StorePlanLowLevelTotalGroupTotalDateTotal(aPlanCube);
                StoreTimeTotalValue(aPlanCube, BasePlanQuantityVariables.Value);
                StoreTimeTotalValue(aPlanCube, BasePlanQuantityVariables.StoreAverage);
                StoreTimeTotalPctChange(aPlanCube);
                StoreTimeTotalPctChangeToPlan(aPlanCube);
                StoreTimeTotalPctToAllStore(aPlanCube);
                StoreTimeTotalValue(aPlanCube, BasePlanQuantityVariables.Comp);
                StoreTimeTotalValue(aPlanCube, BasePlanQuantityVariables.NonComp);
                StoreTimeTotalValue(aPlanCube, BasePlanQuantityVariables.New);
                StoreTimeTotalValue(aPlanCube, BasePlanQuantityVariables.LowLevelAverage);
                StoreTimeTotalBalance(aPlanCube);
            }
            catch (Exception exc)
            {
                string message = exc.ToString();
                throw;
            }
        }
        public override void StorePlanStoreTotalDateTotal(PlanCube aPlanCube)
        {
            try
            {
                base.StorePlanStoreTotalDateTotal(aPlanCube);
                StoreTimeTotalValue(aPlanCube, BasePlanQuantityVariables.Value);
                StoreTimeTotalValue(aPlanCube, BasePlanQuantityVariables.StoreAverage);
                StoreTimeTotalPctChange(aPlanCube);
                StoreTimeTotalPctChangeToPlan(aPlanCube);
                StoreTimeTotalPctToLowLevelTotal(aPlanCube);
                StoreTimeTotalValue(aPlanCube, BasePlanQuantityVariables.Comp);
                StoreTimeTotalValue(aPlanCube, BasePlanQuantityVariables.NonComp);
                StoreTimeTotalValue(aPlanCube, BasePlanQuantityVariables.New);
            }
            catch (Exception exc)
            {
                string message = exc.ToString();
                throw;
            }
        }
        public override void StorePlanLowLevelTotalStoreTotalDateTotal(PlanCube aPlanCube)
        {
            try
            {
                base.StorePlanLowLevelTotalStoreTotalDateTotal(aPlanCube);
                StoreTimeTotalValue(aPlanCube, BasePlanQuantityVariables.Value);
                StoreTimeTotalValue(aPlanCube, BasePlanQuantityVariables.StoreAverage);
                StoreTimeTotalPctChange(aPlanCube);
                StoreTimeTotalPctChangeToPlan(aPlanCube);
                StoreTimeTotalValue(aPlanCube, BasePlanQuantityVariables.Comp);
                StoreTimeTotalValue(aPlanCube, BasePlanQuantityVariables.NonComp);
                StoreTimeTotalValue(aPlanCube, BasePlanQuantityVariables.New);
                StoreTimeTotalValue(aPlanCube, BasePlanQuantityVariables.LowLevelAverage);
                StoreTimeTotalBalance(aPlanCube);
            }
            catch (Exception exc)
            {
                string message = exc.ToString();
                throw;
            }
        }
        private void StoreTimeTotalValue(PlanCube aPlanCube, QuantityVariableProfile aQuantVarProf)
        {
            try
            {
                aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesDlrT2, aQuantVarProf, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ReceiptUnitT1, aQuantVarProf, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ReceiptCostT1, aQuantVarProf, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ForwardWOSTotalT1, aQuantVarProf, DefaultPlanFormulasAndSpreads.Init_ForwardWOSTotalT1_Custom, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ForwardWOSMarkdownT1, aQuantVarProf, DefaultPlanFormulasAndSpreads.Init_ForwardWOSMarkdownT1_Custom, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ForwardWOSRegPromoT1, aQuantVarProf, DefaultPlanFormulasAndSpreads.Init_ForwardWOSRegPromoT1_Custom, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ReceiptTotalUnitsT1, aQuantVarProf, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ReceiptMarkdownUnitsT1, aQuantVarProf, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ReceiptRegularUnitsT1, aQuantVarProf, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesTotalUnitsT2, aQuantVarProf, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesTotalUnitsT1, aQuantVarProf, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesTotalUnitsT3, aQuantVarProf, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesMarkdownUnitsT2, aQuantVarProf, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesMarkdownUnitsT1, aQuantVarProf, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesMarkdownUnitsT3, aQuantVarProf, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesPromoUnitsT1, aQuantVarProf, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesPromoUnitsT2, aQuantVarProf, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesRegPromoUnitsT1, aQuantVarProf, DefaultPlanFormulasAndSpreads.Init_SalesRegPromoUnitsT1_Custom, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesRegPromoUnitsT3, aQuantVarProf, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesRegularUnitsT1, aQuantVarProf, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesRegularUnitsT2, aQuantVarProf, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryTotalUnitsT2, aQuantVarProf, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryTotalUnitsT1, aQuantVarProf, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryTotalUnitsT3, aQuantVarProf, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryTotalUnitsT4, aQuantVarProf, DefaultPlanFormulasAndSpreads.Init_InventoryTotalUnitsT4, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryMarkdownUnitsT2, aQuantVarProf, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryMarkdownUnitsT1, aQuantVarProf, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryMarkdownUnitsT3, aQuantVarProf, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryRegularUnitsT2, aQuantVarProf, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryRegularUnitsT1, aQuantVarProf, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryRegularUnitsT3, aQuantVarProf, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesCostT2, aQuantVarProf, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotBinvCostDlrT1, aQuantVarProf, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotBinvCostDlrT2, aQuantVarProf, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotBinvCostDlrT3, aQuantVarProf, BasePlanFormulasAndSpreads.Init_InventoryUnitsEnding, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.GrossMarginT1, aQuantVarProf, DefaultPlanFormulasAndSpreads.Init_GrossMarginT1, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.GrossMarginPctT1, aQuantVarProf, DefaultPlanFormulasAndSpreads.Init_GrossMarginPctT1, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotSalesDlrT1, aQuantVarProf, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotSalesDlrT2, aQuantVarProf, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotSalesCostDlrT1, aQuantVarProf, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotSalesCostDlrT2, aQuantVarProf, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DiscountPctT1, aQuantVarProf, DefaultPlanFormulasAndSpreads.Init_DiscountPctT1, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DiscountDlrT1, aQuantVarProf, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.AfterDiscountDlrT1, aQuantVarProf, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.VATPctT1, aQuantVarProf, DefaultPlanFormulasAndSpreads.Init_VATPctT1, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.VATDlrT1, aQuantVarProf, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.CurrXchgPctT1, aQuantVarProf, DefaultPlanFormulasAndSpreads.Init_CurrXchgPctT1, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SaleswithoutVATDlrT1, aQuantVarProf, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DensityUT1, aQuantVarProf, DefaultPlanFormulasAndSpreads.Init_DensityUT1, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCPlacedOrdersDlrT1, aQuantVarProf, BasePlanFormulasAndSpreads.Init_SumDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.FloorSpaceT1, aQuantVarProf, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.LinearSpaceT1, aQuantVarProf, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesUperLinearSpaceT1, aQuantVarProf, DefaultPlanFormulasAndSpreads.Init_SalesUperLinearSpaceT1, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesUperSqSpaceT1, aQuantVarProf, DefaultPlanFormulasAndSpreads.Init_SalesUperSqSpaceT1, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesperSpaceUT1, aQuantVarProf, DefaultPlanFormulasAndSpreads.Init_SalesperSpaceUT1, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SpaceConvPctT1, aQuantVarProf, DefaultPlanFormulasAndSpreads.Init_SpaceConvPctT1, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SquareSpaceT1, aQuantVarProf, BasePlanFormulasAndSpreads.Init_AvgDetail, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesDlrT1, aQuantVarProf, BasePlanFormulasAndSpreads.Init_SumDetail, DefaultPlanChangeMethods.Change_SalesDlrT1, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotBinvAUCT1, aQuantVarProf, DefaultPlanFormulasAndSpreads.Init_TotStrBinvAURT1, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotBinvAUCT2, aQuantVarProf, DefaultPlanFormulasAndSpreads.Init_TotStrBinvAURT2, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotBinvAUCT3, aQuantVarProf, DefaultPlanFormulasAndSpreads.Init_TotStrBinvAURT3, BasePlanChangeMethods.Change_DateTotal, BasePlanChangeMethods.Change_AutototalSpreadLock);
            }
            catch (Exception exc)
            {
                string message = exc.ToString();
                throw;
            }
        }
        private void StoreTimeTotalPctChange(PlanCube aPlanCube)
        {
            try
            {
                aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesDlrT2, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ReceiptUnitT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ReceiptCostT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ForwardWOSTotalAllStoreIndexT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ForwardWOSMarkdownAllStoreIndexT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ForwardWOSRegPromoAllStoreIndexT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesTotalAllStoreIndexT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesMarkdownAllStoreIndexT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesPromoAllStoreIndexT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesRegPromoAllStoreIndexT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesRegularAllStoreIndexT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SellThruPctTotalAllStoreIndexT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SellThruPctMarkdownAllStoreIndexT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SellThruPctRegPromoAllStoreIndexT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryTotalAllStoreIndexT2, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryTotalAllStoreIndexT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryTotalAllStoreIndexT3, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryMarkdownAllStoreIndexT2, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryMarkdownAllStoreIndexT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryMarkdownAllStoreIndexT3, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryRegularAllStoreIndexT2, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryRegularAllStoreIndexT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryRegularAllStoreIndexT3, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ForwardWOSTotalT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ForwardWOSMarkdownT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ForwardWOSRegPromoT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ReceiptTotalUnitsT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ReceiptMarkdownUnitsT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ReceiptRegularUnitsT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesStockRatioTotalT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesStockRatioMarkdownT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesStockRatioRegPromoT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesTotalUnitsT2, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesTotalUnitsT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesTotalUnitsT3, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesMarkdownUnitsT2, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesMarkdownUnitsT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesMarkdownUnitsT3, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesPromoUnitsT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesPromoUnitsT2, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesRegPromoUnitsT2, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesRegPromoUnitsT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesRegPromoUnitsT3, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesRegularUnitsT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesRegularUnitsT2, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SellThruPctTotalT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SellThruPctMarkdownT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SellThruPctRegPromoT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ForwardWOSTotalSetIndexT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ForwardWOSMarkdownSetIndexT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ForwardWOSRegPromoSetIndexT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesTotalSetIndexT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesMarkdownSetIndexT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesPromoSetIndexT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesRegPromoSetIndexT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesRegularSetIndexT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SellThruPctTotalSetIndexT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SellThruPctMarkdownSetIndexT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SellThruPctRegPromoSetIndexT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryTotalSetIndexT2, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryTotalSetIndexT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryTotalSetIndexT3, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryMarkdownSetIndexT2, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryMarkdownSetIndexT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryMarkdownSetIndexT3, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryRegularSetIndexT2, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryRegularSetIndexT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryRegularSetIndexT3, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryTotalUnitsT2, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryTotalUnitsT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryTotalUnitsT3, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryTotalUnitsT4, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryMarkdownUnitsT2, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryMarkdownUnitsT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryMarkdownUnitsT3, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryRegularUnitsT2, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryRegularUnitsT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryRegularUnitsT3, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesCostT2, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotBinvCostDlrT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotBinvCostDlrT2, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotBinvCostDlrT3, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.GrossMarginT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.GrossMarginPctT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotSalesDlrT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotSalesDlrT2, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotSalesCostDlrT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotSalesCostDlrT2, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DiscountPctT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DiscountDlrT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.AfterDiscountDlrT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.VATPctT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.VATDlrT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.CurrXchgPctT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SaleswithoutVATDlrT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DensityUT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCPlacedOrdersDlrT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.FloorSpaceT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.LinearSpaceT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesUperLinearSpaceT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesUperSqSpaceT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesperSpaceUT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SpaceConvPctT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SquareSpaceT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesDlrT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotBinvAUCT1, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotBinvAUCT3, BasePlanQuantityVariables.PctChange, BasePlanFormulasAndSpreads.Init_PctChange, BasePlanChangeMethods.Change_PctChange, null);
            }
            catch (Exception exc)
            {
                string message = exc.ToString();
                throw;
            }
        }
        private void StoreTimeTotalPctChangeToPlan(PlanCube aPlanCube)
        {
            try
            {
                aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesDlrT2, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ReceiptUnitT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ReceiptCostT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ForwardWOSTotalAllStoreIndexT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ForwardWOSMarkdownAllStoreIndexT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ForwardWOSRegPromoAllStoreIndexT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesTotalAllStoreIndexT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesMarkdownAllStoreIndexT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesPromoAllStoreIndexT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesRegPromoAllStoreIndexT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesRegularAllStoreIndexT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SellThruPctTotalAllStoreIndexT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SellThruPctMarkdownAllStoreIndexT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SellThruPctRegPromoAllStoreIndexT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryTotalAllStoreIndexT2, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryTotalAllStoreIndexT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryTotalAllStoreIndexT3, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryMarkdownAllStoreIndexT2, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryMarkdownAllStoreIndexT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryMarkdownAllStoreIndexT3, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryRegularAllStoreIndexT2, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryRegularAllStoreIndexT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryRegularAllStoreIndexT3, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ForwardWOSTotalT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ForwardWOSMarkdownT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ForwardWOSRegPromoT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ReceiptTotalUnitsT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ReceiptMarkdownUnitsT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ReceiptRegularUnitsT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesStockRatioTotalT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesStockRatioMarkdownT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesStockRatioRegPromoT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesTotalUnitsT2, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesTotalUnitsT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesTotalUnitsT3, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesMarkdownUnitsT2, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesMarkdownUnitsT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesMarkdownUnitsT3, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesPromoUnitsT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesPromoUnitsT2, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesRegPromoUnitsT2, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesRegPromoUnitsT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesRegPromoUnitsT3, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesRegularUnitsT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesRegularUnitsT2, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SellThruPctTotalT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SellThruPctMarkdownT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SellThruPctRegPromoT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ForwardWOSTotalSetIndexT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ForwardWOSMarkdownSetIndexT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ForwardWOSRegPromoSetIndexT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesTotalSetIndexT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesMarkdownSetIndexT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesPromoSetIndexT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesRegPromoSetIndexT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesRegularSetIndexT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SellThruPctTotalSetIndexT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SellThruPctMarkdownSetIndexT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SellThruPctRegPromoSetIndexT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryTotalSetIndexT2, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryTotalSetIndexT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryTotalSetIndexT3, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryMarkdownSetIndexT2, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryMarkdownSetIndexT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryMarkdownSetIndexT3, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryRegularSetIndexT2, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryRegularSetIndexT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryRegularSetIndexT3, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryTotalUnitsT2, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryTotalUnitsT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryTotalUnitsT3, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryTotalUnitsT4, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryMarkdownUnitsT2, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryMarkdownUnitsT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryMarkdownUnitsT3, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryRegularUnitsT2, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryRegularUnitsT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryRegularUnitsT3, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesCostT2, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotBinvCostDlrT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotBinvCostDlrT2, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotBinvCostDlrT3, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.GrossMarginT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.GrossMarginPctT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotSalesDlrT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotSalesDlrT2, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotSalesCostDlrT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotSalesCostDlrT2, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DiscountPctT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DiscountDlrT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.AfterDiscountDlrT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.VATPctT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.VATDlrT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.CurrXchgPctT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SaleswithoutVATDlrT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DensityUT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCPlacedOrdersDlrT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.FloorSpaceT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.LinearSpaceT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesUperLinearSpaceT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesUperSqSpaceT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesperSpaceUT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SpaceConvPctT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SquareSpaceT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesDlrT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotBinvAUCT1, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotBinvAUCT3, BasePlanQuantityVariables.PctChangeToPlan, BasePlanFormulasAndSpreads.Init_PctChangeToPlan, BasePlanChangeMethods.Change_PctChange, null);
            }
            catch (Exception exc)
            {
                string message = exc.ToString();
                throw;
            }
        }
        private void StoreTimeTotalPctToSet(PlanCube aPlanCube)
        {
            try
            {
                aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesDlrT1, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesDlrT2, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ReceiptUnitT1, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ReceiptCostT1, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ForwardWOSTotalAllStoreIndexT1, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ForwardWOSMarkdownAllStoreIndexT1, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ForwardWOSRegPromoAllStoreIndexT1, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesTotalAllStoreIndexT1, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesMarkdownAllStoreIndexT1, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesPromoAllStoreIndexT1, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesRegPromoAllStoreIndexT1, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesRegularAllStoreIndexT1, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SellThruPctTotalAllStoreIndexT1, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SellThruPctMarkdownAllStoreIndexT1, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SellThruPctRegPromoAllStoreIndexT1, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryTotalAllStoreIndexT2, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryTotalAllStoreIndexT1, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryTotalAllStoreIndexT3, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryMarkdownAllStoreIndexT2, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryMarkdownAllStoreIndexT1, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryMarkdownAllStoreIndexT3, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryRegularAllStoreIndexT2, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryRegularAllStoreIndexT1, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryRegularAllStoreIndexT3, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ForwardWOSTotalT1, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ForwardWOSMarkdownT1, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ForwardWOSRegPromoT1, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ReceiptTotalUnitsT1, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ReceiptMarkdownUnitsT1, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ReceiptRegularUnitsT1, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesStockRatioTotalT1, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesStockRatioMarkdownT1, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesStockRatioRegPromoT1, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesTotalUnitsT2, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesTotalUnitsT1, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesTotalUnitsT3, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesMarkdownUnitsT2, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesMarkdownUnitsT1, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesMarkdownUnitsT3, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesPromoUnitsT1, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesPromoUnitsT2, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesRegPromoUnitsT2, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesRegPromoUnitsT1, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesRegPromoUnitsT3, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesRegularUnitsT1, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesRegularUnitsT2, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SellThruPctTotalT1, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SellThruPctMarkdownT1, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SellThruPctRegPromoT1, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ForwardWOSTotalSetIndexT1, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ForwardWOSMarkdownSetIndexT1, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ForwardWOSRegPromoSetIndexT1, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesTotalSetIndexT1, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesMarkdownSetIndexT1, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesPromoSetIndexT1, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesRegPromoSetIndexT1, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesRegularSetIndexT1, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SellThruPctTotalSetIndexT1, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SellThruPctMarkdownSetIndexT1, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SellThruPctRegPromoSetIndexT1, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryTotalSetIndexT2, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryTotalSetIndexT1, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryTotalSetIndexT3, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryMarkdownSetIndexT2, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryMarkdownSetIndexT1, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryMarkdownSetIndexT3, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryRegularSetIndexT2, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryRegularSetIndexT1, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryRegularSetIndexT3, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryTotalUnitsT2, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryTotalUnitsT1, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryTotalUnitsT3, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryTotalUnitsT4, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryMarkdownUnitsT2, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryMarkdownUnitsT1, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryMarkdownUnitsT3, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryRegularUnitsT2, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryRegularUnitsT1, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryRegularUnitsT3, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesCostT2, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotBinvCostDlrT1, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotBinvCostDlrT2, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotBinvCostDlrT3, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.GrossMarginT1, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.GrossMarginPctT1, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotSalesDlrT1, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotSalesDlrT2, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotSalesCostDlrT1, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotSalesCostDlrT2, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DiscountPctT1, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DiscountDlrT1, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.AfterDiscountDlrT1, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.VATPctT1, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.VATDlrT1, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.CurrXchgPctT1, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SaleswithoutVATDlrT1, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DensityUT1, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCPlacedOrdersDlrT1, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.FloorSpaceT1, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.LinearSpaceT1, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesUperLinearSpaceT1, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesUperSqSpaceT1, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesperSpaceUT1, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SpaceConvPctT1, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SquareSpaceT1, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotBinvAUCT1, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotBinvAUCT3, BasePlanQuantityVariables.PctToSet, BasePlanFormulasAndSpreads.Init_PctToSet, BasePlanChangeMethods.Change_PctToSet, null);
            }
            catch (Exception exc)
            {
                string message = exc.ToString();
                throw;
            }
        }
        private void StoreTimeTotalPctToAllStore(PlanCube aPlanCube)
        {
            try
            {
                aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesDlrT1, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesDlrT2, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ReceiptUnitT1, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ReceiptCostT1, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ForwardWOSTotalAllStoreIndexT1, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ForwardWOSMarkdownAllStoreIndexT1, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ForwardWOSRegPromoAllStoreIndexT1, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesTotalAllStoreIndexT1, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesMarkdownAllStoreIndexT1, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesPromoAllStoreIndexT1, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesRegPromoAllStoreIndexT1, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesRegularAllStoreIndexT1, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SellThruPctTotalAllStoreIndexT1, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SellThruPctMarkdownAllStoreIndexT1, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SellThruPctRegPromoAllStoreIndexT1, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryTotalAllStoreIndexT2, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryTotalAllStoreIndexT1, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryTotalAllStoreIndexT3, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryMarkdownAllStoreIndexT2, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryMarkdownAllStoreIndexT1, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryMarkdownAllStoreIndexT3, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryRegularAllStoreIndexT2, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryRegularAllStoreIndexT1, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryRegularAllStoreIndexT3, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ForwardWOSTotalT1, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ForwardWOSMarkdownT1, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ForwardWOSRegPromoT1, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ReceiptTotalUnitsT1, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ReceiptMarkdownUnitsT1, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ReceiptRegularUnitsT1, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesStockRatioTotalT1, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesStockRatioMarkdownT1, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesStockRatioRegPromoT1, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesTotalUnitsT2, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesTotalUnitsT1, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesTotalUnitsT3, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesMarkdownUnitsT2, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesMarkdownUnitsT1, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesMarkdownUnitsT3, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesPromoUnitsT1, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesPromoUnitsT2, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesRegPromoUnitsT2, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesRegPromoUnitsT1, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesRegPromoUnitsT3, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesRegularUnitsT1, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesRegularUnitsT2, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SellThruPctTotalT1, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SellThruPctMarkdownT1, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SellThruPctRegPromoT1, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ForwardWOSTotalSetIndexT1, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ForwardWOSMarkdownSetIndexT1, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ForwardWOSRegPromoSetIndexT1, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesTotalSetIndexT1, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesMarkdownSetIndexT1, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesPromoSetIndexT1, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesRegPromoSetIndexT1, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesRegularSetIndexT1, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SellThruPctTotalSetIndexT1, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SellThruPctMarkdownSetIndexT1, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SellThruPctRegPromoSetIndexT1, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryTotalSetIndexT2, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryTotalSetIndexT1, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryTotalSetIndexT3, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryMarkdownSetIndexT2, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryMarkdownSetIndexT1, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryMarkdownSetIndexT3, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryRegularSetIndexT2, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryRegularSetIndexT1, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryRegularSetIndexT3, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryTotalUnitsT2, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryTotalUnitsT1, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryTotalUnitsT3, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryTotalUnitsT4, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryMarkdownUnitsT2, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryMarkdownUnitsT1, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryMarkdownUnitsT3, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryRegularUnitsT2, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryRegularUnitsT1, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryRegularUnitsT3, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesCostT2, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotBinvCostDlrT1, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotBinvCostDlrT2, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotBinvCostDlrT3, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.GrossMarginT1, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.GrossMarginPctT1, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotSalesDlrT1, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotSalesDlrT2, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotSalesCostDlrT1, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotSalesCostDlrT2, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DiscountPctT1, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DiscountDlrT1, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.AfterDiscountDlrT1, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.VATPctT1, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.VATDlrT1, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.CurrXchgPctT1, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SaleswithoutVATDlrT1, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DensityUT1, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCPlacedOrdersDlrT1, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.FloorSpaceT1, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.LinearSpaceT1, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesUperLinearSpaceT1, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesUperSqSpaceT1, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesperSpaceUT1, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SpaceConvPctT1, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SquareSpaceT1, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotBinvAUCT1, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotBinvAUCT3, BasePlanQuantityVariables.PctToAllStore, BasePlanFormulasAndSpreads.Init_PctToAll, BasePlanChangeMethods.Change_PctToAll, null);
            }
            catch (Exception exc)
            {
                string message = exc.ToString();
                throw;
            }
        }
        private void StoreTimeTotalPctToLowLevelTotal(PlanCube aPlanCube)
        {
            try
            {
                aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesDlrT2, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ReceiptUnitT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ReceiptCostT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ForwardWOSTotalAllStoreIndexT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ForwardWOSMarkdownAllStoreIndexT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ForwardWOSRegPromoAllStoreIndexT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesTotalAllStoreIndexT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesMarkdownAllStoreIndexT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesPromoAllStoreIndexT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesRegPromoAllStoreIndexT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesRegularAllStoreIndexT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SellThruPctTotalAllStoreIndexT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SellThruPctMarkdownAllStoreIndexT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SellThruPctRegPromoAllStoreIndexT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryTotalAllStoreIndexT2, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryTotalAllStoreIndexT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryTotalAllStoreIndexT3, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryMarkdownAllStoreIndexT2, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryMarkdownAllStoreIndexT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryMarkdownAllStoreIndexT3, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryRegularAllStoreIndexT2, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryRegularAllStoreIndexT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryRegularAllStoreIndexT3, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ForwardWOSTotalT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ForwardWOSMarkdownT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ForwardWOSRegPromoT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ReceiptTotalUnitsT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ReceiptMarkdownUnitsT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ReceiptRegularUnitsT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesStockRatioTotalT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesStockRatioMarkdownT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesStockRatioRegPromoT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesTotalUnitsT2, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesTotalUnitsT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesTotalUnitsT3, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesMarkdownUnitsT2, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesMarkdownUnitsT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesMarkdownUnitsT3, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesPromoUnitsT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesPromoUnitsT2, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesRegPromoUnitsT2, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesRegPromoUnitsT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesRegPromoUnitsT3, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesRegularUnitsT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesRegularUnitsT2, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SellThruPctTotalT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SellThruPctMarkdownT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SellThruPctRegPromoT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ForwardWOSTotalSetIndexT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ForwardWOSMarkdownSetIndexT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ForwardWOSRegPromoSetIndexT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesTotalSetIndexT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesMarkdownSetIndexT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesPromoSetIndexT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesRegPromoSetIndexT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesRegularSetIndexT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SellThruPctTotalSetIndexT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SellThruPctMarkdownSetIndexT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SellThruPctRegPromoSetIndexT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryTotalSetIndexT2, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryTotalSetIndexT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryTotalSetIndexT3, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryMarkdownSetIndexT2, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryMarkdownSetIndexT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryMarkdownSetIndexT3, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryRegularSetIndexT2, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryRegularSetIndexT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryRegularSetIndexT3, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryTotalUnitsT2, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryTotalUnitsT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryTotalUnitsT3, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryTotalUnitsT4, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryMarkdownUnitsT2, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryMarkdownUnitsT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryMarkdownUnitsT3, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryRegularUnitsT2, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryRegularUnitsT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryRegularUnitsT3, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesCostT2, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotBinvCostDlrT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotBinvCostDlrT2, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotBinvCostDlrT3, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.GrossMarginT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.GrossMarginPctT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotSalesDlrT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotSalesDlrT2, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotSalesCostDlrT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotSalesCostDlrT2, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DiscountPctT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DiscountDlrT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.AfterDiscountDlrT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.VATPctT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.VATDlrT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.CurrXchgPctT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SaleswithoutVATDlrT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DensityUT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCPlacedOrdersDlrT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.FloorSpaceT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.LinearSpaceT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesUperLinearSpaceT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesUperSqSpaceT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesperSpaceUT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SpaceConvPctT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SquareSpaceT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesDlrT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotBinvAUCT1, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotBinvAUCT2, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotBinvAUCT3, BasePlanQuantityVariables.PctToLowLevelTotal, BasePlanFormulasAndSpreads.Init_PctToLowLevel, BasePlanChangeMethods.Change_PctToLowLevel, null);
            }
            catch (Exception exc)
            {
                string message = exc.ToString();
                throw;
            }
        }
        private void StoreTimeTotalBalance(PlanCube aPlanCube)
        {
            try
            {
                aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesDlrT2, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ReceiptUnitT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ReceiptCostT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ForwardWOSTotalAllStoreIndexT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ForwardWOSMarkdownAllStoreIndexT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ForwardWOSRegPromoAllStoreIndexT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesTotalAllStoreIndexT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesMarkdownAllStoreIndexT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesPromoAllStoreIndexT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesRegPromoAllStoreIndexT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesRegularAllStoreIndexT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SellThruPctTotalAllStoreIndexT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SellThruPctMarkdownAllStoreIndexT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SellThruPctRegPromoAllStoreIndexT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryTotalAllStoreIndexT2, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryTotalAllStoreIndexT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryTotalAllStoreIndexT3, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryMarkdownAllStoreIndexT2, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryMarkdownAllStoreIndexT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryMarkdownAllStoreIndexT3, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryRegularAllStoreIndexT2, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryRegularAllStoreIndexT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryRegularAllStoreIndexT3, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ForwardWOSTotalT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ForwardWOSMarkdownT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ForwardWOSRegPromoT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ReceiptTotalUnitsT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ReceiptMarkdownUnitsT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ReceiptRegularUnitsT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesStockRatioTotalT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesStockRatioMarkdownT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesStockRatioRegPromoT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesTotalUnitsT2, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesTotalUnitsT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesTotalUnitsT3, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesMarkdownUnitsT2, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesMarkdownUnitsT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesMarkdownUnitsT3, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesPromoUnitsT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesPromoUnitsT2, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesRegPromoUnitsT2, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesRegPromoUnitsT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesRegPromoUnitsT3, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesRegularUnitsT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesRegularUnitsT2, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SellThruPctTotalT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SellThruPctMarkdownT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SellThruPctRegPromoT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ForwardWOSTotalSetIndexT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ForwardWOSMarkdownSetIndexT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.ForwardWOSRegPromoSetIndexT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesTotalSetIndexT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesMarkdownSetIndexT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesPromoSetIndexT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesRegPromoSetIndexT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesRegularSetIndexT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SellThruPctTotalSetIndexT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SellThruPctMarkdownSetIndexT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SellThruPctRegPromoSetIndexT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryTotalSetIndexT2, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryTotalSetIndexT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryTotalSetIndexT3, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryMarkdownSetIndexT2, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryMarkdownSetIndexT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryMarkdownSetIndexT3, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryRegularSetIndexT2, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryRegularSetIndexT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryRegularSetIndexT3, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryTotalUnitsT2, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryTotalUnitsT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryTotalUnitsT3, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryTotalUnitsT4, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryMarkdownUnitsT2, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryMarkdownUnitsT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryMarkdownUnitsT3, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryRegularUnitsT2, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryRegularUnitsT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.InventoryRegularUnitsT3, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesCostT2, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotBinvCostDlrT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotBinvCostDlrT2, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotBinvCostDlrT3, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.GrossMarginT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.GrossMarginPctT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotSalesDlrT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotSalesDlrT2, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotSalesCostDlrT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotSalesCostDlrT2, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DiscountPctT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DiscountDlrT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.AfterDiscountDlrT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.VATPctT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.VATDlrT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.CurrXchgPctT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SaleswithoutVATDlrT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DensityUT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.DTCPlacedOrdersDlrT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.FloorSpaceT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.LinearSpaceT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesUperLinearSpaceT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesUperSqSpaceT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesperSpaceUT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SpaceConvPctT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SquareSpaceT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.SalesDlrT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotBinvAUCT1, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotBinvAUCT2, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
					aPlanCube.AddRule(DefaultPlanTimeTotalVariables.TotBinvAUCT3, BasePlanQuantityVariables.Balance, BasePlanFormulasAndSpreads.Init_StoreBalance, BasePlanChangeMethods.Change_StoreLowLevelBalance, null);
            }
            catch (Exception exc)
            {
                string message = exc.ToString();
                throw;
            }
        }
    }
    /// <summary>
    /// The DefaultPlanToolBox class is where the 'Default' variable initialization routines are defined.
    /// </summary>
    /// <remarks>
    /// This class is where the "Default" variable initialization routines are defined.
    /// </remarks>
    public class DefaultPlanToolBox : BasePlanToolBox
    {

		//=======
		// FIELDS
		//=======

		//=============
		// CONSTRUCTORS
		//=============

		public DefaultPlanToolBox(BasePlanComputations aBasePlanComputations) :
			base(aBasePlanComputations)
		{
		}

		//===========
		// PROPERTIES
		//===========

		//========
		// METHODS
        //========

        //========
		// CLASSES
		//========

    }
}
