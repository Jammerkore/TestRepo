if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[SP_GET_DESCENDANTS_BY_LEVEL_REPORT]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[SP_GET_DESCENDANTS_BY_LEVEL_REPORT]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[SP_GET_ALL_DESCENDANTS_BY_LEVEL_REPORT]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[SP_GET_ALL_DESCENDANTS_BY_LEVEL_REPORT]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[SP_DAILYPERCENTAGES_REPORT]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[SP_DAILYPERCENTAGES_REPORT]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[SP_GET_DAILYPERCENTAGES_REPORT_FOR_STORE]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[SP_GET_DAILYPERCENTAGES_REPORT_FOR_STORE]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[SP_GET_DAILYPERCENTAGES_REPORT_FOR_STORE_SET]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[SP_GET_DAILYPERCENTAGES_REPORT_FOR_STORE_SET]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[SP_GET_DAILYPERCENTAGES_REPORT_NO_STORE]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[SP_GET_DAILYPERCENTAGES_REPORT_NO_STORE]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[SP_GET_FORECAST_AUDIT_BY_MERCHANDISE]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[SP_GET_FORECAST_AUDIT_BY_MERCHANDISE]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[SP_GET_FORECAST_AUDIT_MODIFYSALES_REPORT]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[SP_GET_FORECAST_AUDIT_MODIFYSALES_REPORT]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[SP_GET_FORECAST_AUDIT_OTSFORECAST_REPORT]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[SP_GET_FORECAST_AUDIT_OTSFORECAST_REPORT]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[SP_GET_FORECAST_LEVEL_REPORT]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[SP_GET_FORECAST_LEVEL_REPORT]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[SP_GET_FORECAST_REPORT_NAMES]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[SP_GET_FORECAST_REPORT_NAMES]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[SP_GET_FORECAST_TYPE_REPORT]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[SP_GET_FORECAST_TYPE_REPORT]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[SP_GET_HEADER_AUDIT_REPORT]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[SP_GET_HEADER_AUDIT_REPORT]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[SP_GET_PURGE_DATES_REPORT]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[SP_GET_PURGE_DATES_REPORT]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[SP_GET_REPORTS]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[SP_GET_REPORTS]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[SP_GET_STOCK_MIN_MAX_REPORT]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[SP_GET_STOCK_MIN_MAX_REPORT]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[SP_GET_STORE_CAPACITY_FOR_STORE_SET]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[SP_GET_STORE_CAPACITY_FOR_STORE_SET]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[SP_GET_STORE_CAPACITY_REPORT]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[SP_GET_STORE_CAPACITY_REPORT]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[SP_GET_STORE_CAPACITY_REPORT_FOR_STORE]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[SP_GET_STORE_CAPACITY_REPORT_FOR_STORE]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[SP_GET_STORE_CAPACITY_REPORT_NO_STORE]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[SP_GET_STORE_CAPACITY_REPORT_NO_STORE]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[SP_GET_STORE_ELIGIBILITY_REPORT]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[SP_GET_STORE_ELIGIBILITY_REPORT]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[SP_GET_STORE_ELIGIBILITY_REPORT_FOR_STORE]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[SP_GET_STORE_ELIGIBILITY_REPORT_FOR_STORE]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[SP_GET_STORE_ELIGIBILITY_REPORT_NO_STORE]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[SP_GET_STORE_ELIGIBILITY_REPORT_NO_STORE]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[SP_GET_STORE_ELIGIBLITY_REPORT_FOR_STORE_SET]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[SP_GET_STORE_ELIGIBLITY_REPORT_FOR_STORE_SET]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[SP_GET_STORE_GRADES_REPORT]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[SP_GET_STORE_GRADES_REPORT]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[SP_GET_VELOCITYGRADES_REPORT]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[SP_GET_VELOCITYGRADES_REPORT]
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS OFF 
GO




CREATE PROCEDURE [dbo].[SP_GET_DESCENDANTS_BY_LEVEL_REPORT]
        @SELECTED_NODE_RID INT,
        @LEVEL INT

AS

DECLARE @Loop INT
DECLARE @LoopCount INT
DECLARE @NextLoopCount INT

 SET @LoopCount = 0
 CREATE TABLE #TREE (LOOPCOUNT INT NOT NULL, PARENT_HN_RID INT NOT NULL, HOME_PH_RID INT, HN_RID INT NOT NULL,
                     HOME_LEVEL INT NOT NULL, LEVEL_TYPE INT)

 -- insert current node & the children of the node into the temp table
 INSERT #TREE (LOOPCOUNT, PARENT_HN_RID, HOME_PH_RID, HN_RID, HOME_LEVEL)
 SELECT @LoopCount as LOOPCOUNT, hnj.PARENT_HN_RID, hn.HOME_PH_RID, @SELECTED_NODE_RID as HN_RID, hn.HOME_LEVEL
   FROM [dbo].[HIER_NODE_JOIN] hnj (NOLOCK)
        JOIN [dbo].[HIERARCHY_NODE] hn (NOLOCK) ON hn.HN_RID = hnj.HN_RID
   WHERE @SELECTED_NODE_RID = hnj.HN_RID 

 SET @Loop = @@ROWCOUNT

 -- chase all paths until you get the correct level type
 SET @NextLoopCount = @LoopCount + 1
 WHILE @Loop > 0
 BEGIN
    INSERT #TREE
    SELECT @NextLoopCount as LOOPCOUNT, hnj.PARENT_HN_RID, hn.HOME_PH_RID, hnj.HN_RID, hn.HOME_LEVEL, null
      FROM [dbo].[HIER_NODE_JOIN] hnj (NOLOCK)
           JOIN #TREE t ON hnj.PARENT_HN_RID = t.HN_RID and hnj.PH_RID = t.HOME_PH_RID
           JOIN [dbo].[HIERARCHY_NODE] hn (NOLOCK) ON hn.HN_RID = hnj.HN_RID
      WHERE t.LOOPCOUNT = @LoopCount AND (t.HOME_LEVEL < (@LEVEL))
    SET @Loop = @@ROWCOUNT

    -- update counters
    SET @LoopCount = @LoopCount + 1
    SET @NextLoopCount = @LoopCount + 1
 END

 SELECT HN_RID
    FROM #TREE
    WHERE HOME_LEVEL = @LEVEL

 IF (SELECT object_id('tempdb.dbo.#TREE')) > 0 DROP TABLE #TREE

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS OFF 
GO



CREATE PROCEDURE [dbo].[SP_GET_ALL_DESCENDANTS_BY_LEVEL_REPORT]
        @SELECTED_NODE_RID  INT,
        @LEVEL AS INT

AS

DECLARE @Loop INT
DECLARE @LoopCount INT
DECLARE @NextLoopCount INT
DECLARE @main_PH_RID INT


 SELECT @main_PH_RID = PH_RID 
    FROM PRODUCT_HIERARCHY 
    WHERE PH_TYPE = 800000
 SET @LoopCount = 0
 CREATE TABLE #TREE (LOOPCOUNT INT NOT NULL, PARENT_HN_RID INT NOT NULL, HOME_PH_RID INT, PH_TYPE INT, HN_RID INT NOT NULL,
                     HOME_LEVEL INT NOT NULL, LEVEL_TYPE INT, BN_ID CHAR(50) COLLATE Latin1_General_CS_AS, BN_NAME CHAR(50) COLLATE Latin1_General_CS_AS, BN_DESCRIPTION CHAR(250) COLLATE Latin1_General_CS_AS)

 -- insert current node & the children of the node into the temp table
 INSERT #TREE (LOOPCOUNT, PARENT_HN_RID, HOME_PH_RID, PH_TYPE, HN_RID, HOME_LEVEL, BN_ID, BN_NAME, BN_DESCRIPTION)
 SELECT @LoopCount as LOOPCOUNT, hnj.PARENT_HN_RID, hn.HOME_PH_RID, ph.PH_TYPE, @SELECTED_NODE_RID as HN_RID, hn.HOME_LEVEL, bn.BN_ID, bn.BN_NAME, bn.BN_DESCRIPTION
   FROM [dbo].[HIER_NODE_JOIN] hnj (NOLOCK)
        JOIN [dbo].[HIERARCHY_NODE] hn (NOLOCK) ON hn.HN_RID = hnj.HN_RID
        JOIN [dbo].[PRODUCT_HIERARCHY] ph (NOLOCK) ON ph.PH_RID = hn.HOME_PH_RID
        JOIN [dbo].[HIER_NODE_JOIN] parent (NOLOCK) ON hn.HN_RID = parent.HN_RID and parent.PH_RID = hn.HOME_PH_RID
        JOIN [dbo].[BASE_NODE] bn (NOLOCK) ON hn.HN_RID = bn.HN_RID
   WHERE @SELECTED_NODE_RID = hnj.HN_RID 

 SET @Loop = @@ROWCOUNT

 -- add level type
 BEGIN TRANSACTION
    UPDATE #TREE
       SET LEVEL_TYPE = (select phl.PHL_TYPE from [dbo].[PRODUCT_HIERARCHY_LEVELS] phl (NOLOCK) where #TREE.LOOPCOUNT =  @LoopCount and #TREE.HOME_PH_RID = phl.PH_RID and #TREE.HOME_LEVEL = phl.PHL_SEQUENCE)
 COMMIT

 -- chase all paths until you get the correct level type
 SET @NextLoopCount = @LoopCount + 1
 WHILE @Loop > 0
 BEGIN
    INSERT #TREE
    SELECT @NextLoopCount as LOOPCOUNT, hnj.PARENT_HN_RID, hn.HOME_PH_RID, ph.PH_TYPE, hnj.HN_RID, hn.HOME_LEVEL, null, bn.BN_ID, bn.BN_NAME, bn.BN_DESCRIPTION
      FROM [dbo].[HIER_NODE_JOIN] hnj (NOLOCK)
           JOIN #TREE t ON hnj.PARENT_HN_RID = t.HN_RID and hnj.PH_RID = t.HOME_PH_RID
           JOIN [dbo].[HIERARCHY_NODE] hn (NOLOCK) ON hn.HN_RID = hnj.HN_RID
           JOIN [dbo].[PRODUCT_HIERARCHY] ph (NOLOCK) ON ph.PH_RID = hn.HOME_PH_RID
           JOIN [dbo].[HIER_NODE_JOIN] parent (NOLOCK) ON hn.HN_RID = parent.HN_RID and parent.PH_RID = hn.HOME_PH_RID
           JOIN [dbo].[BASE_NODE] bn (NOLOCK) ON hn.HN_RID = bn.HN_RID
      WHERE t.LOOPCOUNT =  @LoopCount
           AND (t.HOME_PH_RID <> @main_PH_RID or ( t.HOME_PH_RID = @main_PH_RID and t.HOME_LEVEL < (@LEVEL + 1)))
    SET @Loop = @@ROWCOUNT

    -- update counters
    SET @LoopCount = @LoopCount + 1
    SET @NextLoopCount = @LoopCount + 1

    -- add level type
    BEGIN TRANSACTION
      UPDATE #TREE
        SET LEVEL_TYPE = (SELECT phl.PHL_TYPE FROM [dbo].[PRODUCT_HIERARCHY_LEVELS] phl (NOLOCK) WHERE #TREE.LOOPCOUNT =  @LoopCount and #TREE.HOME_PH_RID = phl.PH_RID and #TREE.HOME_LEVEL = phl.PHL_SEQUENCE)
        WHERE LEVEL_TYPE is null and #TREE.LOOPCOUNT =  @LoopCount
    COMMIT
 END

 SELECT PARENT_HN_RID, HN_RID, BN_ID, BN_NAME, BN_DESCRIPTION
   FROM #TREE

 IF (SELECT object_id('tempdb.dbo.#TREE')) > 0 DROP TABLE #TREE

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS OFF 
GO



CREATE PROCEDURE [dbo].[SP_DAILYPERCENTAGES_REPORT]
        @SELECTED_NODE_RID  INT,
        @LOWER_LEVEL INT,
        @STORE_ID VARCHAR(255),
        @STORE_CHAR_GROUP varchar(255),
        @STORE_CHAR  varchar(255)
   
AS

DECLARE @SELECTED_NODE_LEVEL AS INT
SELECT @SELECTED_NODE_LEVEL = HOME_LEVEL FROM HIERARCHY_NODE WHERE HN_RID =  @SELECTED_NODE_RID

DECLARE @MAX_PHL_SEQUENCE AS INT
SELECT @MAX_PHL_SEQUENCE = MAX(PHL_SEQUENCE) FROM PRODUCT_HIERARCHY_LEVELS

IF( @LOWER_LEVEL=0)
BEGIN
SELECT @LOWER_LEVEL=@MAX_PHL_SEQUENCE
END

IF((@STORE_ID IS NULL  OR @STORE_ID = '') AND (@STORE_CHAR_GROUP IS NOT NULL AND @STORE_CHAR_GROUP<>''))

 BEGIN
     EXEC SP_GET_DAILYPERCENTAGES_REPORT_FOR_STORE_SET  @SELECTED_NODE_RID, @SELECTED_NODE_LEVEL, @LOWER_LEVEL,@STORE_CHAR_GROUP, @STORE_CHAR 
END
ELSE IF(@STORE_ID IS NOT NULL  AND @STORE_ID <> '')
BEGIN
    EXEC SP_GET_DAILYPERCENTAGES_REPORT_FOR_STORE @SELECTED_NODE_RID, @SELECTED_NODE_LEVEL, @LOWER_LEVEL, @STORE_ID
END
ELSE
BEGIN
     EXEC SP_GET_DAILYPERCENTAGES_REPORT_NO_STORE @SELECTED_NODE_RID, @SELECTED_NODE_LEVEL, @LOWER_LEVEL
END


GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS OFF 
GO



CREATE PROCEDURE [dbo].[SP_GET_DAILYPERCENTAGES_REPORT_FOR_STORE] 
        @SELECTED_NODE_RID  INT,
         @SELECTED_NODE_LEVEL INT,
        @LOWER_LEVEL INT,
          @STORE_ID VARCHAR(255)

       
AS

DECLARE @LEVEL AS INT
SELECT @LEVEL = @LOWER_LEVEL -  @SELECTED_NODE_LEVEL

CREATE TABLE #TEMP (PARENT_HN_RID INT, HN_RID INT, BN_ID CHAR(50) COLLATE Latin1_General_CS_AS, BN_NAME CHAR(50) COLLATE Latin1_General_CS_AS, BN_DESCRIPTION CHAR(250) COLLATE Latin1_General_CS_AS)
INSERT #TEMP (PARENT_HN_RID, HN_RID, BN_ID, BN_NAME, BN_DESCRIPTION)
EXEC SP_GET_ALL_DESCENDANTS_BY_LEVEL_REPORT @SELECTED_NODE_RID, @LEVEL


SELECT 'DailyPercentages', hn.PARENT_HN_RID, dpd.HN_RID, '[Defaults]'  AS [DateRange],st.ST_ID,  st.STORE_NAME, hn.BN_ID ,hn.BN_NAME ,

CASE   WHEN phl.PHL_DISPLAY_OPTION_ID = 800701 THEN hn.BN_ID
	WHEN phl.PHL_DISPLAY_OPTION_ID = 800702 THEN hn.BN_DESCRIPTION
	WHEN phl.PHL_DISPLAY_OPTION_ID = 800703 THEN hn.BN_ID + '[' + hn.BN_NAME + ']'
              WHEN phl.PHL_DISPLAY_OPTION_ID = 800704 THEN hn.BN_ID + '[' + hn.BN_DESCRIPTION + ']'
               WHEN phl.PHL_DISPLAY_OPTION_ID = 800705 THEN hn.BN_NAME + '[' + hn.BN_DESCRIPTION + ']'
	 WHEN phl.PHL_DISPLAY_OPTION_ID = 800706 THEN  hn.BN_ID + '[' +  hn.BN_NAME + ']' + '[' + hn.BN_DESCRIPTION + ']'
          ELSE hn.BN_ID + '[' + hn.BN_NAME + ']'
END as [DISPLAY_TEXT],

 dpd.DAY1,dpd.DAY2,dpd.DAY3,dpd.DAY4,dpd.DAY5,dpd.DAY6,dpd.DAY7 
FROM DAILY_PERCENTAGES_DEFAULTS dpd
INNER JOIN HIERARCHY_NODE hen ON hen.HN_RID = dpd.HN_RID
LEFT OUTER  JOIN PRODUCT_HIERARCHY_LEVELS phl ON phl.PHL_SEQUENCE = hen.HOME_LEVEL
INNER JOIN BASE_NODE bn ON dpd.HN_RID = bn.HN_RID AND (DAY1 >0 OR  DAY2 > 0 OR DAY3 >0  OR DAY4 >0  OR DAY5 > 0  OR DAY6 >0 OR DAY7 >0)
INNER JOIN STORES st ON st.ST_RID=dpd.ST_RID AND st.ST_ID = @STORE_ID


inner join

(
 SELECT PARENT_HN_RID, HN_RID, BN_ID, BN_NAME, BN_DESCRIPTION
   FROM #TEMP
)hn ON hn.HN_RID = dpd.HN_RID 

union

SELECT 'DailyPercentages', hn.PARENT_HN_RID, dp.HN_RID, 

	  	 CASE WHEN cdr.CDR_RID > 1 AND (CDR_RANGE_TYPE_ID = 800858 OR CDR_RANGE_TYPE_ID = 800859)THEN
		ap1.TEXT_VALUE + ' ' + 
		ap2.TEXT_VALUE + '(s) '+ 
		CONVERT(VARCHAR(3),cdr.CDR_START) + '-' 
		+ CONVERT(VARCHAR(3),cdr.CDR_END)
	      WHEN cdr.CDR_RID > 1 AND CDR_RANGE_TYPE_ID = 800857 THEN 
		    'Weeks ' + SUBSTRING(CONVERT(VARCHAR(6),fw.FISCAL_WEEK),5,6) + '/' +
                 	SUBSTRING(CONVERT(VARCHAR(6),fw.FISCAL_WEEK),1,4) + ' - ' +    
                 	SUBSTRING(CONVERT(VARCHAR(6),fw1.FISCAL_WEEK),5,6) + '/' +
                  	SUBSTRING(CONVERT(VARCHAR(6),fw1.FISCAL_WEEK),1,4)
	      ELSE '[Defaults]'
	 END AS  [DateRange],
	   st.ST_ID,  st.STORE_NAME, hn.BN_ID ,hn.BN_NAME ,
	CASE   WHEN phl.PHL_DISPLAY_OPTION_ID = 800701 THEN hn.BN_ID
	WHEN phl.PHL_DISPLAY_OPTION_ID = 800702 THEN hn.BN_DESCRIPTION
	WHEN phl.PHL_DISPLAY_OPTION_ID = 800703 THEN hn.BN_ID + '[' + hn.BN_NAME + ']'
              WHEN phl.PHL_DISPLAY_OPTION_ID = 800704 THEN hn.BN_ID + '[' + hn.BN_DESCRIPTION + ']'
               WHEN phl.PHL_DISPLAY_OPTION_ID = 800705 THEN hn.BN_NAME + '[' + hn.BN_DESCRIPTION + ']'
	 WHEN phl.PHL_DISPLAY_OPTION_ID = 800706 THEN  hn.BN_ID + '[' +  hn.BN_NAME + ']' + '[' + hn.BN_DESCRIPTION + ']'
          ELSE hn.BN_ID + '[' + hn.BN_NAME + ']'

	END as [DISPLAY_TEXT],
 dp.DAY1,dp.DAY2,dp.DAY3,dp.DAY4,dp.DAY5,dp.DAY6,dp.DAY7 
FROM DAILY_PERCENTAGES dp
INNER JOIN HIERARCHY_NODE hen ON hen.HN_RID = dp.HN_RID
LEFT OUTER JOIN PRODUCT_HIERARCHY_LEVELS phl ON phl.PHL_SEQUENCE = hen.HOME_LEVEL
INNER JOIN CALENDAR_DATE_RANGE cdr ON cdr.CDR_RID = dp.CDR_RID
LEFT OUTER JOIN FISCAL_WEEKS fw ON fw.FIRST_DAY_OF_WEEK = cdr.CDR_START
LEFT OUTER JOIN FISCAL_WEEKS fw1 ON fw1.FIRST_DAY_OF_WEEK = cdr.CDR_END
INNER JOIN BASE_NODE bn ON dp.HN_RID = bn.HN_RID AND (DAY1 >0 OR  DAY2 > 0 OR DAY3 >0  OR DAY4 >0  OR DAY5 > 0  OR DAY6 >0 OR DAY7 >0)
INNER JOIN APPLICATION_TEXT  ap1 ON ap1.TEXT_CODE = cdr.CDR_RANGE_TYPE_ID
INNER JOIN APPLICATION_TEXT  ap2 ON ap2.TEXT_CODE = cdr.CDR_DATE_TYPE_ID
INNER JOIN STORES st ON st.ST_RID=dp.ST_RID AND st.ST_ID = @STORE_ID


inner join

(
 SELECT PARENT_HN_RID, HN_RID, BN_ID, BN_NAME, BN_DESCRIPTION
   FROM #TEMP
)hn ON hn.HN_RID = dp.HN_RID 
order by st.ST_ID, hn.PARENT_HN_RID,hn.BN_ID

IF (SELECT object_id('tempdb.dbo.#TEMP')) > 0 DROP TABLE #TEMP

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS OFF 
GO



CREATE PROCEDURE [dbo].[SP_GET_DAILYPERCENTAGES_REPORT_FOR_STORE_SET] 
        @SELECTED_NODE_RID  INT,
         @SELECTED_NODE_LEVEL INT,
        @LOWER_LEVEL INT,
@STORE_CHAR_GROUP varchar(255),
        @STORE_CHAR  varchar(255)
        
AS

DECLARE @LEVEL AS INT
SELECT @LEVEL = @LOWER_LEVEL -  @SELECTED_NODE_LEVEL

CREATE TABLE #TEMP (PARENT_HN_RID INT, HN_RID INT, BN_ID CHAR(50) COLLATE Latin1_General_CS_AS, BN_NAME CHAR(50) COLLATE Latin1_General_CS_AS, BN_DESCRIPTION CHAR(250) COLLATE Latin1_General_CS_AS)
INSERT #TEMP (PARENT_HN_RID, HN_RID, BN_ID, BN_NAME, BN_DESCRIPTION)
EXEC SP_GET_ALL_DESCENDANTS_BY_LEVEL_REPORT @SELECTED_NODE_RID, @LEVEL


SELECT 'DailyPercentages', hn.PARENT_HN_RID, dpd.HN_RID, '[Defaults]'  AS [DateRange],st.ST_ID,  st.STORE_NAME, hn.BN_ID ,hn.BN_NAME ,
CASE   WHEN phl.PHL_DISPLAY_OPTION_ID = 800701 THEN hn.BN_ID
	WHEN phl.PHL_DISPLAY_OPTION_ID = 800702 THEN hn.BN_DESCRIPTION
	WHEN phl.PHL_DISPLAY_OPTION_ID = 800703 THEN hn.BN_ID + '[' + hn.BN_NAME + ']'
              WHEN phl.PHL_DISPLAY_OPTION_ID = 800704 THEN hn.BN_ID + '[' + hn.BN_DESCRIPTION + ']'
               WHEN phl.PHL_DISPLAY_OPTION_ID = 800705 THEN hn.BN_NAME + '[' + hn.BN_DESCRIPTION + ']'
	 WHEN phl.PHL_DISPLAY_OPTION_ID = 800706 THEN  hn.BN_ID + '[' +  hn.BN_NAME + ']' + '[' + hn.BN_DESCRIPTION + ']'
          ELSE hn.BN_ID + '[' + hn.BN_NAME + ']'
END as [DISPLAY_TEXT],
 dpd.DAY1,dpd.DAY2,dpd.DAY3,dpd.DAY4,dpd.DAY5,dpd.DAY6,dpd.DAY7 
FROM DAILY_PERCENTAGES_DEFAULTS dpd
INNER JOIN HIERARCHY_NODE hen ON hen.HN_RID = dpd.HN_RID
LEFT OUTER JOIN PRODUCT_HIERARCHY_LEVELS phl ON phl.PHL_SEQUENCE = hen.HOME_LEVEL
INNER JOIN BASE_NODE bn ON dpd.HN_RID = bn.HN_RID AND (DAY1 >0 OR  DAY2 > 0 OR DAY3 >0  OR DAY4 >0  OR DAY5 > 0  OR DAY6 >0 OR DAY7 >0)
INNER JOIN STORES st ON st.ST_RID = dpd.ST_RID
INNER JOIN STORE_CHAR_JOIN scj ON scj.ST_RID = st.ST_RID
INNER JOIN STORE_CHAR sc ON sc.SC_RID = scj.SC_RID AND sc.TEXT_VALUE = @STORE_CHAR
INNER JOIN STORE_CHAR_GROUP scg ON scg.SCG_RID = sc.SCG_RID AND	SCG_ID = @STORE_CHAR_GROUP
inner join

(
 SELECT PARENT_HN_RID, HN_RID, BN_ID, BN_NAME, BN_DESCRIPTION
   FROM #TEMP
)hn ON hn.HN_RID = dpd.HN_RID 

union

SELECT 'DailyPercentages', hn.PARENT_HN_RID, dp.HN_RID,
	 CASE WHEN cdr.CDR_RID > 1 AND (CDR_RANGE_TYPE_ID = 800858 OR CDR_RANGE_TYPE_ID = 800859)THEN
		ap1.TEXT_VALUE + ' ' + 
		ap2.TEXT_VALUE + '(s) '+ 
		CONVERT(VARCHAR(3),cdr.CDR_START) + '-' 
		+ CONVERT(VARCHAR(3),cdr.CDR_END)
	      WHEN cdr.CDR_RID > 1 AND CDR_RANGE_TYPE_ID = 800857 THEN 
		    'Weeks ' + SUBSTRING(CONVERT(VARCHAR(6),fw.FISCAL_WEEK),5,6) + '/' +
                 	SUBSTRING(CONVERT(VARCHAR(6),fw.FISCAL_WEEK),1,4) + ' - ' +    
                 	SUBSTRING(CONVERT(VARCHAR(6),fw1.FISCAL_WEEK),5,6) + '/' +
                  	SUBSTRING(CONVERT(VARCHAR(6),fw1.FISCAL_WEEK),1,4)
	      ELSE '[Defaults]'
	 END AS  [DateRange],
 	   st.ST_ID,  st.STORE_NAME, hn.BN_ID ,hn.BN_NAME , 
CASE   WHEN phl.PHL_DISPLAY_OPTION_ID = 800701 THEN hn.BN_ID
	WHEN phl.PHL_DISPLAY_OPTION_ID = 800702 THEN hn.BN_DESCRIPTION
	WHEN phl.PHL_DISPLAY_OPTION_ID = 800703 THEN hn.BN_ID + '[' + hn.BN_NAME + ']'
              WHEN phl.PHL_DISPLAY_OPTION_ID = 800704 THEN hn.BN_ID + '[' + hn.BN_DESCRIPTION + ']'
               WHEN phl.PHL_DISPLAY_OPTION_ID = 800705 THEN hn.BN_NAME + '[' + hn.BN_DESCRIPTION + ']'
	 WHEN phl.PHL_DISPLAY_OPTION_ID = 800706 THEN  hn.BN_ID + '[' +  hn.BN_NAME + ']' + '[' + hn.BN_DESCRIPTION + ']'
          ELSE hn.BN_ID + '[' + hn.BN_NAME + ']'

END as [DISPLAY_TEXT],
dp.DAY1,dp.DAY2,dp.DAY3,dp.DAY4,dp.DAY5,dp.DAY6,dp.DAY7 
FROM DAILY_PERCENTAGES dp
INNER JOIN HIERARCHY_NODE hen ON hen.HN_RID = dp.HN_RID
LEFT OUTER JOIN PRODUCT_HIERARCHY_LEVELS phl ON phl.PHL_SEQUENCE = hen.HOME_LEVEL
INNER JOIN CALENDAR_DATE_RANGE cdr ON cdr.CDR_RID = dp.CDR_RID
LEFT OUTER JOIN FISCAL_WEEKS fw ON fw.FIRST_DAY_OF_WEEK = cdr.CDR_START
LEFT OUTER JOIN FISCAL_WEEKS fw1 ON fw1.FIRST_DAY_OF_WEEK = cdr.CDR_END
INNER JOIN APPLICATION_TEXT  ap1 ON ap1.TEXT_CODE = cdr.CDR_RANGE_TYPE_ID
INNER JOIN APPLICATION_TEXT  ap2 ON ap2.TEXT_CODE = cdr.CDR_DATE_TYPE_ID
INNER JOIN BASE_NODE bn ON dp.HN_RID = bn.HN_RID AND (DAY1 >0 OR  DAY2 > 0 OR DAY3 >0  OR DAY4 >0  OR DAY5 > 0  OR DAY6 >0 OR DAY7 >0)
INNER JOIN STORES st ON st.ST_RID = dp.ST_RID
INNER JOIN STORE_CHAR_JOIN scj ON scj.ST_RID = st.ST_RID
INNER JOIN STORE_CHAR sc ON sc.SC_RID = scj.SC_RID AND sc.TEXT_VALUE = @STORE_CHAR
INNER JOIN STORE_CHAR_GROUP scg ON scg.SCG_RID = sc.SCG_RID AND	SCG_ID = @STORE_CHAR_GROUP

inner join

(
 SELECT PARENT_HN_RID, HN_RID, BN_ID, BN_NAME, BN_DESCRIPTION
   FROM #TEMP
)hn ON hn.HN_RID = dp.HN_RID 
order by st.ST_ID, hn.PARENT_HN_RID,hn.BN_ID

IF (SELECT object_id('tempdb.dbo.#TEMP')) > 0 DROP TABLE #TEMP

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS OFF 
GO



CREATE PROCEDURE [dbo].[SP_GET_DAILYPERCENTAGES_REPORT_NO_STORE] 
        @SELECTED_NODE_RID  INT,
         @SELECTED_NODE_LEVEL INT,
        @LOWER_LEVEL INT
       

       
AS

DECLARE @LEVEL AS INT
SELECT @LEVEL = @LOWER_LEVEL -  @SELECTED_NODE_LEVEL

CREATE TABLE #TEMP (PARENT_HN_RID INT, HN_RID INT, BN_ID CHAR(50) COLLATE Latin1_General_CS_AS, BN_NAME CHAR(50) COLLATE Latin1_General_CS_AS, BN_DESCRIPTION CHAR(250) COLLATE Latin1_General_CS_AS)
INSERT #TEMP (PARENT_HN_RID, HN_RID, BN_ID, BN_NAME, BN_DESCRIPTION)
EXEC SP_GET_ALL_DESCENDANTS_BY_LEVEL_REPORT @SELECTED_NODE_RID, @LEVEL


SELECT 'DailyPercentages', hn.PARENT_HN_RID, dpd.HN_RID, '[Defaults]'  AS [DateRange], st.ST_ID,  st.STORE_NAME, hn.BN_ID ,hn.BN_NAME , 

CASE   WHEN phl.PHL_DISPLAY_OPTION_ID = 800701 THEN hn.BN_ID
	WHEN phl.PHL_DISPLAY_OPTION_ID = 800702 THEN hn.BN_DESCRIPTION
	WHEN phl.PHL_DISPLAY_OPTION_ID = 800703 THEN hn.BN_ID + '[' + hn.BN_NAME + ']'
              WHEN phl.PHL_DISPLAY_OPTION_ID = 800704 THEN hn.BN_ID + '[' + hn.BN_DESCRIPTION + ']'
               WHEN phl.PHL_DISPLAY_OPTION_ID = 800705 THEN hn.BN_NAME + '[' + hn.BN_DESCRIPTION + ']'
	 WHEN phl.PHL_DISPLAY_OPTION_ID = 800706 THEN  hn.BN_ID + '[' +  hn.BN_NAME + ']' + '[' + hn.BN_DESCRIPTION + ']'
          ELSE hn.BN_ID + '[' + hn.BN_NAME + ']'

END as [DISPLAY_TEXT],

dpd.DAY1,dpd.DAY2,dpd.DAY3,dpd.DAY4,dpd.DAY5,dpd.DAY6,dpd.DAY7 
FROM DAILY_PERCENTAGES_DEFAULTS dpd
INNER JOIN HIERARCHY_NODE hen ON hen.HN_RID = dpd.HN_RID
LEFT OUTER JOIN PRODUCT_HIERARCHY_LEVELS phl ON phl.PHL_SEQUENCE = hen.HOME_LEVEL
INNER JOIN BASE_NODE bn ON dpd.HN_RID = bn.HN_RID AND (DAY1 >0 OR  DAY2 > 0 OR DAY3 >0  OR DAY4 >0  OR DAY5 > 0  OR DAY6 >0 OR DAY7 >0)
INNER JOIN STORES st ON st.ST_RID =  dpd.ST_RID

inner join

(
 SELECT PARENT_HN_RID, HN_RID, BN_ID, BN_NAME, BN_DESCRIPTION
   FROM #TEMP
)hn ON hn.HN_RID = dpd.HN_RID 

union

SELECT 'DailyPercentages', hn.PARENT_HN_RID, dp.HN_RID,
	 CASE WHEN cdr.CDR_RID > 1 AND (CDR_RANGE_TYPE_ID = 800858 OR CDR_RANGE_TYPE_ID = 800859)THEN
		ap1.TEXT_VALUE + ' ' + 
		ap2.TEXT_VALUE + '(s) '+ 
		CONVERT(VARCHAR(3),cdr.CDR_START) + '-' 
		+ CONVERT(VARCHAR(3),cdr.CDR_END)
	      WHEN cdr.CDR_RID > 1 AND CDR_RANGE_TYPE_ID = 800857 THEN 
		    'Weeks ' + SUBSTRING(CONVERT(VARCHAR(6),fw.FISCAL_WEEK),5,6) + '/' +
                 	SUBSTRING(CONVERT(VARCHAR(6),fw.FISCAL_WEEK),1,4) + ' - ' +    
                 	SUBSTRING(CONVERT(VARCHAR(6),fw1.FISCAL_WEEK),5,6) + '/' +
                  	SUBSTRING(CONVERT(VARCHAR(6),fw1.FISCAL_WEEK),1,4)
	      ELSE '[Defaults]'
	 END AS  [DateRange],
	  st.ST_ID,  st.STORE_NAME, hn.BN_ID ,hn.BN_NAME ,
CASE   WHEN phl.PHL_DISPLAY_OPTION_ID = 800701 THEN hn.BN_ID
	WHEN phl.PHL_DISPLAY_OPTION_ID = 800702 THEN hn.BN_DESCRIPTION
	WHEN phl.PHL_DISPLAY_OPTION_ID = 800703 THEN hn.BN_ID + '[' + hn.BN_NAME + ']'
              WHEN phl.PHL_DISPLAY_OPTION_ID = 800704 THEN hn.BN_ID + '[' + hn.BN_DESCRIPTION + ']'
               WHEN phl.PHL_DISPLAY_OPTION_ID = 800705 THEN hn.BN_NAME + '[' + hn.BN_DESCRIPTION + ']'
	 WHEN phl.PHL_DISPLAY_OPTION_ID = 800706 THEN  hn.BN_ID + '[' +  hn.BN_NAME + ']' + '[' + hn.BN_DESCRIPTION + ']'
          ELSE hn.BN_ID + '[' + hn.BN_NAME + ']'
	END as [DISPLAY_TEXT],
 dp.DAY1,dp.DAY2,dp.DAY3,dp.DAY4,dp.DAY5,dp.DAY6,dp.DAY7 
FROM DAILY_PERCENTAGES dp
INNER JOIN CALENDAR_DATE_RANGE cdr ON cdr.CDR_RID = dp.CDR_RID
LEFT OUTER JOIN FISCAL_WEEKS fw ON fw.FIRST_DAY_OF_WEEK = cdr.CDR_START
LEFT OUTER JOIN FISCAL_WEEKS fw1 ON fw1.FIRST_DAY_OF_WEEK = cdr.CDR_END
INNER JOIN HIERARCHY_NODE hen ON hen.HN_RID = dp.HN_RID
LEFT OUTER JOIN PRODUCT_HIERARCHY_LEVELS phl ON phl.PHL_SEQUENCE = hen.HOME_LEVEL
INNER JOIN APPLICATION_TEXT  ap1 ON ap1.TEXT_CODE = cdr.CDR_RANGE_TYPE_ID
INNER JOIN APPLICATION_TEXT  ap2 ON ap2.TEXT_CODE = cdr.CDR_DATE_TYPE_ID
INNER JOIN BASE_NODE bn ON dp.HN_RID = bn.HN_RID AND (DAY1 >0 OR  DAY2 > 0 OR DAY3 >0  OR DAY4 >0  OR DAY5 > 0  OR DAY6 >0 OR DAY7 >0)
INNER JOIN STORES st ON st.ST_RID = dp.ST_RID


inner join

(
 SELECT PARENT_HN_RID, HN_RID, BN_ID, BN_NAME, BN_DESCRIPTION
   FROM #TEMP
)hn ON hn.HN_RID = dp.HN_RID 
order by st.ST_ID, hn.PARENT_HN_RID,hn.BN_ID

IF (SELECT object_id('tempdb.dbo.#TEMP')) > 0 DROP TABLE #TEMP

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS OFF 
GO





CREATE  PROCEDURE [dbo].[SP_GET_FORECAST_AUDIT_BY_MERCHANDISE]

              @SELECTED_NODE_RID  INT,
              @LOWER_LEVEL INT,
	@FV_RID INT,
	@USER_RID INT,
             @TIME_RANGE_BEGIN VARCHAR(50),
             @TIME_RANGE_END VARCHAR(50),
	@USER_GROUP_RID INT,
	@PROCESS_FROM_DATE  VARCHAR(50),
	@PROCESS_TO_DATE VARCHAR(50)
 AS
BEGIN 

DECLARE @SELECTED_NODE_LEVEL AS INT
SELECT @SELECTED_NODE_LEVEL = HOME_LEVEL FROM HIERARCHY_NODE WHERE HN_RID =  @SELECTED_NODE_RID

DECLARE @MAX_PHL_SEQUENCE AS INT
SELECT @MAX_PHL_SEQUENCE = MAX(PHL_SEQUENCE) FROM PRODUCT_HIERARCHY_LEVELS

IF( @LOWER_LEVEL=0)
BEGIN
SELECT @LOWER_LEVEL=@MAX_PHL_SEQUENCE
END

DECLARE @LEVEL AS INT
SELECT @LEVEL = (@LOWER_LEVEL -  @SELECTED_NODE_LEVEL)+1

CREATE TABLE #TEMP (PARENT_HN_RID INT, HN_RID INT, BN_ID CHAR(50) COLLATE Latin1_General_CS_AS, BN_NAME CHAR(50) COLLATE Latin1_General_CS_AS, BN_DESCRIPTION CHAR(250) COLLATE Latin1_General_CS_AS)
INSERT #TEMP (PARENT_HN_RID, HN_RID, BN_ID, BN_NAME, BN_DESCRIPTION)
EXEC SP_GET_ALL_DESCENDANTS_BY_LEVEL_REPORT @SELECTED_NODE_RID, @LEVEL


DECLARE @ST1 AS INT
DECLARE @ST2 AS INT
DECLARE @ST3 AS INT
DECLARE @ST4 AS INT
DECLARE @ST5 AS INT
DECLARE @ST6 AS INT
DECLARE @ST7 AS INT
DECLARE @ST8 AS INT
DECLARE @ST9 AS INT
DECLARE @ST10 AS INT

SELECT @ST1 = s.SELL_THRU
FROM
(
	SELECT SELL_THRU,
    	(SELECT count (*)+1 AS [IDX] FROM ( SELECT DISTINCT SELL_THRU FROM AUDIT_MODIFY_SALES_MATRIX) s1 WHERE s1.SELL_THRU < s2.SELL_THRU)AS [IDX]
    	FROM AUDIT_MODIFY_SALES_MATRIX s2
	GROUP BY SELL_THRU
)s
WHERE s.IDX = 1

SELECT @ST2 = s.SELL_THRU
FROM
(
	SELECT SELL_THRU,
    	(SELECT count (*)+1 AS [IDX] FROM ( SELECT DISTINCT SELL_THRU FROM AUDIT_MODIFY_SALES_MATRIX) s1 WHERE s1.SELL_THRU < s2.SELL_THRU)AS [IDX]
    	FROM AUDIT_MODIFY_SALES_MATRIX s2
	GROUP BY SELL_THRU
)s
WHERE s.IDX = 2

SELECT @ST3 = s.SELL_THRU
FROM
(
	SELECT SELL_THRU,
    	(SELECT count (*)+1 AS [IDX] FROM ( SELECT DISTINCT SELL_THRU FROM AUDIT_MODIFY_SALES_MATRIX) s1 WHERE s1.SELL_THRU < s2.SELL_THRU)AS [IDX]
    	FROM AUDIT_MODIFY_SALES_MATRIX s2
	GROUP BY SELL_THRU
)s
WHERE s.IDX = 3

SELECT @ST4 = s.SELL_THRU
FROM
(
	SELECT SELL_THRU,
    	(SELECT count (*)+1 AS [IDX] FROM ( SELECT DISTINCT SELL_THRU FROM AUDIT_MODIFY_SALES_MATRIX) s1 WHERE s1.SELL_THRU < s2.SELL_THRU)AS [IDX]
    	FROM AUDIT_MODIFY_SALES_MATRIX s2
	GROUP BY SELL_THRU
)s
WHERE s.IDX = 4

SELECT @ST5 = s.SELL_THRU
FROM
(
	SELECT SELL_THRU,
    	(SELECT count (*)+1 AS [IDX] FROM ( SELECT DISTINCT SELL_THRU FROM AUDIT_MODIFY_SALES_MATRIX) s1 WHERE s1.SELL_THRU < s2.SELL_THRU)AS [IDX]
    	FROM AUDIT_MODIFY_SALES_MATRIX s2
	GROUP BY SELL_THRU
)s
WHERE s.IDX = 5

SELECT @ST6 = s.SELL_THRU
FROM
(
	SELECT SELL_THRU,
    	(SELECT count (*)+1 AS [IDX] FROM ( SELECT DISTINCT SELL_THRU FROM AUDIT_MODIFY_SALES_MATRIX) s1 WHERE s1.SELL_THRU < s2.SELL_THRU)AS [IDX]
    	FROM AUDIT_MODIFY_SALES_MATRIX s2
	GROUP BY SELL_THRU
)s
WHERE s.IDX = 6

SELECT @ST7 = s.SELL_THRU
FROM
(
	SELECT SELL_THRU,
    	(SELECT count (*)+1 AS [IDX] FROM ( SELECT DISTINCT SELL_THRU FROM AUDIT_MODIFY_SALES_MATRIX) s1 WHERE s1.SELL_THRU < s2.SELL_THRU)AS [IDX]
    	FROM AUDIT_MODIFY_SALES_MATRIX s2
	GROUP BY SELL_THRU
)s
WHERE s.IDX = 7

SELECT @ST8 = s.SELL_THRU
FROM
(
	SELECT SELL_THRU,
    	(SELECT count (*)+1 AS [IDX] FROM ( SELECT DISTINCT SELL_THRU FROM AUDIT_MODIFY_SALES_MATRIX) s1 WHERE s1.SELL_THRU < s2.SELL_THRU)AS [IDX]
    	FROM AUDIT_MODIFY_SALES_MATRIX s2
	GROUP BY SELL_THRU
)s
WHERE s.IDX = 8

SELECT @ST9 = s.SELL_THRU
FROM
(
	SELECT SELL_THRU,
    	(SELECT count (*)+1 AS [IDX] FROM ( SELECT DISTINCT SELL_THRU FROM AUDIT_MODIFY_SALES_MATRIX) s1 WHERE s1.SELL_THRU < s2.SELL_THRU)AS [IDX]
    	FROM AUDIT_MODIFY_SALES_MATRIX s2
	GROUP BY SELL_THRU
)s
WHERE s.IDX = 9

SELECT @ST10 = s.SELL_THRU
FROM
(
	SELECT SELL_THRU,
    	(SELECT count (*)+1 AS [IDX] FROM ( SELECT DISTINCT SELL_THRU FROM AUDIT_MODIFY_SALES_MATRIX) s1 WHERE s1.SELL_THRU < s2.SELL_THRU)AS [IDX]
    	FROM AUDIT_MODIFY_SALES_MATRIX s2
	GROUP BY SELL_THRU
)s
WHERE s.IDX = 10

SELECT hn.HN_RID, hn.BN_ID,hn.BN_NAME, 
CASE   WHEN phl.PHL_DISPLAY_OPTION_ID = 800701 THEN hn.BN_ID
	WHEN phl.PHL_DISPLAY_OPTION_ID = 800702 THEN hn.BN_DESCRIPTION
	WHEN phl.PHL_DISPLAY_OPTION_ID = 800703 THEN hn.BN_ID + '[' + hn.BN_NAME + ']'
              WHEN phl.PHL_DISPLAY_OPTION_ID = 800704 THEN hn.BN_ID + '[' + hn.BN_DESCRIPTION + ']'
               WHEN phl.PHL_DISPLAY_OPTION_ID = 800705 THEN hn.BN_NAME + '[' + hn.BN_DESCRIPTION + ']'
	 WHEN phl.PHL_DISPLAY_OPTION_ID = 800706 THEN  hn.BN_ID + '[' +  hn.BN_NAME + ']' + '[' + hn.BN_DESCRIPTION + ']'
          ELSE hn.BN_ID + '[' + hn.BN_NAME + ']'
END as [DISPLAY_TEXT],
af.MethodType, af.StoreVersion, af.ChainVersion, convert(VARCHAR(50), af.PROCESS_DATE_TIME) AS [PROCESS_DATE_TIME],
	af.MethodName, af.TIME_RANGE_BEGIN, TIME_RANGE_END, af.FilterName, af.StockMinMax, af.Average, af.USER_NAME,
	af.AttributeSet1,  af.ForecastMethod, af.BasisNode, af.BasisVersion, af.BasisTimePeriod, af.BasisWeight,af.BASIS_TYPE, BASIS_TYPE_SORT_CODE,
	af.Grade_Code, af.Boundary, 
	af.STORES2, af.RULE2, af.QTY2, af.ST2,
	af.STORES3, af.RULE3, af.QTY3, af.ST3,
	af.STORES4, af.RULE4, af.QTY4, af.ST4,
	af.STORES5, af.RULE5, af.QTY5, af.ST5,
	af.STORES6, af.RULE6, af.QTY6, af.ST6,
	af.STORES7, af.RULE7, af.QTY7, af.ST7,
	af.STORES8, af.RULE8, af.QTY8, af.ST8,
	af.STORES9, af.RULE9, af.QTY9, af.ST9,
	af.STORES10, af.RULE10, af.QTY10, af.ST10,
	af.STORES11, af.RULE11, af.QTY11, af.ST11
FROM HIERARCHY_NODE hyn 
LEFT OUTER JOIN PRODUCT_HIERARCHY_LEVELS phl ON phl.PHL_SEQUENCE = hyn.HOME_LEVEL
INNER JOIN 
(
 SELECT PARENT_HN_RID, HN_RID, BN_ID, BN_NAME, BN_DESCRIPTION
   FROM #TEMP
) hn  ON hn.HN_RID = hyn.HN_RID
INNER JOIN
(
	SELECT  af.HN_RID, apt.TEXT_VALUE AS [MethodType], 
		   fvs.DESCRIPTION as [StoreVersion], 
       		   fvc.DESCRIPTION AS [ChainVersion],af.METHOD_NAME AS [MethodName], convert(VARCHAR(50), af.PROCESS_DATE_TIME) AS [PROCESS_DATE_TIME],
		        'Week ' + SUBSTRING(CONVERT(VARCHAR(20),af.TIME_RANGE_BEGIN),5,6) + '/'  + SUBSTRING(CONVERT(VARCHAR(20),af.TIME_RANGE_BEGIN),1,4)  AS [TIME_RANGE_BEGIN] , 
		        'Week ' + SUBSTRING(CONVERT(VARCHAR(20),af.TIME_RANGE_END),5,6) + '/'  + SUBSTRING(CONVERT(VARCHAR(20),af.TIME_RANGE_END),1,4)  AS [TIME_RANGE_END] ,
		       NULL AS [FilterName],
		      aofs.StockMinMax, NULL AS [Average],
		       au.USER_NAME, aofs.AttributeSet1,
		       aofs.ForecastMethod, aofs.BasisNode,
		       aofs.BasisVersion, 
		       aofs.BasisTimePeriod,
		       aofs.BasisWeight, aofs.BASIS_TYPE, aofs.BASIS_TYPE_SORT_CODE,
		       NULL AS [Grade_Code], NULL AS [Boundary],  
		       NULL AS [STORES2], NULL as [RULE2], NULL AS [QTY2], NULL AS [ST2],
		       NULL AS [STORES3], NULL as [RULE3], NULL AS [QTY3], NULL AS [ST3],
		       NULL AS [STORES4], NULL as [RULE4], NULL AS [QTY4], NULL AS [ST4],
		       NULL AS [STORES5], NULL as [RULE5], NULL AS [QTY5], NULL AS [ST5],
		       NULL AS [STORES6], NULL as [RULE6], NULL AS [QTY6], NULL AS [ST6],
		       NULL AS [STORES7], NULL as [RULE7], NULL AS [QTY7], NULL AS [ST7],
		       NULL AS [STORES8], NULL as [RULE8], NULL AS [QTY8], NULL AS [ST8],
		       NULL AS [STORES9], NULL as [RULE9], NULL AS [QTY9], NULL AS [ST9],
		       NULL AS [STORES10], NULL as [RULE10], NULL AS [QTY10], NULL AS [ST10],
		       NULL AS [STORES11], NULL as [RULE11], NULL AS [QTY11], NULL AS [ST11]
	FROM AUDIT_FORECAST af
	INNER JOIN
	(
 		SELECT USER_RID FROM APPLICATION_USER  WHERE USER_RID = @USER_RID AND @USER_RID <> 0
				UNION
		SELECT USER_RID FROM USER_GROUP_JOIN WHERE GROUP_RID = @USER_GROUP_RID AND @USER_GROUP_RID <> 0 AND @USER_RID = 0
	) ug ON af.USER_RID = ug.USER_RID
	INNER JOIN APPLICATION_TEXT apt ON apt.TEXT_CODE = af.METHOD_TYPE
	INNER JOIN FORECAST_VERSION fvs ON af.STORE_FV_RID = fvs.FV_RID AND( (@FV_RID > 0 AND fvs.FV_RID = @FV_RID) OR @FV_RID <=0)
	INNER JOIN FORECAST_VERSION fvc ON af.CHAIN_FV_RID = fvc.FV_RID AND ( (@FV_RID > 0 AND fvc.FV_RID = @FV_RID) OR @FV_RID <=0)
	INNER JOIN APPLICATION_USER au ON au.USER_RID = af.USER_RID
	INNER JOIN
	(
		SELECT aofs.AUDIT_FORECAST_RID, sg.SG_ID  + '/' + sgl.SGL_ID AS [AttributeSet1],
			CASE   WHEN phl.PHL_DISPLAY_OPTION_ID = 800701 THEN bn1.BN_ID
				WHEN phl.PHL_DISPLAY_OPTION_ID = 800702 THEN bn1.BN_DESCRIPTION
				WHEN phl.PHL_DISPLAY_OPTION_ID = 800703 THEN bn1.BN_ID + '[' + bn1.BN_NAME + ']'
			              WHEN phl.PHL_DISPLAY_OPTION_ID = 800704 THEN bn1.BN_ID + '[' + bn1.BN_DESCRIPTION + ']'
			               WHEN phl.PHL_DISPLAY_OPTION_ID = 800705 THEN bn1.BN_NAME + '[' + bn1.BN_DESCRIPTION + ']'
				 WHEN phl.PHL_DISPLAY_OPTION_ID = 800706 THEN  bn1.BN_ID + '[' +  bn1.BN_NAME + ']' + '[' + bn1.BN_DESCRIPTION + ']'
				  ELSE bn1.BN_ID + '[' + bn1.BN_NAME + ']'
			END as [BasisNode],
			fvb.DESCRIPTION AS [BasisVersion], 
			CASE WHEN aofsb.BASIS_TIME_PERIOD IS NULL THEN ''
			                 ELSE   aofsb.BASIS_TIME_PERIOD
		       	END AS [BasisTimePeriod],
		       	aofsb.BASIS_WEIGHT AS [BasisWeight],
		       	CASE WHEN aofs.STOCK_MIN_MAX = 1 THEN 'Yes'
		                 ELSE 'No'
		       	END AS [StockMinMax],aofs.FORECAST_METHOD_TYPE AS [ForecastMethod],aofsb.BASIS_TYPE, aofsb.BASIS_TYPE_SORT_CODE
		FROM AUDIT_OTS_FORECAST_SET aofs 
		INNER JOIN STORE_GROUP_LEVEL sgl ON sgl.SGL_RID = aofs.SGL_RID
	             INNER JOIN STORE_GROUP sg ON sg.SG_RID = sgl.SG_RID
		INNER JOIN AUDIT_OTS_FORECAST_SET_BASIS aofsb ON aofs.SGL_RID = aofsb.SGL_RID AND 
	           		aofs.AUDIT_FORECAST_RID = aofsb.AUDIT_FORECAST_RID
		INNER JOIN BASE_NODE bn1 ON bn1.HN_RID = aofsb.BASIS_HN_RID
	             INNER JOIN  HIERARCHY_NODE hn ON bn1.HN_RID = hn.HN_RID
                          LEFT OUTER JOIN PRODUCT_HIERARCHY_LEVELS phl ON phl.PHL_SEQUENCE = hn.HOME_LEVEL
		INNER JOIN FORECAST_VERSION fvb ON aofsb.BASIS_FV_RID = fvb.FV_RID
		GROUP BY  aofs.AUDIT_FORECAST_RID, sg.SG_ID, sgl.SGL_ID, bn1.BN_ID,bn1.BN_NAME,BN_DESCRIPTION,fvb.DESCRIPTION,
			   aofsb.BASIS_TIME_PERIOD,aofsb.BASIS_WEIGHT,aofs.STOCK_MIN_MAX,aofs.FORECAST_METHOD_TYPE,aofsb.BASIS_TYPE,BASIS_TYPE_SORT_CODE,phl.PHL_DISPLAY_OPTION_ID
	) aofs ON  aofs.AUDIT_FORECAST_RID = af.AUDIT_FORECAST_RID

	WHERE ( (@TIME_RANGE_BEGIN <> '' AND @TIME_RANGE_END <> '' AND  (af.TIME_RANGE_BEGIN BETWEEN  @TIME_RANGE_BEGIN AND @TIME_RANGE_END OR af.TIME_RANGE_END BETWEEN  @TIME_RANGE_BEGIN AND @TIME_RANGE_END))
										OR
		  (@TIME_RANGE_BEGIN =  '' AND @TIME_RANGE_END <> '' AND  (af.TIME_RANGE_BEGIN <=  @TIME_RANGE_END OR af.TIME_RANGE_END <= @TIME_RANGE_END))
										OR
		 (@TIME_RANGE_BEGIN <>  '' AND @TIME_RANGE_END = '' AND  (af.TIME_RANGE_BEGIN >=  @TIME_RANGE_BEGIN OR af.TIME_RANGE_END >= @TIME_RANGE_BEGIN))
										OR
		 (@TIME_RANGE_BEGIN =  '' AND @TIME_RANGE_END = '') )
                             AND convert(varchar,af.PROCESS_DATE_TIME,112) BETWEEN @PROCESS_FROM_DATE  AND @PROCESS_TO_DATE 
			
								UNION


SELECT af.HN_RID, apt.TEXT_VALUE AS [MethodType],
		       NULL AS [StoreVersion],
		       NULL AS [ChainVersion],
		       af.METHOD_NAME AS [MethodName],convert(VARCHAR(50), af.PROCESS_DATE_TIME) ,
		        'Week ' + SUBSTRING(CONVERT(VARCHAR(20),af.TIME_RANGE_BEGIN),5,6) + '/'  + SUBSTRING(CONVERT(VARCHAR(20),af.TIME_RANGE_BEGIN),1,4)  AS [TIME_RANGE_BEGIN] , 
		        'Week ' + SUBSTRING(CONVERT(VARCHAR(20),af.TIME_RANGE_END),5,6) + '/'  + SUBSTRING(CONVERT(VARCHAR(20),af.TIME_RANGE_END),1,4)  AS [TIME_RANGE_END] ,
		       ams.FILTER_NAME AS [FilterName],NULL AS [StockMinMax],
		       ams.AVERAGE_BY AS [Average],au.USER_NAME, sg.SG_ID + '/' + sgl.SGL_ID  AS [AttributeSet1],
		       NULL AS [ForecastMethod],NULL as [BasisNode],
		       NULL AS [BasisVersion], NULL AS [BasisTimePeriod],NULL AS [BasisWeight], 
		       NULL AS [BASIS_TYPE], NULL AS BASIS_TYPE_SORT_CODE,
		       amsm.GRADE_CODE AS [Grade_Code], amsm.BOUNDARY AS [Boundary],  
		       amsm.STORES2, amsm.RULE2, amsm.QTY2, amsm.ST2,
		       amsm.STORES3, amsm.RULE3, amsm.QTY3, amsm.ST3,
          	       	       amsm.STORES4, amsm.RULE4, amsm.QTY4, amsm.ST4,
      		       amsm.STORES5, amsm.RULE5, amsm.QTY5, amsm.ST5,
		       amsm.STORES6, amsm.RULE6, amsm.QTY6, amsm.ST6,
		       amsm.STORES7, amsm.RULE7, amsm.QTY7, amsm.ST7,
		       amsm.STORES8, amsm.RULE8, amsm.QTY8, amsm.ST8,
		       amsm.STORES9, amsm.RULE9, amsm.QTY9, amsm.ST9,
		       amsm.STORES10, amsm.RULE10, amsm.QTY10, amsm.ST10,
		       amsm.STORES11, amsm.RULE11, amsm.QTY11, amsm.ST11
	FROM AUDIT_FORECAST af
	INNER JOIN
	(
 		SELECT USER_RID FROM APPLICATION_USER  WHERE USER_RID = @USER_RID AND @USER_RID <> 0
				UNION
		SELECT USER_RID FROM USER_GROUP_JOIN WHERE GROUP_RID = @USER_GROUP_RID AND @USER_GROUP_RID <> 0 AND @USER_RID = 0
	) ug ON af.USER_RID = ug.USER_RID
	INNER JOIN APPLICATION_TEXT apt ON apt.TEXT_CODE = af.METHOD_TYPE             
	INNER JOIN AUDIT_MODIFY_SALES ams ON ams.AUDIT_FORECAST_RID = af.AUDIT_FORECAST_RID
	INNER JOIN APPLICATION_USER au ON au.USER_RID = af.USER_RID
	INNER JOIN 
	(
		SELECT amsm.AUDIT_FORECAST_RID,amsm.GRADE_CODE AS [GRADE_CODE],amsm.BOUNDARY AS [BOUNDARY], 
	  		amsm.NUMBER_OF_STORES [STORES2],amsm.SGL_RID,
          		 ap.TEXT_VALUE  AS [RULE2],
          		 CASE WHEN  amsm.MATRIX_RULE = 802430 THEN NULL 
			    ELSE amsm.MATRIX_RULE_QUANTITY 
		         END AS  [QTY2],
                            CASE WHEN @ST1 IS NOT NULL AND @ST2 IS NOT NULL THEN 
	             		 CONVERT(VARCHAR(30),@ST1) + '-' + CONVERT(VARCHAR(30),@ST2)
       			ELSE '>' + CONVERT(VARCHAR(30),@ST1) 
                           END  AS [ST2],
          		amsm1.NUMBER_OF_STORES [STORES3],
          		amsm1.MATRIX_RULE [RULE3],amsm1.MATRIX_RULE_QUANTITY [QTY3],
		amsm1.ST3,	           
          		 amsm2.NUMBER_OF_STORES [STORES4],
          		amsm2.MATRIX_RULE [RULE4],amsm2.MATRIX_RULE_QUANTITY [QTY4],
		amsm2.ST4,
          		amsm3.NUMBER_OF_STORES [STORES5],
          		amsm3.MATRIX_RULE [RULE5],amsm3.MATRIX_RULE_QUANTITY [QTY5],
		amsm3.ST5,
          		amsm4.NUMBER_OF_STORES [STORES6],
          		amsm4.MATRIX_RULE [RULE6],amsm4.MATRIX_RULE_QUANTITY [QTY6],
		amsm4.ST6,
          		 amsm5.NUMBER_OF_STORES [STORES7],
          		amsm5.MATRIX_RULE [RULE7],amsm5.MATRIX_RULE_QUANTITY [QTY7],
		amsm5.ST7,
          		amsm6.NUMBER_OF_STORES [STORES8],
          		amsm6.MATRIX_RULE [RULE8],amsm6.MATRIX_RULE_QUANTITY [QTY8],
		amsm6.ST8,
          		amsm7.NUMBER_OF_STORES [STORES9],
          		amsm7.MATRIX_RULE [RULE9],amsm7.MATRIX_RULE_QUANTITY [QTY9],
		amsm7.ST9,
          		amsm8.NUMBER_OF_STORES [STORES10],
          		amsm8.MATRIX_RULE [RULE10],amsm8.MATRIX_RULE_QUANTITY [QTY10],
		amsm8.ST10,
		amsm9.NUMBER_OF_STORES [STORES11],
          		amsm9.MATRIX_RULE [RULE11],amsm9.MATRIX_RULE_QUANTITY [QTY11] ,
		amsm9.ST11   		               
        	  FROM AUDIT_MODIFY_SALES_MATRIX amsm
		  INNER JOIN APPLICATION_TEXT ap ON ap.TEXT_CODE = amsm.MATRIX_RULE
                             INNER JOIN STORE_GROUP_LEVEL sgl ON sgl.SGL_RID=amsm.SGL_RID
	  	  LEFT OUTER JOIN 
	 	  (
			  SELECT AUDIT_FORECAST_RID, GRADE_CODE, NUMBER_OF_STORES,
				 ap.TEXT_VALUE  AS [MATRIX_RULE],
				CASE WHEN  am.MATRIX_RULE = 802430 THEN NULL 
				    ELSE am.MATRIX_RULE_QUANTITY 
		        	END AS [MATRIX_RULE_QUANTITY], am.SGL_RID, am.SELL_THRU,
			CASE WHEN @ST2 IS NOT NULL AND @ST3 IS NOT NULL THEN 
	             		 	CONVERT(VARCHAR(30),@ST2+1) + '-' + CONVERT(VARCHAR(30),@ST3)
       				ELSE '>' + CONVERT(VARCHAR(30),@ST2) 
                           	END  AS [ST3]
			  FROM  AUDIT_MODIFY_SALES_MATRIX am
			  INNER JOIN APPLICATION_TEXT ap ON ap.TEXT_CODE = am.MATRIX_RULE
			  WHERE (@ST2 IS NOT NULL AND @ST3 IS NOT NULL AND am.SELL_THRU BETWEEN @ST2  AND @ST3-1) OR 
                                                          (@ST2 IS NOT NULL AND @ST3 IS NULL AND am.SELL_THRU >= @ST2)
		   )amsm1 ON amsm.AUDIT_FORECAST_RID = amsm1.AUDIT_FORECAST_RID AND amsm.GRADE_CODE = amsm1.GRADE_CODE  AND amsm.SGL_RID = amsm1.SGL_RID
	  	  LEFT OUTER JOIN 
	 	  (
			  SELECT AUDIT_FORECAST_RID, GRADE_CODE, NUMBER_OF_STORES,
				 ap.TEXT_VALUE  AS [MATRIX_RULE],
				CASE WHEN  am.MATRIX_RULE = 802430 THEN NULL 
				    ELSE am.MATRIX_RULE_QUANTITY 
		        	END AS [MATRIX_RULE_QUANTITY], am.SGL_RID, am.SELL_THRU,			
                 		CASE WHEN @ST3 IS NOT NULL AND @ST4 IS NOT NULL THEN 
	             		 	CONVERT(VARCHAR(30),@ST3+1) + '-' + CONVERT(VARCHAR(30),@ST4)
       				ELSE '>' + CONVERT(VARCHAR(30),@ST3) 
                           	END  AS [ST4]
			  FROM  AUDIT_MODIFY_SALES_MATRIX am
			  INNER JOIN APPLICATION_TEXT ap ON ap.TEXT_CODE = am.MATRIX_RULE
			  WHERE (@ST3 IS NOT NULL AND @ST4 IS NOT NULL AND am.SELL_THRU BETWEEN @ST3  AND @ST4-1) OR 
                                                         (@ST3 IS NOT NULL AND @ST4 IS NULL AND am.SELL_THRU >= @ST3)
		   )amsm2 ON amsm.AUDIT_FORECAST_RID = amsm2.AUDIT_FORECAST_RID AND amsm.GRADE_CODE = amsm2.GRADE_CODE  AND amsm.SGL_RID = amsm2.SGL_RID
	  	  LEFT OUTER JOIN 
	 	  (
			  SELECT AUDIT_FORECAST_RID, GRADE_CODE, NUMBER_OF_STORES,
				 ap.TEXT_VALUE  AS [MATRIX_RULE],
				CASE WHEN  am.MATRIX_RULE = 802430 THEN NULL 
				    ELSE am.MATRIX_RULE_QUANTITY 
		        	END AS [MATRIX_RULE_QUANTITY], am.SGL_RID, am.SELL_THRU,			
			CASE WHEN @ST4 IS NOT NULL AND @ST5 IS NOT NULL THEN 
	             		 	CONVERT(VARCHAR(30),@ST4+1) + '-' + CONVERT(VARCHAR(30),@ST5)
       				ELSE '>' + CONVERT(VARCHAR(30),@ST4) 
                           	END  AS  [ST5]
			  FROM  AUDIT_MODIFY_SALES_MATRIX am
			  INNER JOIN APPLICATION_TEXT ap ON ap.TEXT_CODE = am.MATRIX_RULE
			  WHERE (@ST4 IS NOT NULL AND @ST5 IS NOT NULL AND am.SELL_THRU BETWEEN @ST4  AND @ST5-1) OR 
                                                         (@ST4 IS NOT NULL AND @ST5 IS NULL AND am.SELL_THRU >= @ST4)
 
		   )amsm3 ON amsm.AUDIT_FORECAST_RID = amsm3.AUDIT_FORECAST_RID AND amsm.GRADE_CODE = amsm3.GRADE_CODE  AND amsm.SGL_RID = amsm3.SGL_RID
	  	  LEFT OUTER JOIN 
	 	  (
			  SELECT AUDIT_FORECAST_RID, GRADE_CODE, NUMBER_OF_STORES,
				 ap.TEXT_VALUE  AS [MATRIX_RULE],
				CASE WHEN  am.MATRIX_RULE = 802430 THEN NULL 
				    ELSE am.MATRIX_RULE_QUANTITY 
		        	END AS [MATRIX_RULE_QUANTITY], am.SGL_RID, am.SELL_THRU,			
			CASE WHEN @ST5 IS NOT NULL AND @ST6 IS NOT NULL THEN 
	             		 	CONVERT(VARCHAR(30),@ST5+1) + '-' + CONVERT(VARCHAR(30),@ST6)
       				ELSE '>' + CONVERT(VARCHAR(30),@ST5) 
                           	END  AS  [ST6]
			  FROM  AUDIT_MODIFY_SALES_MATRIX am
			  INNER JOIN APPLICATION_TEXT ap ON ap.TEXT_CODE = am.MATRIX_RULE
			  WHERE (@ST5 IS NOT NULL AND @ST6 IS NOT NULL AND am.SELL_THRU BETWEEN @ST5  AND @ST6-1) OR 
                                                         (@ST5 IS NOT NULL AND @ST6 IS NULL AND am.SELL_THRU >= @ST5) 

		   )amsm4 ON amsm.AUDIT_FORECAST_RID = amsm4.AUDIT_FORECAST_RID AND amsm.GRADE_CODE = amsm4.GRADE_CODE  AND amsm.SGL_RID = amsm4.SGL_RID
	  	  LEFT OUTER JOIN 
	 	  (
			  SELECT AUDIT_FORECAST_RID, GRADE_CODE, NUMBER_OF_STORES,
				 ap.TEXT_VALUE  AS [MATRIX_RULE],
				CASE WHEN  am.MATRIX_RULE = 802430 THEN NULL 
				    ELSE am.MATRIX_RULE_QUANTITY 
		        	END AS [MATRIX_RULE_QUANTITY], am.SGL_RID, am.SELL_THRU,
			CASE WHEN @ST6 IS NOT NULL AND @ST7 IS NOT NULL THEN 
	             		 	CONVERT(VARCHAR(30),@ST6+1) + '-' + CONVERT(VARCHAR(30),@ST7)
       				ELSE '>' + CONVERT(VARCHAR(30),@ST6) 
                           	END  AS  [ST7]
			  FROM  AUDIT_MODIFY_SALES_MATRIX am
			  INNER JOIN APPLICATION_TEXT ap ON ap.TEXT_CODE = am.MATRIX_RULE
			  WHERE (@ST6 IS NOT NULL AND @ST7 IS NOT NULL AND am.SELL_THRU BETWEEN @ST6  AND @ST7-1) OR 
                                                         (@ST6 IS NOT NULL AND @ST7 IS NULL AND am.SELL_THRU >= @ST6)
 
		   )amsm5 ON amsm.AUDIT_FORECAST_RID = amsm5.AUDIT_FORECAST_RID AND amsm.GRADE_CODE = amsm5.GRADE_CODE  AND amsm.SGL_RID = amsm5.SGL_RID
	  	  LEFT OUTER JOIN 
	 	  (
			  SELECT AUDIT_FORECAST_RID, GRADE_CODE, NUMBER_OF_STORES,
				 ap.TEXT_VALUE  AS [MATRIX_RULE],
				CASE WHEN  am.MATRIX_RULE = 802430 THEN NULL 
				    ELSE am.MATRIX_RULE_QUANTITY 
		        	END AS [MATRIX_RULE_QUANTITY], am.SGL_RID, am.SELL_THRU,			
			CASE WHEN @ST7 IS NOT NULL AND @ST8 IS NOT NULL THEN 
	             		 	CONVERT(VARCHAR(30),@ST7+1) + '-' + CONVERT(VARCHAR(30),@ST8)
       				ELSE '>' + CONVERT(VARCHAR(30),@ST7) 
                           	END  AS  [ST8]
			  FROM  AUDIT_MODIFY_SALES_MATRIX am
			  INNER JOIN APPLICATION_TEXT ap ON ap.TEXT_CODE = am.MATRIX_RULE
			  WHERE  (@ST7 IS NOT NULL AND @ST8 IS NOT NULL AND am.SELL_THRU BETWEEN @ST7  AND @ST8-1) OR 
                                                          (@ST7 IS NOT NULL AND @ST8 IS NULL AND am.SELL_THRU >= @ST7)
 
		   )amsm6 ON amsm.AUDIT_FORECAST_RID = amsm6.AUDIT_FORECAST_RID AND amsm.GRADE_CODE = amsm6.GRADE_CODE  AND amsm.SGL_RID = amsm6.SGL_RID
	  	  LEFT OUTER JOIN 
	 	  (
			  SELECT AUDIT_FORECAST_RID, GRADE_CODE, NUMBER_OF_STORES,
				 ap.TEXT_VALUE  AS [MATRIX_RULE],
				CASE WHEN  am.MATRIX_RULE = 802430 THEN NULL 
				    ELSE am.MATRIX_RULE_QUANTITY 
		        	END AS [MATRIX_RULE_QUANTITY], am.SGL_RID, am.SELL_THRU,
			CASE WHEN @ST8 IS NOT NULL AND @ST9 IS NOT NULL THEN 
	             		 	CONVERT(VARCHAR(30),@ST8+1) + '-' + CONVERT(VARCHAR(30),@ST9)
       				ELSE '>' + CONVERT(VARCHAR(30),@ST8) 
                           	END  AS  [ST9]
			  FROM  AUDIT_MODIFY_SALES_MATRIX am
			  INNER JOIN APPLICATION_TEXT ap ON ap.TEXT_CODE = am.MATRIX_RULE
			  WHERE  (@ST8 IS NOT NULL AND @ST9 IS NOT NULL AND am.SELL_THRU BETWEEN @ST8  AND @ST9-1) OR 
                                                          (@ST8 IS NOT NULL AND @ST9 IS NULL AND am.SELL_THRU >= @ST8)


		   )amsm7 ON amsm.AUDIT_FORECAST_RID = amsm7.AUDIT_FORECAST_RID AND amsm.GRADE_CODE = amsm7.GRADE_CODE  AND amsm.SGL_RID = amsm7.SGL_RID
	  	  LEFT OUTER JOIN 
	 	  (
			  SELECT AUDIT_FORECAST_RID, GRADE_CODE, NUMBER_OF_STORES,
				 ap.TEXT_VALUE  AS [MATRIX_RULE],
				CASE WHEN  am.MATRIX_RULE = 802430 THEN NULL 
				    ELSE am.MATRIX_RULE_QUANTITY 
		        	END AS [MATRIX_RULE_QUANTITY], am.SGL_RID, am.SELL_THRU,			
			CASE WHEN @ST9 IS NOT NULL AND @ST10 IS NOT NULL THEN 
	             		 	CONVERT(VARCHAR(30),@ST9+1) + '-' + CONVERT(VARCHAR(30),@ST10)
       				ELSE '>' + CONVERT(VARCHAR(30),@ST9) 
                           	END  AS  [ST10]
			  FROM  AUDIT_MODIFY_SALES_MATRIX am
			  INNER JOIN APPLICATION_TEXT ap ON ap.TEXT_CODE = am.MATRIX_RULE
			  WHERE (@ST9 IS NOT NULL AND @ST10 IS NOT NULL AND am.SELL_THRU BETWEEN @ST9  AND @ST10-1) OR 
                                                         (@ST9 IS NOT NULL AND @ST10 IS NULL AND am.SELL_THRU >= @ST9)
 	   )amsm8 ON amsm.AUDIT_FORECAST_RID = amsm8.AUDIT_FORECAST_RID AND amsm.GRADE_CODE = amsm8.GRADE_CODE  AND amsm.SGL_RID = amsm8.SGL_RID
	  	  LEFT OUTER JOIN 
	 	  (
			  SELECT AUDIT_FORECAST_RID, GRADE_CODE, NUMBER_OF_STORES,
				 ap.TEXT_VALUE  AS [MATRIX_RULE],
				CASE WHEN  am.MATRIX_RULE = 802430 THEN NULL 
				    ELSE am.MATRIX_RULE_QUANTITY 
		        	END AS [MATRIX_RULE_QUANTITY], am.SGL_RID, am.SELL_THRU,
			'>' + CONVERT(VARCHAR(30),@ST10)    AS [ST11]
			  FROM  AUDIT_MODIFY_SALES_MATRIX am
			  INNER JOIN APPLICATION_TEXT ap ON ap.TEXT_CODE = am.MATRIX_RULE
			  WHERE  @ST10 IS NOT NULL AND am.SELL_THRU >= @ST10
		   )amsm9 ON amsm.AUDIT_FORECAST_RID = amsm9.AUDIT_FORECAST_RID AND amsm.GRADE_CODE = amsm9.GRADE_CODE  AND amsm.SGL_RID = amsm9.SGL_RID
		   WHERE (@ST1 IS NOT NULL AND @ST2 IS NOT NULL AND amsm.SELL_THRU BETWEEN @ST1  AND @ST2-1) OR 
                                                         (@ST1 IS NOT NULL AND @ST2 IS NULL AND amsm.SELL_THRU >= @ST1)
	)amsm ON amsm.AUDIT_FORECAST_RID = af.AUDIT_FORECAST_RID
	INNER JOIN STORE_GROUP_LEVEL  sgl ON sgl.SGL_RID = amsm.SGL_RID
             INNER JOIN STORE_GROUP sg ON sg.SG_RID = sgl.SG_RID
	WHERE ( (@TIME_RANGE_BEGIN <> '' AND @TIME_RANGE_END <> '' AND  (af.TIME_RANGE_BEGIN BETWEEN  @TIME_RANGE_BEGIN AND @TIME_RANGE_END OR af.TIME_RANGE_END BETWEEN  @TIME_RANGE_BEGIN AND @TIME_RANGE_END))
										OR
		  (@TIME_RANGE_BEGIN =  '' AND @TIME_RANGE_END <> '' AND  (af.TIME_RANGE_BEGIN <=  @TIME_RANGE_END OR af.TIME_RANGE_END <= @TIME_RANGE_END))
										OR
		 (@TIME_RANGE_BEGIN <>  '' AND @TIME_RANGE_END = '' AND  (af.TIME_RANGE_BEGIN >=  @TIME_RANGE_BEGIN OR af.TIME_RANGE_END >= @TIME_RANGE_BEGIN))
										OR
		 (@TIME_RANGE_BEGIN =  '' AND @TIME_RANGE_END = ''))
                             AND convert(varchar,af.PROCESS_DATE_TIME,112) BETWEEN @PROCESS_FROM_DATE  AND @PROCESS_TO_DATE 
) af ON hn.HN_RID = af.HN_RID

GROUP BY  hn.HN_RID, hn.BN_ID,hn.BN_NAME, hn.BN_DESCRIPTION,
af.MethodType, af.StoreVersion, af.ChainVersion, af.PROCESS_DATE_TIME,
af.MethodName, af.TIME_RANGE_BEGIN, TIME_RANGE_END, af.FilterName, af.StockMinMax, af.Average, af.USER_NAME,
af.AttributeSet1,  af.ForecastMethod, af.BasisNode, af.BasisVersion, af.BasisTimePeriod, af.BasisWeight,af.BASIS_TYPE, BASIS_TYPE_SORT_CODE,
af.Grade_Code, af.Boundary, 
af.STORES2, af.RULE2, af.QTY2, af.ST2,
af.STORES3, af.RULE3, af.QTY3, af.ST3,
af.STORES4, af.RULE4, af.QTY4, af.ST4,
af.STORES5, af.RULE5, af.QTY5, af.ST5,
af.STORES6, af.RULE6, af.QTY6, af.ST6,
af.STORES7, af.RULE7, af.QTY7, af.ST7,
af.STORES8, af.RULE8, af.QTY8, af.ST8,
af.STORES9, af.RULE9, af.QTY9, af.ST9,
af.STORES10, af.RULE10, af.QTY10, af.ST10,
af.STORES11, af.RULE11, af.QTY11, af.ST11, phl.PHL_DISPLAY_OPTION_ID

ORDER BY hn.HN_RID, hn.BN_ID, hn.BN_NAME,  hn.BN_DESCRIPTION, af.MethodType, af.MethodName, PROCESS_DATE_TIME,  AttributeSet1,  BASIS_TYPE_SORT_CODE, Grade_Code, Boundary

IF (SELECT object_id('tempdb.dbo.#TEMP')) > 0 DROP TABLE #TEMP

END


GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS OFF 
GO



CREATE PROCEDURE [dbo].[SP_GET_FORECAST_AUDIT_MODIFYSALES_REPORT] 
@SELECTED_NODE_RID  INT,
@LOWER_LEVEL INT,
@FV_RID INT,
@USER_RID INT,
@TIME_RANGE_BEGIN VARCHAR(50),
@TIME_RANGE_END VARCHAR(50),
@USER_GROUP_RID INT
 AS
BEGIN 

DECLARE @SELECTED_NODE_LEVEL AS INT
SELECT @SELECTED_NODE_LEVEL = HOME_LEVEL FROM HIERARCHY_NODE WHERE HN_RID =  @SELECTED_NODE_RID

DECLARE @MAX_PHL_SEQUENCE AS INT
SELECT @MAX_PHL_SEQUENCE = MAX(PHL_SEQUENCE) FROM PRODUCT_HIERARCHY_LEVELS

IF( @LOWER_LEVEL=0)
BEGIN
SELECT @LOWER_LEVEL=@MAX_PHL_SEQUENCE
END

DECLARE @LEVEL AS INT
SELECT @LEVEL = (@LOWER_LEVEL -  @SELECTED_NODE_LEVEL)+1

CREATE TABLE #TEMP (PARENT_HN_RID INT, HN_RID INT, BN_ID CHAR(50) COLLATE Latin1_General_CS_AS, BN_NAME CHAR(50) COLLATE Latin1_General_CS_AS, BN_DESCRIPTION CHAR(250) COLLATE Latin1_General_CS_AS)
INSERT #TEMP (PARENT_HN_RID, HN_RID, BN_ID, BN_NAME, BN_DESCRIPTION)
EXEC SP_GET_ALL_DESCENDANTS_BY_LEVEL_REPORT @SELECTED_NODE_RID, @LEVEL


SELECT   hyn.HOME_PH_RID, hn.PARENT_HN_RID, hn.HN_RID, hn.BN_ID,hn.BN_NAME,
        CASE   WHEN phl.PHL_DISPLAY_OPTION_ID = 800701 THEN hn.BN_ID
	      WHEN phl.PHL_DISPLAY_OPTION_ID = 800702 THEN hn.BN_DESCRIPTION
	      WHEN phl.PHL_DISPLAY_OPTION_ID = 800703 THEN hn.BN_ID + '[' + hn.BN_NAME + ']'
                   WHEN phl.PHL_DISPLAY_OPTION_ID = 800704 THEN hn.BN_ID + '[' + hn.BN_DESCRIPTION + ']'
                   WHEN phl.PHL_DISPLAY_OPTION_ID = 800705 THEN hn.BN_NAME + '[' + hn.BN_DESCRIPTION + ']'
	      WHEN phl.PHL_DISPLAY_OPTION_ID = 800706 THEN  hn.BN_ID + '[' +  hn.BN_NAME + ']' + '[' + hn.BN_DESCRIPTION + ']'
                   ELSE hn.BN_ID + '[' + hn.BN_NAME + ']'
        END as [DISPLAY_TEXT],
       apt.TEXT_VALUE AS [MethodType],
              'Week ' + SUBSTRING(CONVERT(VARCHAR(20),af.TIME_RANGE_BEGIN),5,6) + '/'  + SUBSTRING(CONVERT(VARCHAR(20),af.TIME_RANGE_BEGIN),1,4)  AS [TIME_RANGE_BEGIN] , 
	'Week ' + SUBSTRING(CONVERT(VARCHAR(20),af.TIME_RANGE_END),5,6) + '/'  + SUBSTRING(CONVERT(VARCHAR(20),af.TIME_RANGE_END),1,4)  AS [TIME_RANGE_END] ,
       ams.FILTER_NAME AS [FilterName],SGL_ID AS [AtributeSet],
       ams.AVERAGE_BY AS [Average],au.USER_NAME,convert(VARCHAR(50), af.PROCESS_DATE_TIME) AS [PROCESS_DATE_TIME],
       af.METHOD_NAME AS [MethodName], 
       amsm.GRADE_CODE AS [Grade_Code], amsm.BOUNDARY AS [Boundary],  
      amsm.NUMBER_OF_STORES [Numberofstores], 
      ap.TEXT_VALUE  AS [Rule],  amsm.MATRIX_RULE_QUANTITY AS [Qty]
FROM AUDIT_FORECAST af
INNER JOIN HIERARCHY_NODE hen ON hen.HN_RID = af.HN_RID
LEFT OUTER JOIN PRODUCT_HIERARCHY_LEVELS phl ON phl.PHL_SEQUENCE = hen.HOME_LEVEL
INNER JOIN
(
 		SELECT USER_RID FROM APPLICATION_USER  WHERE USER_RID = @USER_RID AND @USER_RID <> 0
				UNION
		SELECT USER_RID FROM USER_GROUP_JOIN WHERE GROUP_RID = @USER_GROUP_RID AND @USER_GROUP_RID <> 0 AND @USER_RID = 0
) ug ON af.USER_RID = ug.USER_RID
INNER JOIN HIERARCHY_NODE hyn ON af.HN_RID = hyn.HN_RID
INNER JOIN APPLICATION_TEXT apt ON apt.TEXT_CODE = af.METHOD_TYPE
INNER JOIN AUDIT_MODIFY_SALES ams ON ams.AUDIT_FORECAST_RID = af.AUDIT_FORECAST_RID
INNER JOIN APPLICATION_USER au ON au.USER_RID = af.USER_RID
INNER JOIN AUDIT_MODIFY_SALES_MATRIX amsm ON amsm.AUDIT_FORECAST_RID = af.AUDIT_FORECAST_RID
INNER JOIN APPLICATION_TEXT ap ON ap.TEXT_CODE = amsm.MATRIX_RULE
INNER JOIN STORE_GROUP_LEVEL sgl ON sgl.SGL_RID = amsm.SGL_RID
INNER JOIN 
(
 SELECT PARENT_HN_RID, HN_RID, BN_ID, BN_NAME, BN_DESCRIPTION
   FROM #TEMP
) hn  ON hn.HN_RID = hyn.HN_RID
WHERE ((@TIME_RANGE_BEGIN <> '' AND af.TIME_RANGE_BEGIN >= @TIME_RANGE_BEGIN) OR @TIME_RANGE_BEGIN = '')  AND 
	  ((@TIME_RANGE_END <> '' AND af.TIME_RANGE_END <= @TIME_RANGE_END) OR @TIME_RANGE_END = '')

ORDER BY hyn.HOME_PH_RID,  hn.PARENT_HN_RID, hn.BN_ID,MethodType,MethodName,PROCESS_DATE_TIME,Grade_Code

IF (SELECT object_id('tempdb.dbo.#TEMP')) > 0 DROP TABLE #TEMP

END


GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS OFF 
GO



CREATE PROCEDURE [dbo].[SP_GET_FORECAST_AUDIT_OTSFORECAST_REPORT] 
@SELECTED_NODE_RID  INT,
@LOWER_LEVEL INT,
@FV_RID INT,
@USER_RID INT,
@TIME_RANGE_BEGIN VARCHAR(50),
@TIME_RANGE_END VARCHAR(50),
@USER_GROUP_RID INT
 AS
BEGIN 

DECLARE @SELECTED_NODE_LEVEL AS INT
SELECT @SELECTED_NODE_LEVEL = HOME_LEVEL FROM HIERARCHY_NODE WHERE HN_RID =  @SELECTED_NODE_RID

DECLARE @MAX_PHL_SEQUENCE AS INT
SELECT @MAX_PHL_SEQUENCE = MAX(PHL_SEQUENCE) FROM PRODUCT_HIERARCHY_LEVELS

IF( @LOWER_LEVEL=0)
BEGIN
SELECT @LOWER_LEVEL=@MAX_PHL_SEQUENCE
END

DECLARE @LEVEL AS INT
SELECT @LEVEL = (@LOWER_LEVEL -  @SELECTED_NODE_LEVEL)+1

CREATE TABLE #TEMP (PARENT_HN_RID INT, HN_RID INT, BN_ID CHAR(50) COLLATE Latin1_General_CS_AS, BN_NAME CHAR(50) COLLATE Latin1_General_CS_AS, BN_DESCRIPTION CHAR(250) COLLATE Latin1_General_CS_AS)
INSERT #TEMP (PARENT_HN_RID, HN_RID, BN_ID, BN_NAME, BN_DESCRIPTION)
EXEC SP_GET_ALL_DESCENDANTS_BY_LEVEL_REPORT @SELECTED_NODE_RID, @LEVEL

 
SELECT hyn.HOME_PH_RID, hn.PARENT_HN_RID, hn.HN_RID, hn.BN_ID,hn.BN_NAME,
             CASE   WHEN phl.PHL_DISPLAY_OPTION_ID = 800701 THEN hn.BN_ID
	WHEN phl.PHL_DISPLAY_OPTION_ID = 800702 THEN hn.BN_DESCRIPTION
	WHEN phl.PHL_DISPLAY_OPTION_ID = 800703 THEN hn.BN_ID + '[' + hn.BN_NAME + ']'
              WHEN phl.PHL_DISPLAY_OPTION_ID = 800704 THEN hn.BN_ID + '[' + hn.BN_DESCRIPTION + ']'
               WHEN phl.PHL_DISPLAY_OPTION_ID = 800705 THEN hn.BN_NAME + '[' + hn.BN_DESCRIPTION + ']'
	 WHEN phl.PHL_DISPLAY_OPTION_ID = 800706 THEN  hn.BN_ID + '[' +  hn.BN_NAME + ']' + '[' + hn.BN_DESCRIPTION + ']'
          ELSE hn.BN_ID + '[' + hn.BN_NAME + ']'
END as [DISPLAY_TEXT],

             af.MethodType, af.StoreVersion, af.ChainVersion,
	af.TIME_RANGE_BEGIN, af.TIME_RANGE_END,  af.StockMinMax, af.Average, af.USER_NAME,
	convert(VARCHAR(50), af.PROCESS_DATE_TIME) AS [PROCESS_DATE_TIME], af.MethodName,  af.AttributeSet,af.ForecastMethod
FROM HIERARCHY_NODE hyn 
LEFT OUTER JOIN PRODUCT_HIERARCHY_LEVELS phl ON phl.PHL_SEQUENCE = hyn.HOME_LEVEL
INNER JOIN 
(
 SELECT PARENT_HN_RID, HN_RID, BN_ID, BN_NAME, BN_DESCRIPTION
   FROM #TEMP
) hn  ON hn.HN_RID = hyn.HN_RID
INNER JOIN
(
	SELECT af.HN_RID, apt.TEXT_VALUE AS [MethodType], 
	       fvs.DESCRIPTION as [StoreVersion], 
       fvc.DESCRIPTION AS [ChainVersion],
        'Week ' + SUBSTRING(CONVERT(VARCHAR(20),af.TIME_RANGE_BEGIN),5,6) + '/'  + SUBSTRING(CONVERT(VARCHAR(20),af.TIME_RANGE_BEGIN),1,4)  AS [TIME_RANGE_BEGIN] , 
        'Week ' + SUBSTRING(CONVERT(VARCHAR(20),af.TIME_RANGE_END),5,6) + '/'  + SUBSTRING(CONVERT(VARCHAR(20),af.TIME_RANGE_END),1,4)  AS [TIME_RANGE_END] ,
       CASE WHEN aofs.STOCK_MIN_MAX = 1 THEN 'Yes'
            ELSE 'No'
       END AS [StockMinMax],  NULL AS [Average],
       au.USER_NAME, af.PROCESS_DATE_TIME,
       af.METHOD_NAME AS [MethodName], aofs.SET_NAME AS [AttributeSet],
       FORECAST_METHOD_TYPE AS [ForecastMethod]
       FROM AUDIT_FORECAST af
      INNER JOIN
      (
	SELECT USER_RID FROM APPLICATION_USER  WHERE USER_RID = @USER_RID AND @USER_RID <> 0
				UNION
	SELECT USER_RID FROM USER_GROUP_JOIN WHERE GROUP_RID = @USER_GROUP_RID AND @USER_GROUP_RID <> 0 AND @USER_RID = 0
       ) ug ON af.USER_RID = ug.USER_RID
       INNER JOIN APPLICATION_TEXT apt ON apt.TEXT_CODE = af.METHOD_TYPE
       INNER JOIN FORECAST_VERSION fvs ON af.STORE_FV_RID = fvs.FV_RID AND ((@FV_RID > 0 AND fvs.FV_RID = @FV_RID) OR @FV_RID <=0)
       INNER JOIN FORECAST_VERSION fvc ON af.CHAIN_FV_RID = fvc.FV_RID  AND ((@FV_RID > 0 AND fvc.FV_RID = @FV_RID) OR @FV_RID <=0)
       INNER JOIN AUDIT_OTS_FORECAST_SET aofs ON af.AUDIT_FORECAST_RID = aofs.AUDIT_FORECAST_RID
       INNER JOIN APPLICATION_USER au ON au.USER_RID = af.USER_RID
       WHERE ((@TIME_RANGE_BEGIN <> '' AND af.TIME_RANGE_BEGIN >= @TIME_RANGE_BEGIN) OR @TIME_RANGE_BEGIN = '') AND 
	  ((@TIME_RANGE_END <> '' AND af.TIME_RANGE_END <= @TIME_RANGE_END) OR @TIME_RANGE_END = '')


	
								UNION

	SELECT NULL , NULL, 
	      NULL, 
       NULL,
      NULL, 
       NULL ,
       NULL,  NULL AS [Average],
       NULL, NULL,
       NULL, NULL,
       NULL
	FROM AUDIT_FORECAST af
	INNER JOIN APPLICATION_TEXT apt ON apt.TEXT_CODE = af.METHOD_TYPE
	INNER JOIN AUDIT_MODIFY_SALES ams ON ams.AUDIT_FORECAST_RID = af.AUDIT_FORECAST_RID
	INNER JOIN APPLICATION_USER au ON au.USER_RID = af.USER_RID
	INNER JOIN AUDIT_MODIFY_SALES_MATRIX amsm ON amsm.AUDIT_FORECAST_RID = af.AUDIT_FORECAST_RID
	INNER JOIN STORE_GROUP_LEVEL sgl ON sgl.SGL_RID = amsm.SGL_RID
	LEFT OUTER JOIN 
	(
		    SELECT   AUDIT_FORECAST_RID, SUM( NUMBER_OF_STORES) NUMBER_OF_STORES, 
		                      ap.TEXT_VALUE  [MATRIX_RULE], 
		                      SUM(MATRIX_RULE_QUANTITY) MATRIX_RULE_QUANTITY
		     FROM  AUDIT_MODIFY_SALES_MATRIX a
		     INNER JOIN APPLICATION_TEXT ap ON ap.TEXT_CODE = a.MATRIX_RULE
		     WHERE SELL_THRU > 200
		    GROUP BY AUDIT_FORECAST_RID,ap.TEXT_VALUE
	)amsm1 ON amsm1.AUDIT_FORECAST_RID = af.AUDIT_FORECAST_RID 
	LEFT OUTER JOIN 
	(
		     SELECT   AUDIT_FORECAST_RID, SUM( NUMBER_OF_STORES) NUMBER_OF_STORES, 
		                      ap.TEXT_VALUE  [MATRIX_RULE], 
		                      SUM(MATRIX_RULE_QUANTITY) MATRIX_RULE_QUANTITY
		     FROM  AUDIT_MODIFY_SALES_MATRIX a
		     INNER JOIN APPLICATION_TEXT ap ON ap.TEXT_CODE = a.MATRIX_RULE
		     WHERE  SELL_THRU BETWEEN 51 AND 200
		     GROUP BY AUDIT_FORECAST_RID,ap.TEXT_VALUE
	)amsm2 ON amsm2.AUDIT_FORECAST_RID = af.AUDIT_FORECAST_RID
	LEFT OUTER JOIN 
	(
		     SELECT   AUDIT_FORECAST_RID, SUM( NUMBER_OF_STORES) NUMBER_OF_STORES, 
		                      ap.TEXT_VALUE  [MATRIX_RULE], 
		                      SUM(MATRIX_RULE_QUANTITY) MATRIX_RULE_QUANTITY
		     FROM  AUDIT_MODIFY_SALES_MATRIX a
		     INNER JOIN APPLICATION_TEXT ap ON ap.TEXT_CODE = a.MATRIX_RULE
		     WHERE  SELL_THRU BETWEEN 0 AND 50
		    GROUP BY AUDIT_FORECAST_RID,ap.TEXT_VALUE
	)amsm3 ON amsm3.AUDIT_FORECAST_RID = af.AUDIT_FORECAST_RID
	WHERE  ((@TIME_RANGE_BEGIN <> '' AND af.TIME_RANGE_BEGIN >= @TIME_RANGE_BEGIN) OR @TIME_RANGE_BEGIN = '') AND 
		  ((@TIME_RANGE_END <> '' AND af.TIME_RANGE_END <= @TIME_RANGE_END) OR @TIME_RANGE_END = '') AND @LEVEL = 100
) af ON hn.HN_RID = af.HN_RID

ORDER BY hyn.HOME_PH_RID, hn.PARENT_HN_RID, hn.BN_ID,af.MethodType,af.MethodName

IF (SELECT object_id('tempdb.dbo.#TEMP')) > 0 DROP TABLE #TEMP

END


GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS OFF 
GO



CREATE PROCEDURE [dbo].[SP_GET_FORECAST_LEVEL_REPORT]
@SELECTED_NODE_RID  INT,
@LOWER_LEVEL INT,
@ShowForecastLevel INT
AS
BEGIN

DECLARE @SELECTED_NODE_LEVEL AS INT
SELECT @SELECTED_NODE_LEVEL = HOME_LEVEL FROM HIERARCHY_NODE WHERE HN_RID =  @SELECTED_NODE_RID

DECLARE @MAX_PHL_SEQUENCE AS INT
SELECT @MAX_PHL_SEQUENCE = MAX(PHL_SEQUENCE) FROM PRODUCT_HIERARCHY_LEVELS

IF( @LOWER_LEVEL=0)
BEGIN
SELECT @LOWER_LEVEL=@MAX_PHL_SEQUENCE
END

DECLARE @LEVEL AS INT
SELECT @LEVEL = @LOWER_LEVEL - @SELECTED_NODE_LEVEL

CREATE TABLE #TEMP (PARENT_HN_RID INT, HN_RID INT, BN_ID CHAR(50) COLLATE Latin1_General_CS_AS, BN_NAME CHAR(50) COLLATE Latin1_General_CS_AS, BN_DESCRIPTION CHAR(250) COLLATE Latin1_General_CS_AS)
INSERT #TEMP (PARENT_HN_RID, HN_RID, BN_ID, BN_NAME, BN_DESCRIPTION)
EXEC SP_GET_ALL_DESCENDANTS_BY_LEVEL_REPORT @SELECTED_NODE_RID, @LEVEL


SELECT bn.BN_ID,bn.BN_NAME, 
    CASE   WHEN phl.PHL_DISPLAY_OPTION_ID = 800701 THEN bn.BN_ID
	WHEN phl.PHL_DISPLAY_OPTION_ID = 800702 THEN bn.BN_DESCRIPTION
	WHEN phl.PHL_DISPLAY_OPTION_ID = 800703 THEN bn.BN_ID + '[' + bn.BN_NAME + ']'
              WHEN phl.PHL_DISPLAY_OPTION_ID = 800704 THEN bn.BN_ID + '[' + bn.BN_DESCRIPTION + ']'
               WHEN phl.PHL_DISPLAY_OPTION_ID = 800705 THEN bn.BN_NAME + '[' + bn.BN_DESCRIPTION + ']'
	 WHEN phl.PHL_DISPLAY_OPTION_ID = 800706 THEN  bn.BN_ID + '[' +  bn.BN_NAME + ']' + '[' + bn.BN_DESCRIPTION + ']'
          ELSE bn.BN_ID + '[' + bn.BN_NAME + ']'
END as [DISPLAY_TEXT],

       ph.PH_ID AS [HIERARCHY],
       CASE WHEN hn1.OTS_FORECAST_LEVEL_SELECT_TYPE = 1 THEN phl.PHL_ID
	    ELSE NULL
       END AS [LEVEL],
       CASE WHEN hn1.OTS_FORECAST_LEVEL_SELECT_TYPE = 1 THEN NULL
	    WHEN hn1.OTS_FORECAST_LEVEL_SELECT_TYPE = 2 THEN
		CASE WHEN hn1.OTS_FORECAST_LEVEL_MASK_FIELD = 1 THEN 'Name'
	    	     WHEN hn1.OTS_FORECAST_LEVEL_MASK_FIELD = 2 THEN 'ID'
	             WHEN hn1.OTS_FORECAST_LEVEL_MASK_FIELD = 3 THEN 'Description'
	        END
       END AS [MASK],
       CASE WHEN hn1.OTS_FORECAST_LEVEL_SELECT_TYPE = 1 THEN NULL
	    WHEN hn1.OTS_FORECAST_LEVEL_SELECT_TYPE = 2 THEN hn1.OTS_FORECAST_LEVEL_MASK
       END AS [MASK_VALUE]
FROM HIERARCHY_NODE hn1

INNER JOIN PRODUCT_HIERARCHY_LEVELS phl ON hn1.OTS_FORECAST_LEVEL_PH_RID=phl.PH_RID AND hn1.OTS_FORECAST_LEVEL_PHL_SEQUENCE = phl.PHL_SEQUENCE
INNER JOIN BASE_NODE bn ON bn.HN_RID=hn1.HN_RID
INNER JOIN HIERARCHY_NODE hn2 ON hn2.HN_RID = hn1.OTS_FORECAST_LEVEL_ANCHOR_NODE
INNER JOIN PRODUCT_HIERARCHY ph ON hn2.HOME_PH_RID = ph.PH_RID
INNER JOIN 
(
 SELECT PARENT_HN_RID, HN_RID, BN_ID, BN_NAME, BN_DESCRIPTION
   FROM #TEMP
)hn ON hn.HN_RID = hn1.HN_RID
WHERE @ShowForecastLevel = 1
ORDER BY hn.PARENT_HN_RID, hn1.HN_RID

IF (SELECT object_id('tempdb.dbo.#TEMP')) > 0 DROP TABLE #TEMP

END


GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS OFF 
GO



CREATE PROCEDURE [dbo].[SP_GET_FORECAST_REPORT_NAMES] AS
BEGIN
select  'Modify Sales'  AS [REPORT_NAME] 
	    UNION
SELECT 'OTS Forecast'  AS [REPORT_NAME] 
END



GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO



CREATE PROCEDURE [dbo].[SP_GET_FORECAST_TYPE_REPORT]
@SELECTED_NODE_RID  INT,
 @LOWER_LEVEL INT
 AS
BEGIN

DECLARE @SELECTED_NODE_LEVEL AS INT
SELECT @SELECTED_NODE_LEVEL = HOME_LEVEL FROM HIERARCHY_NODE WHERE HN_RID =  @SELECTED_NODE_RID

DECLARE @MAX_PHL_SEQUENCE AS INT
SELECT @MAX_PHL_SEQUENCE = MAX(PHL_SEQUENCE) FROM PRODUCT_HIERARCHY_LEVELS

IF( @LOWER_LEVEL=0)
BEGIN
SELECT @LOWER_LEVEL=@MAX_PHL_SEQUENCE
END

DECLARE @LEVEL AS INT
SELECT @LEVEL = (@LOWER_LEVEL -  @SELECTED_NODE_LEVEL)+1

CREATE TABLE #TEMP (PARENT_HN_RID INT, HN_RID INT, BN_ID CHAR(50) COLLATE Latin1_General_CS_AS, BN_NAME CHAR(50) COLLATE Latin1_General_CS_AS, BN_DESCRIPTION CHAR(250) COLLATE Latin1_General_CS_AS)
INSERT #TEMP (PARENT_HN_RID, HN_RID, BN_ID, BN_NAME, BN_DESCRIPTION)
EXEC SP_GET_ALL_DESCENDANTS_BY_LEVEL_REPORT @SELECTED_NODE_RID, @LEVEL


SELECT PHL_SEQUENCE, PH_RID,PHL_ID AS [PHL_ID],TEXT_VALUE 
FROM PRODUCT_HIERARCHY_LEVELS phl
INNER JOIN APPLICATION_TEXT atxt ON phl.OTS_PLANLEVEL_TYPE = atxt.TEXT_CODE
        
         UNION

SELECT 100,PH_RID,PH_ID AS [PHL_ID],TEXT_VALUE 
FROM PRODUCT_HIERARCHY ph
INNER JOIN APPLICATION_TEXT atxt ON ph.OTS_PLANLEVEL_TYPE = atxt.TEXT_CODE


	UNION

SELECT 110, hn.HN_RID,
CASE   WHEN phl.PHL_DISPLAY_OPTION_ID = 800701 THEN hn.BN_ID
	WHEN phl.PHL_DISPLAY_OPTION_ID = 800702 THEN hn.BN_DESCRIPTION
	WHEN phl.PHL_DISPLAY_OPTION_ID = 800703 THEN hn.BN_ID + '[' + hn.BN_NAME + ']'
              WHEN phl.PHL_DISPLAY_OPTION_ID = 800704 THEN hn.BN_ID + '[' + hn.BN_DESCRIPTION + ']'
               WHEN phl.PHL_DISPLAY_OPTION_ID = 800705 THEN hn.BN_NAME + '[' + hn.BN_DESCRIPTION + ']'
	 WHEN phl.PHL_DISPLAY_OPTION_ID = 800706 THEN  hn.BN_ID + '[' +  hn.BN_NAME + ']' + '[' + hn.BN_DESCRIPTION + ']'
          ELSE hn.BN_ID + '[' + hn.BN_NAME + ']'
END as [PH_ID], atxt.TEXT_VALUE
FROM HIERARCHY_NODE hyn
LEFT OUTER JOIN PRODUCT_HIERARCHY_LEVELS phl ON phl.PHL_SEQUENCE = hyn.HOME_LEVEL
INNER JOIN APPLICATION_TEXT atxt ON hyn.OTS_PLANLEVEL_TYPE = atxt.TEXT_CODE AND hyn.OTS_PLANLEVEL_TYPE <> 800600
inner join
(
 SELECT PARENT_HN_RID, HN_RID, BN_ID, BN_NAME, BN_DESCRIPTION
   FROM #TEMP
)hn ON hn.HN_RID = hyn.HN_RID 

ORDER BY PHL_SEQUENCE, PHL_ID

IF (SELECT object_id('tempdb.dbo.#TEMP')) > 0 DROP TABLE #TEMP

END


GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS OFF 
GO



CREATE PROCEDURE [dbo].[SP_GET_HEADER_AUDIT_REPORT]
@SELECTED_NODE_RID AS INT,
@PLAN_HNRID AS INT,
@USER_RID AS INT,
@PROCESS_FROM_DATE  VARCHAR(50),
@PROCESS_TO_DATE VARCHAR(50),
@USER_GROUP_RID INT
AS
BEGIN

DECLARE @LEVEL AS INT
DECLARE @SELECTED_LEVEL AS INT
DECLARE @STYLE_LEVEL AS INT

SELECT @STYLE_LEVEL = PHL_SEQUENCE FROM PRODUCT_HIERARCHY_LEVELS WHERE PHL_TYPE = 800202
SELECT @SELECTED_LEVEL = HOME_LEVEL FROM HIERARCHY_NODE WHERE HN_RID = @SELECTED_NODE_RID

IF(@SELECTED_NODE_RID <= 0)
BEGIN
     SELECT @LEVEL = @STYLE_LEVEL + 1
END
ELSE 
BEGIN
    SELECT @LEVEL = @STYLE_LEVEL - @SELECTED_LEVEL
END

CREATE TABLE #TEMP (HN_RID INT)
INSERT #TEMP (HN_RID)
EXEC SP_GET_DESCENDANTS_BY_LEVEL_REPORT @SELECTED_NODE_RID, @LEVEL


 SELECT   'Header', 1 AS  [RowNo],
	    'Released Headers' AS [Group],
	    COUNT(vgh.HDR_RID) AS '#', 
	    SUM(ahn.Need) AS [Need],
	    COUNT(hor.HORIZON_OVERRIDE)  AS [Horizion_Override],
	    SUM(ahr.[Rule]) AS [Rule],
                 SUM(ahv.Velocity) AS [Velocity],
                 SUM(aho.Override) AS [Override],
                 SUM(ahg.General) AS [General],
                 SUM(ahb.Balance_Style) AS [Balance_Style],
                 COUNT(hmssty.HDR_RID) AS [Style_Manual],
                 SUM(ahs.Size_Need) AS [Size_Need],
        	   SUM(ahf.Fill_Size_Holes) AS [Fill_Size_Holes],
                SUM(ahfs.Fill_And_Need_Size) AS [Fill_And_Need_Size],
                SUM(ahbs.Basis_Size) AS [Basis_Size],
                SUM(ahsp.Size_Prop) AS [Size_Prop],
                SUM(ahbsz.Balance_size) AS [Balance_size] ,
                COUNT(hmsz.HDR_RID) AS [Size_Manual],
                COUNT(hr.HDR_RID) AS [Reserve]
FROM VW_GET_HEADERS vgh 
INNER JOIN AUDIT_HEADER ah ON ah.HDR_RID = vgh.HDR_RID AND ah.ACTION_TYPE = 802118 
INNER JOIN
    (
	SELECT USER_RID FROM APPLICATION_USER  WHERE USER_RID = @USER_RID AND @USER_RID <> 0
				UNION
	SELECT USER_RID FROM USER_GROUP_JOIN 
               WHERE GROUP_RID = @USER_GROUP_RID AND @USER_GROUP_RID <> 0 AND @USER_RID = 0
     ) ug ON ah.USER_RID = ug.USER_RID
LEFT OUTER JOIN 
    (        SELECT HDR_RID, 
                   CASE WHEN COUNT(HDR_RID) > 0 THEN 1
                             ELSE 0 
                   END AS [Need] FROM  AUDIT_HEADER ahn 
               WHERE ahn.ACTION_TYPE = 802111 GROUP BY HDR_RID
    )ahn ON ahn.HDR_RID = vgh.HDR_RID 
LEFT OUTER JOIN HEADER hor ON hor.HDR_RID = vgh.HDR_RID AND hor.HORIZON_OVERRIDE=1 
LEFT OUTER JOIN 
   (
            SELECT HDR_RID,
                     CASE WHEN COUNT(HDR_RID) > 0 THEN 1
                                        ELSE 0
                     END AS [Rule] FROM AUDIT_HEADER ahr 
              WHERE ahr.METHOD_TYPE = 802105 GROUP BY HDR_RID
   )ahr ON ahr.HDR_RID = vgh.HDR_RID 
LEFT OUTER JOIN 
  (
           SELECT HDR_RID,
                    CASE WHEN COUNT(HDR_RID) > 0 THEN 1
                                        ELSE 0
                    END AS [Velocity] FROM AUDIT_HEADER ahv 
           WHERE ahv.METHOD_TYPE = 802104 GROUP BY HDR_RID
  )ahv ON ahv.HDR_RID = vgh.HDR_RID
LEFT OUTER JOIN
  (
          SELECT HDR_RID,
                       CASE WHEN COUNT(HDR_RID)>0 THEN 1
                          		    ELSE  0 
  	          END AS  [Override]  FROM AUDIT_HEADER aho 
           WHERE aho.METHOD_TYPE = 802103 GROUP BY HDR_RID
  )aho ON aho.HDR_RID = vgh.HDR_RID
LEFT OUTER JOIN 
  (
         SELECT HDR_RID,
	          CASE WHEN COUNT(HDR_RID) > 0 THEN 1
			    ELSE 0
         END AS [General] FROM AUDIT_HEADER ahg 
             WHERE ahg.METHOD_TYPE = 802102 GROUP BY HDR_RID 
  )ahg ON ahg.HDR_RID = vgh.HDR_RID
LEFT OUTER JOIN 
  (
         SELECT HDR_RID,
                        CASE WHEN COUNT(HDR_RID) >0 THEN 1
	           		ELSE 0
          END AS [Balance_Style] FROM AUDIT_HEADER ahb 
            WHERE (ahb.ACTION_TYPE = 802113 OR ahb.ACTION_TYPE = 802114) GROUP BY HDR_RID
  )ahb ON ahb.HDR_RID = vgh.HDR_RID
LEFT OUTER JOIN HEADER hmssty ON hmssty.HDR_RID = vgh.HDR_RID AND hmssty.MANUALLYCHGDSTRSTYLALOCTNCNT > 0
LEFT OUTER JOIN 
  (
       SELECT HDR_RID,
	CASE WHEN COUNT(HDR_RID)>0 THEN 1
		ELSE  0
             END AS  [Size_Need]  FROM AUDIT_HEADER ahs 
        WHERE ahs.METHOD_TYPE = 802109 GROUP BY HDR_RID 
  )ahs ON ahs.HDR_RID = vgh.HDR_RID
LEFT OUTER JOIN 
  (
        SELECT HDR_RID,
		CASE WHEN COUNT(HDR_RID)> 0 THEN 1
			ELSE 0
		END AS  [Fill_Size_Holes] FROM AUDIT_HEADER ahf 
          WHERE ahf.METHOD_TYPE = 802106 GROUP BY HDR_RID
  )ahf ON ahf.HDR_RID = vgh.HDR_RID 
LEFT OUTER JOIN 
  (
       SELECT HDR_RID,
		CASE WHEN COUNT(HDR_RID) > 0 THEN 1
		ELSE 0
                           END AS  [Fill_And_Need_Size] FROM AUDIT_HEADER ahfs
            WHERE ahfs.METHOD_TYPE = 802106 AND ahfs.METHOD_TYPE = 802109 GROUP BY HDR_RID
  )ahfs ON ahfs.HDR_RID = vgh.HDR_RID 

LEFT OUTER JOIN 
  (
       SELECT HDR_RID,
                         CASE WHEN COUNT(HDR_RID)> 0 THEN 1
			ELSE 0
		END AS [Basis_Size] FROM AUDIT_HEADER ahbs 
            WHERE ahbs.METHOD_TYPE = 802107 GROUP BY HDR_RID
  )ahbs ON ahbs.HDR_RID = vgh.HDR_RID 
LEFT OUTER JOIN 
   ( 
       SELECT  HDR_RID,
	CASE  WHEN COUNT(HDR_RID) > 0 THEN 1
           		ELSE 0                        
	END AS [Size_Prop ] FROM AUDIT_HEADER 
	             WHERE ACTION_TYPE = 802112 GROUP BY HDR_RID
   ) ahsp ON ahsp.HDR_RID = vgh.HDR_RID
LEFT OUTER JOIN 
  (
       SELECT HDR_RID,
		CASE WHEN COUNT(HDR_RID) > 0 THEN 1
 			ELSE 0
                          END AS  [Balance_size] FROM AUDIT_HEADER ahbsz 
          WHERE (ahbsz.ACTION_TYPE = 802115 OR ahbsz.ACTION_TYPE = 802116)GROUP BY HDR_RID
  )ahbsz ON ahbsz.HDR_RID = vgh.HDR_RID 
LEFT OUTER JOIN HEADER hmsz ON hmsz.HDR_RID = vgh.HDR_RID AND hmsz.MANUALLYCHGDSTRSIZEALOCTNCNT > 0
LEFT OUTER JOIN HEADER hr ON hr.HDR_RID = vgh.HDR_RID AND hr.RSV_ALLOCATED_UNITS > 0
INNER JOIN
(
  SELECT HN_RID FROM #TEMP
) n ON vgh.STYLE_HNRID = n.HN_RID
 WHERE vgh.Released <> 0 AND ( (@PLAN_HNRID > 0 AND vgh.PLAN_HNRID = @PLAN_HNRID) OR @PLAN_HNRID = 0)
               AND convert(varchar,ah.PROCESS_DATE_TIME,112) BETWEEN @PROCESS_FROM_DATE  AND @PROCESS_TO_DATE 


			UNION

SELECT    'Header', 2 AS [Index],
	     'Total Quantity' AS [Group],
	     SUM(vgh.UNITS_RECEIVED) AS '#',
                   SUM(ahn.Need ) AS [Need],
                   NULL AS [Horizion_Override],
                   SUM(ahr.[Rule] ) AS [Rule],
                  SUM(ahv.Velocity ) AS [Velocity],
       	     NULL AS [Override], 
                  NULL AS [General], 
	     NULL AS [Balance_Style],
                  SUM(hmssty.MANUALLYCHGDSTRSTYLEALOCTN) AS [Style_Manual],
                  SUM(ahs.Size_Need) AS [Size_Need],
                  SUM(ahf.Fill_Size_Holes ) AS [Fill_Size_Holes],
                  NULL AS [Fill_And_Need_Size],
                  SUM(ahbs.Basis_Size ) AS [Basis_Size],
                  SUM(ahsp.Size_Prop ) AS [Size_Prop],
                  NULL AS [Balance_size],
                  SUM(hmsz.MANUALLYCHGDSTRSIZEALOCTN) AS [Size_Manual],
                  SUM(hr.RSV_ALLOCATED_UNITS) AS [Reserve]
FROM VW_GET_HEADERS vgh
INNER JOIN AUDIT_HEADER ah ON ah.HDR_RID = vgh.HDR_RID AND ah.ACTION_TYPE = 802118
INNER JOIN
     (
	SELECT USER_RID FROM APPLICATION_USER  WHERE USER_RID = @USER_RID AND @USER_RID <> 0
				UNION
	SELECT USER_RID FROM USER_GROUP_JOIN WHERE GROUP_RID = @USER_GROUP_RID AND @USER_GROUP_RID <> 0 AND @USER_RID = 0
     ) ug ON ah.USER_RID = ug.USER_RID
LEFT OUTER JOIN 
    (
            SELECT HDR_RID,SUM(ahn.UNITS_ALLOCATED_BY_PROCESS) AS Need FROM  AUDIT_HEADER ahn 
               WHERE ahn.ACTION_TYPE = 802111 GROUP BY HDR_RID
    )ahn ON ahn.HDR_RID = vgh.HDR_RID 
LEFT OUTER JOIN 
   (
            SELECT HDR_RID,SUM(ahr.UNITS_ALLOCATED_BY_PROCESS) [Rule] FROM AUDIT_HEADER ahr 
              WHERE ahr.METHOD_TYPE = 802105 GROUP BY HDR_RID
   )ahr ON ahr.HDR_RID = vgh.HDR_RID 
LEFT OUTER JOIN 
   (
           SELECT HDR_RID,SUM(ahv.UNITS_ALLOCATED_BY_PROCESS) Velocity FROM AUDIT_HEADER ahv 
              WHERE ahv.METHOD_TYPE = 802104 GROUP BY HDR_RID
   )ahv ON ahv.HDR_RID = vgh.HDR_RID
LEFT OUTER JOIN HEADER hmssty ON hmssty.HDR_RID = vgh.HDR_RID AND hmssty.MANUALLYCHGDSTRSTYLEALOCTN > 0
LEFT OUTER JOIN 
  (
        SELECT HDR_RID,SUM(ahs.UNITS_ALLOCATED_BY_PROCESS) Size_Need FROM AUDIT_HEADER ahs 
            WHERE ahs.METHOD_TYPE = 802109 GROUP BY HDR_RID 
  )ahs ON ahs.HDR_RID = vgh.HDR_RID
LEFT OUTER JOIN 
  (
       SELECT HDR_RID,SUM(ahf.UNITS_ALLOCATED_BY_PROCESS ) Fill_Size_Holes FROM AUDIT_HEADER ahf 
            WHERE ahf.METHOD_TYPE = 802106 GROUP BY HDR_RID
  )ahf ON ahf.HDR_RID = vgh.HDR_RID 
LEFT OUTER JOIN 
  (
       SELECT HDR_RID,SUM(ahbs.UNITS_ALLOCATED_BY_PROCESS ) Basis_Size FROM AUDIT_HEADER ahbs 
            WHERE ahbs.METHOD_TYPE = 802107 GROUP BY HDR_RID
  )ahbs ON ahbs.HDR_RID = vgh.HDR_RID 
LEFT OUTER JOIN 
   ( 
       SELECT DISTINCT HDR_RID,SUM(ahsp.UNITS_ALLOCATED_BY_PROCESS ) Size_Prop FROM AUDIT_HEADER ahsp
	             WHERE ACTION_TYPE = 802112 GROUP BY HDR_RID
   ) ahsp ON ahsp.HDR_RID = vgh.HDR_RID
LEFT OUTER JOIN HEADER hmsz ON hmsz.HDR_RID = vgh.HDR_RID AND hmsz.MANUALLYCHGDSTRSIZEALOCTN > 0
LEFT OUTER JOIN HEADER hr ON hr.HDR_RID = vgh.HDR_RID AND hr.RSV_ALLOCATED_UNITS > 0

INNER JOIN
(
  SELECT HN_RID FROM #TEMP
) n ON vgh.STYLE_HNRID = n.HN_RID
    WHERE vgh.Released <> 0 AND ( (@PLAN_HNRID > 0 AND vgh.PLAN_HNRID = @PLAN_HNRID) OR @PLAN_HNRID = 0)
               AND convert(varchar,ah.PROCESS_DATE_TIME,112) BETWEEN @PROCESS_FROM_DATE  AND @PROCESS_TO_DATE 


				UNION

SELECT      'Header', 3 AS [Index],
	      '% to Total' AS [Group], 
	      NULL AS '#',
	      CONVERT(INT , ROUND((SUM(CONVERT( FLOAT , ahn.[Need] ))*100)/SUM(vgh.UNITS_RECEIVED),0)) AS [Need], 
	      NULL AS [Horizion_Override],
                   CONVERT(INT,ROUND((SUM(CONVERT(FLOAT,ahr.[Rule] ))*100)/SUM(vgh.UNITS_RECEIVED),0)) AS [Rule],
   	      CONVERT(INT , ROUND((SUM(CONVERT(FLOAT,ahv.Velocity ))*100)/SUM(vgh.UNITS_RECEIVED),0)) AS [Velocity],
                   NULL AS [Override],
	      NULL AS [General], NULL AS [Balance_Style],
                   CONVERT(INT,ROUND( (SUM(CONVERT(FLOAT,hmssty.MANUALLYCHGDSTRSTYLEALOCTN))*100)/SUM(vgh.UNITS_RECEIVED),0)) AS [Style_Manual],
    	      CONVERT(INT,ROUND( (SUM(CONVERT(FLOAT,ahs.Size_Need))*100)/SUM(vgh.UNITS_RECEIVED) ,0))AS [Size_Need],
                   CONVERT(INT,ROUND( (SUM(CONVERT(FLOAT,ahf.Fill_Size_Holes )) * 100)/SUM(vgh.UNITS_RECEIVED) ,0)) AS [Fill_Size_Holes],
                    NULL AS [Fill_And_Need_Size],
                   CONVERT(INT,ROUND((SUM(CONVERT(FLOAT,ahbs.Basis_Size )) * 100)/SUM(vgh.UNITS_RECEIVED),0)) AS [Basis_Size],
                   CONVERT(INT,ROUND((SUM(CONVERT(FLOAT,ahsp.Size_Prop )) * 100)/SUM(vgh.UNITS_RECEIVED),0)) AS [Size_Prop],
                   NULL AS [Balance_size],
                   CONVERT(INT,ROUND((SUM(CONVERT(FLOAT,hmsz.MANUALLYCHGDSTRSIZEALOCTN)) * 100)/SUM(vgh.UNITS_RECEIVED),0)) AS [Size_Manual],
                   CONVERT(INT, ROUND((SUM(CONVERT(FLOAT,hr.RSV_ALLOCATED_UNITS)*100))/SUM(vgh.UNITS_RECEIVED),0)) AS [Reserve]

FROM VW_GET_HEADERS vgh
INNER JOIN AUDIT_HEADER ah ON ah.HDR_RID = vgh.HDR_RID AND ah.ACTION_TYPE = 802118
     INNER JOIN
    (
	SELECT USER_RID FROM APPLICATION_USER  WHERE USER_RID = @USER_RID AND @USER_RID <> 0
				UNION
	SELECT USER_RID FROM USER_GROUP_JOIN WHERE GROUP_RID = @USER_GROUP_RID AND @USER_GROUP_RID <> 0 AND @USER_RID = 0
     ) ug ON ah.USER_RID = ug.USER_RID
LEFT OUTER JOIN 
    (
            SELECT HDR_RID,SUM(ahn.UNITS_ALLOCATED_BY_PROCESS)AS [Need] FROM  AUDIT_HEADER ahn 
               WHERE ahn.ACTION_TYPE = 802111 GROUP BY HDR_RID
    )ahn ON ahn.HDR_RID = vgh.HDR_RID 
LEFT OUTER JOIN 
   (
           SELECT HDR_RID,SUM(ahr.UNITS_ALLOCATED_BY_PROCESS) [Rule] FROM AUDIT_HEADER ahr 
              WHERE ahr.METHOD_TYPE = 802105 GROUP BY HDR_RID
   )ahr ON ahr.HDR_RID = vgh.HDR_RID 
LEFT OUTER JOIN 
   (
          SELECT HDR_RID, SUM(ahv.UNITS_ALLOCATED_BY_PROCESS)  Velocity FROM AUDIT_HEADER ahv 
              WHERE ahv.METHOD_TYPE = 802104 GROUP BY HDR_RID
   )ahv ON ahv.HDR_RID = vgh.HDR_RID
LEFT OUTER JOIN HEADER hmssty ON hmssty.HDR_RID = vgh.HDR_RID AND hmssty.MANUALLYCHGDSTRSTYLEALOCTN > 0
LEFT OUTER JOIN 
  (
        SELECT HDR_RID,SUM(ahs.UNITS_ALLOCATED_BY_PROCESS) Size_Need FROM AUDIT_HEADER ahs 
            WHERE ahs.METHOD_TYPE = 802109 GROUP BY HDR_RID 
  )ahs ON ahs.HDR_RID = vgh.HDR_RID
LEFT OUTER JOIN 
  (
       SELECT HDR_RID,SUM(ahf.UNITS_ALLOCATED_BY_PROCESS ) Fill_Size_Holes FROM AUDIT_HEADER ahf 
            WHERE ahf.METHOD_TYPE = 802106 GROUP BY HDR_RID
  )ahf ON ahf.HDR_RID = vgh.HDR_RID 
LEFT OUTER JOIN 
  (
       SELECT HDR_RID,SUM(ahbs.UNITS_ALLOCATED_BY_PROCESS )Basis_Size FROM AUDIT_HEADER ahbs 
            WHERE ahbs.METHOD_TYPE = 802107 GROUP BY HDR_RID
  )ahbs ON ahbs.HDR_RID = vgh.HDR_RID 
LEFT OUTER JOIN 
   ( 
       SELECT DISTINCT HDR_RID,SUM(ahsp.UNITS_ALLOCATED_BY_PROCESS ) Size_Prop FROM AUDIT_HEADER ahsp
	             WHERE ACTION_TYPE = 802112 GROUP BY HDR_RID
   ) ahsp ON ahsp.HDR_RID = vgh.HDR_RID
LEFT OUTER JOIN HEADER hmsz ON hmsz.HDR_RID = vgh.HDR_RID AND hmsz.MANUALLYCHGDSTRSIZEALOCTN > 0
LEFT OUTER JOIN HEADER hr ON hr.HDR_RID = vgh.HDR_RID AND hr.RSV_ALLOCATED_UNITS > 0

INNER JOIN
(
  SELECT HN_RID FROM #TEMP
) n ON vgh.STYLE_HNRID = n.HN_RID
       WHERE vgh.Released <> 0 AND ( (@PLAN_HNRID > 0 AND vgh.PLAN_HNRID = @PLAN_HNRID) OR @PLAN_HNRID = 0)
               AND convert(varchar,ah.PROCESS_DATE_TIME,112) BETWEEN @PROCESS_FROM_DATE  AND @PROCESS_TO_DATE 

                                                   UNION

 SELECT        'Header', 4 AS [Index],
	        '# of Stores' AS [Group], 
	         NULL AS '#',NULL AS [Need],
	         NULL AS [Horizion_Override],
                      NULL AS [Rule],NULL AS [Velocity],
	         NULL AS [Override],NULL AS [General],
	         NULL AS [Balance_Style],
                      SUM(hmssty.MANUALLYCHGDSTRSTYLALOCTNCNT) AS [Style_Manual],
	         NULL AS [Size_Need],
                      NULL AS [Fill_Size_Holes],
	         NULL AS [Fill_And_Need_Size],
	         NULL AS [Basis_Size],
	         NULL AS [Size_Prop],
                      NULL AS [Balance_size],
	         SUM(hmsz.MANUALLYCHGDSTRSIZEALOCTNCNT) AS [Size_Manual],
	         NULL AS [Reserve]	  
    FROM  VW_GET_HEADERS vgh
    INNER JOIN AUDIT_HEADER ah ON ah.HDR_RID = vgh.HDR_RID AND ah.ACTION_TYPE = 802118
    INNER JOIN
    (
	SELECT USER_RID FROM APPLICATION_USER  WHERE USER_RID = @USER_RID AND @USER_RID <> 0
				UNION
	SELECT USER_RID FROM USER_GROUP_JOIN WHERE GROUP_RID = @USER_GROUP_RID AND @USER_GROUP_RID <> 0 AND @USER_RID = 0
     ) ug ON ah.USER_RID = ug.USER_RID 
    LEFT OUTER JOIN HEADER hmssty ON hmssty.HDR_RID = vgh.HDR_RID AND hmssty.MANUALLYCHGDSTRSTYLALOCTNCNT > 0 
    LEFT OUTER JOIN HEADER hmsz ON hmsz.HDR_RID = vgh.HDR_RID AND hmsz.MANUALLYCHGDSTRSIZEALOCTNCNT > 0
INNER JOIN
(
  SELECT HN_RID FROM #TEMP
) n ON vgh.STYLE_HNRID = n.HN_RID
      WHERE vgh.Released <> 0 AND ( (@PLAN_HNRID > 0 AND vgh.PLAN_HNRID = @PLAN_HNRID) OR @PLAN_HNRID = 0)
               AND convert(varchar,ah.PROCESS_DATE_TIME,112) BETWEEN @PROCESS_FROM_DATE  AND @PROCESS_TO_DATE 

                                                 UNION

   SELECT 'Header', 5 AS [Index], 
	     'Average # Stores' AS [Group], 
	     SUM(hdr.STORES_WITH_ALOCTN_COUNT) AS '#',
                  CONVERT(INT,ROUND(SUM(CONVERT(FLOAT,ahn.Need))/COUNT(ahn.HDR_RID),0)) AS [Need],
                  NULL AS [Horizion_Override],
                  CONVERT(INT,ROUND(SUM(CONVERT(FLOAT,ahr.[Rule]))/COUNT(ahr.HDR_RID),0)) AS [Rule],
                  CONVERT(INT,ROUND (SUM(CONVERT(FLOAT,ahv.Velocity))/COUNT(ahv.HDR_RID) ,0))AS [Velocity], 
                  NULL AS [Override],
                  NULL AS [General], 
                  NULL AS [Balance_Style],
                  CONVERT( INT,ROUND(SUM(CONVERT(FLOAT,hmssty.MANUALLYCHGDSTRSTYLALOCTNCNT))/COUNT(hmssty.HDR_RID),0)) AS [Style_Manual],
                  NULL AS [Size_Need], 
                  NULL AS [Fill_Size_Holes], 
                  NULL AS [Fill_And_Need_Size],
                  NULL AS [Basis_Size],
                  NULL AS [Size_Prop],
                  NULL AS [Balance_size],
                  CONVERT(INT,ROUND(SUM(CONVERT(FLOAT,hmsz.MANUALLYCHGDSTRSIZEALOCTNCNT))/COUNT(hmsz.HDR_RID) ,0))AS [Size_Manual], 
                  NULL AS [Reserve]  
FROM  VW_GET_HEADERS vgh 
INNER JOIN HEADER hdr ON hdr.HDR_RID = vgh.HDR_RID  --This will be used for get the value for #
   INNER JOIN AUDIT_HEADER ah ON ah.HDR_RID = vgh.HDR_RID AND ah.ACTION_TYPE = 802118
   INNER JOIN
    (
	SELECT USER_RID FROM APPLICATION_USER  WHERE USER_RID = @USER_RID AND @USER_RID <> 0
				UNION
	SELECT USER_RID FROM USER_GROUP_JOIN WHERE GROUP_RID = @USER_GROUP_RID AND @USER_GROUP_RID <> 0 AND @USER_RID = 0
     ) ug ON ah.USER_RID = ug.USER_RID
  LEFT OUTER JOIN 
    (
        SELECT HDR_RID,SUM(ahn.STORE_COUNT)AS Need FROM  AUDIT_HEADER ahn 
               WHERE ahn.ACTION_TYPE = 802111 GROUP BY HDR_RID
    )ahn ON ahn.HDR_RID = vgh.HDR_RID
LEFT OUTER JOIN 
   (
        SELECT HDR_RID,SUM(ahr.STORE_COUNT) [Rule] FROM AUDIT_HEADER ahr 
              WHERE ahr.METHOD_TYPE = 802105 GROUP BY HDR_RID
   )ahr ON ahr.HDR_RID = vgh.HDR_RID 
LEFT OUTER JOIN 
   (
       SELECT HDR_RID,SUM(ahv.STORE_COUNT) Velocity FROM AUDIT_HEADER ahv 
              WHERE ahv.METHOD_TYPE = 802104 GROUP BY HDR_RID
   )ahv ON ahv.HDR_RID = vgh.HDR_RID
 LEFT OUTER JOIN HEADER hmssty ON hmssty.HDR_RID = vgh.HDR_RID AND hmssty.MANUALLYCHGDSTRSTYLALOCTNCNT > 0 
 LEFT OUTER JOIN HEADER hmsz ON hmsz.HDR_RID = vgh.HDR_RID AND hmsz.MANUALLYCHGDSTRSIZEALOCTNCNT > 0
INNER JOIN
(
  SELECT HN_RID FROM #TEMP
) n ON vgh.STYLE_HNRID = n.HN_RID
    WHERE vgh.Released <> 0 AND ( (@PLAN_HNRID > 0 AND vgh.PLAN_HNRID = @PLAN_HNRID) OR @PLAN_HNRID = 0)
               AND convert(varchar,ah.PROCESS_DATE_TIME,112) BETWEEN @PROCESS_FROM_DATE  AND @PROCESS_TO_DATE 

       					UNION                                               
 
SELECT         'Header',  6 AS [Index],
	         'Average Per Header' AS [Group], 
	          CONVERT(INT,ROUND(SUM(CONVERT(FLOAT,vgh.UNITS_RECEIVED))/COUNT(vgh.HDR_RID),0) ) AS '#',
                       NULL AS [Need],
                       NULL AS [Horizion_Override],
	          NULL AS [Rule],
	          NULL AS [Velocity],
	          NULL AS [Override],
                       NULL AS [General],
	          NULL AS [Balance_Style],
                      CONVERT(INT,ROUND(SUM(CONVERT(FLOAT,hmssty.MANUALLYCHGDSTRSTYLEALOCTN))/COUNT(hmssty.HDR_RID),0)) AS [Style_Manual],
                      NULL AS [Size_Need],
	         NULL AS [Fill_Size_Holes],
	         NULL AS [Fill_And_Need_Size],
                      NULL AS [Basis_Size],
	         NULL AS [Size_Prop],
	         NULL AS [Balance_size],
	         NULL AS [Size_Manual],
                     CONVERT(INT, ROUND (SUM(CONVERT(FLOAT,hr.RSV_ALLOCATED_UNITS))/COUNT(hr.HDR_RID),0)) AS [Reserve]
FROM VW_GET_HEADERS vgh
INNER JOIN AUDIT_HEADER ah ON ah.HDR_RID = vgh.HDR_RID AND ah.ACTION_TYPE = 802118 
INNER JOIN
    (
	SELECT USER_RID FROM APPLICATION_USER  WHERE USER_RID = @USER_RID AND @USER_RID <> 0
				UNION
	SELECT USER_RID FROM USER_GROUP_JOIN WHERE GROUP_RID = @USER_GROUP_RID AND @USER_GROUP_RID <> 0 AND @USER_RID = 0
     ) ug ON ah.USER_RID = ug.USER_RID
LEFT OUTER JOIN HEADER hmssty ON hmssty.HDR_RID = vgh.HDR_RID AND hmssty.MANUALLYCHGDSTRSTYLEALOCTN > 0
LEFT OUTER JOIN HEADER hr ON hr.HDR_RID = vgh.HDR_RID AND hr.RSV_ALLOCATED_UNITS > 0   

INNER JOIN
(
  SELECT HN_RID FROM #TEMP
) n ON vgh.STYLE_HNRID = n.HN_RID
    WHERE vgh.Released <> 0 AND ( (@PLAN_HNRID > 0 AND vgh.PLAN_HNRID = @PLAN_HNRID) OR @PLAN_HNRID = 0)
               AND convert(varchar,ah.PROCESS_DATE_TIME,112)  BETWEEN @PROCESS_FROM_DATE  AND @PROCESS_TO_DATE 

IF (SELECT object_id('tempdb.dbo.#TEMP')) > 0 DROP TABLE #TEMP

END

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS OFF 
GO




CREATE PROCEDURE [dbo].[SP_GET_PURGE_DATES_REPORT]

        @SELECTED_NODE_RID  INT,
        @LOWER_LEVEL INT
        
     

AS

DECLARE @SELECTED_NODE_LEVEL AS INT
SELECT @SELECTED_NODE_LEVEL = HOME_LEVEL FROM HIERARCHY_NODE WHERE HN_RID =  @SELECTED_NODE_RID

DECLARE @MAX_PHL_SEQUENCE AS INT
SELECT @MAX_PHL_SEQUENCE = MAX(PHL_SEQUENCE) FROM PRODUCT_HIERARCHY_LEVELS

IF( @LOWER_LEVEL=0)
BEGIN
SELECT @LOWER_LEVEL=@MAX_PHL_SEQUENCE
END

DECLARE @LEVEL AS INT
SELECT @LEVEL = (@LOWER_LEVEL -  @SELECTED_NODE_LEVEL)+1

CREATE TABLE #TEMP (PARENT_HN_RID INT, HN_RID INT, BN_ID CHAR(50) COLLATE Latin1_General_CS_AS, BN_NAME CHAR(50) COLLATE Latin1_General_CS_AS, BN_DESCRIPTION CHAR(250) COLLATE Latin1_General_CS_AS)
INSERT #TEMP (PARENT_HN_RID, HN_RID, BN_ID, BN_NAME, BN_DESCRIPTION)
EXEC SP_GET_ALL_DESCENDANTS_BY_LEVEL_REPORT @SELECTED_NODE_RID, @LEVEL


SELECT 'Purge', CONVERT(VARCHAR(50),PHL_SEQUENCE )  as BN_ID,PHL_ID as BN_NAME,PURGE_DAILY_HISTORY 'PURGE_DAILY_HISTORY_WEEKS',
       PURGE_WEEKLY_HISTORY 'PURGE_WEEKLY_HISTORY_WEEKS',PURGE_PLANS 'PURGE_PLANS_WEEKS',
       PURGE_HEADERS 'PURGE_HEADERS_WEEKS'
FROM PRODUCT_HIERARCHY_LEVELS 

			UNION

SELECT 'Purge', hn.BN_ID ,
CASE   WHEN phl.PHL_DISPLAY_OPTION_ID = 800701 THEN hn.BN_ID
	WHEN phl.PHL_DISPLAY_OPTION_ID = 800702 THEN hn.BN_DESCRIPTION
	WHEN phl.PHL_DISPLAY_OPTION_ID = 800703 THEN hn.BN_ID + '[' + hn.BN_NAME + ']'
              WHEN phl.PHL_DISPLAY_OPTION_ID = 800704 THEN hn.BN_ID + '[' + hn.BN_DESCRIPTION + ']'
               WHEN phl.PHL_DISPLAY_OPTION_ID = 800705 THEN hn.BN_NAME + '[' + hn.BN_DESCRIPTION + ']'
	 WHEN phl.PHL_DISPLAY_OPTION_ID = 800706 THEN  hn.BN_ID + '[' +  hn.BN_NAME + ']' + '[' + hn.BN_DESCRIPTION + ']'
          ELSE hn.BN_ID + '[' + hn.BN_NAME + ']'END as [BN_NAME],
pc.PURGE_DAILY_HISTORY,pc.PURGE_WEEKLY_HISTORY,pc.PURGE_PLANS,pc.PURGE_HEADERS
 FROM PURGE_CRITERIA pc
LEFT OUTER JOIN 
(
select pd.HN_RID
FROM PURGE_CRITERIA pd 
INNER JOIN BASE_NODE bn on pd.HN_RID = bn.HN_RID

GROUP BY  pd.HN_RID
) sms1 ON sms1.HN_RID = pc.HN_RID
INNER JOIN HIERARCHY_NODE hen ON hen.HN_RID = sms1.HN_RID
LEFT OUTER JOIN PRODUCT_HIERARCHY_LEVELS phl ON phl.PHL_SEQUENCE = hen.HOME_LEVEL

INNER JOIN 
(
 SELECT PARENT_HN_RID, HN_RID, BN_ID, BN_NAME, BN_DESCRIPTION
   FROM #TEMP
)hn ON hn.HN_RID = pc.HN_RID
ORDER BY BN_ID

IF (SELECT object_id('tempdb.dbo.#TEMP')) > 0 DROP TABLE #TEMP

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS OFF 
GO



CREATE PROCEDURE [dbo].[SP_GET_REPORTS]
@ShowEligibility INT,
@ShowModifiers INT,
@ShowSimilarStore INT,
@ShowStoreGrades INT,
@ShowAllocationMinMax INT,
@ShowVelocityGrades INT,
@ShowCapacity INT,
@ShowDailypercentages INT,
@ShowPurgeCriteria INT,
@ShowForecastLevel INT,
@ShowForecastType INT,
@ShowStockMinMax INT
as

BEGIN



SELECT REPORT_NAME FROM 
(
select  CASE WHEN @ShowEligibility = 1 OR @ShowModifiers = 1 OR @ShowSimilarStore = 1 THEN 'Store Eligibility'  
                       ELSE NULL 
            END AS [REPORT_NAME] 

     				 UNION
SELECT CASE WHEN @ShowStoreGrades = 1  OR @ShowAllocationMinMax = 1 THEN  'Store Grades' 
                         ELSE NULL 
               END AS [REPORT_NAME]

			 	UNION

SELECT CASE WHEN @ShowVelocityGrades = 1  THEN  'Velocity Grades' 
                          ELSE NULL
               END AS [REPORT_NAME] 

                			  UNION

SELECT CASE WHEN @ShowCapacity = 1  THEN  'Store Capacity' 
                         ELSE NULL
               END AS [REPORT_NAME] 

               UNION

SELECT CASE WHEN  @ShowDailypercentages = 1 THEN  'Daily Percentages' 
                         ELSE NULL
               END  AS [REPORT_NAME] 
			UNION

SELECT CASE WHEN @ShowPurgeCriteria = 1 THEN 'Purge Criteria' 
                       ELSE NULL
               END AS [REPORT_NAME] 
				UNION 

SELECT CASE WHEN  @ShowForecastLevel = 1  THEN 'OTS ForecastLevel'  
                          ELSE NULL
               END AS [REPORT_NAME] 
                                             UNION  
SELECT CASE WHEN   @ShowForecastType = 1 THEN 'OTS ForecastType'  

                          ELSE NULL
               END AS [REPORT_NAME] 
		UNION
SELECT CASE WHEN   @ShowStockMinMax = 1 THEN 'Stock Min/Max'  

                          ELSE NULL
               END AS [REPORT_NAME] 

)R WHERE REPORT_NAME IS NOT NULL
END


GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO



CREATE PROCEDURE [dbo].[SP_GET_STOCK_MIN_MAX_REPORT]
 
        @SELECTED_NODE_RID  INT,
        @LOWER_LEVEL INT
        
AS
BEGIN

DECLARE @SELECTED_NODE_LEVEL AS INT
SELECT @SELECTED_NODE_LEVEL = HOME_LEVEL FROM HIERARCHY_NODE WHERE HN_RID =  @SELECTED_NODE_RID

DECLARE @MAX_PHL_SEQUENCE AS INT
SELECT @MAX_PHL_SEQUENCE = MAX(PHL_SEQUENCE) FROM PRODUCT_HIERARCHY_LEVELS

IF( @LOWER_LEVEL=0)
BEGIN
SELECT @LOWER_LEVEL=@MAX_PHL_SEQUENCE
END

DECLARE @LEVEL AS INT
SELECT @LEVEL = (@LOWER_LEVEL -  @SELECTED_NODE_LEVEL)+1

CREATE TABLE #TEMP (PARENT_HN_RID INT, HN_RID INT, BN_ID CHAR(50) COLLATE Latin1_General_CS_AS, BN_NAME CHAR(50) COLLATE Latin1_General_CS_AS, BN_DESCRIPTION CHAR(250) COLLATE Latin1_General_CS_AS)
INSERT #TEMP (PARENT_HN_RID, HN_RID, BN_ID, BN_NAME, BN_DESCRIPTION)
EXEC SP_GET_ALL_DESCENDANTS_BY_LEVEL_REPORT @SELECTED_NODE_RID, @LEVEL


SELECT 'PageHeader' ,
CASE   WHEN phl.PHL_DISPLAY_OPTION_ID = 800701 THEN hn.BN_ID
	WHEN phl.PHL_DISPLAY_OPTION_ID = 800702 THEN hn.BN_DESCRIPTION
	WHEN phl.PHL_DISPLAY_OPTION_ID = 800703 THEN hn.BN_ID + '[' + hn.BN_NAME + ']'
              WHEN phl.PHL_DISPLAY_OPTION_ID = 800704 THEN hn.BN_ID + '[' + hn.BN_DESCRIPTION + ']'
               WHEN phl.PHL_DISPLAY_OPTION_ID = 800705 THEN hn.BN_NAME + '[' + hn.BN_DESCRIPTION + ']'
	 WHEN phl.PHL_DISPLAY_OPTION_ID = 800706 THEN  hn.BN_ID + '[' +  hn.BN_NAME + ']' + '[' + hn.BN_DESCRIPTION + ']'
          ELSE hn.BN_ID + '[' + hn.BN_NAME + ']'
END as  [BN_ID],
sgl.SGL_ID, 
--	 CASE WHEN sm.BOUNDARY = -1 THEN NULL
	--            ELSE  sm.BOUNDARY
--	 END AS BOUNDARY ,
	 sg.GRADE_CODE AS [BOUNDARY],
	 CASE WHEN cdr.CDR_RID > 1 AND CDR_RANGE_TYPE_ID = 800858 THEN
		ap1.TEXT_VALUE + ' ' + 
		ap2.TEXT_VALUE + '(s) '+ 
		CONVERT(VARCHAR(3),cdr.CDR_START) + '-' 
		+ CONVERT(VARCHAR(3),cdr.CDR_END)
	      WHEN cdr.CDR_RID > 1 AND CDR_RANGE_TYPE_ID = 800857 THEN 
		    'Weeks ' + SUBSTRING(CONVERT(VARCHAR(6),fw.FISCAL_WEEK),5,6) + '/' +
                 	SUBSTRING(CONVERT(VARCHAR(6),fw.FISCAL_WEEK),1,4) + ' - ' +    
                 	SUBSTRING(CONVERT(VARCHAR(6),fw1.FISCAL_WEEK),5,6) + '/' +
                  	SUBSTRING(CONVERT(VARCHAR(6),fw1.FISCAL_WEEK),1,4)
	      ELSE '[Defaults]'
	 END AS  [DateRange],
	sm.MIN_STOCK, sm.MAX_STOCK
FROM NODE_STOCK_MIN_MAX sm
INNER JOIN HIERARCHY_NODE hen ON hen.HN_RID = sm.HN_RID
LEFT OUTER JOIN PRODUCT_HIERARCHY_LEVELS phl ON phl.PHL_SEQUENCE = hen.HOME_LEVEL

INNER JOIN STORE_GROUP_LEVEL  sgl ON sgl.SGL_RID = sm.SGL_RID
INNER JOIN CALENDAR_DATE_RANGE cdr ON cdr.CDR_RID = sm.CDR_RID
LEFT OUTER JOIN FISCAL_WEEKS fw ON fw.FIRST_DAY_OF_WEEK = cdr.CDR_START
LEFT OUTER JOIN FISCAL_WEEKS fw1 ON fw1.FIRST_DAY_OF_WEEK = cdr.CDR_END
INNER JOIN APPLICATION_TEXT  ap1 ON ap1.TEXT_CODE = cdr.CDR_RANGE_TYPE_ID
INNER JOIN APPLICATION_TEXT  ap2 ON ap2.TEXT_CODE = cdr.CDR_DATE_TYPE_ID
LEFT OUTER JOIN
(SELECT sg.BOUNDARY,sg.GRADE_CODE FROM STORE_GRADES sg WHERE sg.GRADE_CODE  IS NOT NULL GROUP BY sg.BOUNDARY,sg.GRADE_CODE )sg
ON sg.BOUNDARY = sm.BOUNDARY AND sm.BOUNDARY IS NOT NULL AND sm.BOUNDARY != -1

INNER JOIN 
(
 SELECT PARENT_HN_RID, HN_RID, BN_ID, BN_NAME, BN_DESCRIPTION
   FROM #TEMP
)hn ON hn.HN_RID = sm.HN_RID 


ORDER BY hn.PARENT_HN_RID, hn.HN_RID

IF (SELECT object_id('tempdb.dbo.#TEMP')) > 0 DROP TABLE #TEMP

END


GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS OFF 
GO



CREATE PROCEDURE [dbo].[SP_GET_STORE_CAPACITY_FOR_STORE_SET] 
        @SELECTED_NODE_RID  INT,
         @SELECTED_NODE_LEVEL INT,
        @LOWER_LEVEL INT,
        @STORE_CHAR_GROUP varchar(255) ,      
        @STORE_CHAR  varchar(255)
       
AS

DECLARE @LEVEL AS INT
SELECT @LEVEL = @LOWER_LEVEL -  @SELECTED_NODE_LEVEL

CREATE TABLE #TEMP (PARENT_HN_RID INT, HN_RID INT, BN_ID CHAR(50) COLLATE Latin1_General_CS_AS, BN_NAME CHAR(50) COLLATE Latin1_General_CS_AS, BN_DESCRIPTION CHAR(250) COLLATE Latin1_General_CS_AS)
INSERT #TEMP (PARENT_HN_RID, HN_RID, BN_ID, BN_NAME, BN_DESCRIPTION)
EXEC SP_GET_ALL_DESCENDANTS_BY_LEVEL_REPORT @SELECTED_NODE_RID, @LEVEL


SELECT 'StoreCapacity', hn.PARENT_HN_RID, sct.HN_RID, st.ST_ID,  st.STORE_NAME, hn.BN_ID ,hn.BN_NAME ,
CASE   WHEN phl.PHL_DISPLAY_OPTION_ID = 800701 THEN hn.BN_ID
	WHEN phl.PHL_DISPLAY_OPTION_ID = 800702 THEN hn.BN_DESCRIPTION
	WHEN phl.PHL_DISPLAY_OPTION_ID = 800703 THEN hn.BN_ID + '[' + hn.BN_NAME + ']'
              WHEN phl.PHL_DISPLAY_OPTION_ID = 800704 THEN hn.BN_ID + '[' + hn.BN_DESCRIPTION + ']'
               WHEN phl.PHL_DISPLAY_OPTION_ID = 800705 THEN hn.BN_NAME + '[' + hn.BN_DESCRIPTION + ']'
	 WHEN phl.PHL_DISPLAY_OPTION_ID = 800706 THEN  hn.BN_ID + '[' +  hn.BN_NAME + ']' + '[' + hn.BN_DESCRIPTION + ']'
          ELSE hn.BN_ID + '[' + hn.BN_NAME + ']'
END as [DISPLAY_TEXT],
sct.ST_CAPACITY
FROM STORE_CAPACITY sct
INNER JOIN HIERARCHY_NODE hen ON hen.HN_RID = sct.HN_RID
LEFT OUTER JOIN PRODUCT_HIERARCHY_LEVELS phl ON phl.PHL_SEQUENCE = hen.HOME_LEVEL
INNER JOIN BASE_NODE bn ON sct.HN_RID = bn.HN_RID 
INNER JOIN STORES st ON st.ST_RID = sct.ST_RID
INNER JOIN STORE_CHAR_JOIN scj ON scj.ST_RID = st.ST_RID
INNER JOIN STORE_CHAR sc ON sc.SC_RID = scj.SC_RID AND sc.TEXT_VALUE = @STORE_CHAR
INNER JOIN STORE_CHAR_GROUP scg ON scg.SCG_RID = sc.SCG_RID AND	SCG_ID = @STORE_CHAR_GROUP
inner join

(
 SELECT PARENT_HN_RID, HN_RID, BN_ID, BN_NAME, BN_DESCRIPTION
   FROM #TEMP
)hn ON hn.HN_RID = sct.HN_RID

IF (SELECT object_id('tempdb.dbo.#TEMP')) > 0 DROP TABLE #TEMP

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS OFF 
GO



CREATE PROCEDURE [dbo].[SP_GET_STORE_CAPACITY_REPORT]

        @SELECTED_NODE_RID  INT,
        @LOWER_LEVEL INT,
        @STORE_ID VARCHAR(255),
        @STORE_CHAR_GROUP varchar(255),
        @STORE_CHAR  varchar(255)
             
AS

DECLARE @SELECTED_NODE_LEVEL AS INT
SELECT @SELECTED_NODE_LEVEL = HOME_LEVEL FROM HIERARCHY_NODE WHERE HN_RID =  @SELECTED_NODE_RID

DECLARE @MAX_PHL_SEQUENCE AS INT
SELECT @MAX_PHL_SEQUENCE = MAX(PHL_SEQUENCE) FROM PRODUCT_HIERARCHY_LEVELS

IF( @LOWER_LEVEL=0)
BEGIN
SELECT @LOWER_LEVEL=@MAX_PHL_SEQUENCE
END

IF((@STORE_ID IS NULL  OR @STORE_ID = '') AND (@STORE_CHAR_GROUP IS NOT NULL AND @STORE_CHAR_GROUP <>''))
 BEGIN
     EXEC SP_GET_STORE_CAPACITY_FOR_STORE_SET   @SELECTED_NODE_RID, @SELECTED_NODE_LEVEL, @LOWER_LEVEL,@STORE_CHAR_GROUP, @STORE_CHAR
END

ELSE  IF(@STORE_ID IS NOT NULL  AND  @STORE_ID<>''  )
BEGIN
    EXEC SP_GET_STORE_CAPACITY_REPORT_FOR_STORE @SELECTED_NODE_RID, @SELECTED_NODE_LEVEL, @LOWER_LEVEL, @STORE_ID
END

ELSE
BEGIN
 EXEC SP_GET_STORE_CAPACITY_REPORT_NO_STORE @SELECTED_NODE_RID, @SELECTED_NODE_LEVEL, @LOWER_LEVEL, @STORE_ID

END


GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS OFF 
GO



CREATE PROCEDURE [dbo].[SP_GET_STORE_CAPACITY_REPORT_FOR_STORE] 
        @SELECTED_NODE_RID  INT,
         @SELECTED_NODE_LEVEL INT,
        @LOWER_LEVEL INT,
          @STORE_ID VARCHAR(255)

       
AS

DECLARE @LEVEL AS INT
SELECT @LEVEL = @LOWER_LEVEL -  @SELECTED_NODE_LEVEL

CREATE TABLE #TEMP (PARENT_HN_RID INT, HN_RID INT, BN_ID CHAR(50) COLLATE Latin1_General_CS_AS, BN_NAME CHAR(50) COLLATE Latin1_General_CS_AS, BN_DESCRIPTION CHAR(250) COLLATE Latin1_General_CS_AS)
INSERT #TEMP (PARENT_HN_RID, HN_RID, BN_ID, BN_NAME, BN_DESCRIPTION)
EXEC SP_GET_ALL_DESCENDANTS_BY_LEVEL_REPORT @SELECTED_NODE_RID, @LEVEL


SELECT 'StoreCapacity',  hn.PARENT_HN_RID, sc.HN_RID, st.ST_ID,  st.STORE_NAME, hn.BN_ID ,hn.BN_NAME ,
CASE   WHEN phl.PHL_DISPLAY_OPTION_ID = 800701 THEN hn.BN_ID
	WHEN phl.PHL_DISPLAY_OPTION_ID = 800702 THEN hn.BN_DESCRIPTION
	WHEN phl.PHL_DISPLAY_OPTION_ID = 800703 THEN hn.BN_ID + '[' + hn.BN_NAME + ']'
              WHEN phl.PHL_DISPLAY_OPTION_ID = 800704 THEN hn.BN_ID + '[' + hn.BN_DESCRIPTION + ']'
               WHEN phl.PHL_DISPLAY_OPTION_ID = 800705 THEN hn.BN_NAME + '[' + hn.BN_DESCRIPTION + ']'
	 WHEN phl.PHL_DISPLAY_OPTION_ID = 800706 THEN  hn.BN_ID + '[' +  hn.BN_NAME + ']' + '[' + hn.BN_DESCRIPTION + ']'
          ELSE hn.BN_ID + '[' + hn.BN_NAME + ']'
END as [DISPLAY_TEXT],

sc.ST_CAPACITY
FROM STORE_CAPACITY sc
INNER JOIN HIERARCHY_NODE hen ON hen.HN_RID = sc.HN_RID
LEFT OUTER JOIN PRODUCT_HIERARCHY_LEVELS phl ON phl.PHL_SEQUENCE = hen.HOME_LEVEL
INNER JOIN BASE_NODE bn ON sc.HN_RID = bn.HN_RID 
INNER JOIN STORES st ON st.ST_RID=sc.ST_RID AND st.ST_ID = @STORE_ID

inner join

(
 SELECT PARENT_HN_RID, HN_RID, BN_ID, BN_NAME, BN_DESCRIPTION
   FROM #TEMP
)hn ON hn.HN_RID = sc.HN_RID

IF (SELECT object_id('tempdb.dbo.#TEMP')) > 0 DROP TABLE #TEMP

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS OFF 
GO



CREATE PROCEDURE [dbo].[SP_GET_STORE_CAPACITY_REPORT_NO_STORE] 
        @SELECTED_NODE_RID  INT,
         @SELECTED_NODE_LEVEL INT,
        @LOWER_LEVEL INT,
          @STORE_ID VARCHAR(255)

       
AS

DECLARE @LEVEL AS INT
SELECT @LEVEL = @LOWER_LEVEL -  @SELECTED_NODE_LEVEL

CREATE TABLE #TEMP (PARENT_HN_RID INT, HN_RID INT, BN_ID CHAR(50) COLLATE Latin1_General_CS_AS, BN_NAME CHAR(50) COLLATE Latin1_General_CS_AS, BN_DESCRIPTION CHAR(250) COLLATE Latin1_General_CS_AS)
INSERT #TEMP (PARENT_HN_RID, HN_RID, BN_ID, BN_NAME, BN_DESCRIPTION)
EXEC SP_GET_ALL_DESCENDANTS_BY_LEVEL_REPORT @SELECTED_NODE_RID, @LEVEL


SELECT  'StoreCapacity',hn.PARENT_HN_RID, sc.HN_RID, st.ST_ID,  st.STORE_NAME, hn.BN_ID ,hn.BN_NAME ,
CASE   WHEN phl.PHL_DISPLAY_OPTION_ID = 800701 THEN hn.BN_ID
	WHEN phl.PHL_DISPLAY_OPTION_ID = 800702 THEN hn.BN_DESCRIPTION
	WHEN phl.PHL_DISPLAY_OPTION_ID = 800703 THEN hn.BN_ID + '[' + hn.BN_NAME + ']'
              WHEN phl.PHL_DISPLAY_OPTION_ID = 800704 THEN hn.BN_ID + '[' + hn.BN_DESCRIPTION + ']'
               WHEN phl.PHL_DISPLAY_OPTION_ID = 800705 THEN hn.BN_NAME + '[' + hn.BN_DESCRIPTION + ']'
	 WHEN phl.PHL_DISPLAY_OPTION_ID = 800706 THEN  hn.BN_ID + '[' +  hn.BN_NAME + ']' + '[' + hn.BN_DESCRIPTION + ']'
          ELSE hn.BN_ID + '[' + hn.BN_NAME + ']'
END as [DISPLAY_TEXT],
sc.ST_CAPACITY
FROM STORE_CAPACITY sc
INNER JOIN HIERARCHY_NODE hen ON hen.HN_RID = sc.HN_RID
LEFT OUTER JOIN PRODUCT_HIERARCHY_LEVELS phl ON phl.PHL_SEQUENCE = hen.HOME_LEVEL
INNER JOIN BASE_NODE bn ON sc.HN_RID = bn.HN_RID 
INNER JOIN STORES st ON st.ST_RID = sc.ST_RID

inner join

(
 SELECT PARENT_HN_RID, HN_RID, BN_ID, BN_NAME, BN_DESCRIPTION
   FROM #TEMP
)hn ON hn.HN_RID = sc.HN_RID

IF (SELECT object_id('tempdb.dbo.#TEMP')) > 0 DROP TABLE #TEMP

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS OFF 
GO



CREATE PROCEDURE [dbo].[SP_GET_STORE_ELIGIBILITY_REPORT]

        @SELECTED_NODE_RID  INT,
        @LOWER_LEVEL INT,
        @STORE_ID VARCHAR(255),
        @STORE_CHAR_GROUP varchar(255),
        @STORE_CHAR  varchar(255),
        @ShowEligibility INT,
        @ShowModifiers INT,
        @ShowSimilarStore INT
      
AS

DECLARE @SELECTED_NODE_LEVEL AS INT
SELECT @SELECTED_NODE_LEVEL = HOME_LEVEL FROM HIERARCHY_NODE WHERE HN_RID =  @SELECTED_NODE_RID

DECLARE @MAX_PHL_SEQUENCE AS INT
SELECT @MAX_PHL_SEQUENCE = MAX(PHL_SEQUENCE) FROM PRODUCT_HIERARCHY_LEVELS

IF( @LOWER_LEVEL=0)
BEGIN
SELECT @LOWER_LEVEL=@MAX_PHL_SEQUENCE
END

IF((@STORE_ID IS NULL  OR @STORE_ID = '') AND (@STORE_CHAR_GROUP IS NOT NULL AND @STORE_CHAR_GROUP<>''))

 BEGIN
     EXEC SP_GET_STORE_ELIGIBLITY_REPORT_FOR_STORE_SET  @SELECTED_NODE_RID, @SELECTED_NODE_LEVEL, @LOWER_LEVEL, @STORE_CHAR_GROUP,@STORE_CHAR,@ShowEligibility,@ShowModifiers,@ShowSimilarStore
END
ELSE IF(@STORE_ID IS NOT  NULL  AND @STORE_ID<> '')

BEGIN
    EXEC SP_GET_STORE_ELIGIBILITY_REPORT_FOR_STORE @SELECTED_NODE_RID, @SELECTED_NODE_LEVEL, @LOWER_LEVEL, @STORE_ID,@ShowEligibility,@ShowModifiers,@ShowSimilarStore
END
ELSE
BEGIN
    EXEC  SP_GET_STORE_ELIGIBILITY_REPORT_NO_STORE @SELECTED_NODE_RID, @SELECTED_NODE_LEVEL, @LOWER_LEVEL,@ShowEligibility,@ShowModifiers,@ShowSimilarStore
END


GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS OFF 
GO



CREATE PROCEDURE [dbo].[SP_GET_STORE_ELIGIBILITY_REPORT_FOR_STORE]

        @SELECTED_NODE_RID  INT,
        @SELECTED_NODE_LEVEL INT,
        @LOWER_LEVEL INT,
        @STORE_ID VARCHAR(255),
        @ShowEligibility INT,
        @ShowModifiers INT,
        @ShowSimilarStore INT

AS

DECLARE @LEVEL AS INT
SELECT @LEVEL = @LOWER_LEVEL -  @SELECTED_NODE_LEVEL

CREATE TABLE #TEMP (PARENT_HN_RID INT, HN_RID INT, BN_ID CHAR(50) COLLATE Latin1_General_CS_AS, BN_NAME CHAR(50) COLLATE Latin1_General_CS_AS, BN_DESCRIPTION CHAR(250) COLLATE Latin1_General_CS_AS)
INSERT #TEMP (PARENT_HN_RID, HN_RID, BN_ID, BN_NAME, BN_DESCRIPTION)
EXEC SP_GET_ALL_DESCENDANTS_BY_LEVEL_REPORT @SELECTED_NODE_RID, @LEVEL


SELECT 'StoreEligibility', hen.HOME_PH_RID,hn.PARENT_HN_RID, se.HN_RID, st.ST_ID,  st.STORE_NAME,
       hn.BN_ID ,hn.BN_NAME , 
CASE   WHEN phl.PHL_DISPLAY_OPTION_ID = 800701 THEN hn.BN_ID
	WHEN phl.PHL_DISPLAY_OPTION_ID = 800702 THEN hn.BN_DESCRIPTION
	WHEN phl.PHL_DISPLAY_OPTION_ID = 800703 THEN hn.BN_ID + '[' + hn.BN_NAME + ']'
              WHEN phl.PHL_DISPLAY_OPTION_ID = 800704 THEN hn.BN_ID + '[' + hn.BN_DESCRIPTION + ']'
               WHEN phl.PHL_DISPLAY_OPTION_ID = 800705 THEN hn.BN_NAME + '[' + hn.BN_DESCRIPTION + ']'
	 WHEN phl.PHL_DISPLAY_OPTION_ID = 800706 THEN  hn.BN_ID + '[' +  hn.BN_NAME + ']' + '[' + hn.BN_DESCRIPTION + ']'
          ELSE hn.BN_ID + '[' + hn.BN_NAME + ']'
END as [DISPLAY_TEXT], 
em.EM_ID,
CASE WHEN se.USE_ELIGIBILITY = 1 
               THEN   se.INELIGIBLE
           WHEN se.USE_ELIGIBILITY = 0 
              THEN null
END AS [INELIGIBLE], 
CASE WHEN se.STKMOD_TYPE = 2 
        THEN sm.STKMOD_ID
     WHEN se.STKMOD_TYPE = 1
        THEN  CONVERT(VARCHAR(50),se.STKMOD_PCT)
END AS [STKMOD_ID],
CASE WHEN se.SLSMOD_TYPE = 2
   THEN slm.SLSMOD_ID
WHEN se.SLSMOD_TYPE = 1
   THEN CONVERT(VARCHAR(50), se.SLSMOD_PCT)
END AS [SLSMOD_ID], 
CASE WHEN se.FWOSMOD_TYPE = 2
   THEN fm.FWOSMOD_ID
WHEN se.FWOSMOD_TYPE = 1
   THEN CONVERT(VARCHAR(50), se.FWOSMOD_PCT)
END AS [FWOSMOD_ID], 
SimilarStore, 
CASE WHEN se.SIMILAR_STORE_RATIO = 0.0 OR se.SIMILAR_STORE_RATIO = -1.0 OR se.SIMILAR_STORE_RATIO = 100.0 THEN NULL
           ELSE se.SIMILAR_STORE_RATIO
END AS [SIMILAR_STORE_RATIO],  per.PERIOD
from STORE_ELIGIBILITY se 
INNER JOIN HIERARCHY_NODE hen ON hen.HN_RID = se.HN_RID
LEFT OUTER JOIN PRODUCT_HIERARCHY_LEVELS phl ON phl.PHL_SEQUENCE = hen.HOME_LEVEL
INNER JOIN STORES st ON st.ST_RID = se.ST_RID AND st.ST_ID=@STORE_ID 
LEFT OUTER JOIN ELIGIBILITY_MODEL em on se.EM_RID = em.EM_RID AND @ShowEligibility = 1
LEFT OUTER JOIN STOCK_MODIFIER_MODEL sm on se.STKMOD_RID = sm.STKMOD_RID   AND @ShowModifiers = 1
LEFT OUTER JOIN SALES_MODIFIER_MODEL slm on se.SLSMOD_RID = slm.SLSMOD_RID   AND @ShowModifiers = 1
LEFT OUTER JOIN FWOS_MODIFIER_MODEL fm on se.FWOSMOD_RID = fm.FWOSMOD_RID  AND @ShowModifiers = 1
LEFT OUTER JOIN 
(
     ( SELECT sms.HN_RID, sms.ST_RID, st.ST_ID + '[' + st.STORE_NAME + ']'  AS [SimilarStore]   
      FROM SIMILAR_STORES sms 
      INNER JOIN STORES st ON sms.SS_RID = st.ST_RID
      INNER JOIN
      (
           SELECT HN_RID, ST_RID
           FROM SIMILAR_STORES 
           GROUP BY HN_RID, ST_RID
           HAVING COUNT(SS_RID) = 1
       ) s ON s.HN_RID = sms.HN_RID AND s.ST_RID = sms.ST_RID)
             
                         UNION

       (SELECT sms.HN_RID, sms.ST_RID, '(Average of stores)' AS [SimilarStore]
       FROM SIMILAR_STORES sms 
       INNER JOIN STORES st ON sms.SS_RID = st.ST_RID
       INNER JOIN
       (
            SELECT HN_RID, ST_RID
            FROM SIMILAR_STORES 
            GROUP BY HN_RID, ST_RID
            HAVING COUNT(SS_RID) > 1
       ) s ON s.HN_RID = sms.HN_RID AND s.ST_RID = sms.ST_RID
       GROUP BY sms.HN_RID, sms.ST_RID)
) sms1 ON sms1.HN_RID = se.HN_RID AND sms1.ST_RID = se.ST_RID AND @ShowSimilarStore = 1
LEFT OUTER JOIN
(
	SELECT HN_RID,ST_RID,cd.CDR_NAME AS PERIOD
	FROM STORE_ELIGIBILITY se
	INNER JOIN CALENDAR_DATE_RANGE cd ON cd.CDR_RID = se.UNTIL_DATE 
	WHERE UNTIL_DATE IS NOT NULL AND  cd.CDR_NAME != ''
   
   				   UNION 

	SELECT HN_RID,ST_RID,
       		CASE   WHEN CDR_DATE_TYPE_ID = 800853 THEN 'Periods ' + CONVERT(VARCHAR(50),CDR_START)  + ' to ' + CONVERT(VARCHAR(50),CDR_END) 
            			WHEN CDR_DATE_TYPE_ID = 800851 THEN
				CASE WHEN CDR_START IS NOT NULL AND CDR_START > 0 THEN  '+' + CONVERT(VARCHAR(50),CDR_START)  + 'Weeks '
				           WHEN CDR_START IS NOT NULL AND CDR_START < 0 THEN  CONVERT(VARCHAR(50),CDR_START)  + 'Weeks '
				END
       		END AS PERIOD
	FROM STORE_ELIGIBILITY se
	INNER JOIN CALENDAR_DATE_RANGE cd ON cd.CDR_RID = se.UNTIL_DATE 
	WHERE UNTIL_DATE IS NOT NULL AND CDR_RANGE_TYPE_ID = 800858

				        UNION

	SELECT HN_RID,ST_RID,
             		  'Weeks ' + SUBSTRING(CONVERT(VARCHAR(6),fw.FISCAL_WEEK),5,6) + '/' +
                 	SUBSTRING(CONVERT(VARCHAR(6),fw.FISCAL_WEEK),1,4) + ' - ' +    
                 	SUBSTRING(CONVERT(VARCHAR(6),fw1.FISCAL_WEEK),5,6) + '/' +
                  	SUBSTRING(CONVERT(VARCHAR(6),fw1.FISCAL_WEEK),1,4) AS PERIOD
	FROM STORE_ELIGIBILITY se
	INNER JOIN CALENDAR_DATE_RANGE cd ON cd.CDR_RID = se.UNTIL_DATE
	INNER JOIN FISCAL_WEEKS fw ON fw.FIRST_DAY_OF_WEEK = cd.CDR_START
	INNER JOIN FISCAL_WEEKS fw1 ON fw1.FIRST_DAY_OF_WEEK = cd.CDR_END
	WHERE UNTIL_DATE IS NOT NULL AND CDR_RANGE_TYPE_ID = 800857
) per ON per.HN_RID = se.HN_RID AND per.ST_RID = se.ST_RID AND @ShowSimilarStore = 1

INNER JOIN 
(
 SELECT PARENT_HN_RID, HN_RID, BN_ID, BN_NAME, BN_DESCRIPTION
   FROM #TEMP
)hn ON hn.HN_RID = se.HN_RID 
WHERE  (  se.INELIGIBLE =1 AND  se.USE_ELIGIBILITY = 1)  OR 
               (em.EM_ID IS NOT NULL OR se.STKMOD_TYPE IS NOT NULL OR se.SLSMOD_TYPE IS NOT NULL OR se.FWOSMOD_TYPE IS NOT NULL OR 
                 SimilarStore IS NOT NULL  OR (SIMILAR_STORE_RATIO IS NOT NULL AND SIMILAR_STORE_RATIO > 0)  )
ORDER BY st.ST_ID, hen.HOME_PH_RID, hn.PARENT_HN_RID,  hn.BN_ID

IF (SELECT object_id('tempdb.dbo.#TEMP')) > 0 DROP TABLE #TEMP

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS OFF 
GO



CREATE PROCEDURE [dbo].[SP_GET_STORE_ELIGIBILITY_REPORT_NO_STORE]

        @SELECTED_NODE_RID  INT,
        @SELECTED_NODE_LEVEL INT,
        @LOWER_LEVEL INT,
        @ShowEligibility INT,
        @ShowModifiers INT,
        @ShowSimilarStore INT
       

AS

DECLARE @LEVEL AS INT
SELECT @LEVEL = @LOWER_LEVEL -  @SELECTED_NODE_LEVEL

CREATE TABLE #TEMP (PARENT_HN_RID INT, HN_RID INT, BN_ID CHAR(50) COLLATE Latin1_General_CS_AS, BN_NAME CHAR(50) COLLATE Latin1_General_CS_AS, BN_DESCRIPTION CHAR(250) COLLATE Latin1_General_CS_AS)
INSERT #TEMP (PARENT_HN_RID, HN_RID, BN_ID, BN_NAME, BN_DESCRIPTION)
EXEC SP_GET_ALL_DESCENDANTS_BY_LEVEL_REPORT @SELECTED_NODE_RID, @LEVEL


SELECT 'StoreEligibility', hen.HOME_PH_RID,hn.PARENT_HN_RID, se.HN_RID, st.ST_ID,  st.STORE_NAME,
       hn.BN_ID ,hn.BN_NAME ,
CASE   WHEN phl.PHL_DISPLAY_OPTION_ID = 800701 THEN hn.BN_ID
	WHEN phl.PHL_DISPLAY_OPTION_ID = 800702 THEN hn.BN_DESCRIPTION
	WHEN phl.PHL_DISPLAY_OPTION_ID = 800703 THEN hn.BN_ID + '[' + hn.BN_NAME + ']'
              WHEN phl.PHL_DISPLAY_OPTION_ID = 800704 THEN hn.BN_ID + '[' + hn.BN_DESCRIPTION + ']'
               WHEN phl.PHL_DISPLAY_OPTION_ID = 800705 THEN hn.BN_NAME + '[' + hn.BN_DESCRIPTION + ']'
	 WHEN phl.PHL_DISPLAY_OPTION_ID = 800706 THEN  hn.BN_ID + '[' +  hn.BN_NAME + ']' + '[' + hn.BN_DESCRIPTION + ']'
          ELSE hn.BN_ID + '[' + hn.BN_NAME + ']'
END as [DISPLAY_TEXT], 
 em.EM_ID,
CASE WHEN se.USE_ELIGIBILITY = 1 
               THEN   se.INELIGIBLE
           WHEN se.USE_ELIGIBILITY = 0 
              THEN null
END AS [INELIGIBLE], 
CASE WHEN se.STKMOD_TYPE = 2 
        THEN sm.STKMOD_ID
     WHEN se.STKMOD_TYPE = 1
        THEN  CONVERT(VARCHAR(50),se.STKMOD_PCT)
END AS [STKMOD_ID],
CASE WHEN se.SLSMOD_TYPE = 2
   THEN slm.SLSMOD_ID
WHEN se.SLSMOD_TYPE = 1
   THEN CONVERT(VARCHAR(50), se.SLSMOD_PCT)
END AS [SLSMOD_ID], 
CASE WHEN se.FWOSMOD_TYPE = 2
   THEN fm.FWOSMOD_ID
WHEN se.FWOSMOD_TYPE = 1
   THEN CONVERT(VARCHAR(50), se.FWOSMOD_PCT)
END AS [FWOSMOD_ID], 
SimilarStore,
CASE WHEN se.SIMILAR_STORE_RATIO = 0.0 OR se.SIMILAR_STORE_RATIO = -1.0 OR  se.SIMILAR_STORE_RATIO = 100.0 THEN NULL
           ELSE se.SIMILAR_STORE_RATIO
END AS [SIMILAR_STORE_RATIO], 
per.PERIOD
from STORE_ELIGIBILITY se 
INNER JOIN HIERARCHY_NODE hen ON hen.HN_RID = se.HN_RID
LEFT OUTER  JOIN PRODUCT_HIERARCHY_LEVELS phl ON phl.PHL_SEQUENCE = hen.HOME_LEVEL
INNER JOIN STORES st ON st.ST_RID = se.ST_RID
LEFT OUTER JOIN ELIGIBILITY_MODEL em on se.EM_RID = em.EM_RID AND @ShowEligibility  = 1
LEFT OUTER JOIN STOCK_MODIFIER_MODEL sm on se.STKMOD_RID = sm.STKMOD_RID AND se.STKMOD_TYPE = 2 AND @ShowModifiers = 1
LEFT OUTER JOIN SALES_MODIFIER_MODEL slm on se.SLSMOD_RID = slm.SLSMOD_RID AND @ShowModifiers = 1
LEFT OUTER JOIN FWOS_MODIFIER_MODEL fm on se.FWOSMOD_RID = fm.FWOSMOD_RID AND @ShowModifiers = 1
LEFT OUTER JOIN 
(
     ( SELECT sms.HN_RID, sms.ST_RID, st.ST_ID + '[' + st.STORE_NAME + ']'  AS [SimilarStore]   
      FROM SIMILAR_STORES sms 
      INNER JOIN STORES st ON sms.SS_RID = st.ST_RID
      INNER JOIN
      (
           SELECT HN_RID, ST_RID
           FROM SIMILAR_STORES 
           GROUP BY HN_RID, ST_RID
           HAVING COUNT(SS_RID) = 1
       ) s ON s.HN_RID = sms.HN_RID AND s.ST_RID = sms.ST_RID)
             
                         UNION

       (SELECT sms.HN_RID, sms.ST_RID, '(Average of stores)' AS [SimilarStore]
       FROM SIMILAR_STORES sms 
       INNER JOIN STORES st ON sms.SS_RID = st.ST_RID
       INNER JOIN
       (
            SELECT HN_RID, ST_RID
            FROM SIMILAR_STORES 
            GROUP BY HN_RID, ST_RID
            HAVING COUNT(SS_RID) > 1
       ) s ON s.HN_RID = sms.HN_RID AND s.ST_RID = sms.ST_RID
       GROUP BY sms.HN_RID, sms.ST_RID)
) sms1 ON sms1.HN_RID = se.HN_RID AND sms1.ST_RID = se.ST_RID AND  @ShowSimilarStore = 1
LEFT OUTER JOIN
(
	SELECT HN_RID,ST_RID,cd.CDR_NAME AS PERIOD
	FROM STORE_ELIGIBILITY se
	INNER JOIN CALENDAR_DATE_RANGE cd ON cd.CDR_RID = se.UNTIL_DATE 
	WHERE UNTIL_DATE IS NOT NULL AND  cd.CDR_NAME != ''
   
   				   UNION 

	SELECT HN_RID,ST_RID,
	CASE   WHEN CDR_DATE_TYPE_ID = 800853 THEN 'Periods ' + CONVERT(VARCHAR(50),CDR_START)  + ' to ' + CONVERT(VARCHAR(50),CDR_END) 
            			WHEN CDR_DATE_TYPE_ID = 800851 THEN
				CASE WHEN CDR_END IS NOT NULL AND CDR_END > 0 THEN  '+' + CONVERT(VARCHAR(50),CDR_START)  + 'Weeks '
				           WHEN CDR_START IS NOT NULL AND CDR_START < 0 THEN  CONVERT(VARCHAR(50),CDR_START)  + 'Weeks '
				END
       		END AS PERIOD
	FROM STORE_ELIGIBILITY se
	INNER JOIN CALENDAR_DATE_RANGE cd ON cd.CDR_RID = se.UNTIL_DATE 
	WHERE UNTIL_DATE IS NOT NULL AND CDR_RANGE_TYPE_ID = 800858

				        UNION

	SELECT HN_RID,ST_RID,
             		  'Weeks ' + SUBSTRING(CONVERT(VARCHAR(6),fw.FISCAL_WEEK),5,6) + '/' +
                 	SUBSTRING(CONVERT(VARCHAR(6),fw.FISCAL_WEEK),1,4) + ' - ' +    
                 	SUBSTRING(CONVERT(VARCHAR(6),fw1.FISCAL_WEEK),5,6) + '/' +
                  	SUBSTRING(CONVERT(VARCHAR(6),fw1.FISCAL_WEEK),1,4) AS PERIOD
	FROM STORE_ELIGIBILITY se
	INNER JOIN CALENDAR_DATE_RANGE cd ON cd.CDR_RID = se.UNTIL_DATE
	INNER JOIN FISCAL_WEEKS fw ON fw.FIRST_DAY_OF_WEEK = cd.CDR_START
	INNER JOIN FISCAL_WEEKS fw1 ON fw1.FIRST_DAY_OF_WEEK = cd.CDR_END
	WHERE UNTIL_DATE IS NOT NULL AND CDR_RANGE_TYPE_ID = 800857
) per ON per.HN_RID = se.HN_RID AND per.ST_RID = se.ST_RID AND @ShowSimilarStore = 1

INNER JOIN 
(
 SELECT PARENT_HN_RID, HN_RID, BN_ID, BN_NAME, BN_DESCRIPTION
   FROM #TEMP
)hn ON hn.HN_RID = se.HN_RID 
WHERE  (  se.INELIGIBLE =1 AND  se.USE_ELIGIBILITY = 1)  OR 
              (em.EM_ID IS NOT NULL OR se.STKMOD_TYPE IS NOT NULL OR se.SLSMOD_TYPE IS NOT NULL OR se.FWOSMOD_TYPE IS NOT NULL OR 
                SimilarStore IS NOT NULL  OR (SIMILAR_STORE_RATIO IS NOT NULL AND SIMILAR_STORE_RATIO > 0)  )
ORDER BY st.ST_ID, hen.HOME_PH_RID,hn.PARENT_HN_RID,  hn.BN_ID

IF (SELECT object_id('tempdb.dbo.#TEMP')) > 0 DROP TABLE #TEMP

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS OFF 
GO



CREATE PROCEDURE [dbo].[SP_GET_STORE_ELIGIBLITY_REPORT_FOR_STORE_SET] 
        @SELECTED_NODE_RID  INT,
         @SELECTED_NODE_LEVEL INT,
        @LOWER_LEVEL INT,      
        @STORE_CHAR_GROUP varchar(255),
        @STORE_CHAR  varchar(255),
        @ShowEligibility INT,
        @ShowModifiers INT,
        @ShowSimilarStore INT  
AS

DECLARE @LEVEL AS INT
SELECT @LEVEL = @LOWER_LEVEL -  @SELECTED_NODE_LEVEL

CREATE TABLE #TEMP (PARENT_HN_RID INT, HN_RID INT, BN_ID CHAR(50) COLLATE Latin1_General_CS_AS, BN_NAME CHAR(50) COLLATE Latin1_General_CS_AS, BN_DESCRIPTION CHAR(250) COLLATE Latin1_General_CS_AS)
INSERT #TEMP (PARENT_HN_RID, HN_RID, BN_ID, BN_NAME, BN_DESCRIPTION)
EXEC SP_GET_ALL_DESCENDANTS_BY_LEVEL_REPORT @SELECTED_NODE_RID, @LEVEL


SELECT 'StoreEligibility', hen.HOME_PH_RID,hn.PARENT_HN_RID, se.HN_RID, st.ST_ID,  st.STORE_NAME,
       hn.BN_ID ,hn.BN_NAME ,
CASE   WHEN phl.PHL_DISPLAY_OPTION_ID = 800701 THEN hn.BN_ID
	WHEN phl.PHL_DISPLAY_OPTION_ID = 800702 THEN hn.BN_DESCRIPTION
	WHEN phl.PHL_DISPLAY_OPTION_ID = 800703 THEN hn.BN_ID + '[' + hn.BN_NAME + ']'
              WHEN phl.PHL_DISPLAY_OPTION_ID = 800704 THEN hn.BN_ID + '[' + hn.BN_DESCRIPTION + ']'
               WHEN phl.PHL_DISPLAY_OPTION_ID = 800705 THEN hn.BN_NAME + '[' + hn.BN_DESCRIPTION + ']'
	 WHEN phl.PHL_DISPLAY_OPTION_ID = 800706 THEN  hn.BN_ID + '[' +  hn.BN_NAME + ']' + '[' + hn.BN_DESCRIPTION + ']'
          ELSE hn.BN_ID + '[' + hn.BN_NAME + ']'
END as [DISPLAY_TEXT],
 em.EM_ID,
CASE WHEN se.USE_ELIGIBILITY = 1 
               THEN   se.INELIGIBLE
           WHEN se.USE_ELIGIBILITY = 0 
              THEN null
END AS [INELIGIBLE], 
CASE WHEN se.STKMOD_TYPE = 2 
        THEN sm.STKMOD_ID
     WHEN se.STKMOD_TYPE = 1
        THEN  CONVERT(VARCHAR(50),se.STKMOD_PCT)
END AS [STKMOD_ID],
CASE WHEN se.SLSMOD_TYPE = 2
   THEN slm.SLSMOD_ID
WHEN se.SLSMOD_TYPE = 1
   THEN CONVERT(VARCHAR(50), se.SLSMOD_PCT)
END AS [SLSMOD_ID], 
CASE WHEN se.FWOSMOD_TYPE = 2
   THEN fm.FWOSMOD_ID
WHEN se.FWOSMOD_TYPE = 1
   THEN CONVERT(VARCHAR(50), se.FWOSMOD_PCT)
END AS [FWOSMOD_ID], 
SimilarStore,
CASE WHEN se.SIMILAR_STORE_RATIO = 0.0 OR se.SIMILAR_STORE_RATIO = -1.0 OR  se.SIMILAR_STORE_RATIO = 100.0 THEN NULL
           ELSE se.SIMILAR_STORE_RATIO
END AS [SIMILAR_STORE_RATIO], 
per.PERIOD
from STORE_ELIGIBILITY se 
INNER JOIN HIERARCHY_NODE hen ON se.HN_RID= hen.HN_RID
LEFT OUTER JOIN PRODUCT_HIERARCHY_LEVELS phl ON phl.PHL_SEQUENCE = hen.HOME_LEVEL
INNER JOIN STORES st ON st.ST_RID = se.ST_RID
INNER JOIN STORE_CHAR_JOIN scj ON scj.ST_RID = st.ST_RID
INNER JOIN STORE_CHAR sc ON sc.SC_RID = scj.SC_RID AND sc.TEXT_VALUE = @STORE_CHAR
INNER JOIN STORE_CHAR_GROUP scg ON scg.SCG_RID = sc.SCG_RID AND	SCG_ID = @STORE_CHAR_GROUP
LEFT OUTER JOIN ELIGIBILITY_MODEL em on se.EM_RID = em.EM_RID AND @ShowEligibility = 1
LEFT OUTER JOIN STOCK_MODIFIER_MODEL sm on se.STKMOD_RID = sm.STKMOD_RID AND @ShowModifiers = 1
LEFT OUTER JOIN SALES_MODIFIER_MODEL slm on se.SLSMOD_RID = slm.SLSMOD_RID AND @ShowModifiers = 1
LEFT OUTER JOIN FWOS_MODIFIER_MODEL fm on se.FWOSMOD_RID = fm.FWOSMOD_RID AND @ShowModifiers = 1
LEFT OUTER JOIN 
(
     ( SELECT sms.HN_RID, sms.ST_RID, st.ST_ID + '[' + st.STORE_NAME + ']'  AS [SimilarStore]   
      FROM SIMILAR_STORES sms 
      INNER JOIN STORES st ON sms.SS_RID = st.ST_RID
      INNER JOIN
      (
           SELECT HN_RID, ST_RID
           FROM SIMILAR_STORES 
           GROUP BY HN_RID, ST_RID
           HAVING COUNT(SS_RID) = 1
       ) s ON s.HN_RID = sms.HN_RID AND s.ST_RID = sms.ST_RID)
             
                         UNION

       (SELECT sms.HN_RID, sms.ST_RID, '(Average of stores)' AS [SimilarStore]
       FROM SIMILAR_STORES sms 
       INNER JOIN STORES st ON sms.SS_RID = st.ST_RID
       INNER JOIN
       (
            SELECT HN_RID, ST_RID
            FROM SIMILAR_STORES 
            GROUP BY HN_RID, ST_RID
            HAVING COUNT(SS_RID) > 1
       ) s ON s.HN_RID = sms.HN_RID AND s.ST_RID = sms.ST_RID
       GROUP BY sms.HN_RID, sms.ST_RID)
) sms1 ON sms1.HN_RID = se.HN_RID AND sms1.ST_RID = se.ST_RID AND @ShowSimilarStore = 1
LEFT OUTER JOIN
(
	SELECT HN_RID,ST_RID,cd.CDR_NAME AS PERIOD
	FROM STORE_ELIGIBILITY se
	INNER JOIN CALENDAR_DATE_RANGE cd ON cd.CDR_RID = se.UNTIL_DATE 
	WHERE UNTIL_DATE IS NOT NULL AND  cd.CDR_NAME != ''
   
   				   UNION 

	SELECT HN_RID,ST_RID,
	CASE   WHEN CDR_DATE_TYPE_ID = 800853 THEN 'Periods ' + CONVERT(VARCHAR(50),CDR_START)  + ' to ' + CONVERT(VARCHAR(50),CDR_END) 
            			WHEN CDR_DATE_TYPE_ID = 800851 THEN
				CASE WHEN CDR_END IS NOT NULL AND CDR_END > 0 THEN  '+' + CONVERT(VARCHAR(50),CDR_START)  + 'Weeks '
				           WHEN CDR_START IS NOT NULL AND CDR_START < 0 THEN  CONVERT(VARCHAR(50),CDR_START)  + 'Weeks '
				END
       		END AS PERIOD
	FROM STORE_ELIGIBILITY se
	INNER JOIN CALENDAR_DATE_RANGE cd ON cd.CDR_RID = se.UNTIL_DATE 
	WHERE UNTIL_DATE IS NOT NULL AND CDR_RANGE_TYPE_ID = 800858

				        UNION

	SELECT HN_RID,ST_RID,
             		  'Weeks ' + SUBSTRING(CONVERT(VARCHAR(6),fw.FISCAL_WEEK),5,6) + '/' +
                 	SUBSTRING(CONVERT(VARCHAR(6),fw.FISCAL_WEEK),1,4) + ' - ' +    
                 	SUBSTRING(CONVERT(VARCHAR(6),fw1.FISCAL_WEEK),5,6) + '/' +
                  	SUBSTRING(CONVERT(VARCHAR(6),fw1.FISCAL_WEEK),1,4) AS PERIOD
	FROM STORE_ELIGIBILITY se
	INNER JOIN CALENDAR_DATE_RANGE cd ON cd.CDR_RID = se.UNTIL_DATE
	INNER JOIN FISCAL_WEEKS fw ON fw.FIRST_DAY_OF_WEEK = cd.CDR_START
	INNER JOIN FISCAL_WEEKS fw1 ON fw1.FIRST_DAY_OF_WEEK = cd.CDR_END
	WHERE UNTIL_DATE IS NOT NULL AND CDR_RANGE_TYPE_ID = 800857
) per ON per.HN_RID = se.HN_RID AND per.ST_RID = se.ST_RID AND @ShowSimilarStore = 1

INNER JOIN 
(
 SELECT PARENT_HN_RID, HN_RID, BN_ID, BN_NAME, BN_DESCRIPTION
   FROM #TEMP
)hn ON hn.HN_RID = se.HN_RID 
WHERE  (  se.INELIGIBLE =1 AND  se.USE_ELIGIBILITY = 1)  OR 
               (em.EM_ID IS NOT NULL OR se.STKMOD_TYPE IS NOT NULL OR se.SLSMOD_TYPE IS NOT NULL OR se.FWOSMOD_TYPE IS NOT NULL OR 
                 SimilarStore IS NOT NULL  OR (SIMILAR_STORE_RATIO IS NOT NULL AND SIMILAR_STORE_RATIO > 0)  )
ORDER BY st.ST_ID, hen.HOME_PH_RID,hn.PARENT_HN_RID,  hn.BN_ID

IF (SELECT object_id('tempdb.dbo.#TEMP')) > 0 DROP TABLE #TEMP

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS OFF 
GO



CREATE PROCEDURE [dbo].[SP_GET_STORE_GRADES_REPORT]
 
        @SELECTED_NODE_RID  INT,
        @LOWER_LEVEL INT,
        @ShowStoreGrades INT,
        @ShowAllocationMinMax INT

        
AS
BEGIN

DECLARE @SELECTED_NODE_LEVEL AS INT
SELECT @SELECTED_NODE_LEVEL = HOME_LEVEL FROM HIERARCHY_NODE WHERE HN_RID =  @SELECTED_NODE_RID

DECLARE @MAX_PHL_SEQUENCE AS INT
SELECT @MAX_PHL_SEQUENCE = MAX(PHL_SEQUENCE) FROM PRODUCT_HIERARCHY_LEVELS

IF( @LOWER_LEVEL=0)
BEGIN
SELECT @LOWER_LEVEL=@MAX_PHL_SEQUENCE
END

DECLARE @LEVEL AS INT
SELECT @LEVEL = (@LOWER_LEVEL -  @SELECTED_NODE_LEVEL)+1

CREATE TABLE #TEMP (PARENT_HN_RID INT, HN_RID INT, BN_ID CHAR(50) COLLATE Latin1_General_CS_AS, BN_NAME CHAR(50) COLLATE Latin1_General_CS_AS, BN_DESCRIPTION CHAR(250) COLLATE Latin1_General_CS_AS)
INSERT #TEMP (PARENT_HN_RID, HN_RID, BN_ID, BN_NAME, BN_DESCRIPTION)
EXEC SP_GET_ALL_DESCENDANTS_BY_LEVEL_REPORT @SELECTED_NODE_RID, @LEVEL


SELECT  CASE   WHEN phl.PHL_DISPLAY_OPTION_ID = 800701 THEN hn.BN_ID
	WHEN phl.PHL_DISPLAY_OPTION_ID = 800702 THEN hn.BN_DESCRIPTION
	WHEN phl.PHL_DISPLAY_OPTION_ID = 800703 THEN hn.BN_ID + '[' + hn.BN_NAME + ']'
              WHEN phl.PHL_DISPLAY_OPTION_ID = 800704 THEN hn.BN_ID + '[' + hn.BN_DESCRIPTION + ']'
               WHEN phl.PHL_DISPLAY_OPTION_ID = 800705 THEN hn.BN_NAME + '[' + hn.BN_DESCRIPTION + ']'
	 WHEN phl.PHL_DISPLAY_OPTION_ID = 800706 THEN  hn.BN_ID + '[' +  hn.BN_NAME + ']' + '[' + hn.BN_DESCRIPTION + ']'
          ELSE hn.BN_ID + '[' + hn.BN_NAME + ']'
END as  [BN_ID],
               CASE WHEN @ShowStoreGrades = 1 THEN stg.GRADE_CODE
                          ELSE NULL 
               END AS GRADE_CODE,
               CASE WHEN @ShowStoreGrades = 1 THEN stg.BOUNDARY
                          ELSE NULL 
               END AS BOUNDARY,
              
              CASE WHEN @ShowStoreGrades = 1 THEN CONVERT(INT,stg.WOS_INDEX)
                        ELSE NULL 
             END as WOS_INDEX ,
               
             CASE WHEN stg.MINIMUM_STOCK <0 OR @ShowAllocationMinMax = 0 THEN NULL
                         ELSE stg.MINIMUM_STOCK
             END  AS [MINIMUM_STOCK] ,

               CASE WHEN  stg.MAXIMUM_STOCK<0 OR @ShowAllocationMinMax = 0 THEN NULL
                         ELSE stg.MAXIMUM_STOCK
               END AS [MAXIMUM_STOCK],

               CASE WHEN stg.MINIMUM_AD<0 OR @ShowAllocationMinMax = 0 THEN NULL
                         ELSE stg.MINIMUM_AD
                END AS [MINIMUM_AD] ,
          
                CASE WHEN   stg.MINIMUM_COLOR<0 OR @ShowAllocationMinMax = 0 THEN NULL
                           ELSE stg.MINIMUM_COLOR
                 END AS [MINIMUM_COLOR] ,

                CASE WHEN stg.MAXIMUM_COLOR <0  OR @ShowAllocationMinMax = 0 THEN NULL
                            ELSE stg.MAXIMUM_COLOR
                END AS [MAXIMUM_COLOR]
FROM STORE_GRADES stg
INNER JOIN HIERARCHY_NODE hen ON hen.HN_RID = stg.HN_RID
LEFT OUTER JOIN PRODUCT_HIERARCHY_LEVELS phl ON phl.PHL_SEQUENCE = hen.HOME_LEVEL

INNER JOIN 
(
 SELECT PARENT_HN_RID, HN_RID, BN_ID, BN_NAME, BN_DESCRIPTION
   FROM #TEMP
)hn ON hn.HN_RID = stg.HN_RID 
WHERE @ShowStoreGrades = 1 OR @ShowAllocationMinMax = 1

ORDER BY hn.PARENT_HN_RID, hn.HN_RID,GRADE_CODE

IF (SELECT object_id('tempdb.dbo.#TEMP')) > 0 DROP TABLE #TEMP

END


GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS OFF 
GO





CREATE PROCEDURE [dbo].[SP_GET_VELOCITYGRADES_REPORT]

        @SELECTED_NODE_RID  INT,
        @LOWER_LEVEL INT
AS
BEGIN
DECLARE @SELECTED_NODE_LEVEL AS INT
SELECT @SELECTED_NODE_LEVEL = HOME_LEVEL FROM HIERARCHY_NODE WHERE HN_RID =  @SELECTED_NODE_RID

DECLARE @MAX_PHL_SEQUENCE AS INT
SELECT @MAX_PHL_SEQUENCE = MAX(PHL_SEQUENCE) FROM PRODUCT_HIERARCHY_LEVELS

IF( @LOWER_LEVEL=0)
BEGIN
SELECT @LOWER_LEVEL=@MAX_PHL_SEQUENCE
END

DECLARE @LEVEL AS INT
SELECT @LEVEL = (@LOWER_LEVEL -  @SELECTED_NODE_LEVEL)+1

CREATE TABLE #TEMP (PARENT_HN_RID INT, HN_RID INT, BN_ID CHAR(50) COLLATE Latin1_General_CS_AS, BN_NAME CHAR(50) COLLATE Latin1_General_CS_AS, BN_DESCRIPTION CHAR(250) COLLATE Latin1_General_CS_AS)
INSERT #TEMP (PARENT_HN_RID, HN_RID, BN_ID, BN_NAME, BN_DESCRIPTION)
EXEC SP_GET_ALL_DESCENDANTS_BY_LEVEL_REPORT @SELECTED_NODE_RID, @LEVEL


SELECT 
CASE   WHEN phl.PHL_DISPLAY_OPTION_ID = 800701 THEN hn.BN_ID
	WHEN phl.PHL_DISPLAY_OPTION_ID = 800702 THEN hn.BN_DESCRIPTION
	WHEN phl.PHL_DISPLAY_OPTION_ID = 800703 THEN hn.BN_ID + '[' + hn.BN_NAME + ']'
              WHEN phl.PHL_DISPLAY_OPTION_ID = 800704 THEN hn.BN_ID + '[' + hn.BN_DESCRIPTION + ']'
               WHEN phl.PHL_DISPLAY_OPTION_ID = 800705 THEN hn.BN_NAME + '[' + hn.BN_DESCRIPTION + ']'
	 WHEN phl.PHL_DISPLAY_OPTION_ID = 800706 THEN  hn.BN_ID + '[' +  hn.BN_NAME + ']' + '[' + hn.BN_DESCRIPTION + ']'
          ELSE hn.BN_ID + '[' + hn.BN_NAME + ']'
END as [DISPLAY_TEXT],

vg.BOUNDARY,vg.GRADE_CODE,vg.SELL_THRU_PCT
FROM
(
	SELECT vg.HN_RID,vg.BOUNDARY,vg.GRADE_CODE,SELL_THRU_PCT
	FROM
	(
		  SELECT vg1.HN_RID, 
			   (SELECT count (*)
			    FROM  VELOCITY_GRADE vg2
			    WHERE vg2.BOUNDARY > vg1.BOUNDARY AND vg1.HN_RID = vg2.HN_RID)AS SequenceNo, 
			   vg1.BOUNDARY,vg1.GRADE_CODE
		  FROM VELOCITY_GRADE vg1
  
	) vg
	LEFT OUTER  JOIN
	(
		SELECT st.HN_RID, 
			   (
			     SELECT count(*) 
			     FROM SELL_THRU st1
     			     WHERE st.SELL_THRU_PCT < st1.SELL_THRU_PCT AND st.HN_RID = st1.HN_RID
			   ) AS SequenceNo,
			 st.SELL_THRU_PCT
		FROM SELL_THRU st
	) st ON st.HN_RID = vg.HN_RID AND st.SequenceNo = vg.SequenceNo


		UNION 

	SELECT st.HN_RID,NULL,NULL, st.SELL_THRU_PCT
	FROM SELL_THRU st
	WHERE  NOT EXISTS (SELECT * FROM VELOCITY_GRADE WHERE HN_RID = st.HN_RID)

)vg
INNER JOIN HIERARCHY_NODE hen ON hen.HN_RID = vg.HN_RID
LEFT OUTER JOIN PRODUCT_HIERARCHY_LEVELS phl ON phl.PHL_SEQUENCE = hen.HOME_LEVEL
INNER JOIN 
(
 SELECT PARENT_HN_RID, HN_RID, BN_ID, BN_NAME, BN_DESCRIPTION
   FROM #TEMP
)hn ON hn.HN_RID = vg.HN_RID 

ORDER BY hn.PARENT_HN_RID, hn.HN_RID,GRADE_CODE

IF (SELECT object_id('tempdb.dbo.#TEMP')) > 0 DROP TABLE #TEMP

END


GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

