<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MIDRetail.DataCommon</name>
    </assembly>
    <members>
        <member name="P:MIDRetail.DataCommon.AssortmentOpenParms.StoreGroupRID">
            <summary>
            Gets or sets the RID of the Store Group.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.AssortmentOpenParms.FilterRID">
            <summary>
            Gets or sets the RID of the Filter.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.AssortmentOpenParms.GroupBy">
            <summary>
            Gets or sets the eAllocationAssortmentViewGroupBy by which the data is to be grouped.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.AssortmentOpenParms.ViewRID">
            <summary>
            Gets or sets the RID of View.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.AssortmentOpenParms.ViewName">
            <summary>
            Gets or sets the name of View.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.AssortmentOpenParms.ViewUserID">
            <summary>
            Gets or sets the User ID of View.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.AssortmentOpenParms.VariableType">
            <summary>
            Gets or sets the Assortment Variable Type.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.AssortmentOpenParms.VariableNumber">
            <summary>
            Gets or sets the Assortment Variable Number.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.AssortmentOpenParms.InclOnhand">
            <summary>
            Gets or sets Include OnHand.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.AssortmentOpenParms.InclIntransit">
            <summary>
            Gets or sets Include Intransit.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.AssortmentOpenParms.InclSimStores">
            <summary>
            Gets or sets Include Similar Stores.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.AssortmentOpenParms.InclCommitted">
            <summary>
            Gets or sets Include Committed.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.AssortmentOpenParms.AverageBy">
            <summary>
            Gets or sets Store Average By.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.AssortmentOpenParms.GradeBoundary">
            <summary>
            Gets or sets Grade Boundary.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.AssortmentComponentVariableProfile">
            <summary>
            Class that defines the Component Variables for Assortment.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.AssortmentVariableProfile">
            <summary>
            Class that defines the Assortment Variables for Assortment.
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.AssortmentVariableProfile.isDatabaseVariable(MIDRetail.DataCommon.eVariableCategory,System.Int32,MIDRetail.DataCommon.eCalendarDateType)">
            <summary>
            Returns a boolean value indicating if the variable is stored on the database 
            for the given type of data.
            </summary>
            <param name="aVarCateg">
            The eVariableCategory setting that identifies the type of data.
            </param>
            <param name="aVersionRID">
            The key of the version for the type of data.
            </param>
            <param name="aCalDateType">
            The eCalendarDateType for the type of data.
            </param>
            <returns>
            A boolean indicating if the store for the given PlanCellReference is eligible.
            </returns>
        </member>
        <member name="T:MIDRetail.DataCommon.AssortmentSummaryVariableProfile">
            <summary>
            Class that defines the Summary Variables for Assortment.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.AssortmentTotalVariableProfile">
            <summary>
            Class that defines the Total Variables for Assortment.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.AssortmentDetailVariableProfile">
            <summary>
            Class that defines the Detail Variables for Assortment.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.BasisSizeSubstitute">
            <summary>
            Summary description for BasisSizeSubstitute.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.ComputationVariableProfile">
            <summary>
            The ComputationVariableProfile class identifies the BaseVariable profile.
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.ComputationVariableProfile.#ctor(System.Int32,System.String,MIDRetail.DataCommon.eVariableCategory,MIDRetail.DataCommon.eVariableStyle,MIDRetail.DataCommon.eVariableAccess,MIDRetail.DataCommon.eVariableScope,MIDRetail.DataCommon.eVariableSpreadType,MIDRetail.DataCommon.eVariableWeekType,MIDRetail.DataCommon.eVariableTimeTotalType,MIDRetail.DataCommon.eValueFormatType,System.Double)">
            <summary>
            Creates a new instance of VariableProfile using the given Id, variable name, database column name, eVariableAccess, eVariableScope, 
            eEligiblityType, eFormatType, and number of decimals.
            </summary>
            <param name="aKey">
            The Id of this profile.
            </param>
            <param name="aVariableName">
            The display name of this Variable definition.
            </param>
            <param name="aVariableCategory">
            The eVariableCategory that describes the variable category of this Variable.
            </param>
            <param name="aVariableStyle">
            The eVariableStyle that describes the variable style of this Variable.
            </param>
            <param name="aVariableAccess">
            The eVariableAccess that describes the variable access of this Variable.
            </param>
            <param name="aVariableScope">
            The eVariableScope that describes the variable scope of this Variable.
            </param>
            <param name="aVariableWeekType">
            The eVariableWeekType that describes the variable week type of this Variable.
            </param>
            <param name="aVariableTimeTotalType">
            The eVariableTimeTotalType that describes the variable time total type of this Variable.
            </param>
            <param name="aFormatType">
            The eFormatType that identifies the way to format the value as a string.
            </param>
            <param name="aNumDecimals">
            The number of decimals used for a eFormatType.GenericNumeric format.
            </param>
        </member>
        <member name="M:MIDRetail.DataCommon.ComputationVariableProfile.#ctor(System.Int32,System.String,MIDRetail.DataCommon.eVariableCategory,MIDRetail.DataCommon.eVariableStyle,MIDRetail.DataCommon.eVariableAccess,MIDRetail.DataCommon.eVariableScope,MIDRetail.DataCommon.eVariableSpreadType,MIDRetail.DataCommon.eVariableWeekType,MIDRetail.DataCommon.eVariableTimeTotalType,MIDRetail.DataCommon.eValueFormatType,System.Double,System.Int32)">
            <summary>
            Creates a new instance of VariableProfile using the given Id, variable name, database column name, eVariableAccess, eVariableScope, 
            eEligiblityType, eFormatType, and number of decimals.
            </summary>
            <param name="aKey">
            The Id of this profile.
            </param>
            <param name="aVariableName">
            The display name of this Variable definition.
            </param>
            <param name="aVariableCategory">
            The eVariableCategory that describes the variable category of this Variable.
            </param>
            <param name="aVariableStyle">
            The eVariableStyle that describes the variable style of this Variable.
            </param>
            <param name="aVariableAccess">
            The eVariableAccess that describes the variable access of this Variable.
            </param>
            <param name="aVariableScope">
            The eVariableScope that describes the variable scope of this Variable.
            </param>
            <param name="aVariableWeekType">
            The eVariableWeekType that describes the variable week type of this Variable.
            </param>
            <param name="aVariableTimeTotalType">
            The eVariableTimeTotalType that describes the variable time total type of this Variable.
            </param>
            <param name="aFormatType">
            The eFormatType that identifies the way to format the value as a string.
            </param>
            <param name="aNumDecimals">
            The number of decimals used for a eFormatType.GenericNumeric format.
            </param>
        </member>
        <member name="M:MIDRetail.DataCommon.ComputationVariableProfile.isDatabaseVariable(MIDRetail.DataCommon.eVariableCategory,System.Int32,MIDRetail.DataCommon.eCalendarDateType)">
            <summary>
            Returns a boolean value indicating if the variable is stored on the database 
            for the given type of data.
            </summary>
            <param name="aVarCateg">
            The eVariableCategory setting that identifies the type of data.
            </param>
            <param name="aVersionRID">
            The key of the version for the type of data.
            </param>
            <param name="aCalDateType">
            The eCalendarDateType for the type of data.
            </param>
            <returns>
            A boolean indicating if the store for the given PlanCellReference is eligible.
            </returns>
        </member>
        <member name="P:MIDRetail.DataCommon.ComputationVariableProfile.VariableName">
            <summary>
            Gets the name of this profile.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.ComputationVariableProfile.VariableCategory">
            <summary>
            Gets the eVariableCategory for this profile.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.ComputationVariableProfile.VariableStyle">
            <summary>
            Gets the eVariableStyle for this profile.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.ComputationVariableProfile.VariableAccess">
            <summary>
            Gets the eVariableAccess for this profile.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.ComputationVariableProfile.VariableScope">
            <summary>
            Gets the eVariableScope for this profile.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.ComputationVariableProfile.VariableWeekType">
            <summary>
            Gets the eVariableScope for this profile.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.ComputationVariableProfile.VariableTimeTotalType">
            <summary>
            Gets the eVariableTimeTotalType for this profile.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.ComputationVariableProfile.VariableSpreadType">
            <summary>
            Gets the eVariableSpreadType for this profile.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.ComputationVariableProfile.FormatType">
            <summary>
            Gets the eValueFormatType for this profile.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.ComputationVariableProfile.NumDecimals">
            <summary>
            Gets the int value of number of decimals for this profile.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.ComputationVariableProfile.NumDisplayDecimals">
            <summary>
            Gets the int value of number of displayed decimals for this profile.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.ComputationVariableProfile.DisplaySequence">
            <summary>
            Gets the int value of number of decimals for this profile.
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.ConsoleStatusBar.OverwriteConsoleMessage(System.String)">
            <summary>
            Renders a message in the console window that overwrites
            any previous message in the same location
            </summary>
            <param name="message">Message to be displayed in the console</param>
        </member>
        <member name="M:MIDRetail.DataCommon.ConsoleStatusBar.RenderConsoleProgress(System.Int32)">
            <summary>
            Draws a progress bar in a console window using a default character
            and maintaining the console window foreground color
            </summary>
            <param name="percentage">Percentage to be displayed on console</param>
        </member>
        <member name="M:MIDRetail.DataCommon.ConsoleStatusBar.RenderConsoleProgress(System.Int32,System.Char,System.ConsoleColor,System.String)">
            <summary>
            Draws a progress bar in a console window using a selected character
            to make up the progres bar elements. A message can be displayed below
            the console at the same time.
            </summary>
            <param name="percentage">Percentage to be displayed on console</param>
            <param name="progressBarCharacter">Character used to build progress bar</param>
            <param name="color">Color of progress bar</param>
            <param name="message">Message to be displayed below console</param>
        </member>
        <member name="T:MIDRetail.DataCommon.FilterHeaderOptions">
            <summary>
            Used to hold options for header filters, so we can easily add/modify options without changing parameters everywhere
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.DateProfile">
            <summary>
            DateProfile is a base class for the other date classes: 
            <see cref="T:MIDRetail.DataCommon.DayProfile"/>, <see cref="T:MIDRetail.DataCommon.WeekProfile"/>, <see cref="T:MIDRetail.DataCommon.PeriodProfile"/>, and  <see cref="T:MIDRetail.DataCommon.YearProfile"/>. 
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.DateProfile.ProfileStartDate">
            <summary>
            Gets or sets the beginning date of a week, period or year.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.DateProfile.Date">
            <summary>
            Gets or sets the gregorian date of a day.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.DateProfile.GregorianHashCode">
            <summary>
            Gets the Gregorian Hash Code associated with this profile.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.DateProfile.FiscalYear">
            <summary>
            Gets or sets the fiscal year.
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.DateProfile.#ctor(System.Int32)">
            <summary>
            Used to construct an instance of the class. 
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.DateProfile.ProfileType">
            <summary>
            Returns the eProfileType of this profile.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.DayProfile">
            <summary>
            Holds all the information for a particular day, including a reference to the days
            fiscal period and fiscal week.
            KEY: Julian Date YYYYDDD
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.DayProfile.Period">
            <summary>
            Gets or sets the PeriodProfile in which this day resides
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.DayProfile.Week">
            <summary>
            Gets or sets the WeekProfile in which this day resides
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.DayProfile.DayInYear">
            <summary>
            Gets the Julian day in year
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.DayProfile.DayInWeek">
            <summary>
             Gets or sets the fiscal day in week
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.DayProfile.YearDay">
            <summary>
            Gets or sets the year/day which is formatted as YYYYDDD.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.DayProfile.DayOfWeek">
            <summary>
            Gets or sets the DayOfWeek enumeration.
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.DayProfile.#ctor(System.Int32)">
            <summary>
            Used to construct an instance of the class. 
            </summary>
            <param name="aKey"></param>
        </member>
        <member name="M:MIDRetail.DataCommon.DayProfile.GetHashCode">
            <summary>
            Gets a hash code for this class based upon the gregorian YYYYMMDD.
            </summary>
            <returns> A hash value. </returns>
        </member>
        <member name="M:MIDRetail.DataCommon.DayProfile.GetAltHashCode">
            <summary>
            Gets a hash code for this class based upon fiscal YYYYDDD.
            </summary>
            <returns> A hash value. </returns>
        </member>
        <member name="M:MIDRetail.DataCommon.DayProfile.Text">
            <summary>
            returns a text representation of the day.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MIDRetail.DataCommon.DayProfile.ProfileType">
            <summary>
            Returns the eProfileType of this profile.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.WeekProfile">
            <summary>
            Holds all of the information for a particular fiscal week
            KEY: First Day of Week as a Julian Date YYYYDDD
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.WeekProfile.Period">
            <summary>
            Gets or sets the PeriodProfile in which this day resides
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.WeekProfile.WeekInPeriod">
            <summary>
            Gets or sets the fiscal week in a period.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.WeekProfile.DaysInWeek">
            <summary>
            Gets or sets the number of days in a week.  Default is 7.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.WeekProfile.YearWeek">
            <summary>
            Gets or sets the year/week which is formatted as YYYYWW.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.WeekProfile.Days">
            <summary>
            Gets a profileList of days contained within the Week.
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.WeekProfile.#ctor(System.Int32)">
            <summary>
            Used to construct an instance of the class. 
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.WeekProfile.ToString">
            <summary>
            Returns the Text() value for this profile.
            </summary>
            <returns>A string containing the Text() value.</returns>
        </member>
        <member name="M:MIDRetail.DataCommon.WeekProfile.GetHashCode">
            <summary>
            Gets a hash code for the class based upon fiscal YYYYPPWW.
            Where PP is the period in the year and WW is the week in the period.
            </summary>
            <returns>A hash code.</returns>
        </member>
        <member name="M:MIDRetail.DataCommon.WeekProfile.GetAltHashCode">
            <summary>
            Gets a hash code for the class based upon fiscal YYYYWW.
            Where WW is week in year.
            </summary>
            <returns>A hash code.</returns>
        </member>
        <member name="P:MIDRetail.DataCommon.WeekProfile.ProfileType">
            <summary>
            Returns the eProfileType of this profile.
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.WeekProfile.Text">
            <summary>
            returns a text representation of the week.
            </summary>
            <returns></returns>
        </member>
        <member name="T:MIDRetail.DataCommon.PeriodProfile">
            <summary>
            Holds all of the information for a particular fiscal period
            KEY: First Day of Week as a Julian Date YYYYDDD
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.PeriodProfile.FiscalPeriod">
            <summary>
            Gets or sets the fiscal period number which is the fiscal number for the month, quarter, season.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.PeriodProfile.Name">
            <summary>
            Gets or sets the period's name.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.PeriodProfile.Abbreviation">
            <summary>
            Gets or sets the period's abbreviation.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.PeriodProfile.YearPeriod">
            <summary>
            Gets or sets year/period number where the period number is the fiscal number for the month, quarter, season.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.PeriodProfile.Weeks">
            <summary>
            returns a profile list of weeks contained within the period
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.PeriodProfile.ChildPeriodList">
            <summary>
            List of subordinate Periods. (Year will contain seasons, seasons will contain Quarters and so on.)
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.PeriodProfile.BeginDateJulian">
            <summary>
            First day of period as a julian date, YYYYDDD
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.PeriodProfile.LastWeekDateJulian">
            <summary>
            The julian date of the last week of the period.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.PeriodProfile.PeriodProfileType">
            <summary>
            Declares which type of Period this is: Year, Season, Quarter, or Month
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.PeriodProfile.#ctor(System.Int32)">
            <summary>
            Used to construct an instance of the class. 
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.PeriodProfile.ToString">
            <summary>
            Returns the Text() value for this profile.
            </summary>
            <returns>A string containing the Text() value.</returns>
        </member>
        <member name="M:MIDRetail.DataCommon.PeriodProfile.GetHashCode">
            <summary>
            Gets a hash code for the class based upon fiscal YYYYPP.
            Where PP is the period in the year.
            </summary>
            <returns>A hash code.</returns>
        </member>
        <member name="P:MIDRetail.DataCommon.PeriodProfile.ProfileType">
            <summary>
            Returns the eProfileType of this profile.
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.PeriodProfile.Text">
            <summary>
            returns a text representation of the period.
            </summary>
            <returns></returns>
        </member>
        <member name="T:MIDRetail.DataCommon.MonthProfile">
            <summary>
            KEY: First Day month as a Julian Date YYYYDDD
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.MonthProfile.#ctor(System.Int32)">
            <summary>
            Used to construct an instance of the class. 
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.QuarterProfile">
            <summary>
            KEY: YYYYQQ
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.QuarterProfile.#ctor(System.Int32)">
            <summary>
            Used to construct an instance of the class. 
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.SeasonProfile">
            <summary>
            KEY: YYYYS
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.SeasonProfile.#ctor(System.Int32)">
            <summary>
            Used to construct an instance of the class. 
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.YearProfile">
            <summary>
            Holds the number of weeks in a particular fiscal Year
            KEY: YYYY
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.YearProfile.Periods">
            <summary>
            Gets or sets the array of periods in a fiscal year.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.YearProfile.CalendarModelRID">
            <summary>
            Hold the Calendar Model RID this year belongs to
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.YearProfile.#ctor(System.Int32)">
            <summary>
            Used to construct an instance of the class. 
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.YearProfile.GetHashCode">
            <summary>
            Gets a hash code for the class based upon fiscal YYYY.
            </summary>
            <returns>A hash code.</returns>
        </member>
        <member name="T:MIDRetail.DataCommon.Week53Profile">
            <summary>
            class to represent a year with 53 week selection
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.Week53Profile.PeriodSeq">
            <summary>
            Gets or sets the period chosen
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.Week53Profile.CalendarModelRID">
            <summary>
            Gets or Sets the model RID for this year/period
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.Week53Profile.#ctor(System.Int32)">
            <summary>
            Used to construct an instance of the class. 
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.Week53Profile.GetHashCode">
            <summary>
            Gets a hash code for the class based upon fiscal YYYY.
            </summary>
            <returns>A hash code.</returns>
        </member>
        <member name="P:MIDRetail.DataCommon.Week53Profile.ProfileType">
            <summary>
            Returns the eProfileType of this profile.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.DateRangeProfile">
            <summary>
            Used to communicate date range information
            KEY: 300,000 + DRP offeset (offeset begins at 0)
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.DateRangeProfile.StartDateKey">
            <summary>
            Gets or sets the start of the date range
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.DateRangeProfile.EndDateKey">
            <summary>
            Gets or sets the end of the date range
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.DateRangeProfile.RelativeTo">
            <summary>
            Gets or sets for dynasmic dates, what date they are relative to: Current, Plan, or Store Open.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.DateRangeProfile.SelectedDateType">
            <summary>
            Gets or sets the date type format that the start and end dates are in
            </summary>
            <remarks>
            day - YYYYJJJ
            week - YYYYJJJ
            period - YYYYJJJ
            month - YYYYJJJ
            </remarks>
        </member>
        <member name="P:MIDRetail.DataCommon.DateRangeProfile.DateRangeType">
            <summary>
            Gets or Sets whether the date is Static, Dynamic, or Reoccurring.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.DateRangeProfile.DisplayDate">
            <summary>
            Contains the display date string for this date range
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.DateRangeProfile.Name">
            <summary>
            Optional name for the date range.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.DateRangeProfile.InternalAnchorDate">
            <summary>
            Used internally by the calendar to determine the display date 
            when RelativeToPlan or RelativeToStoreOpen is selected.
            DO NOT USE this as the Anchor date for a dynamic date range. This is only for the internal use of 
            the Calendar class. When needing to set the anchor date in a calendar method, the method should have 
            a paramenter to house the anchor date.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.DateRangeProfile.IsDynamicSwitch">
            <summary>
            Is this date range a Dynamic Switch date?
            When the selected beginning week is before or equal to the Current Week, then the date is considered 
            static and will not change. Once the selected beginning week has passed the Current Week, 
            then the date is considered Dynamic and Relative to Current.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.DateRangeProfile.DynamicSwitchDate">
            <summary>
            Contains the weekProfile key (julian date) for the week the switch from static to 
            dynamic will take place.
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.DateRangeProfile.#ctor(System.Int32)">
            <summary>
            Used to construct an instance of the class. 
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.DateRangeProfile.GetHashCode">
            <summary>
            Gets a hash code for the class based upon the Key.
            </summary>
            <returns>A hash code.</returns>
        </member>
        <member name="M:MIDRetail.DataCommon.DateRangeProfile.CompareTo(MIDRetail.DataCommon.DateRangeProfile)">
            <summary>
            Does NOT use Key as part of the compare.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:MIDRetail.DataCommon.DateRangeProfile.Equals(System.Object)">
            <summary>
            Uses Key as part of the compare.
            </summary>
            <param name="aObject"></param>
            <returns></returns>
        </member>
        <member name="M:MIDRetail.DataCommon.DateRangeProfile.op_Equality(MIDRetail.DataCommon.DateRangeProfile,MIDRetail.DataCommon.DateRangeProfile)">
            <summary>
            Uses Key as part of the compare.
            </summary>
            <param name="aDRP"></param>
            <param name="bDRP"></param>
            <returns></returns>
        </member>
        <member name="P:MIDRetail.DataCommon.DateRangeProfile.ProfileType">
            <summary>
            Returns the eProfileType of this profile.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.MIDDbParameter">
            <summary>
            Generic class to communicate database parameter information to specific databases.
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.MIDDbParameter.#ctor">
            <summary>
            Creates a new instance of MIDDbParameter
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.MIDDbParameter.#ctor(System.String,System.Object)">
            <summary>
            Creates a new instance of MIDDbParameter
            </summary>
            <param name="param_Name"></param>
            <param name="param_Value"></param>
        </member>
        <member name="M:MIDRetail.DataCommon.MIDDbParameter.#ctor(System.String,System.Object,MIDRetail.DataCommon.eDbType)">
            <summary>
            Creates a new instance of MIDDbParameter
            </summary>
            <param name="param_Name"></param>
            <param name="param_Value"></param>
            <param name="dB_Type"></param>
        </member>
        <member name="M:MIDRetail.DataCommon.MIDDbParameter.#ctor(System.String,System.Object,MIDRetail.DataCommon.eDbType,MIDRetail.DataCommon.eParameterDirection)">
            <summary>
            Creates a new instance of MIDDbParameter
            </summary>
            <param name="param_Name"></param>
            <param name="param_Value"></param>
            <param name="dB_Type"></param>
            <param name="direction"></param>
        </member>
        <member name="M:MIDRetail.DataCommon.MIDDbParameter.#ctor(System.String,System.Object,MIDRetail.DataCommon.eDbType,MIDRetail.DataCommon.eParameterDirection,System.String)">
            <summary>
            Creates a new instance of MIDDbParameter
            </summary>
            <param name="param_Name"></param>
            <param name="param_Value"></param>
            <param name="dB_Type"></param>
            <param name="direction"></param>
            <param name="typeName">Used with structured parameters</param>
        </member>
        <member name="M:MIDRetail.DataCommon.MIDDbParameter.#ctor(System.String,MIDRetail.DataCommon.eDbType,System.Int32,System.String)">
            <summary>
            Creates a new instance of MIDDbParameter
            </summary>
            <param name="param_Name"></param>
            <param name="dB_Type"></param>
            <param name="size"></param>
            <param name="field_Name"></param>
        </member>
        <member name="M:MIDRetail.DataCommon.MIDDbParameter.#ctor(System.String,MIDRetail.DataCommon.eDbType,System.Int32,System.String,MIDRetail.DataCommon.eParameterDirection)">
            <summary>
            Creates a new instance of MIDDbParameter
            </summary>
            <param name="param_Name"></param>
            <param name="dB_Type"></param>
            <param name="size"></param>
            <param name="field_Name"></param>
            <param name="direction"></param>
        </member>
        <member name="P:MIDRetail.DataCommon.MIDDbParameter.ParameterName">
            <summary>
            Gets or sets the name of the database parameter.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.MIDDbParameter.Value">
            <summary>
            Gets or sets the value of the database parameter.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.MIDDbParameter.DbType">
            <summary>
            Gets or sets the type of the database parameter.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.MIDDbParameter.Direction">
            <summary>
            Gets or sets the direction of the database parameter.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.MIDDbParameter.Size">
            <summary>
            Gets or sets the size of the value in the database parameter.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.MIDDbParameter.ParamFieldName">
            <summary>
            Gets or sets the parameter field name of the database parameter.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.MIDDbParameter.TypeName">
            <summary>
            Gets or sets the parameter type name of the database parameter.
            Used with structured parameters
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.EditMsgs">
            <summary>
            Summary description for EditMsgs.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.StyleEnum">
            <summary>
            Used to show the four main style groups.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.eActionOrigin">
            <summary>
            denotes where the action/method/workflow originated from.
            Used to help determine if Assortment or group allocation selected headers should used.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.eEnqueueStatus">
            <summary>
            Enumeration of Enqueue Status
            </summary>
            <remarks>Enqueued: Enqueue was created by at a specified time by a given user on a given thread in a given transaction</remarks>
            <remarks>TentativelyEnqueued: Enqueue exists for a given user on a given thread in a given transaction</remarks>
            <remarks>NotEnqueued: No Enqueue exists</remarks>
            <remaarks>EnqueueConflict: An enqueue exists but for a different user, thread, transaction or time</remaarks>
        </member>
        <member name="T:MIDRetail.DataCommon.eHeaderType">
            <summary>
            Used to communicate the type of a header
            </summary>
            <remarks>
            Be sure to also maintain eSizeHeaderType and eNonSizeHeaderType
            </remarks>
        </member>
        <member name="T:MIDRetail.DataCommon.eHeaderAllocationStatus">
            <summary>
            Used to communicate the allocation status of a header
            </summary>
            <remarks>
            Be sure to also maintain eSizeHeaderAllocationStatus and eNonSizeHeaderAllocationStatus
            </remarks>
        </member>
        <member name="T:MIDRetail.DataCommon.eSizeHeaderAllocationStatus">
            <summary>
            Used to communicate the allocation status of a header for size
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.eNonSizeHeaderAllocationStatus">
            <summary>
            Used to communicate the allocation status of a non-size header
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.eHeaderShipStatus">
            <summary>
            Used to communicate the ship status of a header and its allocation
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.eHeaderIntransitStatus">
            <summary>
            Used to communicate the intransit status of a header.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.eRuleMethodOnlyValidOnTotalComponent">
            <summary>
            Rules that are only valid on a total component (see also eRuleTypeOnlyValidOnTotalComponent)
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.ePeriodName">
            <summary>
            Used to define the names of the default 4-5-4 periods on the calendar.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.ePeriodAbbreviation">
            <summary>
            Used to define the abbreviation of the default 4-5-4 periods on the calendar.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.eQuarterName">
            <summary>
            Used to define the names of the default Quarters on the calendar.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.eQuarterAbbreviation">
            <summary>
            Used to define the abbreviation of the default Quarters on the calendar.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.eSeasonName">
            <summary>
            Used to define the names of the default Quarters on the calendar.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.eSeasonAbbreviation">
            <summary>
            Used to define the abbreviation of the default Quarters on the calendar.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.eMethodType">
            <summary>
            A list of the valid workflow actions and methods. 
            </summary>
            <remarks>
            When updating this enum, also update either eAllocationMethodType or eForecastMethodType (whichever
            is the appropriate application).  If the new method type has a user interface, also update eMethodTypeUI.
            </remarks>
        </member>
        <member name="T:MIDRetail.DataCommon.eMethodTypeUI">
            <summary>
            This enum is a subset of the eMethodType
            </summary>
            <remarks>
            The types in this enum represent the methods that have a user interface.  In other words, the actions
            associated with these methods have optional or required user inputs.
            </remarks>
        </member>
        <member name="T:MIDRetail.DataCommon.eForecastMethodType">
            <summary>
            This enum is a subset of the eMethodType
            </summary>
            <remarks>
            The types in this enum represent forecast methods and actions
            </remarks>
        </member>
        <member name="T:MIDRetail.DataCommon.eAllocationMethodType">
            <summary>
            This enum is a subset of the eMethodType
            </summary>
            <remarks>
            The types in this enum represent allocation methods and actions.
            See also:  eAllocationMethodType_IT_Updt.
            See also:  eAllocationActionType.
            </remarks>
        </member>
        <member name="T:MIDRetail.DataCommon.eAssortmentMethodType">
            <summary>
            This enum is a subset of the eMethodType
            </summary>
            <remarks>
            The types in this enum represent assortment methods and actions.
            </remarks>
        </member>
        <member name="T:MIDRetail.DataCommon.eSizeMethodType">
            <summary>
            This enum is a subset of the eMethodType which contains all size methods
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.eNoHeaderMethodType">
            <summary>
            This enum is a subset of the eMethodType which contains methods that do not require headers
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.eFilteredMethodType">
            <summary>
            This enum is a subset of the eMethodType
            </summary>
            <remarks>
            The types in this enum represent the methods that have a filter.
            </remarks>
        </member>
        <member name="T:MIDRetail.DataCommon.eToleranceMethodType">
            <summary>
            This enum is a subset of the eMethodType
            </summary>
            <remarks>
            The types in this enum represent the methods that allow a tolerance.
            </remarks>
        </member>
        <member name="T:MIDRetail.DataCommon.eBalanceStepMethodType">
            <summary>
            This enum is a subset of the eMethodType
            </summary>
            <remarks>
            The types in this enum represent the methods that allow a step to be balanced in a workflow.
            </remarks>
        </member>
        <member name="T:MIDRetail.DataCommon.eForecastVariableMethodType">
            <summary>
            This enum is a subset of the eMethodType
            </summary>
            <remarks>
            The types in this enum represent forecast methods that can accept an override variable
            </remarks>
        </member>
        <member name="T:MIDRetail.DataCommon.eComponentMethodType">
            <summary>
            This enum is a subset of the eMethodType
            </summary>
            <remarks>
            The types in this enum represent the methods that allow a component.
            </remarks>
        </member>
        <member name="T:MIDRetail.DataCommon.eAllocationActionType">
            <summary>
            This enum is a subset of the eAllocationMethodType
            </summary>
            <remarks>
            The types in this enum represent allocation actions.
            </remarks>
        </member>
        <member name="T:MIDRetail.DataCommon.eAssortmentAllocationActionType">
            <summary>
            This enum is a list of Assortment Actions
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.eAssortmentActionType">
            <summary>
            This enum is a list of Assortment Actions
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.eAllocationMethodType_IT_Updt">
            <summary>
            This enum is a subset of the eMethodType and eAllocationMethodType
            </summary>
            <remarks>
            The types in this enum represent intransit update methods and actions.
            </remarks>
        </member>
        <member name="T:MIDRetail.DataCommon.eRuleType">
            <summary>
            Enumerates the allocation rule types.
            </summary>
            <remarks>
            This is the master allocation rule type enum.  All rule types are represented here. The following enums are
            subsets of this master and indicate where enum value is valid:
            <list type="bullet">
            <item>eVelocityRuleType: Identifies the rules that may be assigned when using velocity.</item>
            <item>eBasisAllocationRuleType: Identifies the rules that may be assigned when using a basis allocation.</item>
            <item>eStoreFilterRuleType: Identifies the rules that may be assiged when using a store filter.</item>
            <item>eSizeStoreFilterRuleType: Identifies the size rules that may be assigned when using a store filter.</item>
            <item>eSizeNeedRuleType: Identifies the size rules that may be assigned when allocating by size need.</item>
            <item>eBasisSizeAllocationRuleType: Identifies the size rules that may be assigned when using a basis allocation to allocate sizes.</item>
            <item>eFillSizeHolesRuleType: Identifies the size rules that may be assigned when allocating sizes by Fill Size Holes.</item>
            </list></remarks>
        </member>
        <member name="T:MIDRetail.DataCommon.eVelocityRuleType">
            <summary>
            This is a subset of enumerations from eRuleType that are valid in Velocity.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.eRuleMethodType">
            <summary>
            This is a subset of enumerations from eRuleType that are valid when using the Basis Allocation Method.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.eStoreFilterRuleType">
            <summary>
            This is a subset of enumerations from eRuleType that are valid when using a store filter to allocate.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.eSizeStoreFilterRuleType">
            <summary>
            This is a subset of enumerations from eRuleType that are valid when using a store filter to allocate a size.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.eRuleTypeOnlyValidOnTotalComponent">
            <summary>
            Rules that are only valid on a total component  (see also eRuleMethodOnlyValidOnTotalComponent)
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.eFillSizeHolesRuleType">
            <summary>
            This is a subset of enumerations from eRuleType that are valid when using the Fill Size Holes method.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.eBasisSizeMethodRuleType">
            <summary>
            This is a subset of enumerations from eRuleType that are valid when using the Basis Size method.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.eSizeRuleType">
            <summary>
            This is a subset of enumerations from eRuleType that are valid when using the Size Override method.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.eSizeNeedRuleType">
            <summary>
            This is a subset of enumerations from eRuleType that are valid when allocating by size need.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.eAllocationSelectionViewType">
            <summary>
            This lists the Types of Views for the Allocation Selection
            Note:  The values are also MIDTextType values
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.eAllocationStyleViewGroupBy">
            <summary>
            This lists the GroupBy options for the allocation Style view
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.eAllocationSizeViewGroupBy">
            <summary>
            This lists the GroupBy options for the allocation Size view
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.eAllocationSizeView2ndGroupBy">
            <summary>
            This lists the 2nd GroupBy options for the allocation Size view
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.eAllocationSummaryViewGroupBy">
            <summary>
            This lists the GroupBy options for the allocation Summary view
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.eAllocationAssortmentViewGroupBy">
            <summary>
            This lists the GroupBy options for the allocation Assortment view
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.eAllocationWaferVariable">
            <summary>
            Enumeration of the valid allocation wafer variables
            </summary>
            <remarks>eAllocationVelocityViewVariable, eAllocationVelocityVariableDefault, eAllocationStyleViewVariable and eAllocationSummaryViewVariable are all subsets of this enumeration</remarks>
        </member>
        <member name="T:MIDRetail.DataCommon.eAllocationSecondaryWaferVariable">
            <summary>
            Enumeration of the secondary wafer variables
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.eAllocationVelocityViewVariable">
            <summary>
            Enumeration of the valid Velocity View Variables
            </summary>
            <remarks>This enumberation is a subset of the eAllocationWaferVariable. eAllocationVelocityViewVariableDefault is a subset of this enumeration.</remarks>
        </member>
        <member name="T:MIDRetail.DataCommon.eAllocationVelocityViewVariableDefault">
            <summary>
            Enumeration of the default velocity view variables
            </summary>
            <remarks>This enumeration is a subset of the eAllocationVelocityViewVariable.</remarks>
        </member>
        <member name="T:MIDRetail.DataCommon.eAllocationStyleViewVariable">
            <summary>
            Enumeration of the valid Style View Variables
            </summary>
            <remarks>
            This enumeration is a subset of the eAllocationWaferVariable.
            </remarks>
        </member>
        <member name="T:MIDRetail.DataCommon.eAllocationSummaryViewVariable">
            <summary>
            Enumeration of the valid Summary View Variables
            </summary>
            <remarks>This enumeration is a subset of the eAllocationWaferVariable</remarks>
        </member>
        <member name="T:MIDRetail.DataCommon.eAllocationQuickFilterVariable">
            <summary>
            Enumeration of the valid allocation quick filter variables
            </summary>
            <remarks>This enumeration is a subset of eAllocationWaferVariable</remarks>
        </member>
        <member name="T:MIDRetail.DataCommon.eAllocationSizeViewVariable">
            <summary>
            Enumeration of the valid allocation size variables
            </summary>
            <remarks>This enumeration is a subset of eAllocationWaferVariable</remarks>
        </member>
        <member name="T:MIDRetail.DataCommon.eMIDStorageTypeCode">
            <summary>
            Storage Type Codes 
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.HeaderHierarchyLevel">
            <summary>
            Enumeration of the Hierarchy Levels for a header
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.eAllocationDatabaseStoreVariables">
            <summary>
            Enumeration of the valid Database variables for Store Allocation
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.eDatabaseBinKeyType">
            <summary>
            Enumeration of the valid key types for a database bin table
            </summary>
            <remarks>See also:  DatabaseBinKey, its derived classes (HistoryDatabaseBinKey, HeaderDatabaseBinKey, etc.) and DatabaseBinTable[T]</remarks>
        </member>
        <member name="T:MIDRetail.DataCommon.eDatabaseHeaderBinKeyType">
            <summary>
            Enumeration of the valid Header Key types for database bin tables where only the HdrRID is the key
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.eMIDVariableModelType">
            <summary>
            Variable Model Type Codes used as the key to identify the MID Variable Model definitions for variables
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.eAllocationWaferVariableFormat">
            <summary>
            Enumeration of the valid allocation wafer variable formats
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.eStoreOTS_NeedParmPosition">
            <summary>
            Enumeration of the positions where need parameters reside for ApplicationSessionTransation GetStoreOTS_Need method.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.eWorkUpBuyAllocationType">
            <summary>
            Identifies buy allocation type
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.eAllocationStatusFlag">
            <summary>
            eAllocationStatusFlag tracks the progress of the allocation process. 
            </summary>
            <remarks>
            These flags track the progress of the allocation:
            <list type="bullet">
            <item>ReceivedInBalance:  True indicates Allocation Header is ready to be allocated</item>
            <item>BottomUpSizePerformed:  True indicates a bottom-up size allocation process has occurred</item>
            <item>RulesDefinedAndProcessed:  True indicates Rules have been defined and processed</item>
            <item>NeedAllocationPerformed:  True indicates Style Need Allocation has occurred</item>
            <item>PackBreakoutByContent:  True indicates packs were broken out based on pack content</item>
            <item>BulkSizeBreakoutPerformed:  True indicates a top-down size allocation process has occurred</item>
            <item>ReleaseApproved:  True indicates the Allocation Header and its store allocation ready to be released</item>
            <item>Released:  True indicates the Allocation Header and its store allocation ready to be picked and shipped to stores</item>
            <item>UnitsAllocated:  True indicates units have been allocated; False indicates no units have been allocated</item>
            <item>GradeDefinitionOverride:  True indicates the Grade Definitions were overridden (are not the default); False indicates the Grade definitions are the default definitions</item>
            <item>AllocationFromMultiHeader:  True indicates this header's allocation was split from the allocation of a multi header; false indicates this header's allocation was not developed on a multi-header.</item>
            <item>ReapplyTotalAllocationPerformed: True indicates Reapply Total Allocation Has been performed for this header.</item>
            <item>IdentifyIncludeStores: True indicates to identify stores that may be included in the allocation.</item>
            <item>ImoCriteriaOverridden: True indicates VSW/IMO criteria was overridden by Override Method</item>
            <item>LoadImoCriteria:  True indicates IMO Criteria must be loaded</item>
            <item>CalcVswColorIdealItemMin: True indicates to calculate the color ideal item minimum</item>
            <item>BalanceToVSW_Performed:  True indicates the Balance to VSW Action was successfully performed</item>
            <uten>StoreItemQtyIsLocked:  True indicates all store item quantities have been LOCKED globally by a Balance to VSW Action; set to false whenever store allocations change after the Balance to VSW occurs</uten>
            </list> 
            </remarks>
        </member>
        <member name="T:MIDRetail.DataCommon.eColorStatusFlag">
            <summary>
            eColorFlag tracks the progress of the color allocation process. 
            </summary>
            <remarks>
            These flags track the progress of the color allocation:
            <list type="bullet">
            <item>CalcVswSizeConstraints:  True indicates VSW Size Constraints must be calculated</item>
            </list> 
            </remarks>
        </member>
        <member name="T:MIDRetail.DataCommon.eShippingStatusFlag">
            <summary>
            eShippingStatusFlag tracks the shipping status of an allocation. 
            </summary>
            <remarks>
            These flags track the shipping status:
            <list type="bullet">
            <item>ShippingStarted:  True indicates at least 1 unit has been shipped to a store and charged to its onhand</item>
            <item>ShippingComplete: True indicates all units have been shipped to stores and charged to each store's onhand</item>
            <item>ShippingOnHold: True indicates no changes can occur.</item>
            </list> 
            </remarks>
        </member>
        <member name="T:MIDRetail.DataCommon.eBalanceStatusFlag">
            <summary>
            eBalanceStatusFlag tracks the allocation balance. 
            </summary>
            <remarks>
            These flags track the balance status of the allocation:
            <list type="bullet">
            <item>SizeReceiptsBalanceToColor: True indicates for all colors, the color receipts balance to the total of size receipts within that color</item>
            <item>ColorReceiptsBalanceToBulk: True indicates that bulk receipts balance to total of all color receipts</item>
            <item>PackSizesBalanceToPackColor: True indicates for all packs and for each color in that pack the size content of the pack balances to the color content</item>
            <item>PackColorsBalanceToPack: True indicates for all packs, the color content balances to the total pack content</item>
            <item>PackBulkReceiptsBalanceToTotal: True indicates sum of all pack receipts plus total bulk receipts balance to total receipts</item>
            <item>PackAllocationInBalance:  True indicates that packs to allocate = packs allocated for all packs</item>
            <item>BulkColorAllocationInBalance:  True indicates that units to allocate = units allocated for all bulk colors</item>
            <item>BulkPlusPackAllocationInBalance: True indicates for all stores bulk plus pack allocation equals store's total allocation</item>
            <item>BulkSizeAllocationInBalance:  True indicates units to allocate = units allocated for all width-sizes in every bulk color</item>
            <item>StoreSizeAllocationsInBalanceToColor: True indicates units allocated to store-color-size balance to units allocated to store-color</item>
            <item>BulkSizeAllocations_GT_SizeReceipts: True indicates Size Units allocated GT Size Receipts for some color-size; note BulkSizeAllocationInBalance overrides this flag when it is true</item>
            <item>BulkColorAllocations_GT_ColorReciepts: True indicates Color Units allocated GT Color Receipts for some color; note BulkColorAllocationInBalance overrides this flag when it is true</item>
            <item>AtLeastOneSizeAllocated: True indicates at least one size in at least one color has units allocated</item>
            </list>
            </remarks>
        </member>
        <member name="T:MIDRetail.DataCommon.eAllocationStoreGeneralAuditFlag">
            <summary>
            eAllocationStoreGeneralAuditFlag audits each store's total allocation resulting from an allocation process. 
            </summary>
            <remarks>
            These flags provide a general audit of each store's allocation:
            <list type="bullet">
            <item>PercentNeedLimitReached:  True indicates store reached the user specified Percent Need Limit during a need allocation process.</item>
            <item>CapacityMaximumReached:  True indicates store reached its capacity maximum</item>
            <item>PrimaryMaximumReached:  True indicates store reached its primary maximum allocation</item>
            <item>MayExceedMax:  True indicates that store maximum allocation may be exceeded if necessary</item>
            <item>MayExceedPrimary:  True indicates that the primary allocation is not an absolute maximum</item>
            <item>MaxExceedCapacity:  True indicates that the capacity of a store may be exceeded</item>
            <item>AllocationPriority: True indicates store has allocation priority (ie. shipping priority)</item>
            <item>Eligible: True indicates store is eligible</item>
            <item>IncludeStoreInAllocation: True indicates store is included in IMO header allocation</item>
            </list>
            </remarks>
        </member>
        <member name="T:MIDRetail.DataCommon.eAllocationStoreDetailAuditFlag">
            <summary>
            eAllocationStoreDetailAuditFlag audits each store's detail component allocation resulting from an allocation process. 
            </summary>
            <remarks>
            These flags provide a detail audit of each store's allocation:
            <list type="bullet">
            <item>ManuallyAllocated:  True indicates user manually allocated some units.</item>             
            <item>AutoAllocated:  True indicates some units were allocated by an automatic allocation process</item>
            <item>ChosenRuleAcceptedByHeader:  True indicates chosen rule was accepted on the Header.</item>
            <item>Out:  True indicates store and allocation component were "outted" by special rules</item>
            <item>Need:  True indicates that units were allocated based on need.</item>
            <item>FilledSizeHole:  True indicates size holes were filled based on size need</item>
            <item>Locked: true indicates units allocated are locked from changes; false indicates units allocated may be changed.</item>
            <item>TempLock: true indicates units allocated are temporarily locked from changes; false indicates units allocated may be changed</item>
            <item>RuleAllocationFromParentComponent: true indicates rule allocation is partially or completely from parent component; false indicates parent component did not participate in allocation.</item>
            <item>RuleAllocationFromChildComponent: true indicates rule allocation is partially or completely from children components; false indicates children components did not contribute to allocation.</item>
            <item>RuleAllocationFromChosenRule: true indicates rule allocationis partially or completely from the chosen rule for this component; false indicates chosen rule for componenent did not contribute to allocation.</item>
            <item>AllocationFromBottomUpSize: true indicates allocation is partially or completely from a bottom up size allocation; false indicates bottom up size allocation did not contribute to allocation</item>
            <item>AllocationFromPackContentBreakOut: true indicates allocation is partially or completely from an allocation by pack content; false indicates pack content not used to determine allocation.</item>
            <item>AllocationFromBulkSizeBreakOut: true indicates allocation is partially or completely from a breakout of the color by size; false indicates breakout of color by size not used to determine allocation.</item>
            <item>AllocationModifiedAfterMultiHeaderSplit: true indicates header allocation for this store was modified after this header was split off of a Multi-Header; false indicates no modifications occurred after this header was split from a multi-header</item>
            <item>ItemValueManuallyAllocation: true indicates a manual change to the store quantity (Item) was made</item>
            <item>RuleAllocationFromGroup: true indicates rule allocation is partially or compoletely from the the Group Allocation Component</item>
            <item>ChosenRuleAcceptedByGroup: true indicates chosen rule was accepted by Group Allocation (when Header is part of Group Allocation)</item>
            <item>ItemQtyIsLocked:  True indicates VSW Balance occurred and this store's item quantity was locked; False: item qty is not locked (NOTE: only applies for total store, cannot lock a component's item qty independent of other components)</item>
            </list>
            </remarks>
        </member>
        <member name="T:MIDRetail.DataCommon.eAllocationTypeFlag">
            <summary>
            eAllocationTypeFlag indicates the allocation header type.
            </summary>
            <remarks>
            These flags identify the allocation type:
            <list type="bullet">
            <item>IsDummy: True indicates this header as a "dummy"</item>
            <item>HasPrimaryAllocation:  True indicates this allocation header is subordinate to a primary allocation</item>
            <item>HasSecondaryAllocation:  True indicates this allocation is the primary allocation for a secondary allocation</item>
            <item>WorkUpBulkColorBuy: True indicates system to calculate a recommended color buy based on color needs.</item>             
            <item>WorkUPBulkSizeBuy: True indicates system to calculate a recommended size buy based on size needs.</item>
            <item>WorkUpPackColorBuy:  True indicates system to calculate a recommended pack-color buy based on color needs.</item>
            <item>WorkUPPackSizeBuy: True indicates system to calculate a recommended pack-size buy based on size needs</item>
            <item>Reserve:  True indicates this was a basic replenishment allocation</item>
            <item>MultiHeader: True indicates this Header describes a multi-header allocation</item>
            <item>Receipt: True indicates this header describes a receipt in the warehouse</item>
            <item>PurchaseOrder: True indicates this header is associated with a purchase order</item>
            <item>ASN: True indicates this header describes an Automatic Ship Notice</item>
            <item>DropShip: True indicates this header describes a drop shipment.</item>
            <item>InUse: True indicates this header belongs to a MultiHeader</item>
            <item>BulkIsDetail: True indicates that bulk is subordinate to the DetailType; false indicates bulk is an equal of Detail type.  True indicates bulk is processed after all packs; false, indicates that bulk may be processed before packs that are allocated by content.</item>
            <item>WorkUpTotalBuy: True indicates the system to calculate a recommended Total store buy based on store need.</item>
            <item>IsInterfaced: True indicates header was added via an interface; false indicates header was added manually</item>
            </list>
            </remarks>
        </member>
        <member name="T:MIDRetail.DataCommon.eAllocationWaferCellFlag">
            <summary>
            Flag identifies wafer "cell" conditions.  Note:  Flag values correspond to the bits in a uiny
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.eSQL_StructureType">
            <summary>
            Enumeration of the SQL Structure types used to hold an allocation
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.eIntransitUpdateStatusFlag">
            <summary>
            eIntransitUpdateStatusFlag tracks the status of intransit updates
            </summary>
            <remarks>
            These flags track the intransit status:
            <list type="bullet">
            <item>StyleIntransitUpdated:  True indicates each store's total allocation has updated total intransit</item>
            <item>BulkColorIntransitUpdated:  True indicates each store's bulk color allocations have updated the appropriate color intransit</item>
            <item>BulkSizeIntransitUpdated:  True indicates each store's bulk color-width-size allocations have updated the appropriate color-width-size intransit</item>
            </list>
            </remarks>
        </member>
        <member name="T:MIDRetail.DataCommon.eIntransitBy">
            <summary>
            Describes the ways in which to read intransit.
            </summary>
            <remarks>
            Intransit can be read and summarized as follows:
            <list type="bullet">
            <item>Total:  Read intransit for a given hierarchy node and summarize as a single total for each store within each day.</item>
            <item>Colors:  Read intransit for a given hierarchy node and summarize by color for each store within each day.</item>
            <item>SizesWithinColors: Read intransit for a given hierarchy node and summarize by size witin color for each store within each day.</item>
            <item>Sizes: Read intransit for a given hierarchy node and summarize by size for each store within each day.</item>
            </list></remarks>
        </member>
        <member name="T:MIDRetail.DataCommon.eCommittedBy">
            <summary>
            Describes the ways in which to read committed.
            </summary>
            <remarks>
            Committed can be read and summarized as follows:
            <list type="bullet">
            <item>Total:  Read committed for a given hierarchy node and summarize as a single total for each store within each day.</item>
            <item>Colors:  Read committed for a given hierarchy node and summarize by color for each store within each day.</item>
            <item>SizesWithinColors: Read committed for a given hierarchy node and summarize by size witin color for each store within each day.</item>
            <item>Sizes: Read committed for a given hierarchy node and summarize by size for each store within each day.</item>
            </list></remarks>
        </member>
        <member name="T:MIDRetail.DataCommon.eAllocationNode">
            <summary>
            eAllocationNode enumerates allocation detail tracking levels within a single header.
            </summary>
            <remarks>
            This enumeration identifies all of the possible allocation tracking levels within a single header.
            eAllocationSummaryNode is a subset of this enumeration that identifies summary tracking levels
            within a header.  The two enumerations must be kept in sync.
            </remarks>
        </member>
        <member name="T:MIDRetail.DataCommon.eAllocationSummaryNode">
            <summary>
            eAllocationSummaryNode enumerates allocation summary tracking levels within a single header.
            </summary>
            <remarks>
            This enumeration is a subset of the eAllocationNode enumeration.
            </remarks>
        </member>
        <member name="T:MIDRetail.DataCommon.eHeaderNode">
            <summary>
            eHeaderNode enumerates allocation header summary tracking levels
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.eStoreAllocationNode">
            <summary>
            eStoreAllocationNode enumerates store allocation summary tracking levels
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.eAllocationType">
            <summary>
            eAllocationType enumerates the high-level breakdown of an allocation. 
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.eDistributeChange">
            <summary>
            eDistributeChange identifies how a change to an allocation is to be distributed to other components. 
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.eSizePlanType">
            <summary>
            Identifies size plan type
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.eBuildPackProperty">
            <summary>
            Describes the available pack properties within Build Packs
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.eBatchComp">
            <summary>
            Used in Batch Comp processing. More values will be added as needed.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.eAllocateOverageTo">
            <summary>
            Used in DC Carton Rounding Method
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.eMessageRequest">
            <summary>
            Specifies which message is to be displayed.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.eMessageResponse">
            <summary>
            Specifies identifiers to indicate the return value of a message.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.eMessagingStatus">
            <summary>
            Specifies identifiers to indicate the status of a message.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.GridCellTag">
            <summary>
            Used to save and retrieve information from the cell tag.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.GridCellTag.Message">
            <summary>
            Gets or sets the message associated with the cell.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.GridCellTag.HelpText">
            <summary>
            Gets or sets the help text associated with the cell.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.GridCellTag.GridCellTagData">
            <summary>
            Gets or sets the object containing the data for the cell.
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.RowColHeader.#ctor">
            <summary>
            Creates a new instance of RowColHeader.
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.RowColHeader.#ctor(System.String,System.Boolean)">
            <summary>
            Creates a new instance of RowColHeader using the given Name and boolean.
            </summary>
            <param name="aName">
            A string that contains the name of the Row/Col header.
            </param>
            <param name="aIsDisplayed">
            A boolean indicating if the Row/Col header is currently displayed.
            </param>
        </member>
        <member name="M:MIDRetail.DataCommon.RowColHeader.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new instance of RowColHeader using the given Name and boolean.
            </summary>
            <param name="aName">
            A string that contains the name of the Row/Col header.
            </param>
            <param name="aIsDisplayed">
            A boolean indicating if the Row/Col header is currently displayed.
            </param>
            <param name="aGrouping">
            The grouping where the current Row/Col header is to be displayed.
            </param>
        </member>
        <member name="P:MIDRetail.DataCommon.RowColHeader.Name">
            <summary>
            Gets or sets the Name of the Row/Col header.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.RowColHeader.IsSelectable">
            <summary>
            Gets or sets the boolean indicating if the Row/Col header is selectable.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.RowColHeader.IsDisplayed">
            <summary>
            Gets or sets the boolean indicating if the Row/Col header is displayed.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.RowColHeader.DefaultDisplay">
            <summary>
            Gets the boolean indicating the default display value.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.RowColHeader.Grouping">
            <summary>
            Gets or sets the Grouping of the Row/Col header.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.RowColProfileHeader">
            <summary>
            The RowColHeader class defines a RowColHeader that contains a Profile that describes the data.
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.RowColProfileHeader.#ctor">
            <summary>
            Creates a new instance of RowColProfileHeader.
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.RowColProfileHeader.#ctor(System.String,System.Boolean,System.Int32,MIDRetail.DataCommon.Profile)">
            <summary>
            Creates a new instance of RowColProfileHeader using the given Name, display value, and Profile.
            </summary>
            <param name="aName">
            The displayable name associated with the row/col.
            </param>
            <param name="aIsDisplayed">
            A boolean indicating if the row/col is displayed.
            </param>
            <param name="aProfile">
            The Profile that is associated with this row/col.
            </param>
        </member>
        <member name="M:MIDRetail.DataCommon.RowColProfileHeader.#ctor(System.String,System.Boolean,System.Int32,MIDRetail.DataCommon.Profile,System.String)">
            <summary>
            Creates a new instance of RowColProfileHeader using the given Name, display value, and Profile.
            </summary>
            <param name="aName">
            The displayable name associated with the row/col.
            </param>
            <param name="aIsDisplayed">
            A boolean indicating if the row/col is displayed.
            </param>
            <param name="aProfile">
            The Profile that is associated with this row/col.
            </param>
            <param name="aGrouping">
            The grouping where the current Row/Col header is to be displayed.
            </param>
        </member>
        <member name="M:MIDRetail.DataCommon.RowColProfileHeader.#ctor(System.String,System.Boolean,System.Boolean,System.Int32,MIDRetail.DataCommon.Profile)">
            <summary>
            Creates a new instance of RowColProfileHeader using the given Name, display value, and Profile.
            </summary>
            <param name="aName">
            The displayable name associated with the row/col.
            </param>
            <param name="aIsDisplayed">
            A boolean indicating if the row/col is displayed.
            </param>
            <param name="aIsSummarized">
            A boolean indicating if the row/col is summarized.
            </param>
            <param name="aProfile">
            The Profile that is associated with this row/col.
            </param>
        </member>
        <member name="M:MIDRetail.DataCommon.RowColProfileHeader.#ctor(System.String,System.Boolean,System.Boolean,System.Int32,MIDRetail.DataCommon.Profile,System.String)">
            <summary>
            Creates a new instance of RowColProfileHeader using the given Name, display value, and Profile.
            </summary>
            <param name="aName">
            The displayable name associated with the row/col.
            </param>
            <param name="aIsDisplayed">
            A boolean indicating if the row/col is displayed.
            </param>
            <param name="aIsSummarized">
            A boolean indicating if the row/col is summarized.
            </param>
            <param name="aProfile">
            The Profile that is associated with this row/col.
            </param>
            <param name="aGrouping">
            The grouping where the current Row/Col header is to be displayed.
            </param>
        </member>
        <member name="P:MIDRetail.DataCommon.RowColProfileHeader.Profile">
            <summary>
            Gets the Profile associated with this row/col.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.RowColProfileHeader.Sequence">
            <summary>
            Gets the integer indicating the column sequence.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.RowColProfileHeader.IsSummarized">
            <summary>
            Gets or sets the boolean indicating if the Row/Col header is summarized.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.HierarchyProfile">
            <summary>
            Used to retrieve and update information about a hierarchy.
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.HierarchyProfile.#ctor(System.Int32)">
            <summary>
            Used to construct an instance of the class.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyProfile.ProfileType">
            <summary>
            Returns the eProfileType of this profile.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyProfile.HierarchyChangeType">
            <summary>
            Gets or sets the change type for the hierarchy.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyProfile.HierarchyLockStatus">
            <summary>
            Gets or sets the lock status for the hierarchy.
            </summary>
            <remarks>The status should be locked before updates are allowed</remarks>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyProfile.HierarchyChangeSuccessful">
            <summary>
            Gets or sets the status of the hierarchy change.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyProfile.HierarchyRootNodeRID">
            <summary>
            Gets or sets the record id for the root node for the hierarchy.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyProfile.HierarchyID">
            <summary>
            Gets or sets the id of the hierarchy.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyProfile.HierarchyColor">
            <summary>
            Gets or sets the color of the hierarchy.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyProfile.HierarchyType">
            <summary>
            Gets or sets the type of the hierarchy.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyProfile.HierarchyRollupOption">
            <summary>
            Gets or sets the type of the hierarchy.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyProfile.OTSPlanLevelType">
            <summary>
            Gets or sets the type of the hierarchy.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyProfile.OTSPlanLevelHierarchyLevelSequence">
            <summary>
            Gets or sets whether to OTS Plan Level is overridden.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyProfile.HierarchyLevels">
            <summary>
            Gets or sets the level of the hierarchy.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyProfile.HierarchyDBLevelsCount">
            <summary>
            Gets or sets the number of levels of the hierarchy found on the database.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyProfile.Owner">
            <summary>
            Gets or sets the number of owner of the hierarchy.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyProfile.PostingDate">
            <summary>
            Gets or sets the posting date of the hierarchy.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyProfile.InUseUserID">
            <summary>
            Gets or sets the user the hierarchy is in use by.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.HierarchyProfileList">
            <summary>
            Used to retrieve a list of hierarchy profiles
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.HierarchyProfileList.#ctor(MIDRetail.DataCommon.eProfileType)">
            <summary>
            Used to construct an instance of the class.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.HierarchyLevelProfile">
            <summary>
            Contains the information about the levels of a hierarchy
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.HierarchyLevelProfile.#ctor(System.Int32)">
            <summary>
            Used to construct an instance of the class.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyLevelProfile.ProfileType">
            <summary>
            Returns the eProfileType of this profile.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyLevelProfile.LevelChangeType">
            <summary>
            Gets or sets the change type for a level.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyLevelProfile.LevelChangeSuccessful">
            <summary>
            Gets or sets the status of the change to the level.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyLevelProfile.LevelNodesExist">
            <summary>
            Gets or sets number of nodes defined to this level in the hierarchy.
            </summary>
            <remarks>
            This property is used to determine if this level can be expanded on the hierarchy explorer.
            </remarks>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyLevelProfile.Level">
            <summary>
            Gets or sets the relative position of this level in the hierarchy.
            </summary>
            <remarks>
            Levels begin with 1.
            </remarks>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyLevelProfile.LevelID">
            <summary>
            Gets or sets the ID (name) of the level in the hierarchy.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyLevelProfile.LevelColor">
            <summary>
            Gets or sets the color to use for the folder of the level in the hierarchy.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyLevelProfile.LevelLengthType">
            <summary>
            Gets or sets the type of length (unrestricted, required, or range) for the level in the hierarchy.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyLevelProfile.LevelRequiredSize">
            <summary>
            Gets or sets the required size of this level in the hierarchy.
            </summary>
            <remarks>
            This field is only used if the LevelLengthType is set to required.
            </remarks>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyLevelProfile.LevelSizeRangeFrom">
            <summary>
            Gets or sets the from size of this level in the hierarchy.
            </summary>
            <remarks>
            This field is only used if the LevelLengthType is set to range.
            </remarks>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyLevelProfile.LevelSizeRangeTo">
            <summary>
            Gets or sets the to size of this level in the hierarchy.
            </summary>
            <remarks>
            This field is only used if the LevelLengthType is set to range.
            </remarks>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyLevelProfile.LevelType">
            <summary>
            Gets or sets the OTS level type of this level in the hierarchy.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyLevelProfile.LevelOTSPlanLevelType">
            <summary>
            Gets or sets the OTS plan level type of this level in the hierarchy.
            </summary>
            <remarks>
            This field is only used if the LevelType is "Plan Level".</remarks>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyLevelProfile.LevelDisplayOption">
            <summary>
            Gets or sets the display option of this level in the hierarchy.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyLevelProfile.LevelIDFormat">
            <summary>
            Gets or sets the ID format of this level in the hierarchy.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyLevelProfile.PurgeDailyHistoryTimeframe">
            <summary>
            Gets or sets the timeframe of the history purge information of this level in the hierarchy.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyLevelProfile.PurgeDailyHistory">
            <summary>
            Gets or sets the time of the history purge information of this level in the hierarchy.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyLevelProfile.PurgeWeeklyHistoryTimeframe">
            <summary>
            Gets or sets the timeframe of the forecast purge information of this level in the hierarchy.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyLevelProfile.PurgeWeeklyHistory">
            <summary>
            Gets or sets the time of the forecast purge information of this level in the hierarchy.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyLevelProfile.PurgePlansTimeframe">
            <summary>
            Gets or sets the timeframe of the distro purge information of this level in the hierarchy.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyLevelProfile.PurgePlans">
            <summary>
            Gets or sets the time of the distro purge information of this level in the hierarchy.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyLevelProfile.OTSPlanLevelLevelType">
            <summary>
            Gets or sets the plan level level type of this level in the hierarchy.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyLevelProfile.PurgeHtASNTimeframe">
            <summary>
            Gets or sets the timeframe of the ASN header type purge information of this level in the hierarchy.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyLevelProfile.PurgeHtASN">
            <summary>
            Gets or sets the time of the ASN header type purge information of this level in the hierarchy.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyLevelProfile.PurgeHtDropShipTimeframe">
            <summary>
            Gets or sets the timeframe of the DropShip header type purge information of this level in the hierarchy.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyLevelProfile.PurgeHtDropShip">
            <summary>
            Gets or sets the time of the DropShip header type purge information of this level in the hierarchy.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyLevelProfile.PurgeHtDummyTimeframe">
            <summary>
            Gets or sets the timeframe of the Dummy header type purge information of this level in the hierarchy.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyLevelProfile.PurgeHtDummy">
            <summary>
            Gets or sets the time of the Dummy header type purge information of this level in the hierarchy.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyLevelProfile.PurgeHtPurchaseOrderTimeframe">
            <summary>
            Gets or sets the timeframe of the PurchaseOrder header type purge information of this level in the hierarchy.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyLevelProfile.PurgeHtPurchaseOrder">
            <summary>
            Gets or sets the time of the PurchaseOrder header type purge information of this level in the hierarchy.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyLevelProfile.PurgeHtReceiptTimeframe">
            <summary>
            Gets or sets the timeframe of the Receipt header type purge information of this level in the hierarchy.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyLevelProfile.PurgeHtReceipt">
            <summary>
            Gets or sets the time of the Receipt header type purge information of this level in the hierarchy.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyLevelProfile.PurgeHtReserveTimeframe">
            <summary>
            Gets or sets the timeframe of the Reserve header type purge information of this level in the hierarchy.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyLevelProfile.PurgeHtReserve">
            <summary>
            Gets or sets the time of the Reserve header type purge information of this level in the hierarchy.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyLevelProfile.PurgeHtVSWTimeframe">
            <summary>
            Gets or sets the timeframe of the VSW header type purge information of this level in the hierarchy.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyLevelProfile.PurgeHtVSW">
            <summary>
            Gets or sets the time of the VSW header type purge information of this level in the hierarchy.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyLevelProfile.PurgeHtWorkUpTotTimeframe">
            <summary>
            Gets or sets the timeframe of the WorkUpTot header type purge information of this level in the hierarchy.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyLevelProfile.PurgeHtWorkUpTot">
            <summary>
            Gets or sets the time of the WorkUpTot header type purge information of this level in the hierarchy.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.HierarchyNodeProfile">
            <summary>
            Used to retrieve and update information from the hierarchy session about a node.
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.HierarchyNodeProfile.#ctor(System.Int32)">
            <summary>
            Used to construct an instance of the class.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyNodeProfile.ProfileType">
            <summary>
            Returns the eProfileType of this profile.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyNodeProfile.isShortcut">
            <summary>
            Tests whether this is a shortcut
            </summary>
            <remarks>
            if homehierarchyrid != hierarchyrid then it is a shortcut
            </remarks>
        </member>
        <member name="M:MIDRetail.DataCommon.HierarchyNodeProfile.CopyHierarchy(MIDRetail.DataCommon.HierarchyNodeProfile)">
            <summary>
            Copies this Hierarchy to another provided
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyNodeProfile.NodeChangeType">
            <summary>
            Gets or sets the change type for the node.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyNodeProfile.NodeLockStatus">
            <summary>
            Gets or sets the lock status for the node.
            </summary>
            <remarks>The status should be locked before updates are allowed</remarks>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyNodeProfile.NodeChangeSuccessful">
            <summary>
            Gets or sets the status of the change to the node.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyNodeProfile.Message">
            <summary>
            Gets or sets the message of the change to the node.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyNodeProfile.HierarchyRID">
            <summary>
            Gets or sets the record id of the hierarchy where the node is located.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyNodeProfile.HomeHierarchyParentRID">
            <summary>
            Gets or sets the record id of the parent node in the home hierarchy of the node.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyNodeProfile.Parents">
            <summary>
            Gets or sets the record id(s) of the parent node(s) in the hierarchy.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyNodeProfile.NodeID">
            <summary>
            Gets or sets the id of the node.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyNodeProfile.QualifiedNodeID">
            <summary>
            Gets or sets the fully qualified id of the node.
            </summary>
            <remarks>
            This field is only pertinent for color and size nodes.
            </remarks>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyNodeProfile.NodeName">
            <summary>
            Gets or sets the name of the node.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyNodeProfile.NodeDescription">
            <summary>
            Gets or sets the description of the node.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyNodeProfile.DisplayOption">
            <summary>
            Gets or sets the display option of the node.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyNodeProfile.Text">
            <summary>
            Gets or sets the display text for the node.
            </summary>
            <remarks>
            This is formatted based on the display option for the level and includes 
            ancestor levels when necessary to fully identify the node.
            </remarks>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyNodeProfile.LevelText">
            <summary>
            Gets or sets the display text for the node of the requested level only.
            </summary>
            <remarks>
            This is formatted based on the display option for the level.
            </remarks>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyNodeProfile.HomeHierarchyRID">
            <summary>
            Gets or sets the record id of the home hierarchy for the node.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyNodeProfile.HomeHierarchyLevel">
            <summary>
            Gets or sets the level in the home hierarchy what the node is located.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyNodeProfile.HomeHierarchyType">
            <summary>
            Gets or sets the type of hierarchy where the node is located.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyNodeProfile.HomeHierarchyOwner">
            <summary>
            Gets or sets the owner of hierarchy where the node is located.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyNodeProfile.RollupOption">
            <summary>
            Gets or sets the type of hierarchy where the node is located.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyNodeProfile.ProductTypeIsOverridden">
            <summary>
            Gets or sets whether to OTS Plan Level is overridden.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyNodeProfile.ProductType">
            <summary>
            Gets or sets the product type of the node.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyNodeProfile.ProductTypeInherited">
            <summary>
            Gets or sets the whether the product type was inherited.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyNodeProfile.ProductTypeInheritedFrom">
            <summary>
            Gets or sets the node RID or level index where the product type was inherited from.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyNodeProfile.OTSPlanLevelIsOverridden">
            <summary>
            Gets or sets whether to OTS Plan Level is overridden.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyNodeProfile.OTSPlanLevelSelectType">
            <summary>
            Gets or sets OTS Plan Level level select type.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyNodeProfile.OTSPlanLevelLevelType">
            <summary>
            Gets or sets OTS Plan Level level type.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyNodeProfile.OTSPlanLevelHierarchyRID">
            <summary>
            Gets or sets OTS Plan Level hierarchy.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyNodeProfile.OTSPlanLevelHierarchyLevelSequence">
            <summary>
            Gets or sets the OTS Plan Level level sequence.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyNodeProfile.OTSPlanLevelAnchorNode">
            <summary>
            Gets or sets the OTS Plan Level anchor node.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyNodeProfile.OTSPlanLevelMaskField">
            <summary>
            Gets or sets the OTS Plan Level mask field.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyNodeProfile.OTSPlanLevelMask">
            <summary>
            Gets or sets the OTS Plan Level mask.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyNodeProfile.OTSPlanLevelInherited">
            <summary>
            Gets or sets the whether the OTS plan level was inherited.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyNodeProfile.OTSPlanLevelInheritedFrom">
            <summary>
            Gets or sets the node RID or level index where the OTS plan level  was inherited from.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyNodeProfile.OTSPlanLevelTypeIsOverridden">
            <summary>
            Gets or sets whether to OTS Plan Level is overridden.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyNodeProfile.OTSPlanLevelType">
            <summary>
            Gets or sets the type of override for the OTS Plan Level.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyNodeProfile.OTSPlanLevelTypeInherited">
            <summary>
            Gets or sets the whether the OTS plan level was inherited.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyNodeProfile.OTSPlanLevelTypeInheritedFrom">
            <summary>
            Gets or sets the node RID or level index where the OTS plan level type was inherited from.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyNodeProfile.LevelType">
            <summary>
            Gets or sets the level type for this product.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyNodeProfile.IsParentOfStyle">
            <summary>
            Gets or sets the flag identifying if this node is a parent to the style level.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyNodeProfile.UseBasicReplenishment">
            <summary>
            Gets or sets the flag identifying if this node is to use basic replenishment.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyNodeProfile.ColorOrSizeCodeRID">
            <summary>
            Gets or sets the record id of the color or size code.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyNodeProfile.NodeColor">
            <summary>
            Gets or sets the color of the child as it relates to the level in its home hierarchy.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyNodeProfile.NodeLevel">
            <summary>
            Gets or sets the relative level of the child in the hierarchy.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyNodeProfile.HasChildren">
            <summary>
            Gets or sets the flag to identify if the node has children.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyNodeProfile.DisplayChildren">
            <summary>
            Gets or sets the flag to identify if the children of the node are to be displayed.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyNodeProfile.PurgeCriteriaChangeType">
            <summary>
            Gets or sets the change type for the purge criteria.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyNodeProfile.PurgeDailyCriteriaInherited">
            <summary>
            Gets or sets the whether the daily purge criteria was inherited.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyNodeProfile.PurgeDailyCriteriaInheritedFrom">
            <summary>
            Gets or sets the node RID or level index where the daily history purge criteria was inherited from.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyNodeProfile.PurgeDailyHistoryAfter">
            <summary>
            Gets or sets purge criteria for daily history.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyNodeProfile.PurgeWeeklyCriteriaInherited">
            <summary>
            Gets or sets the whether the weekly purge criteria was inherited.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyNodeProfile.PurgeWeeklyCriteriaInheritedFrom">
            <summary>
            Gets or sets the node RID or level index where the weekly history purge criteria was inherited from.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyNodeProfile.PurgeWeeklyHistoryAfter">
            <summary>
            Gets or sets purge criteria for weekly history.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyNodeProfile.PurgeOTSCriteriaInherited">
            <summary>
            Gets or sets the whether the OTS plan purge criteria was inherited.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyNodeProfile.PurgeOTSCriteriaInheritedFrom">
            <summary>
            Gets or sets the node RID or level index where the OTS plan purge criteria was inherited from.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyNodeProfile.PurgeOTSPlansAfter">
            <summary>
            Gets or sets purge criteria for OTS plans.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:MIDRetail.DataCommon.HierarchyNodeProfile.PurgeHtASNCriteriaInherited" -->
        <member name="P:MIDRetail.DataCommon.HierarchyNodeProfile.PurgeHtASNCriteriaInheritedFrom">
            <summary>
            Gets or sets the node RID or level index where the header type ASN purge criteria was inherited from.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyNodeProfile.PurgeHtASNAfter">
            <summary>
            Gets or sets purge criteria for ASN header type.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:MIDRetail.DataCommon.HierarchyNodeProfile.PurgeHtDropShipCriteriaInherited" -->
        <member name="P:MIDRetail.DataCommon.HierarchyNodeProfile.PurgeHtDropShipCriteriaInheritedFrom">
            <summary>
            Gets or sets the node RID or level index where the header type DropShip purge criteria was inherited from.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyNodeProfile.PurgeHtDropShipAfter">
            <summary>
            Gets or sets purge criteria for DropShip header type.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:MIDRetail.DataCommon.HierarchyNodeProfile.PurgeHtDummyCriteriaInherited" -->
        <member name="P:MIDRetail.DataCommon.HierarchyNodeProfile.PurgeHtDummyCriteriaInheritedFrom">
            <summary>
            Gets or sets the node RID or level index where the header type Dummy purge criteria was inherited from.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyNodeProfile.PurgeHtDummyAfter">
            <summary>
            Gets or sets purge criteria for Dummy header type.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:MIDRetail.DataCommon.HierarchyNodeProfile.PurgeHtReceiptCriteriaInherited" -->
        <member name="P:MIDRetail.DataCommon.HierarchyNodeProfile.PurgeHtReceiptCriteriaInheritedFrom">
            <summary>
            Gets or sets the node RID or level index where the header type Receipt purge criteria was inherited from.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyNodeProfile.PurgeHtReceiptAfter">
            <summary>
            Gets or sets purge criteria for Receipt header type.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:MIDRetail.DataCommon.HierarchyNodeProfile.PurgeHtPurchaseOrderCriteriaInherited" -->
        <member name="P:MIDRetail.DataCommon.HierarchyNodeProfile.PurgeHtPurchaseOrderCriteriaInheritedFrom">
            <summary>
            Gets or sets the node RID or level index where the header type PurchaseOrder purge criteria was inherited from.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyNodeProfile.PurgeHtPurchaseOrderAfter">
            <summary>
            Gets or sets purge criteria for PurchaseOrder header type.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:MIDRetail.DataCommon.HierarchyNodeProfile.PurgeHtReserveCriteriaInherited" -->
        <member name="P:MIDRetail.DataCommon.HierarchyNodeProfile.PurgeHtReserveCriteriaInheritedFrom">
            <summary>
            Gets or sets the node RID or level index where the header type Reserve purge criteria was inherited from.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyNodeProfile.PurgeHtReserveAfter">
            <summary>
            Gets or sets purge criteria for Reserve header type.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:MIDRetail.DataCommon.HierarchyNodeProfile.PurgeHtVSWCriteriaInherited" -->
        <member name="P:MIDRetail.DataCommon.HierarchyNodeProfile.PurgeHtVSWCriteriaInheritedFrom">
            <summary>
            Gets or sets the node RID or level index where the header type VSW purge criteria was inherited from.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyNodeProfile.PurgeHtVSWAfter">
            <summary>
            Gets or sets purge criteria for VSW header type.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyNodeProfile.PurgeHtWorkUpTotCriteriaInherited">
            <summary>
            Gets or sets the whether the header purge criteria was inherited.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyNodeProfile.PurgeHtWorkUpTotCriteriaInheritedFrom">
            <summary>
            Gets or sets the node RID or level index where the header purge criteria was inherited from.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyNodeProfile.PurgeHtWorkUpTotAfter">
            <summary>
            Gets or sets purge criteria for WorkUpTotal header type.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyNodeProfile.WeightingFactor">
            <summary>
            Gets or sets the nunber of times the node is found in a descendant list.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyNodeProfile.ChainSecurityProfile">
            <summary>
            Gets or sets the HierarchyNodeSecurityProfile for chain.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyNodeProfile.StoreSecurityProfile">
            <summary>
            Gets or sets the HierarchyNodeSecurityProfile for store.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyNodeProfile.InUseUserID">
            <summary>
            Gets or sets the user the node is in use by.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyNodeProfile.IsVirtual">
            <summary>
            Gets or sets the flag identifying if the node is a virtual node.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyNodeProfile.Purpose">
            <summary>
            Gets or sets the field identifying the purpose of the node.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyNodeProfile.Begin_CDR_RID">
            <summary>
            Gets or sets the record id of the calendar date range.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyNodeProfile.CommitOnSuccessfulUpdate">
            <summary>
            Gets or sets the flag identifying if the changes should be immediately committed on successful update.
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.HierarchyNodeProfile.Equals(System.Object)">
            <summary>
            overrided Equals
            </summary>
            <param name="obj">HierarchyNodeProfile</param>
            <returns>Bool</returns>
        </member>
        <member name="T:MIDRetail.DataCommon.HierarchyNodeList">
            <summary>
            Used to retrieve and update a list of nodes for a parent in the hierarchy
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.HierarchyNodeList.#ctor(MIDRetail.DataCommon.eProfileType)">
            <summary>
            Used to construct an instance of the class.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.SelectedHierarchyNode">
            <summary>
            Used to retrieve and update information about a node selected from the Merchandise Explorer.
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.SelectedHierarchyNode.#ctor(MIDRetail.DataCommon.eHierarchySelectType,MIDRetail.DataCommon.HierarchyNodeProfile)">
            <summary>
            Used to construct an instance of the class.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.SelectedHierarchyNode.NodeType">
            <summary>
            Gets or sets the type of node.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.SelectedHierarchyNode.NodeProfile">
            <summary>
            Gets or sets the HierarchyNodeProfile.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.HierarchyNodeAndParentIdsProfile">
            <summary>
            Used to retrieve the IDs of a node and its parent.
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.HierarchyNodeAndParentIdsProfile.#ctor(System.Int32)">
            <summary>
            Used to construct an instance of the class.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyNodeAndParentIdsProfile.ProfileType">
            <summary>
            Returns the eProfileType of this profile.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyNodeAndParentIdsProfile.NodeID">
            <summary>
            Gets or sets the id of the node.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyNodeAndParentIdsProfile.Parents">
            <summary>
            Gets or sets the list of record id(s) of the parent node(s) in the hierarchy.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyNodeAndParentIdsProfile.ParentNodeIDs">
            <summary>
            Gets or sets the id(s) of the parent(s) of the node.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.HierarchyJoinProfile">
            <summary>
            Used to retrieve and update information from the hierarchy session about the relationships between nodes
            in a hierarchy.
            </summary>
            <remarks>
            This class is used when nodes are moved or reorganized in the hierarchies.
            </remarks>
        </member>
        <member name="M:MIDRetail.DataCommon.HierarchyJoinProfile.#ctor(System.Int32)">
            <summary>
            Used to construct an instance of the class.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyJoinProfile.ProfileType">
            <summary>
            Returns the eProfileType of this profile.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyJoinProfile.JoinChangeType">
            <summary>
            Gets or sets the type of change for the relationship in the hierarchy.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyJoinProfile.JoinChangeSuccessful">
            <summary>
            Gets or sets the type of change for the relationship in the hierarchy.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyJoinProfile.OldHierarchyRID">
            <summary>
            Gets or sets the record id of the original hierarchy.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyJoinProfile.OldParentRID">
            <summary>
            Gets or sets the record id of the original parent.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyJoinProfile.NewHierarchyRID">
            <summary>
            Gets or sets the record id of the new hierarchy.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyJoinProfile.NewParentRID">
            <summary>
            Gets or sets the record id of the new parent.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyJoinProfile.LevelType">
            <summary>
            Gets or sets the OTS level type of this level in the hierarchy.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.NodeAncestorProfile">
            <summary>
            Used to retrieve information about the ancestors of a node in a hierarchy
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.NodeAncestorProfile.#ctor(System.Int32)">
            <summary>
            Used to construct an instance of the class.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.NodeAncestorProfile.ProfileType">
            <summary>
            Returns the eProfileType of this profile.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.NodeAncestorProfile.HomeHierarchyRID">
            <summary>
            Gets or sets the record id of its home hierarchy.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.NodeAncestorProfile.HomeHierarchyLevel">
            <summary>
            Gets or sets the level of the node in its home hierarchy.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.NodeAncestorProfile.HomeHierarchyOwner">
            <summary>
            Gets or sets the owner of the node in its home hierarchy.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.NodeAncestorList">
            <summary>
            Used to retrieve information about the ancestors of a node in a hierarchy
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.NodeAncestorList.#ctor(MIDRetail.DataCommon.eProfileType)">
            <summary>
            Used to construct an instance of the class.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.NodeDescendantProfile">
            <summary>
            Used to retrieve information about the descendants of a node in a hierarchy
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.NodeDescendantProfile.#ctor(System.Int32)">
            <summary>
            Used to construct an instance of the class.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.NodeDescendantProfile.ProfileType">
            <summary>
            Returns the eProfileType of this profile.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.NodeDescendantProfile.ColorOrSizeCodeRID">
            <summary>
            Gets or sets the owner of the node in its home hierarchy.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.NodeDescendantList">
            <summary>
            Used to retrieve a list of descendants for a node in the hierarchy
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.NodeDescendantList.#ctor(MIDRetail.DataCommon.eProfileType)">
            <summary>
            Used to construct an instance of the class.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.NodeLockRequestProfile">
            <summary>
            Used to send or retrieve information about a lock request for a node in a hierarchy
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.NodeLockRequestProfile.#ctor(System.Int32)">
            <summary>
            Used to construct an instance of the class.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.NodeLockRequestProfile.ProfileType">
            <summary>
            Returns the eProfileType of this profile.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.NodeLockRequestProfile.HierarchyRID">
            <summary>
            Gets or sets the record id of hierarchy for the node.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.NodeLockRequestProfile.NodeType">
            <summary>
            Gets or sets the profile type the node.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.NodeLockRequestList">
            <summary>
            Used to send or retrieve information about a lock request for a node in a hierarchy
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.NodeLockRequestList.#ctor(MIDRetail.DataCommon.eProfileType)">
            <summary>
            Used to construct an instance of the class.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.NodeLockConflictProfile">
            <summary>
            Used to send or retrieve information about a lock conflict for a node in a hierarchy
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.NodeLockConflictProfile.#ctor(System.Int32)">
            <summary>
            Used to construct an instance of the class.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.NodeLockConflictProfile.ProfileType">
            <summary>
            Returns the eProfileType of this profile.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.NodeLockConflictProfile.BranchHierarchyRID">
            <summary>
            Gets or sets the record id of hierarchy for the node.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.NodeLockConflictProfile.BranchNodeRID">
            <summary>
            Gets or sets the record id of the node for which the branch is being locked.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.NodeLockConflictProfile.InUseNodeName">
            <summary>
            Gets or sets the name of the node that is locked.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.NodeLockConflictProfile.InUseByUserRID">
            <summary>
            Gets or sets the record id of user who has the node locked.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.NodeLockConflictProfile.InUseByUserName">
            <summary>
            Gets or sets the name of user who has the node locked.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.NodeLockConflictList">
            <summary>
            Used to send or retrieve information about a lock conflict for a node in a hierarchy
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.NodeLockConflictList.#ctor(MIDRetail.DataCommon.eProfileType)">
            <summary>
            Used to construct an instance of the class.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.NodeLookup">
            <summary>
            Used to retrieve and update information about a hierarchy node.
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.NodeLookup.#ctor">
            <summary>
            Used to construct an instance of the class.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.NodeLookup.LookupSuccessful">
            <summary>
            Gets or sets the flag identifying if the lookup was successful.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.NodeLookup.NodeRID">
            <summary>
            Gets or sets the record ID of the node.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.NodeLookup.NodeID">
            <summary>
            Gets or sets the ID of the node.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.NodeLookup.NodeName">
            <summary>
            Gets or sets the name of the node.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.NodeLookup.NodeDescription">
            <summary>
            Gets or sets the description of the node.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.NodeLookup.ParentID">
            <summary>
            Gets or sets the parent ID of the node.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.NodeLookup.SizeProductCategory">
            <summary>
            Gets or sets the product category of the size code.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.NodeLookup.SizePrimary">
            <summary>
            Gets or sets the primary of the size code.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.NodeLookup.SizeSecondary">
            <summary>
            Gets or sets the secondary of the size code.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.NodeLookup.NodesAdded">
            <summary>
            Gets or sets the count of the nodes auto added.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.ColorCodeProfile">
            <summary>
            Used to retrieve the information about the colors in the system
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.ColorCodeProfile.#ctor(System.Int32)">
            <summary>
            Used to construct an instance of the class.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.ColorCodeProfile.ProfileType">
            <summary>
            Returns the eProfileType of this profile.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.ColorCodeProfile.ColorCodeChangeType">
            <summary>
            Gets or sets the type of change for the color.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.ColorCodeProfile.ColorCodeID">
            <summary>
            Gets or sets the ID of the color.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.ColorCodeProfile.ColorCodeName">
            <summary>
            Gets or sets the name of the color.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.ColorCodeProfile.ColorCodeGroup">
            <summary>
            Gets or sets the group of the color.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.ColorCodeProfile.Text">
            <summary>
            Gets or sets the text of the color.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.ColorCodeProfile.VirtualInd">
            <summary>
            Gets or sets the virtualInd of the color.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.ColorCodeProfile.Purpose">
            <summary>
            Gets or sets the purpose of the color.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.ColorCodeList">
            <summary>
            Used to retrieve a list of colors in the system
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.ColorCodeList.#ctor(MIDRetail.DataCommon.eProfileType)">
            <summary>
            Used to construct an instance of the class.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.ColorGroupProfile">
            <summary>
            Used to retrieve the information about the color groups in the system
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.ColorGroupProfile.#ctor(System.Int32)">
            <summary>
            Used to construct an instance of the class.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.ColorGroupProfile.ProfileType">
            <summary>
            Returns the eProfileType of this profile.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.ColorGroupProfile.ColorGroupName">
            <summary>
            Gets or sets the name of the color group.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.SelectedColorNode">
            <summary>
            Used to retrieve and update information about a node selected from the Merchandise Explorer.
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.SelectedColorNode.#ctor(MIDRetail.DataCommon.ColorCodeProfile)">
            <summary>
            Used to construct an instance of the class.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.SelectedColorNode.SelectedProfile">
            <summary>
            Gets or sets the ColorCodeProfile.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.SizeCodeProfile">
            <summary>
            Contains the information about the sizes in the system
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.SizeCodeProfile.#ctor(System.Int32)">
            <summary>
            Used to construct an instance of the class.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.SizeCodeProfile.ProfileType">
            <summary>
            Returns the eProfileType of this profile.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.SizeCodeProfile.SizeCodeChangeType">
            <summary>
            Gets or sets the type of change for the size.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.SizeCodeProfile.SizeCodeID">
            <summary>
            Gets or sets the ID of the size.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.SizeCodeProfile.SizeCodeName">
            <summary>
            Gets or sets the name of the size.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.SizeCodeProfile.SizeCodePrimary">
            <summary>
            Gets or sets the primary name of the size.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.SizeCodeProfile.SizeCodeSecondary">
            <summary>
            Gets or sets the secondary name of the size.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.SizeCodeProfile.SizeCodeProductCategory">
            <summary>
            Gets or sets the product category of the size.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.SizeCodeProfile.SizeCodePercent">
            <summary>
            Gets or sets the Size Curve percent for this size code.
            Only used when part of a Size Curve.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.SizeCodeProfile.SizeCodePrimaryRID">
            <summary>
            Gets or sets the primary size RID (MID column Dimension aka size) 
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.SizeCodeProfile.SizeCodeSecondaryRID">
            <summary>
            Gets or sets the secondary size RID (MID row Dimension aka width)
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.SizeCodeProfile.PrimarySequence">
            <summary>
            Gets or sets the primary sequence number used in sorting sizes
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.SizeCodeProfile.SecondarySequence">
            <summary>
            Gets or sets the secondary sequence number used in sorting sizes
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.SizeCodeList">
            <summary>
            Used to retrieve a list of sizes in the system
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.SizeCodeList.#ctor(MIDRetail.DataCommon.eProfileType)">
            <summary>
            Used to construct an instance of the class.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.IntransitReadNodeProfile">
            <summary>
            Used to retrieve information for a node used to read intransit.
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.IntransitReadNodeProfile.#ctor(System.Int32)">
            <summary>
            Used to construct an instance of the class.
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.IntransitReadNodeProfile.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a Size Level instance of the IntransitReadNodeProfile
            </summary>
            <param name="aKey">Profile Hierarchy Node Key</param>
            <param name="aColorCodeRID">Color Code RID </param>
            <param name="aSizeCodeRID">Size Code RID </param>
        </member>
        <member name="M:MIDRetail.DataCommon.IntransitReadNodeProfile.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a Color Level instance of the IntransitReadNodeProfile
            </summary>
            <param name="aKey">Profile Hierarchy Node Key</param>
            <param name="aColorCodeRID">Color Code RID</param>
        </member>
        <member name="M:MIDRetail.DataCommon.IntransitReadNodeProfile.#ctor(System.Int32,MIDRetail.DataCommon.eHierarchyLevelMasterType)">
            <summary>
            Creates a ParentOfStyle or Style level instance of the IntransitReadNodeProfile
            </summary>
            <param name="aKey">Profile Hierarchy Node Key</param>
            <param name="aHierarchyLevelMasterType">ParentOfStyle or Style Hierarchy Level Master Type</param>
        </member>
        <member name="P:MIDRetail.DataCommon.IntransitReadNodeProfile.ProfileType">
            <summary>
            Returns the eProfileType of this profile.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.IntransitReadNodeProfile.LevelType">
            <summary>
            Gets or sets the level type for this product.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.IntransitReadNodeProfile.StyleDefinedInHierarchy">
            <summary>
            Gets or sets whether associated Styles are defined in the Hierarchy
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.IntransitReadNodeProfile.ColorCodeRID">
            <summary>
            Gets the Color Code RID when this is a color or size level IntransitReadNodeProfile
            </summary>
            <remarks>Returns Include.NoRID = -1 when this is not a color or size level </remarks>
        </member>
        <member name="P:MIDRetail.DataCommon.IntransitReadNodeProfile.SizeCodeRID">
            <summary>
            Gets the Size Code RID when this is a size level IntransitReadNodeProfile
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.IntransitReadNodeList">
            <summary>
            Used to retrieve and update a list of nodes for a parent in the hierarchy
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.IntransitReadNodeList.#ctor(MIDRetail.DataCommon.eProfileType)">
            <summary>
            Used to construct an instance of the class.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.IMOReadNodeProfile">
            <summary>
            Used to retrieve information for a node used to read IMO.
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.IMOReadNodeProfile.#ctor(System.Int32)">
            <summary>
            Used to construct an instance of the class.
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.IMOReadNodeProfile.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a Size Level instance of the IMOReadNodeProfile
            </summary>
            <param name="aKey">Profile Hierarchy Node Key</param>
            <param name="aColorCodeRID">Color Code RID </param>
            <param name="aSizeCodeRID">Size Code RID </param>
        </member>
        <member name="M:MIDRetail.DataCommon.IMOReadNodeProfile.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a Color Level instance of the IMOReadNodeProfile
            </summary>
            <param name="aKey">Profile Hierarchy Node Key</param>
            <param name="aColorCodeRID">Color Code RID</param>
        </member>
        <member name="M:MIDRetail.DataCommon.IMOReadNodeProfile.#ctor(System.Int32,MIDRetail.DataCommon.eHierarchyLevelMasterType)">
            <summary>
            Creates a ParentOfStyle or Style level instance of the IMOReadNodeProfile
            </summary>
            <param name="aKey">Profile Hierarchy Node Key</param>
            <param name="aHierarchyLevelMasterType">ParentOfStyle or Style Hierarchy Level Master Type</param>
        </member>
        <member name="P:MIDRetail.DataCommon.IMOReadNodeProfile.ProfileType">
            <summary>
            Returns the eProfileType of this profile.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.IMOReadNodeProfile.LevelType">
            <summary>
            Gets or sets the level type for this product.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.IMOReadNodeProfile.StyleDefinedInHierarchy">
            <summary>
            Gets or sets whether associated Styles are defined in the Hierarchy
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.IMOReadNodeProfile.ColorCodeRID">
            <summary>
            Gets the Color Code RID when this is a color or size level IntransitReadNodeProfile
            </summary>
            <remarks>Returns Include.NoRID = -1 when this is not a color or size level </remarks>
        </member>
        <member name="P:MIDRetail.DataCommon.IMOReadNodeProfile.SizeCodeRID">
            <summary>
            Gets the Size Code RID when this is a size level IntransitReadNodeProfile
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.IMOReadNodeList">
            <summary>
            Used to retrieve and update a list of nodes for a parent in the hierarchy
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.IMOReadNodeList.#ctor(MIDRetail.DataCommon.eProfileType)">
            <summary>
            Used to construct an instance of the class.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.IMOProfileList">
            <summary>
            Used to retrieve a list of IMO information
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.IMOProfileList.#ctor(MIDRetail.DataCommon.eProfileType)">
            <summary>
            Used to construct an instance of the class.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.IMOMethodOverrideProfileList">
            <summary>
            Used to retrieve a list of IMO information
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.IMOMethodOverrideProfileList.#ctor(MIDRetail.DataCommon.eProfileType)">
            <summary>
            Used to construct an instance of the class.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.ProductCharProfile">
            <summary>
            Contains the information about the product characteristics in the system
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.ProductCharProfile.#ctor(System.Int32)">
            <summary>
            Used to construct an instance of the class.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.ProductCharProfile.ProfileType">
            <summary>
            Returns the eProfileType of this profile.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.ProductCharProfile.ProductCharChangeType">
            <summary>
            Gets or sets the type of change for the product characteristic.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.ProductCharProfile.ProductCharID">
            <summary>
            Gets or sets the name of the product characteristic.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.ProductCharProfile.ProductCharValues">
            <summary>
            Gets or sets the list of product characteristic values.
            </summary>
            <remarks>Contains instances of ProductCharValueProfile class</remarks>
        </member>
        <member name="P:MIDRetail.DataCommon.ProductCharProfile.Text">
            <summary>
            Gets the text to display for the characteristic.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.ProductCharProfileList">
            <summary>
            Used to retrieve a list of product characteristic profiles
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.ProductCharProfileList.#ctor(MIDRetail.DataCommon.eProfileType)">
            <summary>
            Used to construct an instance of the class.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.ProductCharValueProfile">
            <summary>
            Contains the information about the product characteristics in the system
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.ProductCharValueProfile.#ctor(System.Int32)">
            <summary>
            Used to construct an instance of the class.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.ProductCharValueProfile.ProfileType">
            <summary>
            Returns the eProfileType of this profile.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.ProductCharValueProfile.ProductCharValueChangeType">
            <summary>
            Gets or sets the type of change for the product characteristic value.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.ProductCharValueProfile.ProductCharValue">
            <summary>
            Gets or sets the value of the product characteristic value.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.ProductCharValueProfile.ProductCharRID">
            <summary>
            Gets or sets the record ID of the product characteristic.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.ProductCharValueProfile.HasBeenMoved">
            <summary>
            Gets or sets the flag to identify if the node has been moved.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.ProductCharValueProfile.Text">
            <summary>
            Gets the text of the product characteristic.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.ProductCharValueProfileList">
            <summary>
            Used to retrieve a list of product characteristic profiles
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.ProductCharValueProfileList.#ctor(MIDRetail.DataCommon.eProfileType)">
            <summary>
            Used to construct an instance of the class.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.NodeCharProfile">
            <summary>
            Contains the information about the product characteristics in the system
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.NodeCharProfile.#ctor(System.Int32)">
            <summary>
            Used to construct an instance of the class.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.NodeCharProfile.ProfileType">
            <summary>
            Returns the eProfileType of this profile.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.NodeCharProfile.ProductCharChangeType">
            <summary>
            Gets or sets the type of change for the product characteristic.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.NodeCharProfile.ProductCharID">
            <summary>
            Gets or sets the name of the product characteristic.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.NodeCharProfile.ProductCharValueRID">
            <summary>
            Gets or sets the record ID of the product characteristic value.
            </summary>
            <remarks>Key is </remarks>
        </member>
        <member name="P:MIDRetail.DataCommon.NodeCharProfile.ProductCharValue">
            <summary>
            Gets or sets the the product characteristic value.
            </summary>
            <remarks>Key is </remarks>
        </member>
        <member name="P:MIDRetail.DataCommon.NodeCharProfile.TypeInherited">
            <summary>
            Gets or sets the whether the product type was inherited.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.NodeCharProfile.InheritedFrom">
            <summary>
            Gets or sets the node RID or level index where the product type was inherited from.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.NodeCharProfileList">
            <summary>
            Used to retrieve a list of product characteristic profiles
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.NodeCharProfileList.#ctor(MIDRetail.DataCommon.eProfileType)">
            <summary>
            Used to construct an instance of the class.
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.NodeChangeProfile.#ctor">
            <summary>
            Used to construct an instance of the class.
            </summary>
        </member>
        <member name="F:MIDRetail.DataCommon.NodeChangeProfile._nodeChanges">
            <summary>
            dictionary of changes made by this user to this node
                eProfileType (existing enum)
                Change Dictionary
                    column or field id
                    ChangeProfile
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.NodeChangeProfile.Add(MIDRetail.DataCommon.eProfileType,System.Collections.Generic.KeyValuePair{System.Int64,System.Object})">
            <summary>
            add a dictionary entry to the underlying dictionary for the specified profiletype
            </summary>
            <param name="profileType"></param>
            <param name="changeEntry"></param>
        </member>
        <member name="T:MIDRetail.DataCommon.ChangeProfileBase">
            <summary>
                this base stores the old and new values 
                for the object that has been altered
            </summary>
        </member>
        <member name="F:MIDRetail.DataCommon.ChangeProfileVSW._storeRID">
            <summary>
            Store RID
            </summary>
        </member>
        <member name="F:MIDRetail.DataCommon.ChangeProfileVSW._storeID">
            <summary>
            VSW Store ID
            </summary>
        </member>
        <member name="F:MIDRetail.DataCommon.ChangeProfileVSW._columnIndex">
            <summary>
            Column Index of Changed Column
            </summary>
        </member>
        <member name="F:MIDRetail.DataCommon.ChangeProfileSC._storeRID">
            <summary>
            Store RID
            </summary>
        </member>
        <member name="F:MIDRetail.DataCommon.ChangeProfileSC._storeID">
            <summary>
            VSW Store ID
            </summary>
        </member>
        <member name="F:MIDRetail.DataCommon.ChangeProfileSC.columnIndex">
            <summary>
            Column Index of Changed Column
            </summary>
        </member>
        <member name="F:MIDRetail.DataCommon.ChangeProfileElig._storeRID">
            <summary>
            Store RID
            </summary>
        </member>
        <member name="F:MIDRetail.DataCommon.ChangeProfileElig._storeID">
            <summary>
            VSW Store ID
            </summary>
        </member>
        <member name="F:MIDRetail.DataCommon.ChangeProfileElig.columnIndex">
            <summary>
            Column Index of Changed Column
            </summary>
        </member>
        <member name="F:MIDRetail.DataCommon.ChangeProfileDailyPct._storeRID">
            <summary>
            Store RID
            </summary>
        </member>
        <member name="F:MIDRetail.DataCommon.ChangeProfileDailyPct._storeID">
            <summary>
            VSW Store ID
            </summary>
        </member>
        <member name="F:MIDRetail.DataCommon.ChangeProfileDailyPct.columnIndex">
            <summary>
            Column Index of Changed Column
            </summary>
        </member>
        <member name="F:MIDRetail.DataCommon.ChangeProfileChar._sc_RID">
            <summary>
            Store Characteristic RID
            </summary>
        </member>
        <member name="F:MIDRetail.DataCommon.ChangeProfileChar._scg_RID">
            <summary>
            Store Characteristic Group RID
            </summary>
        </member>
        <member name="F:MIDRetail.DataCommon.ChangeProfileChar.columnIndex">
            <summary>
            Column Index of Changed Column
            </summary>
        </member>
        <member name="F:MIDRetail.DataCommon.ChangeProfileChainSet._timeID">
            <summary>
            Store Group List RID
            </summary>
        </member>
        <member name="F:MIDRetail.DataCommon.ChangeProfileChainSet._sglRID">
            <summary>
            Store Group List RID
            </summary>
        </member>
        <member name="F:MIDRetail.DataCommon.ChangeProfileChainSet.columnIndex">
            <summary>
            Column Index of Changed Column
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.Include">
            <summary>
            Summary description for Include.
            </summary>
            
        </member>
        <member name="M:MIDRetail.DataCommon.Include.ConvertBoolToChar(System.Boolean)">
            <summary>
            Converts boolean inParam to char return value: 1=true, 0=false
            </summary>
            <param name="inParam">Boolean input parameter to be converted to char</param>
            <returns>char 1=true, 0=false</returns>
        </member>
        <member name="M:MIDRetail.DataCommon.Include.ConvertBoolToInt(System.Boolean)">
            <summary>
            Converts boolean inParam to char return value: 1=true, 0=false
            </summary>
            <param name="inParam">Boolean input parameter to be converted to int</param>
            <returns>char 1=true, 0=false</returns>
        </member>
        <member name="M:MIDRetail.DataCommon.Include.ConvertStringToBool(System.String)">
            <summary>
            Converts string inParam to bool return value: 1=true, 0=false
            </summary>
            <param name="inParam">string input parameter to be converted to bool</param>
            <returns>char 1=true, 0=false</returns>
        </member>
        <member name="M:MIDRetail.DataCommon.Include.ConvertCharToBool(System.Char)">
            <summary>
            Converts char inParam to bool return value: 1=true, 0=false
            </summary>
            <param name="inParam">char input parameter to be converted to bool</param>
            <returns>char 1=true, 0=false</returns>
        </member>
        <member name="M:MIDRetail.DataCommon.Include.ConvertIntToBool(System.Int32)">
            <summary>
            Converts int inParam to bool return value: 0=false, else true
            </summary>
            <param name="inParam">int input parameter to be converted to bool</param>
            <returns>char 0=false, else true</returns>
        </member>
        <member name="M:MIDRetail.DataCommon.Include.GeteGlobalUserType(System.Int32)">
            <summary>
            Converts int UserRID to eGlobalUserType return value
            </summary>
            <param name="userRID">Check if UserRID is UndefinedUserRID = 1</param>
            <returns>enum eGlobalUserType</returns>
        </member>
        <member name="M:MIDRetail.DataCommon.Include.GetGlobalUserRID">
            <summary>
            Gets the "UndefinedUserRID" in case the "const" variable name changes again!
            </summary>
            <returns>int System UserRID (not an actual user) - defines Global versus User type</returns>
        </member>
        <member name="M:MIDRetail.DataCommon.Include.EvalGlobalUserTypeUserRID(MIDRetail.DataCommon.eGlobalUserType,System.Int32)">
            <summary>
            Evaluates enum and returns appropriate UserRID
            </summary>
            <param name="globalUserType">eGlobalUserType</param>
            <param name="UserID">UserID to evaluate</param>
            <returns>Evaluates enum and returns appropriate UserRID</returns>
        </member>
        <member name="M:MIDRetail.DataCommon.Include.GetNodeDisplay(MIDRetail.DataCommon.eHierarchyDisplayOptions,System.String,System.String,System.String)">
            <summary>
            Formats the node display based on the display option
            </summary>
            <param name="displayOption">The display option for the format</param>
            <param name="nodeID">The ID of the node</param>
            <param name="nodeName">The name of the node</param>
            <param name="nodeDescription">The description of the node</param>
            <returns></returns>
        </member>
        <member name="M:MIDRetail.DataCommon.Include.GetSizeKey(System.String,System.String,System.String)">
            <summary>
            Formats the size key
            </summary>
            <param name="productCategory">The product category of the size.</param>
            <param name="primary">The primary description of the size.</param>
            <param name="secondary">The secondary description of the size.</param>
            <returns></returns>
        </member>
        <member name="M:MIDRetail.DataCommon.Include.GetSizeName(System.String,System.String,System.String)">
            <summary>
            Formats the size key
            </summary>
            <param name="primary">The primary description of the size.</param>
            <param name="secondary">The secondary description of the size.</param>
            <param name="ID">The ID of the size.</param>
            <returns></returns>
        </member>
        <member name="M:MIDRetail.DataCommon.Include.DisposeControls(System.Windows.Forms.Control.ControlCollection)">
            <summary>
            Recursively disposes all controls in the form
            </summary>
            <param name="aControls">The ControlCollection to recursively dispose</param>
        </member>
        <member name="M:MIDRetail.DataCommon.Include.DisposeControl(System.Windows.Forms.Control)">
            <summary>
            Disposes a control
            </summary>
            <param name="aControl">The Control being disposed</param>
        </member>
        <member name="M:MIDRetail.DataCommon.Include.TrimStringsInObject(System.Object)">
            <summary>
            This method will recursively check all objects in the object and trim all string fields
            </summary>
            <param name="aObject">The object to trim</param>
            <remarks>Currently supports objects and Arrays</remarks>
        </member>
        <member name="T:MIDRetail.DataCommon.Need">
            <summary>
            Need is defined as the inventory required to achieve a planned, future on-hand level.
            Percent need is a measurement of need relative to plan.
            </summary>
            <remarks>
            The Need class contains static methods that calculate a Unit OTS Plan, Unit Need and Percent Need.
            The static methods are:
            <list type="bullet">
            <item>UnitOTSPlan: Input for this method is an ending inventory plan and a sales plan for a for a selling horizon. Output from this method is a single plan value.</item>
            <item>UnitNeed: Input for this method is a UnitOTSPlan, a beginning onhand value and an intransit value for the selling horizon used to calculate the UnitOTSPlan and any units already allocated. Output from this method is the unit need.</item>
            <item>PctUnitNeed: Input for this method is a UnitNeed and a UnitOTSPlan (the same plan used to calculate UnitNeed). Output from this method is the PctUnitNeed.</item>
            </list> 
            </remarks>
        </member>
        <member name="M:MIDRetail.DataCommon.Need.UnitOTSPlan(System.Double,System.Double[])">
            <summary>
            UnitOTSPlan calculates an OTS plan for a given ending inventory plan and a sales
            plan for a shipping horizon (weekly sales plan for a range of weeks)
            </summary>
            <param name="aEndInventoryPlan">
            The planned ending inventory level at the end of the shipping horizon (range of weeks).
            </param>
            <param name="aSalesPlan">
            The weekly sales plans for a shipping horizon (a range of weeks).
            </param>
            <returns>
            The unit open to ship plan.
            </returns>
        </member>
        <member name="M:MIDRetail.DataCommon.Need.UnitNeed(System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            UnitNeed calculates the unit need for a shipping horizon (range of weeks) using 
            the given ownership (onhand, intransit and units allocated) and OTS unit plan for the horizon 
            </summary>
            <param name="aUnitOTSPlan">The unit Open To Ship combined sales and inventory plan for the shipping horizon</param>
            <param name="aOnhand">Units owned at the beginning of the shipping horizon.</param>
            <param name="aIntransit">The total units intransit for the shipping horizon</param>
            <param name="aUnitsAllocated">Units already allocated.  For a planning funcion, this value is zero.</param>
            <returns>Unit Need for the shipping horizon.</returns>
        </member>
        <member name="M:MIDRetail.DataCommon.Need.PctUnitNeed(System.Double,System.Double)">
            <summary>
            PctUnitNeed for a shipping horizon using the given Unit Need and Unit OTS Plan for the shipping horizon
            </summary>
            <param name="aUnitNeed">
            The Unit Need for the shipping horizon (range of weeks).
            </param>
            <param name="aUnitOTSPlan">
            The combined sales and ending inventory plans for the shipping horizon.
            </param>
            <returns>
            Percent Unit Need.
            </returns>
        </member>
        <member name="T:MIDRetail.DataCommon.HashKeyObject">
            <summary>
            This class defines an object that is used as a key to a Hashtable.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.DailyPercentagesComparer">
            <summary>
            Compares two Allocation profiles based on the units allocated to a specific store in the GeneralComponent.
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.HeaderKeys.LoadKeys(System.String,System.Collections.Generic.List{System.String}@,System.Collections.Generic.List{System.String}@,System.Collections.Generic.List{System.String}@,System.String@)">
            <summary>
            Reads the Header Keys files and builds the key lists for how to match headers and how to generate header IDs.
            </summary>
            <param name="fileName"></param>
            <param name="headerKeysToMatchList"></param>
            <param name="HeaderIdKeysList"></param>
        </member>
        <member name="T:MIDRetail.DataCommon.LowLevelVersionOverrideProfile">
            <summary>
            Used to hold information about low level version overrides.
            </summary>
            <remarks>
            The key is the record ID of the low level node
            </remarks>
        </member>
        <member name="M:MIDRetail.DataCommon.LowLevelVersionOverrideProfile.#ctor(System.Int32)">
            <summary>
            Used to construct an instance of the class.
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.LowLevelVersionOverrideProfile.#ctor(System.Int32,MIDRetail.DataCommon.HierarchyNodeProfile,System.Boolean,MIDRetail.DataCommon.VersionProfile,System.Boolean)">
            <summary>
            Used to construct an instance of the class.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.LowLevelVersionOverrideProfile.ProfileType">
            <summary>
            Returns the eProfileType of this profile.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.LowLevelVersionOverrideProfile.NodeProfile">
            <summary>
            Gets or sets the HierarchyNodeProfile of the low level node.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.LowLevelVersionOverrideProfile.VersionIsOverridden">
            <summary>
            Gets or sets a flag identifying if the version has been overridden for this node.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.LowLevelVersionOverrideProfile.VersionProfile">
            <summary>
            Gets or sets the selected version.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.LowLevelVersionOverrideProfile.Exclude">
            <summary>
            Gets or sets whether the low level node is to be excluded.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.LowLevelVersionOverrideProfile.OverrideVersionProfile">
            <summary>
            Gets or sets the override version.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.LowLevelVersionOverrideProfile.VersionOverrideNodeProfile">
            <summary>
            Gets or sets the profile of the node where the version was overridden.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.LowLevelVersionOverrideProfile.ExcludeIsOverridden">
            <summary>
            Gets or sets a flag identifying if the exclude flag has been overridden for this node.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.LowLevelVersionOverrideProfile.ExcludeOverrideNodeProfile">
            <summary>
            Gets or sets the profile of the node where the exclude flag was overridden.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.LowLevelVersionOverrideProfileList">
            <summary>
            Used to retrieve a list of low level version override profiles
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.LowLevelVersionOverrideProfileList.#ctor(MIDRetail.DataCommon.eProfileType)">
            <summary>
            Used to construct an instance of the class.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.LowLevelExcludeProfile">
            <summary>
            Used to hold information about low level exclusions.
            </summary>
            <remarks>
            The key is the record ID of the low level node
            </remarks>
        </member>
        <member name="M:MIDRetail.DataCommon.LowLevelExcludeProfile.#ctor(System.Int32)">
            <summary>
            Used to construct an instance of the class.
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.LowLevelExcludeProfile.#ctor(System.Int32,MIDRetail.DataCommon.HierarchyNodeProfile,System.Boolean)">
            <summary>
            Used to construct an instance of the class.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.LowLevelExcludeProfile.ProfileType">
            <summary>
            Returns the eProfileType of this profile.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.LowLevelExcludeProfile.NodeProfile">
            <summary>
            Gets or sets the HierarchyNodeProfile of the low level node.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.LowLevelExcludeProfile.Exclude">
            <summary>
            Gets or sets whether the low level node is to be excluded.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.LowLevelExclusionProfileList">
            <summary>
            Used to retrieve a list of low level exclusion profiles
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.LowLevelExclusionProfileList.#ctor(MIDRetail.DataCommon.eProfileType)">
            <summary>
            Used to construct an instance of the class.
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.MethodOverride.#ctor">
            <summary>
            Creates a new instance of MethodOverride.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.OTSPlanOverride">
            <summary>
            Summary description for ForecastingOverride.
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.OTSPlanOverride.#ctor">
            <summary>
            Creates a new instance of ForecastingOverride.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.ForecastingOverride">
            <summary>
            Summary description for ForecastingOverride.
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.ForecastingOverride.#ctor">
            <summary>
            Creates a new instance of ForecastingOverride.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.SizeCurveGenOverride">
            <summary>
            Summary description for SizeCurveGenOverride.
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.SizeCurveGenOverride.#ctor">
            <summary>
            Creates a new instance of SizeCurveGenOverride.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.MIDConnectionString">
            <summary>
            Summary description for MIDConnectionString.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.Encryption">
            <summary>
            Class that provides an encryption/decryption algorithm for encoding valuable information.
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.Encryption.#ctor(System.Char)">
            <summary>
            Creates a new instance of the Encryption class using the given base.
            </summary>
            <param name="aBase">
            A character that indicates the base of the encryption.  The base is the beginning character of the valid range of characters that can be encrypted.
            The valid range is terminated at 64 ascii characters.  For instance, if ":" is the base, only characters in the range of ":" to "y" can be specified
            in the string to be encrypted.
            </param>
        </member>
        <member name="M:MIDRetail.DataCommon.Encryption.Encrypt(System.String)">
            <summary>
            Method that encrypts a given string.
            </summary>
            <param name="aKey">
            The string to encrypt.
            </param>
            <returns>
            An encrypted string.
            </returns>
        </member>
        <member name="M:MIDRetail.DataCommon.Encryption.Decrypt(System.String)">
            <summary>
            Method that decrypts a given encrypted string.
            </summary>
            <param name="aKey">
            The encrypted string to decrypt.
            </param>
            <returns>
            The decrypted string.
            </returns>
        </member>
        <member name="T:MIDRetail.DataCommon.MIDEnvironment">
            <summary>
            Summary description for Include.
            </summary>
            
        </member>
        <member name="T:MIDRetail.DataCommon.MIDDatabaseUnavailableException">
            <summary>
            This exception is thrown when the application can not access the database
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.DatabaseForeignKeyViolation">
            <summary>
            This exception is thrown when the database violates a foreign key constraint
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.DatabaseRetryableViolation">
            <summary>
            This exception is thrown when the database blocking error is encountered
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.DatabaseRetryableViolation.MidErrorMessage">
            <summary>
            When "true", expand error number to get message text; when "false" error number already expanded.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.DatabaseUniqueIndexConstriantViolation">
            <summary>
            This exception is thrown when the database unique index constraint is violated
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.DatabaseUniqueIndexConstriantViolation2">
            <summary>
            This exception is thrown when the database unique index constraint is violated
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.InvalidDatabase">
            <summary>
            This exception is thrown when the database is invalid
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.DatabaseLoginFailed">
            <summary>
            This exception is thrown when the application is unable to log into the database
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.SizeCatgPriSecNotUniqueException">
            <summary>
            This exception is thrown when a size definition's category/primary/secondary is not unique
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.SizePrimaryRequiredException">
            <summary>
            This exception is thrown when a size definition's primary is missing
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.ProductNotFoundException">
            <summary>
            This exception is thrown when a product is not found
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.FirstLevelNotStyleException">
            <summary>
            This exception is thrown when the first level in a product is not a style
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.FormatInvalidException">
            <summary>
            This exception is thrown when the format of data is invalid
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.ColorLevelNotFoundException">
            <summary>
            This exception is thrown when a color level is not found in the hierarchy level definitions
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.ColorCodeNotValidException">
            <summary>
            This exception is thrown when a color code does not lie within the constraints of hierarchy color level definitions
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.InvalidLevelLengthTypeException">
            <summary>
            This exception is thrown when an invalid hierarchy level length type is found
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.SizeLevelNotFoundException">
            <summary>
            This exception is thrown when a size level is not found in the hierarchy level definitions
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.SizeCodeNotValidException">
            <summary>
            This exception is thrown when a size code does not lie within the constraints of hierarchy size level definitions
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.NodeIDTooLargeException">
            <summary>
            This exception is thrown when a node ID exceeds the constraints of hierarchy level definitions
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.DatabaseNotInCatalog">
            <summary>
            This exception is thrown when the object being referenced is not in the database catalog
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.ParallelQueryThreadError">
            <summary>
            This exception is thrown when the query processor could not start the necessary thread resources for parallel query
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.EmptyStoreList">
            <summary>
            This exception is thrown when an empty store list is sent to Data
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.DuplicateOverrideListEntry">
            <summary>
            This exception is thrown when an empty store list is sent to Data
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.MIDException">
            <summary>
            Summary description for MIDException.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.MIDException.ExpandMidErrorMessage">
            <summary>
            When "true", expand error number to get message text; when "false" error number already expanded.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.MIDHashtable">
            <summary>
            MIDHashtable is a Hashtable with the Add() method
            overridden so if you add something that is already on 
            the Hashtable, it modifies it.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.MIDListBoxItem">
            <summary>
            Summary description for MIDListBoxItem.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.MIDListBoxItem.Key">
            <summary>
            Gets or sets the key for the listbox item.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.MIDListBoxItem.Value">
            <summary>
            Gets or sets the text for the listbox item.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.MIDListBoxItem.Tag">
            <summary>
            Gets or sets the tag for the listbox item.
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.MIDListBoxItem.ToString">
            <summary>
            override ToString
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:MIDRetail.DataCommon.MIDMarshalByRefObject.#ctor(System.Runtime.Remoting.Lifetime.ISponsor)">
            <summary>
            Creates a new instance of MIDMarshalByRefObject using the given ISponsor as the sponsoring object.
            </summary>
            <param name="aSponsor">
            The ISponsor object that will become the sponsor for the inheriting object.
            </param>
        </member>
        <member name="M:MIDRetail.DataCommon.MIDMarshalByRefObject.#ctor(System.Runtime.Remoting.Lifetime.ISponsor,System.Int32)">
            <summary>
            Creates a new instance of MIDMarshalByRefObject using the given ISponsor as the sponsoring object.
            </summary>
            <param name="aSponsor">
            The ISponsor object that will become the sponsor for the inheriting object.
            </param>
        </member>
        <member name="M:MIDRetail.DataCommon.MIDMarshalByRefObject.InitializeLifetimeService">
            <summary>
            Initializes lifetime services for remoting.  This method also Registers the home Session as the sponsor for this object.
            </summary>
            <returns>
            The lease for this object.
            </returns>
        </member>
        <member name="T:MIDRetail.DataCommon.MIDMath">
            <summary>
            Math routines (not in the C#.Math class
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.MIDMath.GreatestCommonDivisor(System.Int32,System.Int32)">
            <summary>
            Calculates the Greatest Common Divisor of two integers.
            </summary>
            <param name="aInteger1">First of two integers</param>
            <param name="aInteger2">Second of two integers</param>
            <returns></returns>
        </member>
        <member name="M:MIDRetail.DataCommon.MIDMath.LeastCommonMultiple(System.Int32,System.Int32)">
            <summary>
            Calculates the Least Common Multiple of two integers
            </summary>
            <param name="aInteger1">First of two integers</param>
            <param name="aInteger2">Second of two integers</param>
            <returns></returns>
        </member>
        <member name="M:MIDRetail.DataCommon.MIDMath.GetStandardDeviation(System.Collections.ArrayList)">
            <summary>
            Calculates Std Deviation from an ArrayList of doubles
            </summary>
            <param name="num"></param>
            <returns></returns>
        </member>
        <member name="M:MIDRetail.DataCommon.MIDMath.GetStandardDeviation(System.Double[])">
            <summary>
            Calculates Std Deviation from an array of doubles
            </summary>
            <param name="num"></param>
            <returns></returns>
        </member>
        <member name="M:MIDRetail.DataCommon.MIDMath.GetAvg(System.Double[])">
            <summary>
            Calculates the average from ann array of doubles
            </summary>
            <param name="num"></param>
            <returns></returns>
        </member>
        <member name="M:MIDRetail.DataCommon.MIDMath.GetAvg(System.Int32[])">
            <summary>
            Calculates the average from ann array of doubles
            </summary>
            <param name="num"></param>
            <returns></returns>
        </member>
        <member name="M:MIDRetail.DataCommon.MIDMath.GetAvg(System.Collections.ArrayList)">
            <summary>
            Calculates the average from ann ArrayList of doubles
            </summary>
            <param name="num"></param>
            <returns></returns>
        </member>
        <member name="M:MIDRetail.DataCommon.MIDMath.IsNumber(System.String)">
            <summary>
            Determines if a string represents a number
            </summary>
            <param name="strNumber">String representation of the potential number</param>
            <returns>True: if the string represents a number; False otherwise</returns>
        </member>
        <member name="M:MIDRetail.DataCommon.MIDMath.IsPositiveNumber(System.String)">
            <summary>
            Determine if a string contains a positive number (integer or real)
            </summary>
            <param name="strNumber">String containing the potential number</param>
            <returns>True: if string contains a positive number; False otherwise</returns>
        </member>
        <member name="M:MIDRetail.DataCommon.MIDMath.MinNotEqualZero(System.Int32,System.Int32)">
            <summary>
            returns the minimum number that is not equal to zero.
            </summary>
            <param name="num1"></param>
            <param name="num2"></param>
            <returns></returns>
        </member>
        <member name="M:MIDRetail.DataCommon.MIDMath.MinNotEqualZero(System.Double,System.Double)">
            <summary>
            returns the minimum number that is not equal to zero.
            </summary>
            <param name="num1"></param>
            <param name="num2"></param>
            <returns></returns>
        </member>
        <member name="M:MIDRetail.DataCommon.MIDMath.PackIntegers(System.Int32,System.Int32)">
            <summary>
            returns a long with aInt_1 in bits 32-63 and aInt_0 in bits 0-31 (neither can be negative)
            </summary>
            <param name="aInt_0">Integer to put in bits 0-31</param>
            <param name="aInt_1">Integer to put in bits 32-63</param>
            <returns></returns>
        </member>
        <member name="M:MIDRetail.DataCommon.MIDMath.UnPackLong(System.Int64)">
            <summary>
            returns a 2-dimensional integer array with bits 0-31 of the long in position 0 and bits 32-63 in position 1
            </summary>
            <param name="aIntegerPackedLong">Long to split into 2 integers</param>
            <returns>2-dimensional integer array: int[0] = bits 0-31, int[1] = bits 32-63</returns>
        </member>
        <member name="M:MIDRetail.DataCommon.MIDMath.GetRandomDouble">
            <summary>
            Gets random number.
            </summary>
            <returns>Random Double</returns>
        </member>
        <member name="M:MIDRetail.DataCommon.MIDMath.GetRandomInteger">
            <summary>
            Gets random number.
            </summary>
            <returns>Random positive integer.</returns>
        </member>
        <member name="M:MIDRetail.DataCommon.MIDMath.ValidFileName(System.String)">
            <summary>
            Determines if a string can be used as a file name in Windows
            </summary>
            <param name="aFileName">String representation of the potential file name</param>
            <returns>True: if the string is a valid file name; False otherwise</returns>
        </member>
        <member name="M:MIDRetail.DataCommon.MIDMath.ConvertInFixToPostFixNotation(System.String)">
            <summary>
            Converts an "InFix" or "Algebraic" expression to a "PostFix" or "Reverse Polish" expression
            </summary>
            <param name="aInFixExpression">The InFix (Algebraic) expression to convert</param>
            <returns>String containing the corresponding "PostFix" (Reverse Polish) expression.</returns>
        </member>
        <member name="M:MIDRetail.DataCommon.MIDMath.ProcessInFixToken(System.String,System.Collections.Generic.Stack{System.String}@,System.Text.StringBuilder@)">
            <summary>
            Processes a token (or string of tokens without intervening spaces) from an InFix Expression 
            </summary>
            <param name="aInFixToken">Token or string of tokens from an InFix Expression with all spaces removed</param>
            <param name="aOperatorStack">Stack containing previously processed operators waiting to be put in the PostFixExpression</param>
            <param name="aPostFixExpression">Post Fix Expression that is being built</param>
        </member>
        <member name="M:MIDRetail.DataCommon.MIDMath.ProcessOperator(System.String,System.Collections.Generic.Stack{System.String}@,System.Text.StringBuilder@)">
            <summary>
            Processes an operator by placing it either on the stack or in the post fix expression
            </summary>
            <param name="aOperator">Operator to be processed</param>
            <param name="aOperatorStack">Stack containing previously processed operators</param>
            <param name="aPostFixExpression">Post Fix Expression being built.</param>
        </member>
        <member name="M:MIDRetail.DataCommon.MIDMath.GetOperatorPrecedence(System.Char)">
            <summary>
            Determines the precedence of the given operator
            </summary>
            <param name="aOperator">Operator whose precedence is to be determined</param>
            <returns>Precedence of the given operator (the larger the number the higher the precedence).</returns>
        </member>
        <member name="T:MIDRetail.DataCommon.MID2DimIntDictionary">
            <summary>
            Creates a 2-dimensional dictionary containing 2 integer keys.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.MID3DimIntDictionary">
            <summary>
            Creates a 3-dimensional dictionary containing 3 integer keys.
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.MIDObject.#ctor">
            <summary>
            Creates a new instance of MIDObject.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.MIDstringTools">
            <summary>
            Summary description for MIDstring.
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.MIDstringTools.SplitGeneric(System.String,System.Char,System.Boolean)">
            <summary>
            Splits a string that may contain fields delimited by quotes and returns it into a generic list.
            </summary>
            <param name="text"></param>
            <param name="delimiter"></param>
            <param name="trimLeadingAndTrailingSpaces"></param>
            <returns></returns>
        </member>
        <member name="M:MIDRetail.DataCommon.MIDstringTools.Split(System.String,System.Char,System.Boolean)">
            <summary>
            Splits a string that may contain fields delimited by quotes 
            </summary>
            <param name="text">The string to be parsed.</param>
            <param name="delimiter">The delimiter used to seperate the fields.</param>
            <param name="trimLeadingAndTrailingSpaces">This flag identifies it leading and trailing spaces should be removed.</param>
            <returns></returns>
        </member>
        <member name="T:MIDRetail.DataCommon.MIDTimer">
            <summary>
            Summary description for MIDTimer.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.MIDTimer.StartTime">
            <summary>
            Start time of MIDTimer.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.MIDTimer.StopTime">
            <summary>
            Stop time of MIDTimer.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.MIDTimer.ElaspedTime">
            <summary>
            Elasped time of MIDTimer based upon STOP time.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.MIDTimer.ElaspedTimeNow">
            <summary>
            Elasped time of MIDTimer based upon DateTime.Now.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.MIDTimer.ElaspedTimeString">
            <summary>
            Elasped time in a string format.
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.MIDTimer.Start">
            <summary>
            Starts the timer and sets the StartTime
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.MIDTimer.Stop">
            <summary>
            Stops the timer and sets the StopTime.
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.MIDTimer.Stop(System.String)">
            <summary>
            Stops the timer and writes out a debug message with the tag in front.
            </summary>
            <param name="tag"></param>
        </member>
        <member name="M:MIDRetail.DataCommon.MIDTimer.Write">
            <summary>
            Writes out the elaspe time as a string.
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.MIDTimer.Write(System.String)">
            <summary>
            Writes out elapsed time with tag in front.
            </summary>
            <param name="tag"></param>
        </member>
        <member name="T:MIDRetail.DataCommon.MIDUserInfo">
            <summary>
            Summary description for MIDUserInfo.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.FromLevelCombo">
            <summary>
            Class that defines the contents of the FromLevel combo box.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.ToLevelCombo">
            <summary>
            Class that defines the contents of the ToLevel combo box.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.HighLevelCombo">
            <summary>
            Class that defines the contents of the HighLevel combo box.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.IterationsCombo">
            <summary>
            Class that defines the contents of the iterations combo box.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.VariableCombo">
            <summary>
            Class that defines the contents of the variable combo box.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.ComputationModeCombo">
            <summary>
            Class that defines the contents of the computation mode combo box.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.UsingCombo">
            <summary>
            Class that defines the contents of the using combo box.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.VariableCheckedListBox">
            <summary>
            Class that defines the contents of the variable combo box.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.OTSForecastVariableProfile">
            <summary>
            Class that defines information for OTS Forecast variables.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.OTSForecastVariableProfile.ProfileType">
            <summary>
            Returns the eProfileType of this profile.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.OTSForecastVariableProfileList">
            <summary>
            Used to retrieve a list of OTSForecastVariable profiles
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.OTSForecastVariableProfileList.#ctor(MIDRetail.DataCommon.eProfileType)">
            <summary>
            Used to construct an instance of the class.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.PackPattern">
            <summary>
            Defines criteria used to generate packs in a Work Up Buy
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.PackPattern.#ctor(System.Int32,System.String,System.Collections.Generic.List{MIDRetail.DataCommon.SizeUnits})">
            <summary>
            Creates an instance of the PackPattern Class containing a Size Run
            </summary>
            <param name="aPackPatternRID">RID that identifies the Pack Pattern</param>
            <param name="aPackPatternName">Unique name of the pattern within a given combination.</param>
            <param name="aSizeUnitList">List of the sizes and units in the pack size run</param>
        </member>
        <member name="M:MIDRetail.DataCommon.PackPattern.#ctor(System.Int32,System.String,MIDRetail.DataCommon.SizeUnits[])">
            <summary>
            Creates an instance of the PackPattern Class containing a Size Run
            </summary>
            <param name="aPackPatternRID">RID that identifies the Pack Pattern</param>
            <param name="aPackPatternName">Unique name of the pattern within a given combination.</param>
            <param name="aSizeUnitArray">SizeUnits array of sizes in the pack size run (no duplicate size codes)</param>
        </member>
        <member name="M:MIDRetail.DataCommon.PackPattern.#ctor(System.Int32,System.String,MIDRetail.DataCommon.SizeUnitRun)">
            <summary>
            Creates an instance of the PackPattern Class containing a Size Run
            </summary>
            <param name="aPackPatternRID">RID that identifies the Pack Pattern</param>
            <param name="aPackPatternName">Unique name of the pattern within a given combination.</param>
            <param name="aSizeUnitRun">SizeUnitRun containing the sizes and units for this pack's size run</param>
        </member>
        <member name="M:MIDRetail.DataCommon.PackPattern.#ctor(System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            Creates an instance of the PackPattern Class containing no size run
            </summary>
            <param name="aPackPatternRID">RID that identifies the Pack Pattern</param>
            <param name="aPackPatternName">Unique name of the pattern within a given combination.</param>
            <param name="aPackMultiple">Pack Multiple for the Pack Pattern</param>
            <param name="aMaxPatternPacks">Maximum packs of this multiple that a generated header may contain.</param>
        </member>
        <member name="M:MIDRetail.DataCommon.PackPattern.BuildSizeRun(MIDRetail.DataCommon.SizeUnitRun)">
            <summary>
            Builds the PackPattern class using a given Size Run
            </summary>
            <param name="aSizeUnitRun">SizeUnitRun describing the Pack's size run</param>
        </member>
        <member name="P:MIDRetail.DataCommon.PackPattern.PatternType">
            <summary>
            Identifies the PackPattern Type
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.PackPattern.PatternIsReadOnly">
            <summary>
            Indicates whether Pack Pattern is read only
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.PackPattern.PatternIncludesSizeRun">
            <summary>
            Indicates if this PackPattern contains a Size Run
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.PackPattern.PackMultiple">
            <summary>
            Gets Pack Multiple
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.PackPattern.MaxPatternPacks">
            <summary>
            Gets Maximum number of packs of this Pattern that may exist on a header
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.PackPattern.SizeRIDs">
            <summary>
            Gets a list of the Size RIDs associated with this pattern.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.PackPattern.SizeRun">
            <summary>
            Gets a copy of the SizeUnitRun associated with this pattern
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.PackPattern.SizeUnitsList">
            <summary>
            Gets a copy of the SizeUnitsList associated with this pattern
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.PackPattern.CountOfSizesWithUnits">
            <summary>
            Gets the count of sizes having units in this pattern.
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.PackPattern.SetPackPatternName(System.String,MIDRetail.DataCommon.MIDException@)">
            <summary>
            Sets the pack pattern name.
            </summary>
            <param name="aPackPatternName">Desired pack pattern name</param>
            <param name="aStatusReason">The reason the set action failed; if the set action is successful, this message is null.</param>
            <returns>True: set was successful, aStatusReason is null in this case; False: set failed, aStatusReason contains a reason for the failure.</returns>
        </member>
        <member name="M:MIDRetail.DataCommon.PackPattern.SetMaxPatternPacks(System.Int32,MIDRetail.DataCommon.MIDException@)">
            <summary>
            Sets the maximum pattern packs which is the number of packs with this pattern that may co-exist on the same header.
            </summary>
            <param name="aMaxPatternPacks">Desired maximum pattern packs</param>
            <param name="aStatusReason">The reason the set action failed; if the set action is successful, this message is null.</param>
            <returns></returns>
        </member>
        <member name="M:MIDRetail.DataCommon.PackPattern.SetPackMultiple(System.Int32,MIDRetail.DataCommon.MIDException@)">
            <summary>
            Sets the pack multiple for this Pack Pattern
            </summary>
            <param name="aPackMultiple">The desired pack multiple</param>
            <param name="aStatusReason">The reason the set action failed; if the set action is successful, this message is null.</param>
            <returns>True:  Set was successful; False: Set failed in which case, aStatusReason will give the reason for the failure.</returns>
            <remarks>See also the method "RemoveSizeRunFromPattern".</remarks>
        </member>
        <member name="M:MIDRetail.DataCommon.PackPattern.GetSizeUnits(System.Int32)">
            <summary>
            Gets the units associated with the identified size in this PackPattern's size run
            </summary>
            <param name="aSizeRID">Size Code RID that identifies the size</param>
            <returns>Number of units in this size for this PackPattern</returns>
        </member>
        <member name="M:MIDRetail.DataCommon.PackPattern.SetSizeInRun(MIDRetail.DataCommon.SizeUnits,MIDRetail.DataCommon.MIDException@)">
            <summary>
            Replaces the size units for a given size with the PackPattern's size run
            </summary>
            <param name="aSizeUnits">SizeUnits that identifies the Size Code RID and size units to replace</param>
            <param name="aStatusReason">The reason the set action failed; if the set action is successful, this message is null.</param>
            <remark>Changing size units for a size WILL change the PackPattern's Pack Multiple</remark>"
        </member>
        <member name="M:MIDRetail.DataCommon.PackPattern.RemoveSizeFromRun(System.Int32,MIDRetail.DataCommon.MIDException@)">
            <summary>
            Removes a size from the PackPattern's size run provided the Pack Multiple is not reduced to zero
            </summary>
            <param name="aSizeRID">Size Code RID that is to be removed</param>
            <param name="aStatusReason">The reason the set action failed; if the set action is successful, this message is null.</param>
            <remarks>Size can only be removed from size run when other sizes with positive units remain in the run</remarks>
        </member>
        <member name="M:MIDRetail.DataCommon.PackPattern.ReplaceSizeRunInPattern(System.Collections.Generic.List{MIDRetail.DataCommon.SizeUnits})">
            <summary>
            Replaces or adds a size run in the PackPattern
            </summary>
            <param name="aSizeRunList">List of SizeUnits in the size run</param>
        </member>
        <member name="M:MIDRetail.DataCommon.PackPattern.ReplaceSizeRunInPattern(MIDRetail.DataCommon.SizeUnitRun)">
            <summary>
            Replaces or adds a size run in the PackPattern
            </summary>
            <param name="aSizeUnitRun">Size run to add to the pattern</param>
        </member>
        <member name="M:MIDRetail.DataCommon.PackPattern.RemoveSizeRunFromPattern(MIDRetail.DataCommon.MIDException@)">
            <summary>
            Removes a size run from the pack pattern
            </summary>
            <param name="aStatusReason">The reason the set action failed; if the set action is successful, this message is null.</param>
            <returns>True: when removal is successful; False: when removal fails</returns>
        </member>
        <member name="M:MIDRetail.DataCommon.PackPattern.RemoveSizeRunFromPattern(System.Int32,MIDRetail.DataCommon.MIDException@)">
            <summary>
            Removes a size run from the pack pattern
            </summary>
            <param name="aNewPackMultiple">Pack Multiple of the pattern after removal is complete</param>
            <param name="aStatusReason">The reason the remove action failed; if the remove action is successful, this message is null.</param>
            <returns>True: when removal is successful; False: when removal fails</returns>
        </member>
        <member name="M:MIDRetail.DataCommon.PackPattern.Equals(System.Object)">
            <summary>
            Determines if a given object has the same content as this object.
            </summary>
            <param name="obj">The object to compare to this object</param>
            <returns>True: both objects contain the same content; False: objects do not contain same content</returns>
        </member>
        <member name="M:MIDRetail.DataCommon.PackPattern.GetHashCode">
            <summary>
            Gets the hash code for this object
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:MIDRetail.DataCommon.PackPattern.Clone">
            <summary>
            Returns a clone of this object.
            </summary>
            <returns>A copy of the content of this object</returns>
        </member>
        <member name="T:MIDRetail.DataCommon.BuildPacksMethod_PackPattern">
            <summary>
            Describes a Pack Pattern associated with a specific BuildPacksMethod
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.BuildPacksMethod_PackPattern.#ctor(System.Int32,System.Int32,System.String,System.Collections.Generic.List{MIDRetail.DataCommon.SizeUnits})">
            <summary>
            Creates an instance of a BuildPacksMethod Pack Pattern containing a Size Run
            </summary>
            <param name="aMethodRID">RID of the BuildPacksMethod</param>
            <param name="aPackPatternRID">RID that identifies the PackPattern within the Method</param>
            <param name="aPackPatternName">Unique name of the pattern within the method and combination</param>
            <param name="aSizeUnitList">List of Size Units within the size run</param>
        </member>
        <member name="M:MIDRetail.DataCommon.BuildPacksMethod_PackPattern.#ctor(System.Int32,System.Int32,System.String,MIDRetail.DataCommon.SizeUnitRun)">
            <summary>
            Creates an instance of a BuildPacksMethod Pack Pattern containing a Size Run
            </summary>
            <param name="aMethodRID">RID of the BuildPacksMethod</param>
            <param name="aPackPatternRID">RID that identifies the PackPattern within the Method</param>
            <param name="aPackPatternName">Unique name of the pattern within the method and combination</param>
            <param name="aSizeUnitRun">SizeRun associated with this Pack Pattern</param>
        </member>
        <member name="M:MIDRetail.DataCommon.BuildPacksMethod_PackPattern.#ctor(System.Int32,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            Creates an instance of a BuildPacksMethod Pack Pattern with no particular size run
            </summary>
            <param name="aMethodRID">RID of the BuildPacksMethod</param>
            <param name="aPackPatternRID">RID that identifies the PackPattern within the Method</param>
            <param name="aPackPatternName">Unique name of the pattern within the method and combination</param>
            <param name="aPackMultiple">Pack Multiple associated with this Pack Pattern</param>
        </member>
        <member name="P:MIDRetail.DataCommon.BuildPacksMethod_PackPattern.PatternIsReadOnly">
            <summary>
            Indicates if the pattern is reas only or may be updated.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.BuildPacksMethod_PackPattern.PatternType">
            <summary>
            Gets the PackPatternType
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.BuildPacksMethod_PackPattern.Clone">
            <summary>
            Creates a clone of this object
            </summary>
            <returns>A clone of this object</returns>
        </member>
        <member name="T:MIDRetail.DataCommon.Vendor_PackPattern">
            <summary>
            Describes a Pack Pattern associated with Vendor contraints 
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.Vendor_PackPattern.#ctor(System.Int32,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            Creates an instance of a Pack Pattern (with no particular size run)
            </summary>
            <param name="aBPC_RID">RID that identifies the Build Pack Criteria</param>
            <param name="aPackPatternRID">RID that identifies the PackPattern within the Build Pack Criteria</param>
            <param name="aPackPatternName">Unique name of the pattern within the method and combination</param>
            <param name="aPackMultiple">Pack Multiple associated with the Pack Pattern</param>
        </member>
        <member name="P:MIDRetail.DataCommon.Vendor_PackPattern.PatternType">
            <summary>
            Gets the PackPatternType
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.OptionPack_PackPattern">
            <summary>
            Describes a pack option witin a build packs method
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.PackPatternCombo">
            <summary>
            Describes a pack pattern combination (valid packs that may be generated on a header).
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.PackPatternCombo.#ctor(System.Int32,System.String,System.Boolean,System.Collections.Generic.List{MIDRetail.DataCommon.PackPattern})">
            <summary>
            Creates an instance of the PackPatternCombo.
            </summary>
            <param name="aPatternComboRID">RID of the Combination</param>
            <param name="aPatternComboName">Combination name </param>
            <param name="aPatternComboSelected">True: Combination is selected; False;</param>
            <param name="aPackPatternList">List of PackPatterns belonging to the Combination</param>
        </member>
        <member name="P:MIDRetail.DataCommon.PackPatternCombo.PackPatternType">
            <summary>
            Gets the Pack Pattern Type
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.PackPatternCombo.ComboRID">
            <summary>
            Gets the Combination RID
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.PackPatternCombo.ComboName">
            <summary>
            Gets the Combination Name
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.PackPatternCombo.ComboSelected">
            <summary>
            Indicates whether the Combination is selected for consideration.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.PackPatternCombo.PackPatternList">
            <summary>
            Gets a copy of the list of pack patterns belonging to this combination.
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.PackPatternCombo.SetPackPatternList(System.Collections.Generic.List{MIDRetail.DataCommon.PackPattern},MIDRetail.DataCommon.MIDException@)">
            <summary>
            Sets the PackPatternList associated with this combination
            </summary>
            <param name="aPackPatternList">The list of patterns belonging to this combination</param>
            <param name="aStatusReason">The reason the set fails; null if the set succeeds</param>
            <returns>True: Set was successful in which case the aStatusReason is null; False: Set failed and the reason for failure is in aStatusReason.</returns>
        </member>
        <member name="T:MIDRetail.DataCommon.BuildPacksMethod_Combo">
            <summary>
            BuildPacksMethod Pack Pattern Combination.  Combinations of this type reside on the database with the method.  
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.BuildPacksMethod_Combo.PackPatternType">
            <summary>
            Gets the Pattern type of the Combination
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.BuildPacksMethod_Combo.Clone">
            <summary>
            Gets a clone of this pack pattern combination
            </summary>
            <returns></returns>
        </member>
        <member name="T:MIDRetail.DataCommon.Vendor_Combo">
            <summary>
            Vendor Combination.  Combinations of this type reside in the BuildPackCriteria table independent of the BuildPackMethod; a BuildPackMethod may reference a Vendor Combination but may mot modify it. 
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.Vendor_Combo.#ctor(System.Int32,System.Int32,System.String,System.Boolean,System.Collections.Generic.List{MIDRetail.DataCommon.PackPattern})">
            <summary>
            Creates an instance of the Vendor Combination.
            </summary>
            <param name="aBPC_RID">The RID in the BuildPackCriteria table that identifies the Vendor (BuildPacksCriteria) pattern combinations.</param>
            <param name="aPatternComboRID">The RID in the BuildPackCriteria that identifies a combination defined for the vendor.</param>
            <param name="aPatternComboName">The name of the vendor combination.</param>
            <param name="aPatternComboSelected">Indicates whether this vendor combination has been selected for consideration in the BuildPackMethod</param>
            <param name="aVendor_PatternList">List of the Vendor Patterns belonging to this vendor combination.</param>
        </member>
        <member name="P:MIDRetail.DataCommon.Vendor_Combo.PackPatternType">
            <summary>
            Gets the Pack Pattern Type of this Combination.
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.Vendor_Combo.Clone">
            <summary>
            Gets a clone of this vendor pattern combination.
            </summary>
            <returns>Clone of this vendor combaination</returns>
        </member>
        <member name="P:MIDRetail.DataCommon.PlaceholderComponentLinkProfile.ProfileType">
            <summary>
            Returns the eProfileType of this profile.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.HeaderComponentProfile.ProfileType">
            <summary>
            Returns the eProfileType of this profile.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.PlanProfile">
            <summary>
            The PlanProfile class hold information for a plan.  Information includes the HierarchyNodeProfile, VersionProfile, and HierarchyNodeSecurityProfile.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.PlanOpenParmsData">
            <summary>
            The PlanOpenParmsData class defines the parameters necessary to open, read, and store the plans required for a
            any Plan Maintenance function.
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.PlanOpenParmsData.#ctor(MIDRetail.DataCommon.ePlanSessionType,System.String)">
            <summary>
            Creates a new instance of StorePlanMaintCubeGroupOpenPamrs.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.PlanOpenParmsData.FunctionSecurityProfile">
            <summary>
            Gets or sets the FunctionSecurityProfile value.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.PlanOpenParmsData.PlanSessionType">
            <summary>
            Gets or sets the ePlanSessionType.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.PlanOpenParmsData.ChainHLPlanProfile">
            <summary>
            Gets the high-level Chain PlanProfile
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.PlanOpenParmsData.StoreHLPlanProfile">
            <summary>
            Gets the high-level Store PlanProfile
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.PlanOpenParmsData.LowLevelVersionDefault">
            <summary>
            Gets or sets the low-level VersionProfile.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.PlanOpenParmsData.BasisProfileList">
            <summary>
            Gets the BasisProfile ProfileList.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.PlanOpenParmsData.LowLevelPlanProfileList">
            <summary>
            Gets the low-level Chain PlanProfile ProfileList
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.PlanOpenParmsData.DateRangeProfile">
            <summary>
            Gets or sets the DateRangeProfile value.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.PlanOpenParmsData.StoreGroupRID">
            <summary>
            Gets or sets the StoreGroupRID value.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.PlanOpenParmsData.SimilarStores">
            <summary>
            Gets or sets the Similar Store indicator.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.PlanOpenParmsData.IneligibleStores">
            <summary>
            Gets or sets the Ineligible Store indicator.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.PlanOpenParmsData.OpenPeriodAsWeeks">
            <summary>
            Gets or sets the Open Period As Weeks indicator.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.PlanOpenParmsData.FilterRID">
            <summary>
            Gets or sets the record id of the filter.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.PlanOpenParmsData.ViewRID">
            <summary>
            Gets or sets the record id of the view.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.PlanOpenParmsData.StoreId">
            <summary>
            Gets or sets the store id.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.PlanOpenParmsData.StoreIdNm">
            <summary>
            Gets or sets the store id and name.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.PlanOpenParmsData.GroupBy">
            <summary>
            Gets or sets the eStorePlanSelectedGroupBy by which the data is to be grouped.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.PlanOpenParmsData.DisplayTimeBy">
            <summary>
            Gets or sets the eDisplayTimeBy by which the data is to be displayed.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.PlanOpenParmsData.LowLevelsType">
            <summary>
            Gets or sets the type of low levels selected.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.PlanOpenParmsData.LowLevelsOffset">
            <summary>
            Gets or sets the offset of the low level selected.
            </summary>
            <remarks>
            This field is only to be used if the LowLevelsType is eLowLevelsType.LevelOffset</remarks>
        </member>
        <member name="P:MIDRetail.DataCommon.PlanOpenParmsData.LowLevelsSequence">
            <summary>
            Gets or sets the sequence of the main hierarchy level used to select the low levels.
            </summary>
            <remarks>
            This field is only to be used if the LowLevelsType is eLowLevelsType.HierarchyLevel</remarks>
        </member>
        <member name="P:MIDRetail.DataCommon.PlanOpenParmsData.ComputationsMode">
            <summary>
            Gets or sets the computation mode to be used by the cube.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.PlanOpenParmsData.AverageDivisor">
            <summary>
            Gets or sets the Average Divisor.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.PlanOpenParmsData.ContainsCurrentWeek">
            <summary>
            Gets or sets the Average Divisor.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.PlanOpenParmsData.OverrideLowLevelRid">
            <summary>
            Gets or sets the Override Low Level RID.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.PlanOpenParmsData.CustomOverrideLowLevelRid">
            <summary>
            Gets or sets the Override Low Level RID.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.QuantityLevelFlagValues">
            <summary>
            This class contains the values of the QuantityLevel flag bits.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.QuantityLevelFlags">
            <summary>
            The QuantityLevelFlags class describes the QuantityLevel flag bits container.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.QuantityLevelFlags.isHighLevel">
            <summary>
            Gets or sets the value of the HighLevel flag.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.QuantityLevelFlags.isLowLevel">
            <summary>
            Gets or sets the value of the LowLevel flag.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.QuantityLevelFlags.isLowLevelTotal">
            <summary>
            Gets or sets the value of the LowLevelTotal flag.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.QuantityLevelFlags.isStoreDetailCube">
            <summary>
            Gets or sets the value of the Store flag.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.QuantityLevelFlags.isStoreSetCube">
            <summary>
            Gets or sets the value of the StoreSet flag.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.QuantityLevelFlags.isStoreTotalCube">
            <summary>
            Gets or sets the value of the StoreTotal flag.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.QuantityLevelFlags.isChainDetailCube">
            <summary>
            Gets or sets the value of the Chain flag.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.QuantityLevelFlags.isChainSingleView">
            <summary>
            Gets or sets the value of the ChainSingleView flag.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.QuantityLevelFlags.isChainMultiView">
            <summary>
            Gets or sets the value of the ChainMultiView flag.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.QuantityLevelFlags.isStoreSingleView">
            <summary>
            Gets or sets the value of the StoreSingleView flag.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.QuantityLevelFlags.isStoreMultiView">
            <summary>
            Gets or sets the value of the StoreMultiView flag.
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.QuantityLevelFlags.Clear">
            <summary>
            Clears all flags.
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.QuantityLevelFlags.IsValidCube(System.UInt16)">
            <summary>
            Returns a boolean indicating if this instance of QuantityLevelFlags is valid for the given cube flag values.
            </summary>
            <param name="aCubeFlags">
            The cube flag values to check.
            </param>
            <returns>
            A boolean indicating if this instance of QuantityLevelFlags is valid.
            </returns>
        </member>
        <member name="T:MIDRetail.DataCommon.VersionProfile">
            <summary>
            The VersionProfile class identifies the Version profile.
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.VersionProfile.#ctor(System.Int32)">
            <summary>
            Creates a new instance of VersionProfile using the given Id.
            </summary>
            <param name="aKey">
            The Id of this profile.
            </param>
        </member>
        <member name="M:MIDRetail.DataCommon.VersionProfile.#ctor(System.Int32,System.String,System.Boolean)">
            <summary>
            Creates a new instance of VersionProfile using the given Id and description.
            </summary>
            <param name="aKey">
            The Id of this profile.
            </param>
            <param name="aDescription">
            The text description for this profile.
            </param>
        </member>
        <member name="M:MIDRetail.DataCommon.VersionProfile.#ctor(System.Int32,System.String,System.Boolean,MIDRetail.DataCommon.eForecastBlendType,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Creates a new instance of VersionProfile using the given Id and description.
            </summary>
            <param name="aKey">
            The Id of this profile.
            </param>
            <param name="aDescription">
            The text description for this profile.
            </param>
            <param name="aBlendType">
            The forecast version blend type for this profile.
            </param>
            <param name="aActualVersionRID">
            The forecast version actual version for this profile.
            </param>
            <param name="aForecastVersionRID">
            The forecast version forecast version for this profile.
            </param>
            <param name="aBlendCurrentByMonth">
            A flag identifying if the forecast is to be blended by month rather than by week for this profile.
            </param>
        </member>
        <member name="P:MIDRetail.DataCommon.VersionProfile.ProfileType">
            <summary>
            Returns the eProfileType of this profile.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.VersionProfile.Description">
            <summary>
            Returns the description of this profile.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.VersionProfile.ChainSecurity">
            <summary>
            Returns the user's chain security profile.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.VersionProfile.StoreSecurity">
            <summary>
            Returns the user's store security profile.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.VersionProfile.ProtectHistory">
            <summary>
            Gets or sets the protect history setting of this profile.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.VersionProfileList">
            <summary>
            Used to retrieve and update a list of version profiles
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.VersionProfileList.#ctor(MIDRetail.DataCommon.eProfileType)">
            <summary>
            Used to construct an instance of the class.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.VariableProfile">
            <summary>
            The VariableProfile class identifies the Variable profile.
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.VariableProfile.#ctor(System.Int32,System.String,MIDRetail.DataCommon.eVariableCategory,MIDRetail.DataCommon.eVariableType,System.String,MIDRetail.DataCommon.eVariableDatabaseType,MIDRetail.DataCommon.eVariableDatabaseType,MIDRetail.DataCommon.eVariableStyle,MIDRetail.DataCommon.eVariableAccess,MIDRetail.DataCommon.eVariableScope,MIDRetail.DataCommon.eVariableSpreadType,MIDRetail.DataCommon.eVariableWeekType,MIDRetail.DataCommon.eEligibilityType,MIDRetail.DataCommon.eSimilarStoreDateType,MIDRetail.DataCommon.eVariableTimeTotalType,MIDRetail.DataCommon.eVariableForecastType,MIDRetail.DataCommon.eValueFormatType,System.Double,System.Boolean,System.Boolean,System.Boolean,MIDRetail.DataCommon.eLevelRollType,MIDRetail.DataCommon.eDayToWeekRollType,MIDRetail.DataCommon.eStoreToChainRollType,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,MIDRetail.DataCommon.eVariableDatabaseModelType,MIDRetail.DataCommon.eVariableDatabaseModelType,MIDRetail.DataCommon.eVariableDatabaseModelType,MIDRetail.DataCommon.eVariableDatabaseModelType,MIDRetail.DataCommon.eVariableDatabaseModelType,System.String)">
            <summary>
            Creates a new instance of VariableProfile using the given Id, variable name, database column name, eVariableAccess, eVariableScope, 
            eEligiblityType, eFormatType, and number of decimals.
            </summary>
            <param name="aKey">
            The Id of this profile.
            </param>
            <param name="aVariableName">
            The display name of this Variable definition.
            </param>
            <param name="aVariableCategory">
            The eVariableCategory that describes the variable category of this Variable.
            </param>
            <param name="aVariableType">
            The database table where the values are found.
            </param>
            <param name="aDatabaseColumnName">
            The database column name of this profile.
            </param>
            <param name="aChainDatabaseVariableType">
            The type of chain database variable of this profile.
            </param>
            <param name="aStoreDatabaseVariableType">
            The type of store database variable of this profile.
            </param>
            <param name="aVariableStyle">
            The eVariableStyle that describes the variable style of this Variable.
            </param>
            <param name="aVariableAccess">
            The eVariableAccess that describes the variable access of this Variable.
            </param>
            <param name="aVariableScope">
            The eVariableScope that describes the variable scope of this Variable.
            </param>
            <param name="aEligibilityType">
            The eEligibilityType that describes which eligiblity type this Variable follows.
            </param>
            <param name="aSimilarStoreDateType">
            The eSimilarStoreDateType that describes which similar store type this Variable follows.
            </param>
            <param name="aFormatType">
            The eFormatType that identifies the way to format the value as a string.
            </param>
            <param name="aNumDecimals">
            The number of decimals used for a eFormatType.GenericNumeric format.
            </param>
            <param name="aAllowForecastBalance">
            A flag that identifies if forecast balance, matrix, is allowed for this variable.
            </param>
            <param name="aAllowOTSForecast">
            A flag that identifies if the OTS forecast process is allowed for this variable.
            </param>
            <param name="aAllowAssortmentPlanning">
            A flag that identifies if Assortment Planning is allowed for this variable.
            </param>
            <param name="aLevelRollType">
            The level rollup type for this variable
            </param>
            <param name="aDayToWeekRollType">
            The day to week rollup type for this variable
            </param>
            <param name="aStoreToChainRollType">
            The store to chain rollup type for this variable
            </param>
            <param name="aChainForecastRollLevel">
            The level at which chain forcast values should be rolled
            </param>
            <param name="aChainHistoryRollLevel">
            The level at which chain history values should be rolled
            </param>
            <param name="aStoreForecastRollLevel">
            The level at which store forcast values should be rolled
            </param>
            <param name="aStoreDailyHistoryRollLevel">
            The level at which store daily history values should be rolled
            </param>
            <param name="aStoreWeeklyHistoryRollLevel">
            The level at which store weekly history values should be rolled
            </param>
            <param name="aChainHistoryModelType">
            The model type to be used for chain history values
            </param>
            <param name="aChainForecastModelType">
            The model type to be used for chain forecast values
            </param>
            <param name="aStoreWeeklyHistoryModelType">
            The model type to be used for store weekly history values
            </param>
            <param name="aStoreDailyHistoryModelType">
            The model type to be used for store daily history values
            </param>
            <param name="aStoreForecastModelType">
            The model type to be used for store forecast values
            </param>
            <param name="aGroupings">
            The levels of organization used to display the variable in the chooser
            </param>
        </member>
        <member name="M:MIDRetail.DataCommon.VariableProfile.#ctor(System.Int32,System.String,MIDRetail.DataCommon.eVariableCategory,MIDRetail.DataCommon.eVariableType,MIDRetail.DataCommon.eClientCustomVariableType,System.String,MIDRetail.DataCommon.eVariableDatabaseType,MIDRetail.DataCommon.eVariableDatabaseType,MIDRetail.DataCommon.eVariableStyle,MIDRetail.DataCommon.eVariableAccess,MIDRetail.DataCommon.eVariableScope,MIDRetail.DataCommon.eVariableSpreadType,MIDRetail.DataCommon.eVariableWeekType,MIDRetail.DataCommon.eEligibilityType,MIDRetail.DataCommon.eSimilarStoreDateType,MIDRetail.DataCommon.eVariableTimeTotalType,MIDRetail.DataCommon.eVariableForecastType,MIDRetail.DataCommon.eValueFormatType,System.Double,System.Boolean,System.Boolean,System.Boolean,MIDRetail.DataCommon.eLevelRollType,MIDRetail.DataCommon.eDayToWeekRollType,MIDRetail.DataCommon.eStoreToChainRollType,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,MIDRetail.DataCommon.eVariableDatabaseModelType,MIDRetail.DataCommon.eVariableDatabaseModelType,MIDRetail.DataCommon.eVariableDatabaseModelType,MIDRetail.DataCommon.eVariableDatabaseModelType,MIDRetail.DataCommon.eVariableDatabaseModelType,System.String)">
            <summary>
            Creates a new instance of VariableProfile using the given Id, variable name, database column name, eVariableAccess, eVariableScope, 
            eEligiblityType, eFormatType, and number of decimals.
            </summary>
            <param name="aKey">
            The Id of this profile.
            </param>
            <param name="aVariableName">
            The display name of this Variable definition.
            </param>
            <param name="aVariableCategory">
            The eVariableCategory that describes the variable category of this Variable.
            </param>
            <param name="aVariableType">
            The database table where the values are found.
            </param>
            <param name="aCustomVariableType">
            Any client custom variable type assigned to this variable.
            </param>
            <param name="aDatabaseColumnName">
            The database column name of this profile.
            </param>
            <param name="aChainDatabaseVariableType">
            The type of chain database variable of this profile.
            </param>
            <param name="aStoreDatabaseVariableType">
            The type of store database variable of this profile.
            </param>
            <param name="aVariableStyle">
            The eVariableStyle that describes the variable style of this Variable.
            </param>
            <param name="aVariableAccess">
            The eVariableAccess that describes the variable access of this Variable.
            </param>
            <param name="aVariableScope">
            The eVariableScope that describes the variable scope of this Variable.
            </param>
            <param name="aEligibilityType">
            The eEligibilityType that describes which eligiblity type this Variable follows.
            </param>
            <param name="aSimilarStoreDateType">
            The eSimilarStoreDateType that describes which similar store type this Variable follows.
            </param>
            <param name="aFormatType">
            The eFormatType that identifies the way to format the value as a string.
            </param>
            <param name="aNumDecimals">
            The number of decimals used for a eFormatType.GenericNumeric format.
            </param>
            <param name="aAllowForecastBalance">
            A flag that identifies if forecast balance, matrix, is allowed for this variable.
            </param>
            <param name="aAllowOTSForecast">
            A flag that identifies if the OTS forecast process is allowed for this variable.
            </param>
            <param name="aAllowAssortmentPlanning">
            A flag that identifies if Assortment Planning is allowed for this variable.
            </param>
            <param name="aLevelRollType">
            The level rollup type for this variable
            </param>
            <param name="aDayToWeekRollType">
            The day to week rollup type for this variable
            </param>
            <param name="aStoreToChainRollType">
            The store to chain rollup type for this variable
            </param>
            <param name="aChainForecastRollLevel">
            The level at which chain forcast values should be rolled
            </param>
            <param name="aChainHistoryRollLevel">
            The level at which chain history values should be rolled
            </param>
            <param name="aStoreForecastRollLevel">
            The level at which store forcast values should be rolled
            </param>
            <param name="aStoreDailyHistoryRollLevel">
            The level at which store daily history values should be rolled
            </param>
            <param name="aStoreWeeklyHistoryRollLevel">
            The level at which store weekly history values should be rolled
            </param>
            <param name="aGroupings">
            The levels of organization used to display the variable in the chooser
            </param>
        </member>
        <member name="M:MIDRetail.DataCommon.VariableProfile.#ctor(System.Int32,System.String,MIDRetail.DataCommon.eVariableCategory,MIDRetail.DataCommon.eVariableType,System.String,MIDRetail.DataCommon.eVariableDatabaseType,MIDRetail.DataCommon.eVariableDatabaseType,MIDRetail.DataCommon.eVariableStyle,MIDRetail.DataCommon.eVariableAccess,MIDRetail.DataCommon.eVariableScope,MIDRetail.DataCommon.eVariableSpreadType,MIDRetail.DataCommon.eVariableWeekType,MIDRetail.DataCommon.eEligibilityType,MIDRetail.DataCommon.eSimilarStoreDateType,MIDRetail.DataCommon.eVariableTimeTotalType,MIDRetail.DataCommon.eVariableForecastType,MIDRetail.DataCommon.eValueFormatType,System.Double,System.Boolean,System.Boolean,System.Boolean,MIDRetail.DataCommon.eLevelRollType,MIDRetail.DataCommon.eDayToWeekRollType,MIDRetail.DataCommon.eStoreToChainRollType,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,MIDRetail.DataCommon.eVariableDatabaseModelType,MIDRetail.DataCommon.eVariableDatabaseModelType,MIDRetail.DataCommon.eVariableDatabaseModelType,MIDRetail.DataCommon.eVariableDatabaseModelType,MIDRetail.DataCommon.eVariableDatabaseModelType,System.Int32,System.String)">
            <summary>
            Creates a new instance of VariableProfile using the given Id, variable name, database column name, eVariableAccess, eVariableScope, 
            eEligiblityType, eFormatType, and number of decimals.
            </summary>
            <param name="aKey">
            The Id of this profile.
            </param>
            <param name="aVariableName">
            The display name of this Variable definition.
            </param>
            <param name="aVariableCategory">
            The eVariableCategory that describes the variable category of this Variable.
            </param>
            <param name="aVariableType">
            The database table where the values are found.
            </param>
            <param name="aDatabaseColumnName">
            The database column name of this profile.
            </param>
            <param name="aChainDatabaseVariableType">
            The type of chain database variable of this profile.
            </param>
            <param name="aStoreDatabaseVariableType">
            The type of store database variable of this profile.
            </param>
            <param name="aVariableStyle">
            The eVariableStyle that describes the variable style of this Variable.
            </param>
            <param name="aVariableAccess">
            The eVariableAccess that describes the variable access of this Variable.
            </param>
            <param name="aVariableScope">
            The eVariableScope that describes the variable scope of this Variable.
            </param>
            <param name="aEligibilityType">
            The eEligibilityType that describes which eligiblity type this Variable follows.
            </param>
            <param name="aSimilarStoreDateType">
            The eSimilarStoreDateType that describes which similar store type this Variable follows.
            </param>
            <param name="aFormatType">
            The eFormatType that identifies the way to format the value as a string.
            </param>
            <param name="aNumDecimals">
            The number of decimals used for a eFormatType.GenericNumeric format.
            </param>
            <param name="aAllowForecastBalance">
            A flag that identifies if forecast balance, matrix, is allowed for this variable.
            </param>
            <param name="aAllowOTSForecast">
            A flag that identifies if the OTS forecast process is allowed for this variable.
            </param>
            <param name="aAllowAssortmentPlanning">
            A flag that identifies if Assortment Planning is allowed for this variable.
            </param>
            <param name="aLevelRollType">
            The level rollup type for this variable
            </param>
            <param name="aDayToWeekRollType">
            The day to week rollup type for this variable
            </param>
            <param name="aStoreToChainRollType">
            The store to chain rollup type for this variable
            </param>
            <param name="aChainForecastRollLevel">
            The level at which chain forcast values should be rolled
            </param>
            <param name="aChainHistoryRollLevel">
            The level at which chain history values should be rolled
            </param>
            <param name="aStoreForecastRollLevel">
            The level at which store forcast values should be rolled
            </param>
            <param name="aStoreDailyHistoryRollLevel">
            The level at which store daily history values should be rolled
            </param>
            <param name="aStoreWeeklyHistoryRollLevel">
            The level at which store weekly history values should be rolled
            </param>
            <param name="aDisplaySequence">
            The position the variable is to be displayed
            </param>
            <param name="aGroupings">
            The levels of organization used to display the variable in the chooser
            </param>
        </member>
        <member name="M:MIDRetail.DataCommon.VariableProfile.#ctor(System.Int32,System.String,MIDRetail.DataCommon.eVariableCategory,MIDRetail.DataCommon.eVariableType,MIDRetail.DataCommon.eClientCustomVariableType,System.String,MIDRetail.DataCommon.eVariableDatabaseType,MIDRetail.DataCommon.eVariableDatabaseType,MIDRetail.DataCommon.eVariableStyle,MIDRetail.DataCommon.eVariableAccess,MIDRetail.DataCommon.eVariableScope,MIDRetail.DataCommon.eVariableSpreadType,MIDRetail.DataCommon.eVariableWeekType,MIDRetail.DataCommon.eEligibilityType,MIDRetail.DataCommon.eSimilarStoreDateType,MIDRetail.DataCommon.eVariableTimeTotalType,MIDRetail.DataCommon.eVariableForecastType,MIDRetail.DataCommon.eValueFormatType,System.Double,System.Boolean,System.Boolean,System.Boolean,MIDRetail.DataCommon.eLevelRollType,MIDRetail.DataCommon.eDayToWeekRollType,MIDRetail.DataCommon.eStoreToChainRollType,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,MIDRetail.DataCommon.eVariableDatabaseModelType,MIDRetail.DataCommon.eVariableDatabaseModelType,MIDRetail.DataCommon.eVariableDatabaseModelType,MIDRetail.DataCommon.eVariableDatabaseModelType,MIDRetail.DataCommon.eVariableDatabaseModelType,System.Int32,System.String)">
            <summary>
            Creates a new instance of VariableProfile using the given Id, variable name, database column name, eVariableAccess, eVariableScope, 
            eEligiblityType, eFormatType, and number of decimals.
            </summary>
            <param name="aKey">
            The Id of this profile.
            </param>
            <param name="aVariableName">
            The display name of this Variable definition.
            </param>
            <param name="aVariableCategory">
            The eVariableCategory that describes the variable category of this Variable.
            </param>
            <param name="aVariableType">
            The database table where the values are found.
            </param>
            <param name="aCustomVariableType">
            Any client custom variable type assigned to this variable.
            </param>
            <param name="aDatabaseColumnName">
            The database column name of this profile.
            </param>
            <param name="aChainDatabaseVariableType">
            The type of chain database variable of this profile.
            </param>
            <param name="aStoreDatabaseVariableType">
            The type of store database variable of this profile.
            </param>
            <param name="aVariableStyle">
            The eVariableStyle that describes the variable style of this Variable.
            </param>
            <param name="aVariableAccess">
            The eVariableAccess that describes the variable access of this Variable.
            </param>
            <param name="aVariableScope">
            The eVariableScope that describes the variable scope of this Variable.
            </param>
            <param name="aEligibilityType">
            The eEligibilityType that describes which eligiblity type this Variable follows.
            </param>
            <param name="aSimilarStoreDateType">
            The eSimilarStoreDateType that describes which similar store type this Variable follows.
            </param>
            <param name="aFormatType">
            The eFormatType that identifies the way to format the value as a string.
            </param>
            <param name="aNumDecimals">
            The number of decimals used for a eFormatType.GenericNumeric format.
            </param>
            <param name="aAllowForecastBalance">
            A flag that identifies if forecast balance, matrix, is allowed for this variable.
            </param>
            <param name="aAllowOTSForecast">
            A flag that identifies if the OTS forecast process is allowed for this variable.
            </param>
            <param name="aAllowAssortmentPlanning">
            A flag that identifies if Assortment Planning is allowed for this variable.
            </param>
            <param name="aLevelRollType">
            The level rollup type for this variable
            </param>
            <param name="aDayToWeekRollType">
            The day to week rollup type for this variable
            </param>
            <param name="aStoreToChainRollType">
            The store to chain rollup type for this variable
            </param>
            <param name="aChainForecastRollLevel">
            The level at which chain forcast values should be rolled
            </param>
            <param name="aChainHistoryRollLevel">
            The level at which chain history values should be rolled
            </param>
            <param name="aStoreForecastRollLevel">
            The level at which store forcast values should be rolled
            </param>
            <param name="aStoreDailyHistoryRollLevel">
            The level at which store daily history values should be rolled
            </param>
            <param name="aStoreWeeklyHistoryRollLevel">
            The level at which store weekly history values should be rolled
            </param>
            <param name="aDisplaySequence">
            The position the variable is to be displayed
            </param>
            <param name="aGroupings">
            The levels of organization used to display the variable in the chooser
            </param>
        </member>
        <member name="M:MIDRetail.DataCommon.VariableProfile.isDatabaseVariable(MIDRetail.DataCommon.eVariableCategory,System.Int32,MIDRetail.DataCommon.eCalendarDateType)">
            <summary>
            Returns a boolean value indicating if the variable is stored on the database 
            for the given type of data.
            </summary>
            <param name="aVarCateg">
            The eVariableCategory setting that identifies the type of data.
            </param>
            <param name="aVersionRID">
            The key of the version for the type of data.
            </param>
            <param name="aCalDateType">
            The eCalendarDateType for the type of data.
            </param>
            <returns>
            A boolean indicating if the store for the given PlanCellReference is eligible.
            </returns>
        </member>
        <member name="P:MIDRetail.DataCommon.VariableProfile.ProfileType">
            <summary>
            Returns the eProfileType of this profile.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.VariableProfile.VariableType">
            <summary>
            Gets the database table of this profile.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.VariableProfile.CustomVariableType">
            <summary>
            Gets the client custom variable type of this profile.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.VariableProfile.DatabaseColumnName">
            <summary>
            Gets the database column name of this profile.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.VariableProfile.DatabaseColumnPosition">
            <summary>
            Gets the database column position of this profile.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.VariableProfile.ChainDatabaseVariableType">
            <summary>
            Gets the database column position of this profile.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.VariableProfile.StoreDatabaseVariableType">
            <summary>
            Gets the database column position of this profile.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.VariableProfile.EligibilityType">
            <summary>
            Gets the eEligibilityType for this profile.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.VariableProfile.SimilarStoreDateType">
            <summary>
            Gets the eSimilarStoreDateType for this profile.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.VariableProfile.VariableForecastType">
            <summary>
            Gets the eVariableForecastType for this profile.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.VariableProfile.AssociatedForecastVariable">
            <summary>
            Gets the VariableProfile assocated Forecast Variable for this profile.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.VariableProfile.TimeTotalVariables">
            <summary>
            Gets the ArrayList containing all Total Variables for this profile.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.VariableProfile.TimeTotalStoreVariables">
            <summary>
            Gets the ArrayList containing all Store Total Variables for this profile.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.VariableProfile.TimeTotalChainVariables">
            <summary>
            Gets the ArrayList containing all Chain Total Variables for this profile.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.VariableProfile.ActualWTDSalesVariableList">
            <summary>
            Gets or sets the ProfileList of variables used to retrieve the Actual WTD Sales.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.VariableProfile.TotalTimeTotalVariableProfile">
            <summary>
            Gets or sets the total TimeTotalVariableProfile for this profile.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.VariableProfile.AverageTimeTotalVariableProfile">
            <summary>
            Gets or sets the average TimeTotalVariableProfile for this profile.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.VariableProfile.AllowForecastBalance">
            <summary>
            Gets or sets the flag identifying if forecast balance should be allowed for this variable.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.VariableProfile.AllowOTSForecast">
            <summary>
            Gets or sets the flag identifying if OTD Forecast should be allowed for this variable.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.VariableProfile.AllowAssortmentPlanning">
            <summary>
            Gets or sets the flag identifying if Assortment Planning should be allowed for this variable.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.VariableProfile.LevelRollType">
            <summary>
            Gets or sets the level rollup type for this variable.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.VariableProfile.DayToWeekRollType">
            <summary>
            Gets or sets the day to week rollup type for this variable.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.VariableProfile.StoreToChainRollType">
            <summary>
            Gets or sets the store to chain rollup type for this variable.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.VariableProfile.ChainHistoryRollLevel">
            <summary>
            Gets or sets the level at which chain history values should be rolled.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.VariableProfile.StoreDailyHistoryRollLevel">
            <summary>
            Gets or sets the level at which store daily history values should be rolled.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.VariableProfile.StoreWeeklyHistoryRollLevel">
            <summary>
            Gets or sets the level at which store weekly history values should be rolled.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.VariableProfile.ChainForecastRollLevel">
            <summary>
            Gets or sets the level at which chain forcast values should be rolled.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.VariableProfile.StoreForecastRollLevel">
            <summary>
            Gets or sets the level at which store forcast values should be rolled.
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.VariableProfile.AddTimeTotalVariable(MIDRetail.DataCommon.TimeTotalVariableProfile[])">
            <summary>
            This method adds a VariableProfile to the total variable list.
            </summary>
            <param name="aTimeTotalVariables">
            A parameter list of total VariableProfiles to add. 
            </param>
        </member>
        <member name="M:MIDRetail.DataCommon.VariableProfile.GetTimeTotalVariable(System.Int32)">
            <summary>
            This method returns the variable profile of the TimeTotalVariable associated with this index.
            </summary>
            <param name="aTimeTotalIndex">
            The Time Total index.
            </param>
            <returns>
            The VariableProfile associated with this Variable for the given index.  Null if key does not exist.
            </returns>
        </member>
        <member name="M:MIDRetail.DataCommon.VariableProfile.GetChainTimeTotalVariable(System.Int32)">
            <summary>
            This method returns the variable profile of the Chain TimeTotalVariable associated with this index.
            </summary>
            <param name="aTimeTotalIndex">
            The Time Total index.
            </param>
            <returns>
            The VariableProfile associated with this Variable for the given index.  Null if key does not exist.
            </returns>
        </member>
        <member name="M:MIDRetail.DataCommon.VariableProfile.GetStoreTimeTotalVariable(System.Int32)">
            <summary>
            This method returns the variable profile of the Store TimeTotalVariable associated with this index.
            </summary>
            <param name="aTimeTotalIndex">
            The Time Total index.
            </param>
            <returns>
            The VariableProfile associated with this Variable for the given index.  Null if key does not exist.
            </returns>
        </member>
        <member name="M:MIDRetail.DataCommon.VariableProfile.GetTimeTotalIndex(MIDRetail.DataCommon.TimeTotalVariableProfile)">
            <summary>
            This method returns the Time Total Index of the given TimeTotalVariableProfile.
            </summary>
            <param name="aTimeTotalVarProf">
            The VariableProfile of the Time Total to lookup.
            </param>
            <returns>
            The Time Total Index of the given TimeTotalVariableProfile.
            </returns>
        </member>
        <member name="M:MIDRetail.DataCommon.TimeTotalVariableProfile.#ctor(System.Int32,System.String,MIDRetail.DataCommon.eVariableCategory,MIDRetail.DataCommon.eVariableStyle,MIDRetail.DataCommon.eVariableAccess,MIDRetail.DataCommon.eVariableScope,MIDRetail.DataCommon.eVariableSpreadType,MIDRetail.DataCommon.eVariableWeekType,MIDRetail.DataCommon.eVariableTimeTotalType,MIDRetail.DataCommon.eValueFormatType,System.Double)">
            <summary>
            Creates a new instance of VariableProfile using the given Id, variable name, database column name, eVariableAccess, eVariableScope, 
            eEligiblityType, eFormatType, and number of decimals.
            </summary>
            <param name="aKey">
            The Id of this profile.
            </param>
            <param name="aVariableName">
            The display name of this Variable definition.
            </param>
            <param name="aVariableCategory">
            The eVariableCategory that describes the variable category of this Variable.
            </param>
            <param name="aVariableStyle">
            The eVariableStyle that describes the variable style of this Variable.
            </param>
            <param name="aVariableAccess">
            The eVariableScope that describes the variable access of this Variable.
            </param>
            <param name="aVariableScope">
            The eVariableScope that describes the variable scope of this Variable.
            </param>
            <param name="aFormatType">
            The eFormatType that identifies the way to format the value as a string.
            </param>
            <param name="aNumDecimals">
            The number of decimals used for a eFormatType.GenericNumeric format.
            </param>
        </member>
        <member name="M:MIDRetail.DataCommon.TimeTotalVariableProfile.isDatabaseVariable(MIDRetail.DataCommon.eVariableCategory,System.Int32,MIDRetail.DataCommon.eCalendarDateType)">
            <summary>
            Returns a boolean value indicating if the variable is stored on the database 
            for the given type of data.
            </summary>
            <param name="aVarCateg">
            The eVariableCategory setting that identifies the type of data.
            </param>
            <param name="aVersionRID">
            The key of the version for the type of data.
            </param>
            <param name="aCalDateType">
            The eCalendarDateType for the type of data.
            </param>
            <returns>
            A boolean indicating if the store for the given PlanCellReference is eligible.
            </returns>
        </member>
        <member name="P:MIDRetail.DataCommon.TimeTotalVariableProfile.ProfileType">
            <summary>
            Returns the eProfileType of this profile.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.TimeTotalVariableProfile.ParentVariableProfile">
            <summary>
            Gets the VariableProfile containing all parent VariableProfile for this profile.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.QuantityVariableProfile">
            <summary>
            The QuantityVariableProfile class identifies the QuantityVariable profile.
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.QuantityVariableProfile.#ctor(System.Int32,System.String,MIDRetail.DataCommon.eVariableCategory,MIDRetail.DataCommon.eVariableStyle,MIDRetail.DataCommon.eVariableAccess,MIDRetail.DataCommon.eVariableScope,MIDRetail.DataCommon.eVariableWeekType,System.UInt16,System.UInt16,System.Boolean,MIDRetail.DataCommon.eValueFormatType,System.Double)">
            <summary>
            Creates a new instance of QuantityVariableProfile using the given Id, variable name, eVariableAccess, eVariableScope, eFormatType,
            and number of decimals.
            </summary>
            <param name="aKey">
            The Id of this profile.
            </param>
            <param name="aVariableName">
            The display name of this Variable definition.
            </param>
            <param name="aVariableCategory">
            The eVariableCategory that describes the variable category of this Variable.
            </param>
            <param name="aVariableStyle">
            The eVariableStyle that describes the variable style of this Variable.
            </param>
            <param name="aVariableAccess">
            The eVariableScope that describes the variable access of this Variable.
            </param>
            <param name="aVariableScope">
            The eVariableScope that describes the variable scope of this Variable.
            </param>
            <param name="aFormatType">
            The eFormatType that identifies the way to format the value as a string.
            </param>
            <param name="aNumDecimals">
            The number of decimals used for a eFormatType.GenericNumeric format.
            </param>
        </member>
        <member name="M:MIDRetail.DataCommon.QuantityVariableProfile.isDatabaseVariable(MIDRetail.DataCommon.eVariableCategory,System.Int32,MIDRetail.DataCommon.eCalendarDateType)">
            <summary>
            Returns a boolean value indicating if the variable is stored on the database 
            for the given type of data.
            </summary>
            <param name="aVarCateg">
            The eVariableCategory setting that identifies the type of data.
            </param>
            <param name="aVersionRID">
            The key of the version for the type of data.
            </param>
            <param name="aCalDateType">
            The eCalendarDateType for the type of data.
            </param>
            <returns>
            A boolean indicating if the store for the given PlanCellReference is eligible.
            </returns>
        </member>
        <member name="P:MIDRetail.DataCommon.QuantityVariableProfile.ProfileType">
            <summary>
            Returns the eProfileType of this profile.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.QuantityVariableProfile.isHighLevel">
            <summary>
            Gets the boolean indicating if this QuantityVariable is displayed for high-level.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.QuantityVariableProfile.isLowLevel">
            <summary>
            Gets the boolean indicating if this QuantityVariable is displayed for low-level.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.QuantityVariableProfile.isLowLevelTotal">
            <summary>
            Gets the boolean indicating if this QuantityVariable is displayed for low-level total.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.QuantityVariableProfile.isStoreDetailCube">
            <summary>
            Gets the boolean indicating if this QuantityVariable is displayed for store detail.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.QuantityVariableProfile.isStoreSetCube">
            <summary>
            Gets the boolean indicating if this QuantityVariable is displayed for store sets.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.QuantityVariableProfile.isStoreTotalCube">
            <summary>
            Gets the boolean indicating if this QuantityVariable is displayed for store totals.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.QuantityVariableProfile.isChainDetailCube">
            <summary>
            Gets the boolean indicating if this QuantityVariable is displayed for chain.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.QuantityVariableProfile.isChainSingleView">
            <summary>
            Gets the boolean indicating if this QuantityVariable is displayed for chain single views.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.QuantityVariableProfile.isChainMultiView">
            <summary>
            Gets the boolean indicating if this QuantityVariable is displayed for chain multi views.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.QuantityVariableProfile.isStoreSingleView">
            <summary>
            Gets the boolean indicating if this QuantityVariable is displayed for store single views.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.QuantityVariableProfile.isStoreMultiView">
            <summary>
            Gets the boolean indicating if this QuantityVariable is displayed for store multi views.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.QuantityVariableProfile.isSelectable">
            <summary>
            Gets the boolean indicating if this QuantityVariable is selectable on the window.
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.QuantityVariableProfile.IsValidQuantityCube(System.UInt16)">
            <summary>
            Returns a boolean indicating if this instance of QuantityLevelFlags is valid for the given cube flag values.
            </summary>
            <param name="aCubeFlags">
            The cube flag values to check.
            </param>
            <returns>
            A boolean indicating if this instance of QuantityLevelFlags is valid.
            </returns>
        </member>
        <member name="M:MIDRetail.DataCommon.PlanValueProfile.#ctor(System.Int32)">
            <summary>
            Creates a new instance of PlanValueProfile using the given Id.
            </summary>
            <param name="aKey">
            The Id of this profile.
            </param>
        </member>
        <member name="P:MIDRetail.DataCommon.PlanValueProfile.ProfileType">
            <summary>
            Returns the eProfileType of this profile.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.Profile">
            <summary>
            Abstract class that defines the general traits of a Profile.
            </summary>
            <remarks>
            A Profile is a description of an entity that can define an index on a dimension on a Cube.  The base level Profile must have an Id, which
            is a external numeric identifier for the Profile.
            </remarks>
        </member>
        <member name="M:MIDRetail.DataCommon.Profile.#ctor(System.Int32)">
            <summary>
            Creates a new instace of Profile using the given Id.
            </summary>
            <param name="aKey">
            The external numeric identifier for this Profile.
            </param>
        </member>
        <member name="P:MIDRetail.DataCommon.Profile.Key">
            <summary>
            Gets or sets the Id of the Profile.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.Profile.ProfileType">
            <summary>
            Abstract.  Gets the ProfileType of the Profile.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.ProfileList">
            <summary>
            Defines a list of Profiles.
            </summary>
            <remarks>
            A ProfileList is a description of an entity that can define a dimension on a Cube.  A ProfileList also contains functionality to support filtering.
            </remarks>
        </member>
        <member name="M:MIDRetail.DataCommon.ProfileList.#ctor(MIDRetail.DataCommon.eProfileType)">
            <summary>
            Creates a new instance of ProfileList with an empty array of Profiles.
            </summary>
            <param name="aProfileType">
            The eProfileType that defines the component type of this ProfileList.
            </param>
        </member>
        <member name="M:MIDRetail.DataCommon.ProfileList.#ctor(MIDRetail.DataCommon.eProfileType,System.Collections.ArrayList)">
            <summary>
            Creates a new instance of ProfileList using the given eProfileType and array of Profiles.
            </summary>
            <param name="aProfileType">
            The eProfileType that defines the component type of this ProfileList.
            </param>
            <param name="aProfileArray">
            An array of Profiles that are included in this ProfileList.
            </param>
        </member>
        <member name="P:MIDRetail.DataCommon.ProfileList.Item(System.Int32)">
            <summary>
            Indexer to access the Profiles in this ProfileList
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.ProfileList.ProfileType">
            <summary>
            Gets the eProfileType of this ProfileList.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.ProfileList.ArrayList">
            <summary>
            Gets the arraylist in the ProfileList.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.ProfileList.Count">
            <summary>
            Gets the count of the items in the ProfileList.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.ProfileList.MinValue">
            <summary>
            Gets the minimum key value of the items in the ProfileList.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.ProfileList.MaxValue">
            <summary>
            Gets the maximum key value of the items in the ProfileList.
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.ProfileList.Clone">
            <summary>
            Returns a clone of this object.
            </summary>
            <returns>
            A Clone of the object.
            </returns>
        </member>
        <member name="M:MIDRetail.DataCommon.ProfileList.Add(MIDRetail.DataCommon.Profile)">
            <summary>
            Adds a profile to the ProfileList.
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.ProfileList.Insert(System.Int32,MIDRetail.DataCommon.Profile)">
            <summary>
            Inserts a profile to the ProfileList.ArrayList at specified index.
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.ProfileList.HashRebuild">
            <summary>
            Rebuilds the hash table (use if keys have changed)
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.ProfileList.AddRange(MIDRetail.DataCommon.ProfileList)">
            <summary>
            Adds a range of profiles to the ProfileList.
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.ProfileList.AddRange(System.Collections.ArrayList)">
            <summary>
            Adds a range of profiles to the ProfileList.
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.ProfileList.Remove(MIDRetail.DataCommon.Profile)">
            <summary>
            Removes a profile from the ProfileList.
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.ProfileList.RemoveAt(System.Int32)">
            <summary>
            Removes a profile from the ProfileList at a specific index.
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.ProfileList.Clear">
            <summary>
            Clears the profiles from the ProfileList.
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.ProfileList.Contains(System.Object)">
            <summary>
            Determines if the ProfileList contains a Key.
            </summary>	
            <param name="aKey">
            The external numeric identifier for this Profile.
            </param>
        </member>
        <member name="M:MIDRetail.DataCommon.ProfileList.Contains(System.Int32)">
            <summary>
            Determines if the ProfileList contains a key.
            </summary>	
            <param name="aKey">
            The external numeric identifier for this Profile.
            </param>
        </member>
        <member name="M:MIDRetail.DataCommon.ProfileList.FindKey(System.Int32)">
            <summary>
            Locates and returns a profile in the ProfileList.
            </summary>
            <param name="aKey">
            The external numeric identifier for this Profile.
            </param>	
        </member>
        <member name="M:MIDRetail.DataCommon.ProfileList.Update(MIDRetail.DataCommon.Profile)">
            <summary>
            Updates a profile in the ProfileList.
            </summary>
            <param name="aProfile">
            The Profile to be updated to the ProfileList.
            </param>	
        </member>
        <member name="T:MIDRetail.DataCommon.BaseProfileXRef">
            <summary>
            Base class that contains cross-reference hash tables that relate detail Profile Ids to total Profile Ids.
            </summary>
            <remarks>
            This class supports the ability for auto-totaling during computations.  It is composed of two HashTables, one for the detail Profile and one for
            the total Profile.  Each entry in the HashTable is an ArrayList of total Profiles for the detail HashTable, and detail Profiles for the total
            HashTable.  This allows the system to determine which detail Profiles are related to a total Profile, or which total Profiles are related to
            a detail Profile, with a single HashTable access.
            </remarks>
        </member>
        <member name="M:MIDRetail.DataCommon.BaseProfileXRef.#ctor">
            <summary>
            Creates a new instance of ProfileXRef using the given total eProfileType and detail eProfileType.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.ProfileXRef">
            <summary>
            Defines a simple cross reference between a single total type and detail type.
            </summary>
            <remarks>
            This class supports the ability for auto-totaling during computations.  It is composed of two HashTables, one for the detail Profile and one for
            the total Profile.  Each entry in the HashTable is an ArrayList of total Profiles for the detail HashTable, and detail Profiles for the total
            HashTable.  This allows the system to determine which detail Profiles are related to a total Profile, or which total Profiles are related to
            a detail Profile, with a single HashTable access.
            </remarks>
        </member>
        <member name="M:MIDRetail.DataCommon.ProfileXRef.#ctor(MIDRetail.DataCommon.eProfileType,MIDRetail.DataCommon.eProfileType)">
            <summary>
            Creates a new instance of ProfileXRef using the given total eProfileType and detail eProfileType.
            </summary>
            <param name="aTotalType">
            The eProfileType of the total Profile.
            </param>
            <param name="aDetailType">
            The eProfileType of the detail Profile.
            </param>
        </member>
        <member name="P:MIDRetail.DataCommon.ProfileXRef.TotalType">
            <summary>
            Gets the eProfileType of the total Profile.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.ProfileXRef.DetailType">
            <summary>
            Gets the eProfileType of the detail Profile.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.ProfileXRef.TotalAllIdHash">
            <summary>
            Gets the Hashtable for the Total-to-all hash.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.ProfileXRef.DetailAllIdHash">
            <summary>
            Gets the Hashtable for the Detail-to-all hash.
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.ProfileXRef.GetHashCode">
            <summary>
            Override.  Returns the hashcode for this object.
            </summary>
            <remarks>
            Calulation of this hashcode is accomplished by multiplying the total type by 100 and then adding the detail type
            </remarks>
            <returns>
            The hashcode for this object.
            </returns>
        </member>
        <member name="M:MIDRetail.DataCommon.ProfileXRef.Equals(System.Object)">
            <summary>
            Returns a value indicating whether an instance of ProfileXRef is equal to a specified object.
            </summary>
            <param name="obj">
            An object to compare with this instance.
            </param>
            <returns>
            <I>true</I> if value is an instance of ProfileXRef and equals the value of this instance; otherwise,
            <I>false</I>.
            </returns>
        </member>
        <member name="M:MIDRetail.DataCommon.ProfileXRef.GetDetailList(System.Int32)">
            <summary>
            Returns the list of detail Ids for a given total Id.
            </summary>
            <param name="aTotalId">
            The total Id to get a detail list for.
            </param>
            <returns>
            The list of detail Ids.
            </returns>
        </member>
        <member name="M:MIDRetail.DataCommon.ProfileXRef.GetTotalList(System.Int32)">
            <summary>
            Returns the list of total Ids for a given detail Id.
            </summary>
            <param name="aDetailId">
            The detail Id to get a total list for.
            </param>
            <returns>
            the list of total Ids.
            </returns>
        </member>
        <member name="M:MIDRetail.DataCommon.ProfileXRef.GetDetailPlusNextList(System.Int32)">
            <summary>
            Returns the list of detail Ids for a given total Id.
            </summary>
            <param name="aTotalId">
            The total Id to get a detail list for.
            </param>
            <returns>
            The list of detail Ids.
            </returns>
        </member>
        <member name="M:MIDRetail.DataCommon.ProfileXRef.GetTotalPlusNextList(System.Int32)">
            <summary>
            Returns the list of total Ids for a given detail Id.
            </summary>
            <param name="aDetailId">
            The detail Id to get a total list for.
            </param>
            <returns>
            the list of total Ids.
            </returns>
        </member>
        <member name="M:MIDRetail.DataCommon.ProfileXRef.GetDetailFirst(System.Int32)">
            <summary>
            Returns the first detail Id for a given total Id.
            </summary>
            <param name="aTotalId">
            The total Id to get the first detail for.
            </param>
            <returns>
            The first detail Id.
            </returns>
        </member>
        <member name="M:MIDRetail.DataCommon.ProfileXRef.GetTotalFirst(System.Int32)">
            <summary>
            Returns the total Id for a given first detail Id.
            </summary>
            <param name="aDetailId">
            The first detail Id to get the total for.
            </param>
            <returns>
            The total Id.
            </returns>
        </member>
        <member name="M:MIDRetail.DataCommon.ProfileXRef.GetDetailLast(System.Int32)">
            <summary>
            Returns the last detail Id for a given total Id.
            </summary>
            <param name="aTotalId">
            The total Id to get the last detail for.
            </param>
            <returns>
            The last detail Id.
            </returns>
        </member>
        <member name="M:MIDRetail.DataCommon.ProfileXRef.GetTotalLast(System.Int32)">
            <summary>
            Returns the total Id for a given last detail Id.
            </summary>
            <param name="aDetailId">
            The last detail Id to get the total for.
            </param>
            <returns>
            The total Id.
            </returns>
        </member>
        <member name="M:MIDRetail.DataCommon.ProfileXRef.GetDetailFirstLastList(System.Int32)">
            <summary>
            Returns the list of detail Ids for a given total Id.
            </summary>
            <param name="aTotalId">
            The total Id to get a detail list for.
            </param>
            <returns>
            The list of detail Ids.
            </returns>
        </member>
        <member name="M:MIDRetail.DataCommon.ProfileXRef.GetTotalFirstLastList(System.Int32)">
            <summary>
            Returns the list of total Ids for a given detail Id.
            </summary>
            <param name="aDetailId">
            The detail Id to get a total list for.
            </param>
            <returns>
            the list of total Ids.
            </returns>
        </member>
        <member name="M:MIDRetail.DataCommon.ProfileXRef.GetDetailNext(System.Int32)">
            <summary>
            Returns the next detail Id for a given total Id.
            </summary>
            <param name="aTotalId">
            The total Id to get the next detail for.
            </param>
            <returns>
            The next detail Id.
            </returns>
        </member>
        <member name="M:MIDRetail.DataCommon.ProfileXRef.GetTotalNext(System.Int32)">
            <summary>
            Returns the total Id for a given next detail Id.
            </summary>
            <param name="aDetailId">
            The lasg detail Id to get the total for.
            </param>
            <returns>
            The total Id.
            </returns>
        </member>
        <member name="M:MIDRetail.DataCommon.ProfileXRef.AddXRefIdEntry(System.Int32,System.Int32)">
            <summary>
            Builds the total/detail cross-reference using the given total and detail Ids.
            </summary>
            <remarks>
            An entry is added to the ArrayList of both total and detail HashTables at the location of the Profile Ids specified by the given total
            and detail Ids.  The ArrayLists in the HashTables are created upon first usage.
            </remarks>
            <param name="aTotalId">
            The total Profile Id to add a cross reference for.
            </param>
            <param name="aDetailId">
            The detail Profile Id to add a cross reference for.
            </param>
        </member>
        <member name="M:MIDRetail.DataCommon.ProfileXRef.AddXRefIdEntry(System.Int32,System.Collections.ArrayList)">
            <summary>
            Builds the total/detail cross-reference using the given total Id and list of detail Ids.
            </summary>
            <remarks>
            This routine loops through all detail Ids on the given list and calls AddXRefIdEntry with each total/detail pair.
            </remarks>
            <param name="aTotalId">
            The total Profile Id to add a cross reference for.
            </param>
            <param name="aDetailList">
            The list of detail Profile Ids to add a cross reference for.
            </param>
        </member>
        <member name="M:MIDRetail.DataCommon.ProfileXRef.AddXRefIdEntry(MIDRetail.DataCommon.Profile,MIDRetail.DataCommon.ProfileList)">
            <summary>
            Builds the total/detail cross-reference using the given total Profile and list of detail Profiles.
            </summary>
            <remarks>
            This routine loops through all detail Profiles on the given list and calls AddXRefIdEntry with the keys of each total/detail pair.
            </remarks>
            <param name="aTotalProfile">
            The total Profile to add a cross reference for.
            </param>
            <param name="aDetailProfileList">
            The list of detail Profiles to add a cross reference for.
            </param>
        </member>
        <member name="M:MIDRetail.DataCommon.ProfileXRef.AddXRefIdEntry(System.Collections.ArrayList,System.Int32)">
            <summary>
            Builds the total/detail cross-reference using the given detail Id and list of total Ids.
            </summary>
            <remarks>
            This routine loops through all total Ids on the given list and calls AddXRefIdEntry with each total/detail pair.
            </remarks>
            <param name="aTotalList">
            The list of total Profile Ids to add a cross reference for.
            </param>
            <param name="aDetailId">
            The detail Profile Id to add a cross reference for.
            </param>
        </member>
        <member name="M:MIDRetail.DataCommon.ProfileXRef.SetNextXRefIdEntry(System.Int32,System.Int32)">
            <summary>
            Builds the total/detail cross-reference using the given total and detail Ids.
            </summary>
            <remarks>
            An entry is added to the ArrayList of both total and detail HashTables at the location of the Profile Ids specified by the given total
            and detail Ids.  The ArrayLists in the HashTables are created upon first usage.
            </remarks>
            <param name="aTotalId">
            The total Profile Id to add a cross reference for.
            </param>
            <param name="aDetailId">
            The detail Profile Id to add a cross reference for.
            </param>
        </member>
        <member name="M:MIDRetail.DataCommon.ProfileXRef.SetNextXRefIdEntry(System.Int32,System.Collections.ArrayList)">
            <summary>
            Builds the total/detail cross-reference using the given total Id and list of detail Ids.
            </summary>
            <remarks>
            This routine loops through all detail Ids on the given list and calls SetNextXRefIdEntry with each total/detail pair.
            </remarks>
            <param name="aTotalId">
            The total Profile Id to add a cross reference for.
            </param>
            <param name="aDetailList">
            The list of detail Profile Ids to add a cross reference for.
            </param>
        </member>
        <member name="M:MIDRetail.DataCommon.ProfileXRef.SetNextXRefIdEntry(MIDRetail.DataCommon.Profile,MIDRetail.DataCommon.ProfileList)">
            <summary>
            Builds the total/detail cross-reference using the given total Profile and list of detail Profiles.
            </summary>
            <remarks>
            This routine loops through all detail Profiles on the given list and calls SetNextXRefIdEntry with the keys of each total/detail pair.
            </remarks>
            <param name="aTotalProfile">
            The total Profile to add a cross reference for.
            </param>
            <param name="aDetailProfileList">
            The list of detail Profiles to add a cross reference for.
            </param>
        </member>
        <member name="M:MIDRetail.DataCommon.ProfileXRef.SetNextXRefIdEntry(System.Collections.ArrayList,System.Int32)">
            <summary>
            Builds the total/detail cross-reference using the given detail Id and list of total Ids.
            </summary>
            <remarks>
            This routine loops through all total Ids on the given list and calls SetNextXRefIdEntry with each total/detail pair.
            </remarks>
            <param name="aTotalList">
            The list of total Profile Ids to add a cross reference for.
            </param>
            <param name="aDetailId">
            The detail Profile Id to add a cross reference for.
            </param>
        </member>
        <member name="M:MIDRetail.DataCommon.ProfileXRef.intInitDetail">
            <summary>
            This routine initializes the detail tables.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.ComplexProfileXRef">
            <summary>
            Defines a complex cross reference between a single total type and two detail types.
            </summary>
            <remarks>
            This class supports the ability for auto-totaling during computations.  It is composed of two HashTables, one for the detail Profile and one for
            the total Profile.  Each entry in the HashTable is an ArrayList of total Profiles for the detail HashTable, and detail Profiles for the total
            HashTable.  This allows the system to determine which detail Profiles are related to a total Profile, or which total Profiles are related to
            a detail Profile, with a single HashTable access.
            </remarks>
        </member>
        <member name="M:MIDRetail.DataCommon.ComplexProfileXRef.#ctor(MIDRetail.DataCommon.eProfileType,MIDRetail.DataCommon.eProfileType,MIDRetail.DataCommon.eProfileType)">
            <summary>
            Creates a new instance of ProfileXRef using the given total eProfileType and detail eProfileType.
            </summary>
            <param name="aTotalType">
            The eProfileType of the total Profile.
            </param>
            <param name="aPrimaryDetailType">
            The eProfileType of the primary detail Profile.
            </param>
            <param name="aSecondaryDetailType">
            The eProfileType of the secondary detail Profile.
            </param>
        </member>
        <member name="P:MIDRetail.DataCommon.ComplexProfileXRef.TotalType">
            <summary>
            Gets the eProfileType of the total Profile.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.ComplexProfileXRef.PrimaryDetailType">
            <summary>
            Gets the eProfileType of the primary detail Profile.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.ComplexProfileXRef.SecondaryDetailType">
            <summary>
            Gets the eProfileType of the secondary detail Profile.
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.ComplexProfileXRef.GetHashCode">
            <summary>
            Override.  Returns the hashcode for this object.
            </summary>
            <remarks>
            Calulation of this hashcode is accomplished by multiplying the total type by 100 and then adding the detail type
            </remarks>
            <returns>
            The hashcode for this object.
            </returns>
        </member>
        <member name="M:MIDRetail.DataCommon.ComplexProfileXRef.Equals(System.Object)">
            <summary>
            Returns a value indicating whether an instance of ProfileXRef is equal to a specified object.
            </summary>
            <param name="obj">
            An object to compare with this instance.
            </param>
            <returns>
            <I>true</I> if value is an instance of ProfileXRef and equals the value of this instance; otherwise,
            <I>false</I>.
            </returns>
        </member>
        <member name="M:MIDRetail.DataCommon.ComplexProfileXRef.GetDetailList(System.Int32)">
            <summary>
            Returns the list of detail Ids for a given total Id.
            </summary>
            <param name="aTotalId">
            The total Id to get a detail list for.
            </param>
            <returns>
            The list of detail Ids.
            </returns>
        </member>
        <member name="M:MIDRetail.DataCommon.ComplexProfileXRef.GetDetailList(System.Int32,System.Int32)">
            <summary>
            Returns the list of detail Ids for a given total Id.
            </summary>
            <param name="aTotalId">
            The total Id to get a detail list for.
            </param>
            <returns>
            The list of detail Ids.
            </returns>
        </member>
        <member name="M:MIDRetail.DataCommon.ComplexProfileXRef.GetTotalList(System.Int32,System.Int32)">
            <summary>
            Returns the list of total Ids for a given detail Id.
            </summary>
            <param name="aPrimaryDetailId">
            The primary detail Id to get a total list for.
            </param>
            <param name="aSecondaryDetailId">
            The secondary detail Id to get a total list for.
            </param>
            <returns>
            the list of total Ids.
            </returns>
        </member>
        <member name="M:MIDRetail.DataCommon.ComplexProfileXRef.AddXRefIdEntry(System.Int32,MIDRetail.DataCommon.ComplexProfileXRefDetailEntry)">
            <summary>
            Builds the total/detail cross-reference using the given total and detail Ids.
            </summary>
            <remarks>
            An entry is added to the ArrayList of both total and detail HashTables at the location of the Profile Ids specified by the given total
            and detail Ids.  The ArrayLists in the HashTables are created upon first usage.
            </remarks>
            <param name="aTotalId">
            The total Profile Id to add a cross reference for.
            </param>
            <param name="aDetailEntry">
            The ComplexProfileXRefDetailEntry of the detail to add a cross reference for.
            </param>
        </member>
        <member name="M:MIDRetail.DataCommon.ComplexProfileXRef.AddXRefIdEntry(System.Int32,System.Int32,System.Int32)">
            <summary>
            Builds the total/detail cross-reference using the given total and detail Ids.
            </summary>
            <remarks>
            An entry is added to the ArrayList of both total and detail HashTables at the location of the Profile Ids specified by the given total
            and detail Ids.  The ArrayLists in the HashTables are created upon first usage.
            </remarks>
            <param name="aTotalId">
            The total Profile Id to add a cross reference for.
            </param>
            <param name="aPrimaryDetailId">
            The primary detail Profile Id to add a cross reference for.
            </param>
            <param name="aSecondaryDetailId">
            The secondary detail Profile Id to add a cross reference for.
            </param>
        </member>
        <member name="M:MIDRetail.DataCommon.ComplexProfileXRef.AddXRefIdEntry(System.Int32,System.Collections.ArrayList)">
            <summary>
            Builds the total/detail cross-reference using the given total Id and list of detail Ids.
            </summary>
            <remarks>
            This routine loops through all detail Ids on the given list and calls AddXRefIdEntry with each total/detail pair.
            </remarks>
            <param name="aTotalId">
            The total Profile Id to add a cross reference for.
            </param>
            <param name="aDetailList">
            The list of ComplexProfileXRefDetailEntry of the details to add a cross reference for.
            </param>
        </member>
        <member name="M:MIDRetail.DataCommon.ComplexProfileXRef.AddXRefIdEntry(System.Collections.ArrayList,MIDRetail.DataCommon.ComplexProfileXRefDetailEntry)">
            <summary>
            Builds the total/detail cross-reference using the given detail Id and list of total Ids.
            </summary>
            <remarks>
            This routine loops through all total Ids on the given list and calls AddXRefIdEntry with each total/detail pair.
            </remarks>
            <param name="aTotalList">
            The list of total Profile Ids to add a cross reference for.
            </param>
            <param name="aDetailEntry">
            The ComplexProfileXRefDetailEntry of the detail to add a cross reference for.
            </param>
        </member>
        <member name="M:MIDRetail.DataCommon.ComplexProfileXRef.AddXRefIdEntry(System.Collections.ArrayList,System.Int32,System.Int32,System.Int32)">
            <summary>
            Builds the total/detail cross-reference using the given detail Id and list of total Ids.
            </summary>
            <remarks>
            This routine loops through all total Ids on the given list and calls AddXRefIdEntry with each total/detail pair.
            </remarks>
            <param name="aTotalList">
            The list of total Profile Ids to add a cross reference for.
            </param>
            <param name="aPrimaryDetailId">
            The primary detail Profile Id to add a cross reference for.
            </param>
            <param name="aSecondaryDetailId">
            The secondary detail Profile Id to add a cross reference for.
            </param>
        </member>
        <member name="T:MIDRetail.DataCommon.ComplexProfileXRefDetailEntry">
            <summary>
            This class defines the detail hash entry for a ComplexProfileXRef.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.ComplexProfileXRefTotalHashEntry">
            <summary>
            This class defines the total hash entry for a ComplexProfileXRef.
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.ComplexProfileXRefTotalHashEntry.#ctor(MIDRetail.DataCommon.eProfileType,MIDRetail.DataCommon.eProfileType)">
            <summary>
            Creates a new instance of ComplexProfileXRefTotalHashEntry using the given primary detail type and secondary detail type.
            </summary>
            <param name="aPrimaryDetailType">
            The eProfileType that defines the primary detail type.
            </param>
            <param name="aSecondaryDetailType">
            The eProfileType that defines the secondary detail type.
            </param>
        </member>
        <member name="P:MIDRetail.DataCommon.ComplexProfileXRefTotalHashEntry.DetailList">
            <summary>
            Gets the ArrayList containing the detail list of ComplexProfileXRefDetailEntry objects.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.ComplexProfileXRefTotalHashEntry.DetailXRef">
            <summary>
            Gets the ProfileXRef containing the primary to secondary detail relationship.
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.ComplexProfileXRefTotalHashEntry.Add(MIDRetail.DataCommon.ComplexProfileXRefDetailEntry)">
            <summary>
            This method adds a ComplexProfileXRefDetailEntry object to the ArrayList and ProfileXRef.
            </summary>
            <param name="aDetailEntry">
            The ComplexProfileXRefDetailEntry to add.
            </param>
        </member>
        <member name="M:MIDRetail.DataCommon.ComplexProfileXRefTotalHashEntry.Contains(MIDRetail.DataCommon.ComplexProfileXRefDetailEntry)">
            <summary>
            This method returns a boolean indicating if the given ComplexProfileXRefDetailEntry exists in the ArrayList.
            </summary>
            <param name="aDetailEntry">
            The ComplexProfileXRefDetailEntry to check.
            </param>
            <returns>
            A boolean indicating if the given ComplexProfileXRefDetailEntry exists in the ArrayList.
            </returns>
        </member>
        <member name="T:MIDRetail.DataCommon.TriProfileXRef">
            <summary>
            Defines a complex cross reference between a single total type and three detail types.
            </summary>
            <remarks>
            This class supports the ability for auto-totaling during computations.  It is composed of two HashTables, one for the detail Profile and one for
            the total Profile.  Each entry in the HashTable is an ArrayList of total Profiles for the detail HashTable, and detail Profiles for the total
            HashTable.  This allows the system to determine which detail Profiles are related to a total Profile, or which total Profiles are related to
            a detail Profile, with a single HashTable access.
            </remarks>
        </member>
        <member name="M:MIDRetail.DataCommon.TriProfileXRef.#ctor(MIDRetail.DataCommon.eProfileType,MIDRetail.DataCommon.eProfileType,MIDRetail.DataCommon.eProfileType,MIDRetail.DataCommon.eProfileType,MIDRetail.DataCommon.eProfileType)">
            <summary>
            Creates a new instance of ProfileXRef using the given total eProfileType and detail eProfileType.
            </summary>
            <param name="aPrimaryTotalType">
            The eProfileType of the primary total Profile.
            </param>
            <param name="aSecondaryTotalType">
            The eProfileType of the secondary total Profile.
            </param>
            <param name="aPrimaryDetailType">
            The eProfileType of the primary detail Profile.
            </param>
            <param name="aSecondaryDetailType">
            The eProfileType of the secondary detail Profile.
            </param>
            <param name="aTertiaryDetailType">
            The eProfileType of the tertiary detail Profile.
            </param>
        </member>
        <member name="P:MIDRetail.DataCommon.TriProfileXRef.PrimaryTotalType">
            <summary>
            Gets the eProfileType of the primary total Profile.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.TriProfileXRef.SecondaryTotalType">
            <summary>
            Gets the eProfileType of the secondary total Profile.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.TriProfileXRef.PrimaryDetailType">
            <summary>
            Gets the eProfileType of the primary detail Profile.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.TriProfileXRef.SecondaryDetailType">
            <summary>
            Gets the eProfileType of the secondary detail Profile.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.TriProfileXRef.TertiaryDetailType">
            <summary>
            Gets the eProfileType of the secondary detail Profile.
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.TriProfileXRef.GetHashCode">
            <summary>
            Override.  Returns the hashcode for this object.
            </summary>
            <remarks>
            Calulation of this hashcode is accomplished by multiplying the total type by 100 and then adding the detail type
            </remarks>
            <returns>
            The hashcode for this object.
            </returns>
        </member>
        <member name="M:MIDRetail.DataCommon.TriProfileXRef.Equals(System.Object)">
            <summary>
            Returns a value indicating whether an instance of ProfileXRef is equal to a specified object.
            </summary>
            <param name="obj">
            An object to compare with this instance.
            </param>
            <returns>
            <I>true</I> if value is an instance of ProfileXRef and equals the value of this instance; otherwise,
            <I>false</I>.
            </returns>
        </member>
        <member name="M:MIDRetail.DataCommon.TriProfileXRef.GetDetailList(System.Int32,System.Int32)">
            <summary>
            Returns the list of detail Ids for a given total Id.
            </summary>
            <param name="aPrimaryTotalId">
            The primary total Id to get a detail list for.
            </param>
            <param name="aSecondaryTotalID">
            The secondary total Id to get a detail list for.
            </param>
            <returns>
            The list of detail Ids.
            </returns>
        </member>
        <member name="M:MIDRetail.DataCommon.TriProfileXRef.GetTotalList(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the list of total Ids for a given detail Id.
            </summary>
            <param name="aPrimaryDetailId">
            The primary detail Id to get a total list for.
            </param>
            <param name="aSecondaryDetailId">
            The secondary detail Id to get a total list for.
            </param>
            <param name="aTertiaryDetailId">
            The tertiary detail Id to get a total list for.
            </param>
            <returns>
            the list of total Ids.
            </returns>
        </member>
        <member name="M:MIDRetail.DataCommon.TriProfileXRef.AddXRefIdEntry(MIDRetail.DataCommon.TriProfileXRefTotalEntry,MIDRetail.DataCommon.TriProfileXRefDetailEntry)">
            <summary>
            Builds the total/detail cross-reference using the given total and detail Ids.
            </summary>
            <remarks>
            An entry is added to the ArrayList of both total and detail HashTables at the location of the Profile Ids specified by the given total
            and detail Ids.  The ArrayLists in the HashTables are created upon first usage.
            </remarks>
            <param name="aTotalEntry">
            The TriProfileXRefDetailEntry of the total to add a cross reference for.
            </param>
            <param name="aDetailEntry">
            The TriProfileXRefDetailEntry of the detail to add a cross reference for.
            </param>
        </member>
        <member name="M:MIDRetail.DataCommon.TriProfileXRef.AddXRefIdEntry(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Builds the total/detail cross-reference using the given total and detail Ids.
            </summary>
            <remarks>
            An entry is added to the ArrayList of both total and detail HashTables at the location of the Profile Ids specified by the given total
            and detail Ids.  The ArrayLists in the HashTables are created upon first usage.
            </remarks>
            <param name="aPrimaryTotalId">
            The primary total Profile Id to add a cross reference for.
            </param>
            <param name="aSecondaryTotalId">
            The secondary total Profile Id to add a cross reference for.
            </param>
            <param name="aPrimaryDetailId">
            The primary detail Profile Id to add a cross reference for.
            </param>
            <param name="aSecondaryDetailId">
            The secondary detail Profile Id to add a cross reference for.
            </param>
            <param name="aTertiaryDetailId">
            The tertiary detail Profile Id to add a cross reference for.
            </param>
        </member>
        <member name="M:MIDRetail.DataCommon.TriProfileXRef.AddXRefIdEntry(MIDRetail.DataCommon.TriProfileXRefTotalEntry,System.Collections.ArrayList)">
            <summary>
            Builds the total/detail cross-reference using the given total Id and list of detail Ids.
            </summary>
            <remarks>
            This routine loops through all detail Ids on the given list and calls AddXRefIdEntry with each total/detail pair.
            </remarks>
            <param name="aTotalEntry">
            The TriProfileXRefDetailEntry of the total.
            </param>
            <param name="aDetailList">
            The list of TriProfileXRefDetailEntry of the details to add a cross reference for.
            </param>
        </member>
        <member name="M:MIDRetail.DataCommon.TriProfileXRef.AddXRefIdEntry(System.Collections.ArrayList,MIDRetail.DataCommon.TriProfileXRefDetailEntry)">
            <summary>
            Builds the total/detail cross-reference using the given detail Id and list of total Ids.
            </summary>
            <remarks>
            This routine loops through all total Ids on the given list and calls AddXRefIdEntry with each total/detail pair.
            </remarks>
            <param name="aTotalList">
            The list of total Profile Ids to add a cross reference for.
            </param>
            <param name="aDetailEntry">
            The TriProfileXRefDetailEntry of the detail to add a cross reference for.
            </param>
        </member>
        <member name="M:MIDRetail.DataCommon.TriProfileXRef.AddXRefIdEntry(System.Collections.ArrayList,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Builds the total/detail cross-reference using the given detail Id and list of total Ids.
            </summary>
            <remarks>
            This routine loops through all total Ids on the given list and calls AddXRefIdEntry with each total/detail pair.
            </remarks>
            <param name="aTotalList">
            The list of total Profile Ids to add a cross reference for.
            </param>
            <param name="aPrimaryDetailId">
            The primary detail Profile Id to add a cross reference for.
            </param>
            <param name="aSecondaryDetailId">
            The secondary detail Profile Id to add a cross reference for.
            </param>
            <param name="aTertiaryDetailId">
            The tertiary detail Profile Id to add a cross reference for.
            </param>
        </member>
        <member name="T:MIDRetail.DataCommon.TriProfileXRefDetailEntry">
            <summary>
            This class defines the detail hash entry for a TriProfileXRef.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.TriProfileXRefTotalEntry">
            <summary>
            This class defines the total hash entry for a TriProfileXRef.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.PackColorProfileXRef">
            <summary>
            Defines a cross reference between a placeholder pack-color and a header pack-color.
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.PackColorProfileXRef.#ctor">
            <summary>
            Creates a new instance of ProfileXRef.
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.PackColorProfileXRef.GetHeaderList(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the list of header pack-colors for a given placholder pack-color.
            </summary>
            <param name="aPlaceholderID">
            The placeholder Id to get a header pack-color list for.
            </param>
            <param name="aPlaceholderPackId">
            The placeholder pack Id to get a header pack-color list for.
            </param>
            <param name="aPlaceholderColorId">
            The placeholder color Id to get a header pack-color list for.
            </param>
            <returns>
            The list of header pack-color Ids.
            </returns>
        </member>
        <member name="M:MIDRetail.DataCommon.PackColorProfileXRef.GetPlaceholderList(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the list of placeholder pack-color Ids for given header pack-color Ids.
            </summary>
            <param name="aHeaderId">
            The header Id to get a placeholder pack-color list for.
            </param>
            <param name="aHeaderPackId">
            The header pack Id to get a placeholder pack-color list for.
            </param>
            <param name="aHeaderColorId">
            The header color Id to get a placeholder pack-color list for.
            </param>
            <returns>
            the list of placeholder pack-color Ids.
            </returns>
        </member>
        <member name="M:MIDRetail.DataCommon.PackColorProfileXRef.AddXRefIdEntry(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Builds the placeholder/header cross-reference using the given placeholder and header Ids.
            </summary>
            <param name="aPlaceholderId">
            The Placeholder Profile Id to add a cross reference for.
            </param>
            <param name="aPlaceholderPackId">
            The Placeholder Pack Profile Id to add a cross reference for.
            </param>
            <param name="aPlaceholderColorId">
            The Placeholder Color Profile Id to add a cross reference for.
            </param>
            <param name="aHeaderId">
            The Header Profile Id to add a cross reference for.
            </param>
            <param name="aHeaderPackId">
            The Header Pack Profile Id to add a cross reference for.
            </param>
            <param name="aHeaderColorId">
            The Header Color Profile Id to add a cross reference for.
            </param>
        </member>
        <member name="T:MIDRetail.DataCommon.PackColorProfileXRefEntry">
            <summary>
            This class defines the hash entry for a PackColorProfileXRef.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.SetGradeStoreXRef">
            <summary>
            Defines a cross reference between the Set, Grade, and Store types.
            </summary>
            <remarks>
            This class supports the ability for auto-totaling during computations.  It is composed of two HashTables, one for the detail Profile and one for
            the total Profile.  Each entry in the HashTable is an ArrayList of total Profiles for the detail HashTable, and detail Profiles for the total
            HashTable.  This allows the system to determine which detail Profiles are related to a total Profile, or which total Profiles are related to
            a detail Profile, with a single HashTable access.
            </remarks>
        </member>
        <member name="M:MIDRetail.DataCommon.SetGradeStoreXRef.#ctor">
            <summary>
            Creates a new instance of SetGradeStoreXRef.
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.SetGradeStoreXRef.GetHashCode">
            <summary>
            Override.  Returns the hashcode for this object.
            </summary>
            <remarks>
            Calulation of this hashcode is accomplished by multiplying the total type by 100 and then adding the detail type
            </remarks>
            <returns>
            The hashcode for this object.
            </returns>
        </member>
        <member name="M:MIDRetail.DataCommon.SetGradeStoreXRef.Equals(System.Object)">
            <summary>
            Returns a value indicating whether an instance of ProfileXRef is equal to a specified object.
            </summary>
            <param name="obj">
            An object to compare with this instance.
            </param>
            <returns>
            <I>true</I> if value is an instance of ProfileXRef and equals the value of this instance; otherwise,
            <I>false</I>.
            </returns>
        </member>
        <member name="M:MIDRetail.DataCommon.SetGradeStoreXRef.GetDetailList(System.Int32,System.Int32)">
            <summary>
            Returns the list of detail Ids for a given total Id.
            </summary>
            <param name="aSetId">
            The Set Id to get a detail list for.
            </param>
            <param name="aGradeId">
            The Grade Id to get a detail list for.
            </param>
            <returns>
            The list of detail Ids.
            </returns>
        </member>
        <member name="M:MIDRetail.DataCommon.SetGradeStoreXRef.GetTotalList(System.Int32)">
            <summary>
            Returns the list of total Ids for a given detail Id.
            </summary>
            <param name="aStoreId">
            The Store Id to get a total list for.
            </param>
            <returns>
            the list of total Ids.
            </returns>
        </member>
        <member name="M:MIDRetail.DataCommon.SetGradeStoreXRef.AddXRefIdEntry(MIDRetail.DataCommon.SetGradeStoreXRefTotalEntry,System.Int32)">
            <summary>
            Builds the total/detail cross-reference using the given total and detail Ids.
            </summary>
            <remarks>
            An entry is added to the ArrayList of both total and detail HashTables at the location of the Profile Ids specified by the given total
            and detail Ids.  The ArrayLists in the HashTables are created upon first usage.
            </remarks>
            <param name="aTotalEntry">
            The SetGradeStoreXRefTotalEntry of the total to add a cross reference for.
            </param>
            <param name="aStoreId">
            The Store Id to add a cross reference for.
            </param>
        </member>
        <member name="M:MIDRetail.DataCommon.SetGradeStoreXRef.AddXRefIdEntry(System.Int32,System.Int32,System.Int32)">
            <summary>
            Builds the total/detail cross-reference using the given total and detail Ids.
            </summary>
            <remarks>
            An entry is added to the ArrayList of both total and detail HashTables at the location of the Profile Ids specified by the given total
            and detail Ids.  The ArrayLists in the HashTables are created upon first usage.
            </remarks>
            <param name="aSetId">
            The Set Id to add a cross reference for.
            </param>
            <param name="aGradeId">
            The Grade Id to add a cross reference for.
            </param>
            <param name="aStoreId">
            The Store Id to add a cross reference for.
            </param>
        </member>
        <member name="M:MIDRetail.DataCommon.SetGradeStoreXRef.AddXRefIdEntry(System.Collections.ArrayList,System.Int32)">
            <summary>
            Builds the total/detail cross-reference using the given total Id and list of detail Ids.
            </summary>
            <remarks>
            This routine loops through all detail Ids on the given list and calls AddXRefIdEntry with each total/detail pair.
            </remarks>
            <param name="aTotalList">
            The list of SetGradeStoreXRefTotalEntry of the totals to add a cross reference for.
            </param>
            <param name="aStoreId">
            The Store Id to add a cross reference for.
            </param>
        </member>
        <member name="T:MIDRetail.DataCommon.SetGradeStoreXRefTotalEntry">
            <summary>
            This class defines the detail hash entry for a SetGradeStoreXRefTotalEntry.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.SetGradeStoreXRefDetailHashEntry">
            <summary>
            This class defines the total hash entry for a SetGradeStoreXRefDetailHashEntry.
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.SetGradeStoreXRefDetailHashEntry.#ctor">
            <summary>
            Creates a new instance of SetGradeStoreXRefDetailHashEntry.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.SetGradeStoreXRefDetailHashEntry.TotalList">
            <summary>
            Gets the ArrayList containing the total list of SetGradeStoreXRefTotalEntry objects.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.SetGradeStoreXRefDetailHashEntry.TotalXRef">
            <summary>
            Gets the ProfileXRef containing the primary to secondary total relationship.
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.SetGradeStoreXRefDetailHashEntry.Add(MIDRetail.DataCommon.SetGradeStoreXRefTotalEntry)">
            <summary>
            This method adds a SetGradeStoreXRefTotalEntry object to the ArrayList and ProfileXRef.
            </summary>
            <param name="aTotalEntry">
            The SetGradeStoreXRefTotalEntry to add.
            </param>
        </member>
        <member name="M:MIDRetail.DataCommon.SetGradeStoreXRefDetailHashEntry.Contains(MIDRetail.DataCommon.SetGradeStoreXRefTotalEntry)">
            <summary>
            This method returns a boolean indicating if the given SetGradeStoreXRefTotalEntry exists in the ArrayList.
            </summary>
            <param name="aTotalEntry">
            The SetGradeStoreXRefTotalEntry to check.
            </param>
            <returns>
            A boolean indicating if the given SetGradeStoreXRefTotalEntry exists in the ArrayList.
            </returns>
        </member>
        <member name="T:MIDRetail.DataCommon.JobProfile">
            <summary>
            This class defines the JobProfile, information about a Job.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.JobProfile.LockStatus">
            <summary>
            Gets or set Workflow lock status
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.ScheduleProfile">
            <summary>
            This class defines the ScheduleProfile, information about a Schedule.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.TaskListProfile">
            <summary>
            This class defines the ScheduleProfile, information about a TaskList.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.TaskListProfile.OwnerUserRID">
            <summary>
            Gets or sets the key of the owner of the Tasklist.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.TaskListProfile.LockStatus">
            <summary>
            Gets or set Workflow lock status
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.JobTaskListJoinProfile">
            <summary>
            This class defines the JobTaskListJoinProfile, information that connects a Job to a TaskList.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.ScheduleJobJoinProfile">
            <summary>
            This class defines the ScheduleJobJoinProfile, information that connects a Schedule to a Job.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.SpecialRequestProfile">
            <summary>
            This class defines the SpecialRequestProfile, information about a Job.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.Schema.ChainSetPercent">
             <summary>
            Represents a strongly typed in-memory cache of data.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.Schema.ChainSetPercent.LineDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.Schema.ChainSetPercent.LineRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.Schema.ChainSetPercent.LineRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.SecurityProfile">
            <summary>
            Summary description for SecurityProfiles.
            </summary>
            <summary>
            The SecurityProfile class identifies an items security profile.
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.SecurityProfile.#ctor(System.Int32)">
            <summary>
            Creates a new instance of SecurityProfile using the given Id.
            </summary>
            <param name="aKey">
            The Id of this profile.
            </param>
        </member>
        <member name="P:MIDRetail.DataCommon.SecurityProfile.ProfileType">
            <summary>
            Returns the eProfileType of this profile.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.SecurityProfile.Actions">
            <summary>
            Returns the Hashtable of actions which contains the user's security of this profile.
            </summary>
            <remarks>
            This is a Hashtable of eSecurityActions whos value is the eSecurityLevel
            </remarks>
        </member>
        <member name="P:MIDRetail.DataCommon.SecurityProfile.IsReadOnly">
            <summary>
            Gets a flag identifying if the user has read only security to this item.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.SecurityProfile.AllowFullControl">
            <summary>
            Gets a flag identifying if the user has full control this item.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.SecurityProfile.AccessDenied">
            <summary>
            Gets a flag identifying if the user is denied access to this item.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.SecurityProfile.AllowUpdate">
            <summary>
            Gets a flag identifying if the user can update this item.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.SecurityProfile.AllowView">
            <summary>
            Gets a flag identifying if the user can view this item.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.SecurityProfile.AllowDelete">
            <summary>
            Gets a flag identifying if the user can delete this item.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.SecurityProfile.AllowExecute">
            <summary>
            Gets a flag identifying if the user can execute this item.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.SecurityProfile.AllowMove">
            <summary>
            Gets a flag identifying if the user can move this item.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.SecurityProfile.AllowInactivate">
            <summary>
            Gets a flag identifying if the user can inactivate this item.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.SecurityProfile.AllowInteractive">
            <summary>
            Gets a flag identifying if the user can process interactive.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.SecurityProfile.AllowApplyToLowerLevels">
            <summary>
            Gets a flag identifying if the user can apply a setting to lower levels.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.SecurityProfile.AllowInheritFromHigherLevel">
            <summary>
            Gets a flag identifying if the user can remove the current settings to inherit from a higher level.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.SecurityProfile.AllowAssign">
            <summary>
            Gets a flag identifying if the user can assign a value.
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.SecurityProfile.CopyFrom(MIDRetail.DataCommon.SecurityProfile)">
            <summary>
            Copies the internal data from the given SecurityProfile to this profile.
            </summary>
            <param name="aSecProf">
            The SecurityProfile to copy from.
            </param>
        </member>
        <member name="M:MIDRetail.DataCommon.SecurityProfile.Clear">
            <summary>
            Clears all security levels for the item
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.SecurityProfile.IsInherited(MIDRetail.DataCommon.eSecurityActions)">
            <summary>
            Gets the inheritance flag for the provided action
            </summary>
            <param name="aActionID">
            The eSecurityActions of the action
            </param>
            <returns>
            A flag identifying if the security level for the action was inherited
            </returns>
        </member>
        <member name="M:MIDRetail.DataCommon.SecurityProfile.GetSecurityPermission(MIDRetail.DataCommon.eSecurityActions)">
            <summary>
            Gets the security level for the provided action
            </summary>
            <param name="aActionID">
            The eSecurityActions of the action
            </param>
            <returns>
            An eSecurityLevel containing the security level for the action
            </returns>
        </member>
        <member name="M:MIDRetail.DataCommon.SecurityProfile.AddAllSecurityActions">
            <summary>
            Adds all possible security actions to the profile
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.SecurityProfile.AddSecurityAction(MIDRetail.DataCommon.eSecurityActions)">
            <summary>
            Adds the given action to this profile as an available action.
            </summary>
            <param name="aActionID">
            The eSecurityActions ID of the action to add.
            </param>
        </member>
        <member name="M:MIDRetail.DataCommon.SecurityProfile.SetSecurity(MIDRetail.DataCommon.eSecurityActions,MIDRetail.DataCommon.eSecurityLevel)">
            <summary>
            Sets the security level for the provided action
            </summary>
            <param name="aActionID">
            The eSecurityActions of the action
            </param>
            <param name="aSecurityLevel">
            The eSecurityLevel of the action
            </param>
        </member>
        <member name="M:MIDRetail.DataCommon.SecurityProfile.SetSecurity(MIDRetail.DataCommon.eSecurityActions,MIDRetail.DataCommon.eSecurityLevel,MIDRetail.DataCommon.eDatabaseSecurityTypes)">
            <summary>
            Sets the security level for the provided action
            </summary>
            <param name="aActionID">
            The eSecurityActions of the action
            </param>
            <param name="aSecurityLevel">
            The eSecurityLevel of the action
            </param>
            <param name="aDatabaseSecurityTypes">
            The eDatabaseSecurityTypes of the action.
            </param>
        </member>
        <member name="M:MIDRetail.DataCommon.SecurityProfile.SetSecurity(MIDRetail.DataCommon.eSecurityActions,MIDRetail.DataCommon.eSecurityLevel,MIDRetail.DataCommon.eSecurityOwnerType,System.Int32,MIDRetail.DataCommon.eSecurityInheritanceTypes,System.Int32,System.Int32,System.Boolean,System.Boolean,MIDRetail.DataCommon.eDatabaseSecurityTypes)">
            <summary>
            Sets the security level for the provided action
            </summary>
            <param name="aActionID">
            The eSecurityActions of the action
            </param>
            <param name="aSecurityLevel">
            The eSecurityLevel of the action
            </param>
            <param name="aOwnerType">
            The eSecurityOwnerType of the item where the security was inherited
            </param>
            <param name="aOwnerKey">
            The key of the aOwnerType where the security was inherited
            </param>
            <param name="aSecurityInheritanceType">
            The eSecurityInheritanceTypes of the action
            </param>
            <param name="aInheritedFrom">
            The key of the item where the permission what inherited
            </param>
            <param name="aInheritanceOffset">
            The offset from the primary security where the setting was found
            </param>
            <param name="aSetInheritancePath">
            The flag identifies if the inheritance path is to be set
            </param>
            <param name="aInheritedFromGroup">
            The flag identifies if inheritance comes from a group and should always be set
            </param>
            <param name="aDatabaseSecurityTypes">
            The eDatabaseSecurityTypes of the action.
            </param>
        </member>
        <member name="M:MIDRetail.DataCommon.SecurityProfile.SetFullControl">
            <summary>
            Sets the security of the item to full control
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.SecurityProfile.SetAllowUpdate">
            <summary>
            Sets the security of the item to updateable
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.SecurityProfile.SetAllowView">
            <summary>
            Sets the security of the item to viewable
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.SecurityProfile.SetAllowDelete">
            <summary>
            Sets the security of the item to deletable
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.SecurityProfile.SetAllowExecute">
            <summary>
            Sets the security of the item to executable
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.SecurityProfile.SetAllowMove">
            <summary>
            Sets the security of the item to movable
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.SecurityProfile.SetAllowInactivate">
            <summary>
            Sets the security of the item to inactivate
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.SecurityProfile.SetAllowInteractive">
            <summary>
            Sets the security of the item to interactive
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.SecurityProfile.SetDenyUpdate">
            <summary>
            Sets the security of the item to not updatable
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.SecurityProfile.SetDenyView">
            <summary>
            Sets the security of the item to not viewable
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.SecurityProfile.SetDenyDelete">
            <summary>
            Sets the security of the item to not deletable
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.SecurityProfile.SetDenyExecute">
            <summary>
            Sets the security of the item to not Executable
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.SecurityProfile.SetDenyMove">
            <summary>
            Sets the security of the item to not movable
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.SecurityProfile.SetDenyInactivate">
            <summary>
            Sets the security of the item to not inactivate
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.SecurityProfile.SetDenyInteractive">
            <summary>
            Sets the security of the item to not interactive
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.SecurityProfile.SetReadOnly">
            <summary>
            Sets the security of the item to read only
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.SecurityProfile.SetAccessDenied">
            <summary>
            Sets the security to deny access to this item
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.SecurityProfile.SetInheritancePath(MIDRetail.DataCommon.eSecurityActions,MIDRetail.DataCommon.eSecurityOwnerType,System.Int32,MIDRetail.DataCommon.eSecurityInheritanceTypes,System.Int32,MIDRetail.DataCommon.eSecurityLevel,System.Boolean)">
            <summary>
            Sets the properties associated with an inherited permission path
            </summary>
            <param name="aActionID">
            The eSecurityActions of the action
            </param>
            <param name="aOwnerType">
            The eSecurityOwnerType of the item where the security was inherited
            </param>
            <param name="aOwnerKey">
            The key of the aOwnerType where the security was inherited
            </param>
            <param name="aSecurityInheritanceType">
            The eSecurityInheritanceTypes of the action
            </param>
            <param name="aInheritanceItem">
            The key of the item where the permission what checked
            </param>
            <param name="aSecurityLevel">
            The eSecurityLevel of the item
            </param>
            <param name="aIsSelected">
            The flag that identifies if this path item was the selected item
            </param>
        </member>
        <member name="M:MIDRetail.DataCommon.SecurityProfile.InitFullControl">
            <summary>
            Initializes FullControl based upon the individual actions for this profile
            </summary>
            <returns>
            An eSecurityLevel of FullControl initialized
            </returns>
        </member>
        <member name="M:MIDRetail.DataCommon.SecurityProfile.GetSecurityLevel(MIDRetail.DataCommon.eSecurityActions)">
            <summary>
            Gets the security level for the provided action
            </summary>
            <param name="aActionID">The eSecurityActions of the action
            </param>
            <returns>
            An eSecurityLevel containing the security level for the action
            </returns>
        </member>
        <member name="M:MIDRetail.DataCommon.SecurityProfile.ClearInheritance(MIDRetail.DataCommon.eSecurityActions)">
            <summary>
            Sets the properties associated with an inherited permission
            </summary>
            <param name="aActionID">
            The eSecurityActions of the action
            </param>
        </member>
        <member name="M:MIDRetail.DataCommon.SecurityProfile.SetInheritance(MIDRetail.DataCommon.eSecurityActions,MIDRetail.DataCommon.eSecurityOwnerType,System.Int32,MIDRetail.DataCommon.eSecurityInheritanceTypes,System.Int32,System.Int32)">
            <summary>
            Sets the properties associated with an inherited permission
            </summary>
            <param name="aActionID">
            The eSecurityActions of the action
            </param>
            <param name="aOwnerType">
            The eSecurityOwnerType of the item where the security was inherited
            </param>
            <param name="aOwnerKey">
            The key of the aOwnerType where the security was inherited
            </param>
            <param name="aSecurityInheritanceType">
            The eSecurityInheritanceTypes of the action
            </param>
            <param name="aInheritedFrom">
            The key of the item where the permission what inherited
            </param>
            <param name="aInheritanceOffset">
            The offset from the primary security where the setting was found
            </param>
        </member>
        <member name="T:MIDRetail.DataCommon.SecurityPermission">
            <summary>
            The SecurityPermission class contains properties and methods relating to the permission for an action.
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.SecurityPermission.#ctor(MIDRetail.DataCommon.eSecurityLevel)">
            <summary>
            Creates a new instance of SecurityPermission class.
            </summary>
            <param name="aSecurityLevel">
            The eSecurityLevel of this action.
            </param>
        </member>
        <member name="P:MIDRetail.DataCommon.SecurityPermission.SecurityLevel">
            <summary>
            Gets or sets the security level of the action
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.SecurityPermission.IsInherited">
            <summary>
            Gets or sets a flag identifying if the permission was inherited for the action.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.SecurityPermission.OwnerType">
            <summary>
            Gets or sets the eSecurityOwnerType identifying where the permission was inherited form.
            </summary>
            <remarks>
            This is group or user
            </remarks>
        </member>
        <member name="P:MIDRetail.DataCommon.SecurityPermission.OwnerKey">
            <summary>
            Gets or sets the key of the eSecurityOwnerType identifying where the permission was inherited form.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.SecurityPermission.SecurityInheritanceType">
            <summary>
            Gets or sets the eSecurityInheritanceTypes identifying the type of object where the permission was inherited for the action.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.SecurityPermission.SecurityInheritedFrom">
            <summary>
            Gets or sets item from where the permission was inherited for the action.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.SecurityPermission.SecurityInheritanceOffset">
            <summary>
            Gets or sets offset from where the permission was inherited for the action.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.SecurityPermission.SecurityInheritanceIndex">
            <summary>
            Gets or sets index in the InheritancePath from where the permission was inherited for the action.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.SecurityPermission.InheritancePath">
            <summary>
            Gets or sets the ArrayList that contains InheritancePathItem objects that contain information
            about how the permission was determined.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.SecurityPermission.DatabaseSecurityType">
            <summary>
            Gets or sets type of security from where the permission was inherited for the action.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.InheritancePathItem">
            <summary>
            The InheritancePathItem class identifies the items referenced to determine a permission.
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.InheritancePathItem.#ctor">
            <summary>
            Creates a new instance of InheritancePathItem.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.InheritancePathItem.OwnerType">
            <summary>
            Gets or sets the eSecurityOwnerType identifying where the permission was inherited form.
            </summary>
            <remarks>
            This is group or user
            </remarks>
        </member>
        <member name="P:MIDRetail.DataCommon.InheritancePathItem.OwnerKey">
            <summary>
            Gets or sets the key of the eSecurityOwnerType identifying where the permission was inherited form.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.InheritancePathItem.InheritanceType">
            <summary>
            Gets or sets the eSecurityInheritanceTypes that identifies they type of item.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.InheritancePathItem.InheritanceItem">
            <summary>
            Gets or sets the key of the item.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.InheritancePathItem.SecurityLevel">
            <summary>
            Gets or sets the eSecurityLevel of the item.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.WorkflowMethodSecurityProfile">
            <summary>
            The WorkflowMethodSecurityProfile class identifies the workflow or methods' security profile.
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.WorkflowMethodSecurityProfile.#ctor(System.Int32)">
            <summary>
            Creates a new instance of HierarchyNodeSecurityProfile using the given Id.
            </summary>
            <param name="aKey">
            The Id of this profile.
            </param>
        </member>
        <member name="P:MIDRetail.DataCommon.WorkflowMethodSecurityProfile.ProfileType">
            <summary>
            Returns the eProfileType of this profile.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.HierarchyNodeSecurityProfile">
            <summary>
            The HierarchyNodeSecurityProfile class identifies the hierarchy nodes' security profile.
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.HierarchyNodeSecurityProfile.#ctor(System.Int32)">
            <summary>
            Creates a new instance of HierarchyNodeSecurityProfile using the given Id.
            </summary>
            <param name="aKey">
            The Id of this profile.
            </param>
        </member>
        <member name="P:MIDRetail.DataCommon.HierarchyNodeSecurityProfile.ProfileType">
            <summary>
            Returns the eProfileType of this profile.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.HierarchyNodeSecurityProfileList">
            <summary>
            Used to retrieve and update a list of hierarchy node security profiles
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.HierarchyNodeSecurityProfileList.#ctor(MIDRetail.DataCommon.eProfileType)">
            <summary>
            Used to construct an instance of the class.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.VersionSecurityProfile">
            <summary>
            The VersionSecurityProfile class identifies the versions' security profile.
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.VersionSecurityProfile.#ctor(System.Int32)">
            <summary>
            Creates a new instance of VersionSecurityProfile using the given Id.
            </summary>
            <param name="aKey">
            The Id of this profile.
            </param>
        </member>
        <member name="P:MIDRetail.DataCommon.VersionSecurityProfile.ProfileType">
            <summary>
            Returns the eProfileType of this profile.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.VersionSecurityProfileList">
            <summary>
            Used to retrieve and update a list of version security profiles
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.VersionSecurityProfileList.#ctor(MIDRetail.DataCommon.eProfileType)">
            <summary>
            Used to construct an instance of the class.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.FunctionSecurityProfile">
            <summary>
            The FunctionSecurityProfile class identifies the functions' security profile.
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.FunctionSecurityProfile.#ctor(System.Int32)">
            <summary>
            Creates a new instance of FunctionSecurityProfile using the given Id.
            </summary>
            <param name="aKey">
            The Id of this profile.
            </param>
        </member>
        <member name="P:MIDRetail.DataCommon.FunctionSecurityProfile.ProfileType">
            <summary>
            Returns the eProfileType of this profile.
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.ServiceProfile.#ctor(System.Int32)">
            <summary>
            Used to construct an instance of the class.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.ServiceProfile.ProfileType">
            <summary>
            Returns the eProfileType of this profile.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.ServicesProfileList">
            <summary>
            Used to retrieve a list of service profiles
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.ServicesProfileList.#ctor(MIDRetail.DataCommon.eProfileType)">
            <summary>
            Used to construct an instance of the class.
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.UpgradeProfile.#ctor(System.Int32)">
            <summary>
            Used to construct an instance of the class.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.UpgradeProfile.ProfileType">
            <summary>
            Returns the eProfileType of this profile.
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.ClientProfile.#ctor(System.Int32)">
            <summary>
            Used to construct an instance of the class.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.ClientProfile.ProfileType">
            <summary>
            Returns the eProfileType of this profile.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.SizeAggregateBasisKey">
            <summary>
            Describes a key for the basis of a size aggregate calculation 
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.SizeAggregateBasisKey.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates an instance of this structure
            </summary>
            <param name="aHnRID">Hierarchy Node RID where the color-size resides</param>
            <param name="aColorNodeRID">Color Node RID that identifies the color where the size resides</param>
            <param name="aColorCodeRID">Color Code RID that identifies the color where the size resides</param>
            <param name="aSizeNodeRID">Size Node RID that identifies the size</param>
            <param name="aSizeCodeRID">Size Code RID that identifies the size</param>
        </member>
        <member name="P:MIDRetail.DataCommon.SizeAggregateBasisKey.HierarchyNodeRID">
            <summary>
            Gets the Hierarchy Node RID
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.SizeAggregateBasisKey.ColorNodeRID">
            <summary>
            Gets the Color Node RID
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.SizeAggregateBasisKey.ColorCodeRID">
            <summary>
            Gets the Color Code RID
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.SizeAggregateBasisKey.SizeNodeRID">
            <summary>
            Gets the Size Node RID
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.SizeAggregateBasisKey.SizeCodeRID">
            <summary>
            Gets the Size Code RID
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.SizeAggregateBasisKey.SizeIsActive">
            <summary>
            Gets the flag identifying if the size is active
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.SizeAlternatePrimary">
            <summary>
            Hold a single Size Alternate Primary.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.SizeAlternate">
            <summary>
            Hold a single Size Alternate for the Size Alternate primary.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.SizeUnits">
            <summary>
            Identifies the size units associated with a given size RID
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.SizeUnits.#ctor(System.Int32,System.Int32)">
            <summary>
            Instantiates an instance of this structure
            </summary>
            <param name="aSizeRID">Size RID</param>
            <param name="aSizeUnits">Size Units associated with the given size RID</param>
        </member>
        <member name="P:MIDRetail.DataCommon.SizeUnits.RID">
            <summary>
            Gets the Size RID
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.SizeUnits.Units">
            <summary>
            Gets the Size Units
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.SizeUnitRun">
            <summary>
            Dictionary whose key-value pair is SizeRID and SizeUnits, respectively.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.SizeUnitRun.SizeRIDs">
            <summary>
            Gets the array of SizeRIDs in this run
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.SizeUnitRun.GetSizeUnits(System.Int32)">
            <summary>
            Gets the Size Units in the size run for the given size RID
            </summary>
            <param name="aSizeRID">Size RID for which the Size Units are to be retrieved</param>
            <returns>Size Units in the size run for the given size RID</returns>
        </member>
        <member name="T:MIDRetail.DataCommon.SQL_TimeID">
            <summary>
            SQL Time ID 
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.SQL_TimeID.#ctor(System.Char,System.Int16)">
            <summary>
            Creates an instance of this structure using a TimeID key from database
            </summary>
            <param name="aSQL_TimeID">TimeID from database</param>
        </member>
        <member name="M:MIDRetail.DataCommon.SQL_TimeID.#ctor(MIDRetail.DataCommon.eSQLTimeIdType,System.Int32)">
            <summary>
            Creates an instance of this structure
            </summary>
            <param name="aTimeIdType">Time Id type</param>
            <param name="aTimeID">Time ID in format YYYYDDD; for weekly time types, this should be first day of week</param>
        </member>
        <member name="P:MIDRetail.DataCommon.SQL_TimeID.TimeIdType">
            <summary>
            Gets the Time ID Type
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.SQL_TimeID.TimeID">
            <summary>
            Gets the TimeID in format YYYYDDD
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.SQL_TimeID.SqlTimeType">
            <summary>
            Gets the Time Type used as a key on the database
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.SQL_TimeID.SqlTimeID">
            <summary>
            Gets the Time ID used as a key on the database
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.SQL_TimeID.Equals(System.Object)">
            <summary>
            Determines if this TimeID_Struct equals another
            </summary>
            <param name="obj">TimeID_Struct to be tested for equality</param>
            <returns></returns>
        </member>
        <member name="M:MIDRetail.DataCommon.SQL_TimeID.CompareTo(MIDRetail.DataCommon.SQL_TimeID)">
            <summary>
            Compares this TimeID_Struct to another TimeID_Struct
            </summary>
            <param name="aSQL_TimeID">The other TimeID_Struct</param>
            <returns>0 if equal, 1 if this TimeID_Struct is GT the other, -1 if this TimeID_Struct is less than the other</returns>
        </member>
        <member name="M:MIDRetail.DataCommon.SQL_TimeID.op_LessThan(MIDRetail.DataCommon.SQL_TimeID,MIDRetail.DataCommon.SQL_TimeID)">
            <summary>
            Defines the "Less Than" operator fo TimeID_Struct
            </summary>
            <param name="aTimeID_1">1st TimeID</param>
            <param name="aTimeID_2">2nd TimeID</param>
            <returns>True if aTimeID_1 is less than aTimeID_2</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:MIDRetail.DataCommon.SQL_TimeID.op_LessThanOrEqual(MIDRetail.DataCommon.SQL_TimeID,MIDRetail.DataCommon.SQL_TimeID)" -->
        <member name="M:MIDRetail.DataCommon.SQL_TimeID.op_GreaterThan(MIDRetail.DataCommon.SQL_TimeID,MIDRetail.DataCommon.SQL_TimeID)">
            <summary>
            Defines the ">" operator fo TimeID_Struct
            </summary>
            <param name="aTimeID_1">1st TimeID</param>
            <param name="aTimeID_2">2nd TimeID</param>
            <returns>True if aTimeID_1 is greater than aTimeID_2</returns>
        </member>
        <member name="M:MIDRetail.DataCommon.SQL_TimeID.op_GreaterThanOrEqual(MIDRetail.DataCommon.SQL_TimeID,MIDRetail.DataCommon.SQL_TimeID)">
            <summary>
            Defines the ">=" operator fo TimeID_Struct
            </summary>
            <param name="aTimeID_1">1st TimeID</param>
            <param name="aTimeID_2">2nd TimeID</param>
            <returns>True if aTimeID_1 is greater than or equal to aTimeID_2</returns>
        </member>
        <member name="M:MIDRetail.DataCommon.SQL_TimeID.CountTimeIDs(MIDRetail.DataCommon.SQL_TimeID,MIDRetail.DataCommon.SQL_TimeID)">
            <summary>
            Count number of time IDs (number of days or number of weeks) between two given timeIDs (inclusive of endpoints)
            </summary>
            <param name="aBeginTimeID">Start Time ID</param>
            <param name="aEndTimeID">End Time ID</param>
            <returns>Unique Number of time IDs between the two specified time IDs (including the endpoints</returns>
        </member>
        <member name="M:MIDRetail.DataCommon.SQL_TimeID.AddToTimeID(MIDRetail.DataCommon.SQL_TimeID,System.Int32)">
            <summary>
            Add TimeID_Count to a given TimeID
            </summary>
            <param name="aTimeID">Time ID </param>
            <param name="aTimeID_Count">Number of TimeID's to add to the given TimeID</param>
            <returns>Resulting SQL_TimeID</returns>
        </member>
        <member name="T:MIDRetail.DataCommon.StoreEligibilityProfile">
            <summary>
            Contains the information about the eligibility for a store for a node in a hierarchy
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.StoreEligibilityProfile.#ctor(System.Int32)">
            <summary>
            Used to construct an instance of the class.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.StoreEligibilityProfile.ProfileType">
            <summary>
            Returns the eProfileType of this profile.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.StoreEligibilityProfile.StoreEligChangeType">
            <summary>
            Gets or sets the change type of a store's eligibility information.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.StoreEligibilityProfile.RecordExists">
            <summary>
            Gets or sets a flag identifying if a store's eligibility information is inherited.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.StoreEligibilityProfile.EligIsSet">
            <summary>
            Gets or sets a flag identifying if a store's eligibility information is inherited.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.StoreEligibilityProfile.EligIsInherited">
            <summary>
            Gets or sets a flag identifying if a store's eligibility information is inherited.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.StoreEligibilityProfile.EligInheritedFromNodeRID">
            <summary>
            Gets or sets the record ID of the node where the store's eligibility information is inherited from.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.StoreEligibilityProfile.EligType">
            <summary>
            Gets or sets the type of eligibility.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.StoreEligibilityProfile.EligModelRID">
            <summary>
            Gets or sets the record id of the elig model for the store.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.StoreEligibilityProfile.EligModelName">
            <summary>
            Gets or sets the name of the elig model for the store.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.StoreEligibilityProfile.StoreIneligible">
            <summary>
            Gets or sets the flag identifying that a store is ineligible.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.StoreEligibilityProfile.UpdateDate">
            <summary>
            Gets or sets the date that the store is updated.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.StoreEligibilityProfile.StkModIsInherited">
            <summary>
            Gets or sets a flag identifying if a store's stock modifier information is inherited.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.StoreEligibilityProfile.StkModInheritedFromNodeRID">
            <summary>
            Gets or sets the record ID of the node where the store's stock modifier information is inherited from.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.StoreEligibilityProfile.StkModType">
            <summary>
            Gets or sets the type of stock modifier.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.StoreEligibilityProfile.StkModModelRID">
            <summary>
            Gets or sets the record id for the stock modifier model.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.StoreEligibilityProfile.StkModModelName">
            <summary>
            Gets or sets the name of the stock modifier.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.StoreEligibilityProfile.StkModPct">
            <summary>
            Gets or sets the stock modifier percent for the store if a model is not used.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.StoreEligibilityProfile.StkLeadWeeksInherited">
            <summary>
            Gets or sets a flag identifying if a store's Stock Lead Weeks information is inherited.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.StoreEligibilityProfile.StkLeadWeeksInheritedRid">
            <summary>
            Gets or sets the record ID of the node where the store's Stock Lead Weeks information is inherited from.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.StoreEligibilityProfile.StkLeadWeeks">
            <summary>
            Gets or sets the stock lead weeks a new store will recieve in a new store inventory plan.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.StoreEligibilityProfile.SlsModIsInherited">
            <summary>
            Gets or sets a flag identifying if a store's sales modifier information is inherited.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.StoreEligibilityProfile.SlsModInheritedFromNodeRID">
            <summary>
            Gets or sets the record ID of the node where the store's sales modifier information is inherited from.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.StoreEligibilityProfile.SlsModType">
            <summary>
            Gets or sets the sales modifier.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.StoreEligibilityProfile.SlsModModelRID">
            <summary>
            Gets or sets the record id for the sales modifier model.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.StoreEligibilityProfile.SlsModModelName">
            <summary>
            Gets or sets the name of the sales modifier.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.StoreEligibilityProfile.SlsModPct">
            <summary>
            Gets or sets the sales modifier percent for the store if a model is not used.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.StoreEligibilityProfile.FWOSModIsInherited">
            <summary>
            Gets or sets a flag identifying if a store's FWOS modifier information is inherited.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.StoreEligibilityProfile.FWOSModInheritedFromNodeRID">
            <summary>
            Gets or sets the record ID of the node where the store's FWOS modifier information is inherited from.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.StoreEligibilityProfile.FWOSModType">
            <summary>
            Gets or sets the FWOS modifier.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.StoreEligibilityProfile.FWOSModModelRID">
            <summary>
            Gets or sets the record id for the FWOS modifier model.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.StoreEligibilityProfile.FWOSModModelName">
            <summary>
            Gets or sets the name of the FWOS modifier.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.StoreEligibilityProfile.FWOSModPct">
            <summary>
            Gets or sets the FWOS modifier percent for the store if a model is not used.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.StoreEligibilityProfile.SimStoreIsInherited">
            <summary>
            Gets or sets a flag identifying if a store's similar store information is inherited.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.StoreEligibilityProfile.SimStoreInheritedFromNodeRID">
            <summary>
            Gets or sets the record ID of the node where the store's similar store information is inherited from.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.StoreEligibilityProfile.SimStoreType">
            <summary>
            Gets or sets the type of simlar store identified for the store.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.StoreEligibilityProfile.SimStoresChanged">
            <summary>
            Gets or sets the switch to identify if the similar stores have been changed.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.StoreEligibilityProfile.SimStores">
            <summary>
            Gets or sets the list of simlar stores identified for the store.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.StoreEligibilityProfile.SimStoreRatio">
            <summary>
            Gets or sets the ratio of simlar store for the store.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.StoreEligibilityProfile.SimStoreUntilDateRangeRID">
            <summary>
            Gets or sets the record id of the date range to use for the similar store.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.StoreEligibilityProfile.SimStoreDisplayDate">
            <summary>
            Gets or sets the display date to use for the similar store.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.StoreEligibilityProfile.SimStoreWeekList">
            <summary>
            Gets or sets the week list of the date range to use for the similar store.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.StoreEligibilityProfile.PresPlusSalesIsSet">
            <summary>
            Gets or sets the flag identifying if the presentation plus sales indicator was set.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.StoreEligibilityProfile.PresPlusSalesIsInherited">
            <summary>
            Gets or sets the flag identifying if the presentation plus sales indicator was inherited.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.StoreEligibilityProfile.PresPlusSalesInheritedFromNodeRID">
            <summary>
            Gets or sets the flag identifying if the presentation plus sales indicator was inherited.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.StoreEligibilityProfile.PresPlusSalesInd">
            <summary>
            Gets or sets the flag identifying if the presentation plus sales option is to be used.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.StoreEligibilityList">
            <summary>
            Used to retrieve a list of eligibility information
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.StoreEligibilityList.#ctor(MIDRetail.DataCommon.eProfileType)">
            <summary>
            Used to construct an instance of the class.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.StoreWeekEligibilityProfile">
            <summary>
            Contains the information about the eligibility for a store for a node in a hierarchy
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.StoreWeekEligibilityProfile.#ctor(System.Int32)">
            <summary>
            Used to construct an instance of the class.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.StoreWeekEligibilityProfile.ProfileType">
            <summary>
            Returns the eProfileType of this profile.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.StoreWeekEligibilityProfile.YearWeek">
            <summary>
            Gets or sets the year/week for which eligibility is to be determined.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.StoreWeekEligibilityProfile.StoreIsEligible">
            <summary>
            Gets or sets the flag identifying that a store is eligible.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.StoreWeekEligibilityProfile.StoreIsPriorityShipper">
            <summary>
            Gets or sets the flag identifying that a store is a priority shipper.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.StoreWeekEligibilityList">
            <summary>
            Used to retrieve a list of eligibility information for the store/week combinations
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.StoreWeekEligibilityList.#ctor(MIDRetail.DataCommon.eProfileType)">
            <summary>
            Used to construct an instance of the class.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.StoreGradeProfile">
            <summary>
            Contains the information about the store grades for a node in a hierarchy
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.StoreGradeProfile.#ctor(System.Int32)">
            <summary>
            Used to construct an instance of the class.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.StoreGradeProfile.ProfileType">
            <summary>
            Returns the eProfileType of this profile.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.StoreGradeProfile.StoreGradeChangeType">
            <summary>
            Gets or sets the change type of a store grade.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.StoreGradeProfile.StoreGrade">
            <summary>
            Gets or sets the code for the store grade.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.StoreGradeProfile.StoreGradeFound">
            <summary>
            Gets or sets the flag that the store grade was found.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.StoreGradeProfile.StoreGradesIsInherited">
            <summary>
            Gets or sets a flag identifying if store grades information is inherited.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.StoreGradeProfile.StoreGradesInheritedFromNodeRID">
            <summary>
            Gets or sets the record ID of the node where the store grades information is inherited from.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.StoreGradeProfile.Boundary">
            <summary>
            Gets or sets the boundary for the store grade.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.StoreGradeProfile.OriginalBoundary">
            <summary>
            Gets or sets the original boundary for the store grade.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.StoreGradeProfile.BoundaryUnits">
            <summary>
            Gets or sets the boundary Units for the store grade.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.StoreGradeProfile.WosIndex">
            <summary>
            Gets or sets the WOS Index for the store grade.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.StoreGradeProfile.MinMaxChangeType">
            <summary>
            Gets or sets the change type of the min/maxes.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.StoreGradeProfile.MinMaxFound">
            <summary>
            Gets or sets the flag that min/maxes were found.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.StoreGradeProfile.MinMaxesIsInherited">
            <summary>
            Gets or sets a flag identifying if min/max information is inherited.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.StoreGradeProfile.MinMaxesInheritedFromNodeRID">
            <summary>
            Gets or sets the record ID of the node where the min/max information is inherited from.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.StoreGradeProfile.MinStock">
            <summary>
            Gets or sets the Min Stock for the store grade.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.StoreGradeProfile.MaxStock">
            <summary>
            Gets or sets the Max Stock for the store grade.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.StoreGradeProfile.MinAd">
            <summary>
            Gets or sets the Min Ad for the store grade.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.StoreGradeProfile.MinColor">
            <summary>
            Gets or sets the Color Min for the store grade.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.StoreGradeProfile.MaxColor">
            <summary>
            Gets or sets the Color Max for the store grade.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.StoreGradeList">
            <summary>
            Used to retrieve a list of store grades
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.StoreGradeList.#ctor(MIDRetail.DataCommon.eProfileType)">
            <summary>
            Used to construct an instance of the class.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.NodeStockMinMaxesProfile">
            <summary>
            Contains the information about the stock min/maxes for a node in a hierarchy
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.NodeStockMinMaxesProfile.#ctor(System.Int32)">
            <summary>
            Used to construct an instance of the class.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.NodeStockMinMaxesProfile.ProfileType">
            <summary>
            Returns the eProfileType of this profile.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.NodeStockMinMaxesProfile.NodeStockMinMaxChangeType">
            <summary>
            Gets or sets the change type of a store grade.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.NodeStockMinMaxesProfile.NodeStockMinMaxFound">
            <summary>
            Gets or sets the flag that the store grade was found.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.NodeStockMinMaxesProfile.NodeStockMinMaxsIsInherited">
            <summary>
            Gets or sets a flag identifying if store grades information is inherited.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.NodeStockMinMaxesProfile.NodeStockMinMaxsInheritedFromNodeRID">
            <summary>
            Gets or sets the record ID of the node where the store grades information is inherited from.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.NodeStockMinMaxesProfile.NodeStockStoreGroupRID">
            <summary>
            Gets or sets the record ID of the store group used to define the stock min/maxes.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.NodeStockMinMaxesProfile.NodeSetList">
            <summary>
            Gets or sets the NodeSetList.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.NodeStockMinMaxSetProfile">
            <summary>
            Contains the information about the stock min/maxes for a set
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.NodeStockMinMaxSetProfile.#ctor(System.Int32)">
            <summary>
            Used to construct an instance of the class.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.NodeStockMinMaxSetProfile.ProfileType">
            <summary>
            Returns the eProfileType of this profile.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.NodeStockMinMaxSetProfile.Defaults">
            <summary>
            Gets or sets the default values for the set.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.NodeStockMinMaxSetProfile.BoundaryList">
            <summary>
            Gets or sets the boundary list for the set.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.NodeStockMinMaxSetList">
            <summary>
            Used to retrieve a list of store grades
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.NodeStockMinMaxSetList.#ctor(MIDRetail.DataCommon.eProfileType)">
            <summary>
            Used to construct an instance of the class.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.NodeStockMinMaxBoundaryProfile">
            <summary>
            Contains the information about the stock min/maxes for a store grade
            </summary>
            <remarks>
            The Key is the boundary
            </remarks>
        </member>
        <member name="M:MIDRetail.DataCommon.NodeStockMinMaxBoundaryProfile.#ctor(System.Int32)">
            <summary>
            Used to construct an instance of the class.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.NodeStockMinMaxBoundaryProfile.ProfileType">
            <summary>
            Returns the eProfileType of this profile.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.NodeStockMinMaxBoundaryProfile.StoreGrade">
            <summary>
            Gets or sets the code for the store grade.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.NodeStockMinMaxBoundaryProfile.MinMaxList">
            <summary>
            Gets or sets the list of min/maxes for the store grade.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.NodeStockMinMaxBoundaryList">
            <summary>
            Used to retrieve a list of store grades
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.NodeStockMinMaxBoundaryList.#ctor(MIDRetail.DataCommon.eProfileType)">
            <summary>
            Used to construct an instance of the class.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.NodeStockMinMaxProfile">
            <summary>
            Contains the information about the stock min/maxes for a node in a hierarchy
            </summary>
            <remarks>
            The Key is the date range key
            </remarks>
        </member>
        <member name="M:MIDRetail.DataCommon.NodeStockMinMaxProfile.#ctor(System.Int32)">
            <summary>
            Used to construct an instance of the class.
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.NodeStockMinMaxProfile.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Used to construct an instance of the class.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.NodeStockMinMaxProfile.ProfileType">
            <summary>
            Returns the eProfileType of this profile.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.NodeStockMinMaxProfile.Minimum">
            <summary>
            Gets or sets the minimum value.
            </summary>
        </member>
        <member name="P:MIDRetail.DataCommon.NodeStockMinMaxProfile.Maximum">
            <summary>
            Gets or sets the maximum value.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.NodeStockMinMaxList">
            <summary>
            Used to retrieve a list of stock min/maxes
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.NodeStockMinMaxList.#ctor(MIDRetail.DataCommon.eProfileType)">
            <summary>
            Used to construct an instance of the class.
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.StoreProfile.Equals(System.Object)">
            <summary>
            overrided Equals
            </summary>
            <param name="obj">StoreProfile</param>
            <returns>Bool</returns>
        </member>
        <member name="M:MIDRetail.DataCommon.StoreProfile.ToString">
            <summary>
            override ToString
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:MIDRetail.DataCommon.StoreProfile.Clone">
            <summary>
            returns a deep copy
            </summary>
            <returns></returns>
        </member>
        <member name="M:MIDRetail.DataCommon.StoreProfile.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="aKey">int</param>
        </member>
        <member name="P:MIDRetail.DataCommon.StoreProfile.ProfileType">
            <summary>
            Returns the eProfileType of this profile.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.Theme">
            <summary>
            This class contains information that defines a Theme.
            </summary>
        </member>
        <member name="T:MIDRetail.DataCommon.UserNameStorage">
            <summary>
            Holds a list of all users names that were defined at the time the application started.
            </summary>
        </member>
        <member name="M:MIDRetail.DataCommon.UserNameStorage.GetUserName(System.Int32)">
            <summary>
            Returns cached userName based on userRID
            If not found, returns an empty string
            </summary>
            <param name="userRID"></param>
            <returns></returns>
        </member>
        <member name="M:MIDRetail.DataCommon.UserNameStorage.GetUserRID(System.String)">
            <summary>
            Returns cached userRID based on userName
            If not found, returns Include.NoRID
            </summary>
            <param name="userName"></param>
            <returns></returns>
        </member>
        <member name="T:ChainSetPercent">
            <remarks/>
        </member>
        <member name="P:ChainSetPercent.Items">
            <remarks/>
        </member>
        <member name="T:ChainSetPercentLine">
            <remarks/>
        </member>
        <member name="P:ChainSetPercentLine.yearWeek">
            <remarks/>
        </member>
        <member name="P:ChainSetPercentLine.nodeId">
            <remarks/>
        </member>
        <member name="P:ChainSetPercentLine.storeAttribute">
            <remarks/>
        </member>
        <member name="P:ChainSetPercentLine.storeAttributeSet">
            <remarks/>
        </member>
        <member name="P:ChainSetPercentLine.percentage">
            <remarks/>
        </member>
        <member name="T:Colors">
            <remarks/>
        </member>
        <member name="F:Colors.Color">
            <remarks/>
        </member>
        <member name="T:ColorsColor">
            <remarks/>
        </member>
        <member name="F:ColorsColor.Name">
            <remarks/>
        </member>
        <member name="F:ColorsColor.Group">
            <remarks/>
        </member>
        <member name="F:ColorsColor.Code">
            <remarks/>
        </member>
        <member name="T:DailyPercentages">
            <remarks/>
        </member>
        <member name="P:DailyPercentages.Product">
            <remarks/>
        </member>
        <member name="T:DailyPercentagesProduct">
            <remarks/>
        </member>
        <member name="P:DailyPercentagesProduct.Store">
            <remarks/>
        </member>
        <member name="P:DailyPercentagesProduct.ID">
            <remarks/>
        </member>
        <member name="T:DailyPercentagesProductStore">
            <remarks/>
        </member>
        <member name="P:DailyPercentagesProductStore.FiscalPeriod">
            <remarks/>
        </member>
        <member name="P:DailyPercentagesProductStore.ID">
            <remarks/>
        </member>
        <member name="T:DailyPercentagesProductStoreFiscalPeriod">
            <remarks/>
        </member>
        <member name="P:DailyPercentagesProductStoreFiscalPeriod.BeginDate">
            <remarks/>
        </member>
        <member name="P:DailyPercentagesProductStoreFiscalPeriod.EndDate">
            <remarks/>
        </member>
        <member name="P:DailyPercentagesProductStoreFiscalPeriod.Day1">
            <remarks/>
        </member>
        <member name="P:DailyPercentagesProductStoreFiscalPeriod.Day2">
            <remarks/>
        </member>
        <member name="P:DailyPercentagesProductStoreFiscalPeriod.Day3">
            <remarks/>
        </member>
        <member name="P:DailyPercentagesProductStoreFiscalPeriod.Day4">
            <remarks/>
        </member>
        <member name="P:DailyPercentagesProductStoreFiscalPeriod.Day5">
            <remarks/>
        </member>
        <member name="P:DailyPercentagesProductStoreFiscalPeriod.Day6">
            <remarks/>
        </member>
        <member name="P:DailyPercentagesProductStoreFiscalPeriod.Day7">
            <remarks/>
        </member>
        <member name="T:Headers">
            <remarks/>
        </member>
        <member name="P:Headers.Options">
            <remarks/>
        </member>
        <member name="P:Headers.Header">
            <remarks/>
        </member>
        <member name="T:HeadersOptions">
            <remarks/>
        </member>
        <member name="P:HeadersOptions.AutoAddCharacteristics">
            <remarks/>
        </member>
        <member name="P:HeadersOptions.AutoAddCharacteristicsSpecified">
            <remarks/>
        </member>
        <member name="T:HeadersHeader">
            <remarks/>
        </member>
        <member name="P:HeadersHeader.BulkColor">
            <remarks/>
        </member>
        <member name="P:HeadersHeader.Pack">
            <remarks/>
        </member>
        <member name="P:HeadersHeader.Characteristic">
            <remarks/>
        </member>
        <member name="P:HeadersHeader.Methods">
            <remarks/>
        </member>
        <member name="P:HeadersHeader.HeaderId">
            <remarks/>
        </member>
        <member name="P:HeadersHeader.NewHeaderId">
            <remarks/>
        </member>
        <member name="P:HeadersHeader.HeaderAction">
            <remarks/>
        </member>
        <member name="P:HeadersHeader.HeaderActionSpecified">
            <remarks/>
        </member>
        <member name="P:HeadersHeader.HeaderDescription">
            <remarks/>
        </member>
        <member name="P:HeadersHeader.HeaderDate">
            <remarks/>
        </member>
        <member name="P:HeadersHeader.HeaderDateSpecified">
            <remarks/>
        </member>
        <member name="P:HeadersHeader.UnitRetail">
            <remarks/>
        </member>
        <member name="P:HeadersHeader.UnitRetailSpecified">
            <remarks/>
        </member>
        <member name="P:HeadersHeader.UnitCost">
            <remarks/>
        </member>
        <member name="P:HeadersHeader.UnitCostSpecified">
            <remarks/>
        </member>
        <member name="P:HeadersHeader.TotalUnits">
            <remarks/>
        </member>
        <member name="P:HeadersHeader.TotalUnitsSpecified">
            <remarks/>
        </member>
        <member name="P:HeadersHeader.StyleId">
            <remarks/>
        </member>
        <member name="P:HeadersHeader.ParentOfStyleId">
            <remarks/>
        </member>
        <member name="P:HeadersHeader.SizeGroupName">
            <remarks/>
        </member>
        <member name="P:HeadersHeader.BulkMultiple">
            <remarks/>
        </member>
        <member name="P:HeadersHeader.BulkMultipleSpecified">
            <remarks/>
        </member>
        <member name="P:HeadersHeader.HeaderType">
            <remarks/>
        </member>
        <member name="P:HeadersHeader.HeaderTypeSpecified">
            <remarks/>
        </member>
        <member name="P:HeadersHeader.DistCenter">
            <remarks/>
        </member>
        <member name="P:HeadersHeader.Vendor">
            <remarks/>
        </member>
        <member name="P:HeadersHeader.PurchaseOrder">
            <remarks/>
        </member>
        <member name="P:HeadersHeader.Workflow">
            <remarks/>
        </member>
        <member name="P:HeadersHeader.WorkflowTrigger">
            <remarks/>
        </member>
        <member name="P:HeadersHeader.WorkflowTriggerSpecified">
            <remarks/>
        </member>
        <member name="P:HeadersHeader.Notes">
            <remarks/>
        </member>
        <member name="P:HeadersHeader.StyleName">
            <remarks/>
        </member>
        <member name="P:HeadersHeader.VSWID">
            <remarks/>
        </member>
        <member name="P:HeadersHeader.VSWProcess">
            <remarks/>
        </member>
        <member name="P:HeadersHeader.UnitsPerCarton">
            <remarks/>
        </member>
        <member name="T:HeadersHeaderBulkColor">
            <remarks/>
        </member>
        <member name="P:HeadersHeaderBulkColor.BulkColorSize">
            <remarks/>
        </member>
        <member name="P:HeadersHeaderBulkColor.ColorCodeID">
            <remarks/>
        </member>
        <member name="P:HeadersHeaderBulkColor.ColorCodeName">
            <remarks/>
        </member>
        <member name="P:HeadersHeaderBulkColor.ColorCodeDescription">
            <remarks/>
        </member>
        <member name="P:HeadersHeaderBulkColor.ColorCodeGroup">
            <remarks/>
        </member>
        <member name="P:HeadersHeaderBulkColor.Units">
            <remarks/>
        </member>
        <member name="T:HeadersHeaderBulkColorBulkColorSize">
            <remarks/>
        </member>
        <member name="P:HeadersHeaderBulkColorBulkColorSize.SizeCodeID">
            <remarks/>
        </member>
        <member name="P:HeadersHeaderBulkColorBulkColorSize.SizeCodeName">
            <remarks/>
        </member>
        <member name="P:HeadersHeaderBulkColorBulkColorSize.SizeCodeDescription">
            <remarks/>
        </member>
        <member name="P:HeadersHeaderBulkColorBulkColorSize.SizeCodePrimary">
            <remarks/>
        </member>
        <member name="P:HeadersHeaderBulkColorBulkColorSize.SizeCodeSecondary">
            <remarks/>
        </member>
        <member name="P:HeadersHeaderBulkColorBulkColorSize.SizeCodeProductCategory">
            <remarks/>
        </member>
        <member name="P:HeadersHeaderBulkColorBulkColorSize.Units">
            <remarks/>
        </member>
        <member name="T:HeadersHeaderPack">
            <remarks/>
        </member>
        <member name="P:HeadersHeaderPack.PackColor">
            <remarks/>
        </member>
        <member name="P:HeadersHeaderPack.PackSize">
            <remarks/>
        </member>
        <member name="P:HeadersHeaderPack.Name">
            <remarks/>
        </member>
        <member name="P:HeadersHeaderPack.Packs">
            <remarks/>
        </member>
        <member name="P:HeadersHeaderPack.Multiple">
            <remarks/>
        </member>
        <member name="P:HeadersHeaderPack.IsGeneric">
            <remarks/>
        </member>
        <member name="P:HeadersHeaderPack.IsGenericSpecified">
            <remarks/>
        </member>
        <member name="T:HeadersHeaderPackPackColor">
            <remarks/>
        </member>
        <member name="P:HeadersHeaderPackPackColor.PackColorSize">
            <remarks/>
        </member>
        <member name="P:HeadersHeaderPackPackColor.ColorCodeID">
            <remarks/>
        </member>
        <member name="P:HeadersHeaderPackPackColor.ColorCodeName">
            <remarks/>
        </member>
        <member name="P:HeadersHeaderPackPackColor.ColorCodeDescription">
            <remarks/>
        </member>
        <member name="P:HeadersHeaderPackPackColor.ColorCodeGroup">
            <remarks/>
        </member>
        <member name="P:HeadersHeaderPackPackColor.Units">
            <remarks/>
        </member>
        <member name="T:HeadersHeaderPackPackColorPackColorSize">
            <remarks/>
        </member>
        <member name="P:HeadersHeaderPackPackColorPackColorSize.SizeCodeID">
            <remarks/>
        </member>
        <member name="P:HeadersHeaderPackPackColorPackColorSize.SizeCodeName">
            <remarks/>
        </member>
        <member name="P:HeadersHeaderPackPackColorPackColorSize.SizeCodeDescription">
            <remarks/>
        </member>
        <member name="P:HeadersHeaderPackPackColorPackColorSize.SizeCodePrimary">
            <remarks/>
        </member>
        <member name="P:HeadersHeaderPackPackColorPackColorSize.SizeCodeSecondary">
            <remarks/>
        </member>
        <member name="P:HeadersHeaderPackPackColorPackColorSize.SizeCodeProductCategory">
            <remarks/>
        </member>
        <member name="P:HeadersHeaderPackPackColorPackColorSize.Units">
            <remarks/>
        </member>
        <member name="T:HeadersHeaderPackPackSize">
            <remarks/>
        </member>
        <member name="P:HeadersHeaderPackPackSize.SizeCodeID">
            <remarks/>
        </member>
        <member name="P:HeadersHeaderPackPackSize.SizeCodeName">
            <remarks/>
        </member>
        <member name="P:HeadersHeaderPackPackSize.SizeCodeDescription">
            <remarks/>
        </member>
        <member name="P:HeadersHeaderPackPackSize.SizeCodePrimary">
            <remarks/>
        </member>
        <member name="P:HeadersHeaderPackPackSize.SizeCodeSecondary">
            <remarks/>
        </member>
        <member name="P:HeadersHeaderPackPackSize.SizeCodeProductCategory">
            <remarks/>
        </member>
        <member name="P:HeadersHeaderPackPackSize.Units">
            <remarks/>
        </member>
        <member name="T:HeadersHeaderCharacteristic">
            <remarks/>
        </member>
        <member name="P:HeadersHeaderCharacteristic.Name">
            <remarks/>
        </member>
        <member name="P:HeadersHeaderCharacteristic.Value">
            <remarks/>
        </member>
        <member name="P:HeadersHeaderCharacteristic.Protect">
            <remarks/>
        </member>
        <member name="P:HeadersHeaderCharacteristic.CharType">
            <remarks/>
        </member>
        <member name="T:HeadersHeaderCharacteristicCharType">
            <remarks/>
        </member>
        <member name="F:HeadersHeaderCharacteristicCharType.Text">
            <remarks/>
        </member>
        <member name="F:HeadersHeaderCharacteristicCharType.Date">
            <remarks/>
        </member>
        <member name="F:HeadersHeaderCharacteristicCharType.Number">
            <remarks/>
        </member>
        <member name="F:HeadersHeaderCharacteristicCharType.Dollar">
            <remarks/>
        </member>
        <member name="F:HeadersHeaderCharacteristicCharType.Unknown">
            <remarks/>
        </member>
        <member name="T:HeadersHeaderMethod">
            <remarks/>
        </member>
        <member name="P:HeadersHeaderMethod.Type">
            <remarks/>
        </member>
        <member name="P:HeadersHeaderMethod.TypeSpecified">
            <remarks/>
        </member>
        <member name="P:HeadersHeaderMethod.Name">
            <remarks/>
        </member>
        <member name="T:HeadersHeaderMethodType">
            <remarks/>
        </member>
        <member name="F:HeadersHeaderMethodType.GeneralAllocation">
            <remarks/>
        </member>
        <member name="F:HeadersHeaderMethodType.AllocationOverride">
            <remarks/>
        </member>
        <member name="F:HeadersHeaderMethodType.Rule">
            <remarks/>
        </member>
        <member name="F:HeadersHeaderMethodType.Velocity">
            <remarks/>
        </member>
        <member name="F:HeadersHeaderMethodType.FillSizes">
            <remarks/>
        </member>
        <member name="F:HeadersHeaderMethodType.BasisSize">
            <remarks/>
        </member>
        <member name="F:HeadersHeaderMethodType.SizeNeed">
            <remarks/>
        </member>
        <member name="F:HeadersHeaderMethodType.Action">
            <remarks/>
        </member>
        <member name="T:HeadersHeaderHeaderAction">
            <remarks/>
        </member>
        <member name="F:HeadersHeaderHeaderAction.Create">
            <remarks/>
        </member>
        <member name="F:HeadersHeaderHeaderAction.Modify">
            <remarks/>
        </member>
        <member name="F:HeadersHeaderHeaderAction.Remove">
            <remarks/>
        </member>
        <member name="F:HeadersHeaderHeaderAction.Reset">
            <remarks/>
        </member>
        <member name="T:HeadersHeaderHeaderType">
            <remarks/>
        </member>
        <member name="F:HeadersHeaderHeaderType.Receipt">
            <remarks/>
        </member>
        <member name="F:HeadersHeaderHeaderType.PO">
            <remarks/>
        </member>
        <member name="F:HeadersHeaderHeaderType.ASN">
            <remarks/>
        </member>
        <member name="F:HeadersHeaderHeaderType.Dummy">
            <remarks/>
        </member>
        <member name="F:HeadersHeaderHeaderType.DropShip">
            <remarks/>
        </member>
        <member name="F:HeadersHeaderHeaderType.Reserve">
            <remarks/>
        </member>
        <member name="F:HeadersHeaderHeaderType.WorkupTotalBuy">
            <remarks/>
        </member>
        <member name="F:HeadersHeaderHeaderType.VSW">
            <remarks/>
        </member>
        <member name="T:HeadersHeaderVSWProcess">
            <remarks/>
        </member>
        <member name="F:HeadersHeaderVSWProcess.Adjust">
            <remarks/>
        </member>
        <member name="F:HeadersHeaderVSWProcess.Replace">
            <remarks/>
        </member>
        <member name="T:HeaderLoadStatus">
            <remarks/>
        </member>
        <member name="F:HeaderLoadStatus.HeaderStatus">
            <remarks/>
        </member>
        <member name="T:HeaderLoadStatusHeaderStatus">
            <remarks/>
        </member>
        <member name="F:HeaderLoadStatusHeaderStatus.HeaderId">
            <remarks/>
        </member>
        <member name="F:HeaderLoadStatusHeaderStatus.LoadStatus">
            <remarks/>
        </member>
        <member name="F:HeaderLoadStatusHeaderStatus.LoadStatusSpecified">
            <remarks/>
        </member>
        <member name="T:Releases">
            <remarks/>
        </member>
        <member name="P:Releases.Release">
            <remarks/>
        </member>
        <member name="T:ReleasesRelease">
            <remarks/>
        </member>
        <member name="P:ReleasesRelease.Characteristic">
            <remarks/>
        </member>
        <member name="P:ReleasesRelease.Pack">
            <remarks/>
        </member>
        <member name="P:ReleasesRelease.BulkColor">
            <remarks/>
        </member>
        <member name="P:ReleasesRelease.Total">
            <remarks/>
        </member>
        <member name="P:ReleasesRelease.HeaderId">
            <remarks/>
        </member>
        <member name="P:ReleasesRelease.HeaderDescription">
            <remarks/>
        </member>
        <member name="P:ReleasesRelease.HeaderDate">
            <remarks/>
        </member>
        <member name="P:ReleasesRelease.HeaderDateSpecified">
            <remarks/>
        </member>
        <member name="P:ReleasesRelease.ReleaseDate">
            <remarks/>
        </member>
        <member name="P:ReleasesRelease.ReleaseDateSpecified">
            <remarks/>
        </member>
        <member name="P:ReleasesRelease.UserName">
            <remarks/>
        </member>
        <member name="P:ReleasesRelease.UnitRetail">
            <remarks/>
        </member>
        <member name="P:ReleasesRelease.UnitRetailSpecified">
            <remarks/>
        </member>
        <member name="P:ReleasesRelease.UnitCost">
            <remarks/>
        </member>
        <member name="P:ReleasesRelease.UnitCostSpecified">
            <remarks/>
        </member>
        <member name="P:ReleasesRelease.TotalReceivedUnits">
            <remarks/>
        </member>
        <member name="P:ReleasesRelease.TotalReceivedUnitsSpecified">
            <remarks/>
        </member>
        <member name="P:ReleasesRelease.TotalAllocatedUnits">
            <remarks/>
        </member>
        <member name="P:ReleasesRelease.TotalAllocatedUnitsSpecified">
            <remarks/>
        </member>
        <member name="P:ReleasesRelease.TotalVSWAllocatedUnits">
            <remarks/>
        </member>
        <member name="P:ReleasesRelease.TotalVSWAllocatedUnitsSpecified">
            <remarks/>
        </member>
        <member name="P:ReleasesRelease.TotalReserveUnits">
            <remarks/>
        </member>
        <member name="P:ReleasesRelease.TotalReserveUnitsSpecified">
            <remarks/>
        </member>
        <member name="P:ReleasesRelease.StyleId">
            <remarks/>
        </member>
        <member name="P:ReleasesRelease.ParentOfStyleId">
            <remarks/>
        </member>
        <member name="P:ReleasesRelease.SizeGroupName">
            <remarks/>
        </member>
        <member name="P:ReleasesRelease.BulkMultiple">
            <remarks/>
        </member>
        <member name="P:ReleasesRelease.BulkMultipleSpecified">
            <remarks/>
        </member>
        <member name="P:ReleasesRelease.HeaderType">
            <remarks/>
        </member>
        <member name="P:ReleasesRelease.DistCenter">
            <remarks/>
        </member>
        <member name="P:ReleasesRelease.Vendor">
            <remarks/>
        </member>
        <member name="P:ReleasesRelease.PurchaseOrder">
            <remarks/>
        </member>
        <member name="P:ReleasesRelease.Notes">
            <remarks/>
        </member>
        <member name="P:ReleasesRelease.Master">
            <remarks/>
        </member>
        <member name="P:ReleasesRelease.AllocatedUnits">
            <remarks/>
        </member>
        <member name="P:ReleasesRelease.AllocatedUnitsSpecified">
            <remarks/>
        </member>
        <member name="P:ReleasesRelease.VSWAllocatedUnits">
            <remarks/>
        </member>
        <member name="P:ReleasesRelease.VSWAllocatedUnitsSpecified">
            <remarks/>
        </member>
        <member name="P:ReleasesRelease.OrigAllocatedUnits">
            <remarks/>
        </member>
        <member name="P:ReleasesRelease.OrigAllocatedUnitsSpecified">
            <remarks/>
        </member>
        <member name="P:ReleasesRelease.ReserveUnits">
            <remarks/>
        </member>
        <member name="P:ReleasesRelease.ReserveUnitsSpecified">
            <remarks/>
        </member>
        <member name="P:ReleasesRelease.VSWID">
            <remarks/>
        </member>
        <member name="P:ReleasesRelease.VSWProcess">
            <remarks/>
        </member>
        <member name="P:ReleasesRelease.UnitsPerCarton">
            <remarks/>
        </member>
        <member name="T:ReleasesReleaseCharacteristic">
            <remarks/>
        </member>
        <member name="P:ReleasesReleaseCharacteristic.Name">
            <remarks/>
        </member>
        <member name="P:ReleasesReleaseCharacteristic.Value">
            <remarks/>
        </member>
        <member name="T:ReleasesReleasePack">
            <remarks/>
        </member>
        <member name="P:ReleasesReleasePack.PackStore">
            <remarks/>
        </member>
        <member name="P:ReleasesReleasePack.PackColor">
            <remarks/>
        </member>
        <member name="P:ReleasesReleasePack.PackSize">
            <remarks/>
        </member>
        <member name="P:ReleasesReleasePack.Name">
            <remarks/>
        </member>
        <member name="P:ReleasesReleasePack.Multiple">
            <remarks/>
        </member>
        <member name="P:ReleasesReleasePack.MultipleSpecified">
            <remarks/>
        </member>
        <member name="P:ReleasesReleasePack.IsGeneric">
            <remarks/>
        </member>
        <member name="P:ReleasesReleasePack.IsGenericSpecified">
            <remarks/>
        </member>
        <member name="P:ReleasesReleasePack.PackReceivedPacks">
            <remarks/>
        </member>
        <member name="P:ReleasesReleasePack.PackReceivedPacksSpecified">
            <remarks/>
        </member>
        <member name="P:ReleasesReleasePack.PackAllocatedPacks">
            <remarks/>
        </member>
        <member name="P:ReleasesReleasePack.PackAllocatedPacksSpecified">
            <remarks/>
        </member>
        <member name="P:ReleasesReleasePack.PackReservePacks">
            <remarks/>
        </member>
        <member name="P:ReleasesReleasePack.PackReservePacksSpecified">
            <remarks/>
        </member>
        <member name="T:ReleasesReleasePackPackStore">
            <remarks/>
        </member>
        <member name="P:ReleasesReleasePackPackStore.StoreID">
            <remarks/>
        </member>
        <member name="P:ReleasesReleasePackPackStore.Packs">
            <remarks/>
        </member>
        <member name="P:ReleasesReleasePackPackStore.PacksSpecified">
            <remarks/>
        </member>
        <member name="P:ReleasesReleasePackPackStore.VSWID">
            <remarks/>
        </member>
        <member name="P:ReleasesReleasePackPackStore.VSWPacks">
            <remarks/>
        </member>
        <member name="P:ReleasesReleasePackPackStore.VSWPacksSpecified">
            <remarks/>
        </member>
        <member name="T:ReleasesReleasePackPackColor">
            <remarks/>
        </member>
        <member name="P:ReleasesReleasePackPackColor.PackColorStore">
            <remarks/>
        </member>
        <member name="P:ReleasesReleasePackPackColor.PackColorSize">
            <remarks/>
        </member>
        <member name="P:ReleasesReleasePackPackColor.ColorCodeID">
            <remarks/>
        </member>
        <member name="P:ReleasesReleasePackPackColor.ColorCodeName">
            <remarks/>
        </member>
        <member name="P:ReleasesReleasePackPackColor.ColorCodeDescription">
            <remarks/>
        </member>
        <member name="P:ReleasesReleasePackPackColor.ColorUnits">
            <remarks/>
        </member>
        <member name="P:ReleasesReleasePackPackColor.ColorUnitsSpecified">
            <remarks/>
        </member>
        <member name="T:ReleasesReleasePackPackColorPackColorStore">
            <remarks/>
        </member>
        <member name="P:ReleasesReleasePackPackColorPackColorStore.StoreID">
            <remarks/>
        </member>
        <member name="P:ReleasesReleasePackPackColorPackColorStore.Units">
            <remarks/>
        </member>
        <member name="P:ReleasesReleasePackPackColorPackColorStore.UnitsSpecified">
            <remarks/>
        </member>
        <member name="P:ReleasesReleasePackPackColorPackColorStore.VSWID">
            <remarks/>
        </member>
        <member name="P:ReleasesReleasePackPackColorPackColorStore.VSWUnits">
            <remarks/>
        </member>
        <member name="P:ReleasesReleasePackPackColorPackColorStore.VSWUnitsSpecified">
            <remarks/>
        </member>
        <member name="T:ReleasesReleasePackPackColorPackColorSize">
            <remarks/>
        </member>
        <member name="P:ReleasesReleasePackPackColorPackColorSize.PackColorSizeStore">
            <remarks/>
        </member>
        <member name="P:ReleasesReleasePackPackColorPackColorSize.SizeCodeID">
            <remarks/>
        </member>
        <member name="P:ReleasesReleasePackPackColorPackColorSize.SizeCodeName">
            <remarks/>
        </member>
        <member name="P:ReleasesReleasePackPackColorPackColorSize.SizeCodeDescription">
            <remarks/>
        </member>
        <member name="P:ReleasesReleasePackPackColorPackColorSize.SizeCodePrimary">
            <remarks/>
        </member>
        <member name="P:ReleasesReleasePackPackColorPackColorSize.SizeCodeSecondary">
            <remarks/>
        </member>
        <member name="P:ReleasesReleasePackPackColorPackColorSize.SizeCodeProductCategory">
            <remarks/>
        </member>
        <member name="P:ReleasesReleasePackPackColorPackColorSize.SizeUnits">
            <remarks/>
        </member>
        <member name="P:ReleasesReleasePackPackColorPackColorSize.SizeUnitsSpecified">
            <remarks/>
        </member>
        <member name="T:ReleasesReleasePackPackColorPackColorSizePackColorSizeStore">
            <remarks/>
        </member>
        <member name="P:ReleasesReleasePackPackColorPackColorSizePackColorSizeStore.StoreID">
            <remarks/>
        </member>
        <member name="P:ReleasesReleasePackPackColorPackColorSizePackColorSizeStore.Units">
            <remarks/>
        </member>
        <member name="P:ReleasesReleasePackPackColorPackColorSizePackColorSizeStore.UnitsSpecified">
            <remarks/>
        </member>
        <member name="P:ReleasesReleasePackPackColorPackColorSizePackColorSizeStore.VSWID">
            <remarks/>
        </member>
        <member name="P:ReleasesReleasePackPackColorPackColorSizePackColorSizeStore.VSWUnits">
            <remarks/>
        </member>
        <member name="P:ReleasesReleasePackPackColorPackColorSizePackColorSizeStore.VSWUnitsSpecified">
            <remarks/>
        </member>
        <member name="T:ReleasesReleasePackPackSize">
            <remarks/>
        </member>
        <member name="P:ReleasesReleasePackPackSize.PackSizeStore">
            <remarks/>
        </member>
        <member name="P:ReleasesReleasePackPackSize.SizeCodeID">
            <remarks/>
        </member>
        <member name="P:ReleasesReleasePackPackSize.SizeCodeName">
            <remarks/>
        </member>
        <member name="P:ReleasesReleasePackPackSize.SizeCodeDescription">
            <remarks/>
        </member>
        <member name="P:ReleasesReleasePackPackSize.SizeCodePrimary">
            <remarks/>
        </member>
        <member name="P:ReleasesReleasePackPackSize.SizeCodeSecondary">
            <remarks/>
        </member>
        <member name="P:ReleasesReleasePackPackSize.SizeCodeProductCategory">
            <remarks/>
        </member>
        <member name="P:ReleasesReleasePackPackSize.SizeUnits">
            <remarks/>
        </member>
        <member name="P:ReleasesReleasePackPackSize.SizeUnitsSpecified">
            <remarks/>
        </member>
        <member name="T:ReleasesReleasePackPackSizePackSizeStore">
            <remarks/>
        </member>
        <member name="P:ReleasesReleasePackPackSizePackSizeStore.StoreID">
            <remarks/>
        </member>
        <member name="P:ReleasesReleasePackPackSizePackSizeStore.Units">
            <remarks/>
        </member>
        <member name="P:ReleasesReleasePackPackSizePackSizeStore.UnitsSpecified">
            <remarks/>
        </member>
        <member name="P:ReleasesReleasePackPackSizePackSizeStore.VSWID">
            <remarks/>
        </member>
        <member name="P:ReleasesReleasePackPackSizePackSizeStore.VSWUnits">
            <remarks/>
        </member>
        <member name="P:ReleasesReleasePackPackSizePackSizeStore.VSWUnitsSpecified">
            <remarks/>
        </member>
        <member name="T:ReleasesReleaseBulkColor">
            <remarks/>
        </member>
        <member name="P:ReleasesReleaseBulkColor.BulkColorStore">
            <remarks/>
        </member>
        <member name="P:ReleasesReleaseBulkColor.BulkColorSize">
            <remarks/>
        </member>
        <member name="P:ReleasesReleaseBulkColor.ColorCodeID">
            <remarks/>
        </member>
        <member name="P:ReleasesReleaseBulkColor.ColorCodeName">
            <remarks/>
        </member>
        <member name="P:ReleasesReleaseBulkColor.ColorCodeDescription">
            <remarks/>
        </member>
        <member name="P:ReleasesReleaseBulkColor.ColorReceivedUnits">
            <remarks/>
        </member>
        <member name="P:ReleasesReleaseBulkColor.ColorReceivedUnitsSpecified">
            <remarks/>
        </member>
        <member name="P:ReleasesReleaseBulkColor.ColorAllocatedUnits">
            <remarks/>
        </member>
        <member name="P:ReleasesReleaseBulkColor.ColorAllocatedUnitsSpecified">
            <remarks/>
        </member>
        <member name="P:ReleasesReleaseBulkColor.ColorReserveUnits">
            <remarks/>
        </member>
        <member name="P:ReleasesReleaseBulkColor.ColorReserveUnitsSpecified">
            <remarks/>
        </member>
        <member name="T:ReleasesReleaseBulkColorBulkColorStore">
            <remarks/>
        </member>
        <member name="P:ReleasesReleaseBulkColorBulkColorStore.StoreID">
            <remarks/>
        </member>
        <member name="P:ReleasesReleaseBulkColorBulkColorStore.Units">
            <remarks/>
        </member>
        <member name="P:ReleasesReleaseBulkColorBulkColorStore.UnitsSpecified">
            <remarks/>
        </member>
        <member name="P:ReleasesReleaseBulkColorBulkColorStore.VSWID">
            <remarks/>
        </member>
        <member name="P:ReleasesReleaseBulkColorBulkColorStore.VSWUnits">
            <remarks/>
        </member>
        <member name="P:ReleasesReleaseBulkColorBulkColorStore.VSWUnitsSpecified">
            <remarks/>
        </member>
        <member name="T:ReleasesReleaseBulkColorBulkColorSize">
            <remarks/>
        </member>
        <member name="P:ReleasesReleaseBulkColorBulkColorSize.BulkColorSizeStore">
            <remarks/>
        </member>
        <member name="P:ReleasesReleaseBulkColorBulkColorSize.SizeCodeID">
            <remarks/>
        </member>
        <member name="P:ReleasesReleaseBulkColorBulkColorSize.SizeCodeName">
            <remarks/>
        </member>
        <member name="P:ReleasesReleaseBulkColorBulkColorSize.SizeCodeDescription">
            <remarks/>
        </member>
        <member name="P:ReleasesReleaseBulkColorBulkColorSize.SizeCodePrimary">
            <remarks/>
        </member>
        <member name="P:ReleasesReleaseBulkColorBulkColorSize.SizeCodeSecondary">
            <remarks/>
        </member>
        <member name="P:ReleasesReleaseBulkColorBulkColorSize.SizeCodeProductCategory">
            <remarks/>
        </member>
        <member name="P:ReleasesReleaseBulkColorBulkColorSize.SizeReceivedUnits">
            <remarks/>
        </member>
        <member name="P:ReleasesReleaseBulkColorBulkColorSize.SizeReceivedUnitsSpecified">
            <remarks/>
        </member>
        <member name="P:ReleasesReleaseBulkColorBulkColorSize.SizeAllocatedUnits">
            <remarks/>
        </member>
        <member name="P:ReleasesReleaseBulkColorBulkColorSize.SizeAllocatedUnitsSpecified">
            <remarks/>
        </member>
        <member name="P:ReleasesReleaseBulkColorBulkColorSize.SizeReserveUnits">
            <remarks/>
        </member>
        <member name="P:ReleasesReleaseBulkColorBulkColorSize.SizeReserveUnitsSpecified">
            <remarks/>
        </member>
        <member name="T:ReleasesReleaseBulkColorBulkColorSizeBulkColorSizeStore">
            <remarks/>
        </member>
        <member name="P:ReleasesReleaseBulkColorBulkColorSizeBulkColorSizeStore.StoreID">
            <remarks/>
        </member>
        <member name="P:ReleasesReleaseBulkColorBulkColorSizeBulkColorSizeStore.Units">
            <remarks/>
        </member>
        <member name="P:ReleasesReleaseBulkColorBulkColorSizeBulkColorSizeStore.UnitsSpecified">
            <remarks/>
        </member>
        <member name="P:ReleasesReleaseBulkColorBulkColorSizeBulkColorSizeStore.VSWID">
            <remarks/>
        </member>
        <member name="P:ReleasesReleaseBulkColorBulkColorSizeBulkColorSizeStore.VSWUnits">
            <remarks/>
        </member>
        <member name="P:ReleasesReleaseBulkColorBulkColorSizeBulkColorSizeStore.VSWUnitsSpecified">
            <remarks/>
        </member>
        <member name="T:ReleasesReleaseTotal">
            <remarks/>
        </member>
        <member name="P:ReleasesReleaseTotal.TotalStore">
            <remarks/>
        </member>
        <member name="P:ReleasesReleaseTotal.Multiple">
            <remarks/>
        </member>
        <member name="P:ReleasesReleaseTotal.MultipleSpecified">
            <remarks/>
        </member>
        <member name="T:ReleasesReleaseTotalTotalStore">
            <remarks/>
        </member>
        <member name="P:ReleasesReleaseTotalTotalStore.StoreID">
            <remarks/>
        </member>
        <member name="P:ReleasesReleaseTotalTotalStore.Units">
            <remarks/>
        </member>
        <member name="P:ReleasesReleaseTotalTotalStore.UnitsSpecified">
            <remarks/>
        </member>
        <member name="P:ReleasesReleaseTotalTotalStore.VSWID">
            <remarks/>
        </member>
        <member name="P:ReleasesReleaseTotalTotalStore.VSWUnits">
            <remarks/>
        </member>
        <member name="P:ReleasesReleaseTotalTotalStore.VSWUnitsSpecified">
            <remarks/>
        </member>
        <member name="T:HierarchyLevelMaint">
            <remarks/>
        </member>
        <member name="P:HierarchyLevelMaint.Hierarchy">
            <remarks/>
        </member>
        <member name="T:HierarchyLevelMaintHierarchy">
            <remarks/>
        </member>
        <member name="P:HierarchyLevelMaintHierarchy.ID">
            <remarks/>
        </member>
        <member name="P:HierarchyLevelMaintHierarchy.Action">
            <remarks/>
        </member>
        <member name="P:HierarchyLevelMaintHierarchy.LevelName">
            <remarks/>
        </member>
        <member name="P:HierarchyLevelMaintHierarchy.NewLevel">
            <remarks/>
        </member>
        <member name="T:HierarchyLevelMaintHierarchyAction">
            <remarks/>
        </member>
        <member name="F:HierarchyLevelMaintHierarchyAction.Add">
            <remarks/>
        </member>
        <member name="F:HierarchyLevelMaintHierarchyAction.Remove">
            <remarks/>
        </member>
        <member name="T:Hierarchies">
            <remarks/>
        </member>
        <member name="P:Hierarchies.Options">
            <remarks/>
        </member>
        <member name="P:Hierarchies.Hierarchy">
            <remarks/>
        </member>
        <member name="T:HierarchiesOptions">
            <remarks/>
        </member>
        <member name="P:HierarchiesOptions.ReclassForecastVersion">
            <remarks/>
        </member>
        <member name="P:HierarchiesOptions.RollExternalIntransit">
            <remarks/>
        </member>
        <member name="P:HierarchiesOptions.RollAlternateHierarchies">
            <remarks/>
        </member>
        <member name="P:HierarchiesOptions.ReclassPreview">
            <remarks/>
        </member>
        <member name="P:HierarchiesOptions.AutoAddCharacteristics">
            <remarks/>
        </member>
        <member name="P:HierarchiesOptions.AutoAddCharacteristicsSpecified">
            <remarks/>
        </member>
        <member name="P:HierarchiesOptions.AllowDeletes">
            <remarks/>
        </member>
        <member name="P:HierarchiesOptions.AllowDeletesSpecified">
            <remarks/>
        </member>
        <member name="T:HierarchiesOptionsReclassForecastVersion">
            <remarks/>
        </member>
        <member name="P:HierarchiesOptionsReclassForecastVersion.Name">
            <remarks/>
        </member>
        <member name="P:HierarchiesOptionsReclassForecastVersion.Rollup">
            <remarks/>
        </member>
        <member name="T:HierarchiesHierarchy">
            <remarks/>
        </member>
        <member name="P:HierarchiesHierarchy.Level">
            <remarks/>
        </member>
        <member name="P:HierarchiesHierarchy.Product">
            <remarks/>
        </member>
        <member name="P:HierarchiesHierarchy.ID">
            <remarks/>
        </member>
        <member name="P:HierarchiesHierarchy.UpdateDefinition">
            <remarks/>
        </member>
        <member name="P:HierarchiesHierarchy.Type">
            <remarks/>
        </member>
        <member name="P:HierarchiesHierarchy.Color">
            <remarks/>
        </member>
        <member name="T:HierarchiesHierarchyLevel">
            <remarks/>
        </member>
        <member name="P:HierarchiesHierarchyLevel.Name">
            <remarks/>
        </member>
        <member name="P:HierarchiesHierarchyLevel.Type">
            <remarks/>
        </member>
        <member name="P:HierarchiesHierarchyLevel.PlanLevelType">
            <remarks/>
        </member>
        <member name="P:HierarchiesHierarchyLevel.LengthType">
            <remarks/>
        </member>
        <member name="P:HierarchiesHierarchyLevel.RequiredSize">
            <remarks/>
        </member>
        <member name="P:HierarchiesHierarchyLevel.SizeRangeFrom">
            <remarks/>
        </member>
        <member name="P:HierarchiesHierarchyLevel.SizeRangeTo">
            <remarks/>
        </member>
        <member name="P:HierarchiesHierarchyLevel.Color">
            <remarks/>
        </member>
        <member name="P:HierarchiesHierarchyLevel.IsOTSForecastLevel">
            <remarks/>
        </member>
        <member name="T:HierarchiesHierarchyLevelType">
            <remarks/>
        </member>
        <member name="F:HierarchiesHierarchyLevelType.Undefined">
            <remarks/>
        </member>
        <member name="F:HierarchiesHierarchyLevelType.Style">
            <remarks/>
        </member>
        <member name="F:HierarchiesHierarchyLevelType.Color">
            <remarks/>
        </member>
        <member name="F:HierarchiesHierarchyLevelType.Size">
            <remarks/>
        </member>
        <member name="T:HierarchiesHierarchyLevelPlanLevelType">
            <remarks/>
        </member>
        <member name="F:HierarchiesHierarchyLevelPlanLevelType.Undefined">
            <remarks/>
        </member>
        <member name="F:HierarchiesHierarchyLevelPlanLevelType.Regular">
            <remarks/>
        </member>
        <member name="F:HierarchiesHierarchyLevelPlanLevelType.Total">
            <remarks/>
        </member>
        <member name="T:HierarchiesHierarchyLevelLengthType">
            <remarks/>
        </member>
        <member name="F:HierarchiesHierarchyLevelLengthType.Unrestricted">
            <remarks/>
        </member>
        <member name="F:HierarchiesHierarchyLevelLengthType.Required">
            <remarks/>
        </member>
        <member name="F:HierarchiesHierarchyLevelLengthType.Range">
            <remarks/>
        </member>
        <member name="T:HierarchiesHierarchyProduct">
            <remarks/>
        </member>
        <member name="P:HierarchiesHierarchyProduct.Characteristic">
            <remarks/>
        </member>
        <member name="P:HierarchiesHierarchyProduct.Action">
            <remarks/>
        </member>
        <member name="P:HierarchiesHierarchyProduct.Parent">
            <remarks/>
        </member>
        <member name="P:HierarchiesHierarchyProduct.ToParent">
            <remarks/>
        </member>
        <member name="P:HierarchiesHierarchyProduct.ID">
            <remarks/>
        </member>
        <member name="P:HierarchiesHierarchyProduct.NewID">
            <remarks/>
        </member>
        <member name="P:HierarchiesHierarchyProduct.Name">
            <remarks/>
        </member>
        <member name="P:HierarchiesHierarchyProduct.Description">
            <remarks/>
        </member>
        <member name="P:HierarchiesHierarchyProduct.Type">
            <remarks/>
        </member>
        <member name="P:HierarchiesHierarchyProduct.SizeCodePrimary">
            <remarks/>
        </member>
        <member name="P:HierarchiesHierarchyProduct.SizeCodeSecondary">
            <remarks/>
        </member>
        <member name="P:HierarchiesHierarchyProduct.SizeCodeProductCategory">
            <remarks/>
        </member>
        <member name="P:HierarchiesHierarchyProduct.ReplaceWith">
            <remarks/>
        </member>
        <member name="P:HierarchiesHierarchyProduct.ForceDelete">
            <remarks/>
        </member>
        <member name="P:HierarchiesHierarchyProduct.OTSForecastLevelHierarchy">
            <remarks/>
        </member>
        <member name="P:HierarchiesHierarchyProduct.OTSForecastLevelSelect">
            <remarks/>
        </member>
        <member name="P:HierarchiesHierarchyProduct.OTSForecastLevelSelectSpecified">
            <remarks/>
        </member>
        <member name="P:HierarchiesHierarchyProduct.OTSForecastLevel">
            <remarks/>
        </member>
        <member name="P:HierarchiesHierarchyProduct.OTSForecastNodeSearch">
            <remarks/>
        </member>
        <member name="P:HierarchiesHierarchyProduct.OTSForecastNodeSearchSpecified">
            <remarks/>
        </member>
        <member name="P:HierarchiesHierarchyProduct.OTSForecastStartsWith">
            <remarks/>
        </member>
        <member name="P:HierarchiesHierarchyProduct.ApplyNodeProperties">
            <remarks/>
        </member>
        <member name="T:HierarchiesHierarchyProductCharacteristic">
            <remarks/>
        </member>
        <member name="P:HierarchiesHierarchyProductCharacteristic.Name">
            <remarks/>
        </member>
        <member name="P:HierarchiesHierarchyProductCharacteristic.Value">
            <remarks/>
        </member>
        <member name="T:HierarchiesHierarchyProductAction">
            <remarks/>
        </member>
        <member name="F:HierarchiesHierarchyProductAction.Update">
            <remarks/>
        </member>
        <member name="F:HierarchiesHierarchyProductAction.Move">
            <remarks/>
        </member>
        <member name="F:HierarchiesHierarchyProductAction.Delete">
            <remarks/>
        </member>
        <member name="F:HierarchiesHierarchyProductAction.Rename">
            <remarks/>
        </member>
        <member name="T:HierarchiesHierarchyProductType">
            <remarks/>
        </member>
        <member name="F:HierarchiesHierarchyProductType.Undefined">
            <remarks/>
        </member>
        <member name="F:HierarchiesHierarchyProductType.Hardlines">
            <remarks/>
        </member>
        <member name="F:HierarchiesHierarchyProductType.Softlines">
            <remarks/>
        </member>
        <member name="T:HierarchiesHierarchyProductOTSForecastLevelSelect">
            <remarks/>
        </member>
        <member name="F:HierarchiesHierarchyProductOTSForecastLevelSelect.Undefined">
            <remarks/>
        </member>
        <member name="F:HierarchiesHierarchyProductOTSForecastLevelSelect.Level">
            <remarks/>
        </member>
        <member name="F:HierarchiesHierarchyProductOTSForecastLevelSelect.Node">
            <remarks/>
        </member>
        <member name="T:HierarchiesHierarchyProductOTSForecastNodeSearch">
            <remarks/>
        </member>
        <member name="F:HierarchiesHierarchyProductOTSForecastNodeSearch.Undefined">
            <remarks/>
        </member>
        <member name="F:HierarchiesHierarchyProductOTSForecastNodeSearch.ID">
            <remarks/>
        </member>
        <member name="F:HierarchiesHierarchyProductOTSForecastNodeSearch.Name">
            <remarks/>
        </member>
        <member name="F:HierarchiesHierarchyProductOTSForecastNodeSearch.Description">
            <remarks/>
        </member>
        <member name="T:HierarchiesHierarchyType">
            <remarks/>
        </member>
        <member name="F:HierarchiesHierarchyType.Organizational">
            <remarks/>
        </member>
        <member name="F:HierarchiesHierarchyType.Open">
            <remarks/>
        </member>
        <member name="T:ProductAmounts">
            <remarks/>
        </member>
        <member name="P:ProductAmounts.Options">
            <remarks/>
        </member>
        <member name="P:ProductAmounts.ProductAmount">
            <remarks/>
        </member>
        <member name="T:ProductAmountsOptions">
            <remarks/>
        </member>
        <member name="P:ProductAmountsOptions.SalesEndingDate">
            <remarks/>
        </member>
        <member name="P:ProductAmountsOptions.RollStoreDailyToWeekly">
            <remarks/>
        </member>
        <member name="P:ProductAmountsOptions.RollStoreDailyToWeeklySpecified">
            <remarks/>
        </member>
        <member name="P:ProductAmountsOptions.RollStoreDailyUpHierarchy">
            <remarks/>
        </member>
        <member name="P:ProductAmountsOptions.RollStoreDailyUpHierarchySpecified">
            <remarks/>
        </member>
        <member name="P:ProductAmountsOptions.RollStoreWeeklyUpHierarchy">
            <remarks/>
        </member>
        <member name="P:ProductAmountsOptions.RollStoreWeeklyUpHierarchySpecified">
            <remarks/>
        </member>
        <member name="P:ProductAmountsOptions.RollStoreToChain">
            <remarks/>
        </member>
        <member name="P:ProductAmountsOptions.RollStoreToChainSpecified">
            <remarks/>
        </member>
        <member name="P:ProductAmountsOptions.RollChainUpHierarchy">
            <remarks/>
        </member>
        <member name="P:ProductAmountsOptions.RollChainUpHierarchySpecified">
            <remarks/>
        </member>
        <member name="P:ProductAmountsOptions.RollIntransit">
            <remarks/>
        </member>
        <member name="P:ProductAmountsOptions.RollIntransitSpecified">
            <remarks/>
        </member>
        <member name="P:ProductAmountsOptions.RollStockForward">
            <remarks/>
        </member>
        <member name="P:ProductAmountsOptions.RollStockForwardSpecified">
            <remarks/>
        </member>
        <member name="P:ProductAmountsOptions.ComputationModel">
            <remarks/>
        </member>
        <member name="P:ProductAmountsOptions.TransactionHint">
            <remarks/>
        </member>
        <member name="T:ProductAmountsOptionsTransactionHint">
            <remarks/>
        </member>
        <member name="F:ProductAmountsOptionsTransactionHint.NotSpecified">
            <remarks/>
        </member>
        <member name="F:ProductAmountsOptionsTransactionHint.All">
            <remarks/>
        </member>
        <member name="F:ProductAmountsOptionsTransactionHint.StyleAndAbove">
            <remarks/>
        </member>
        <member name="F:ProductAmountsOptionsTransactionHint.Color">
            <remarks/>
        </member>
        <member name="F:ProductAmountsOptionsTransactionHint.Size">
            <remarks/>
        </member>
        <member name="T:ProductAmountsProductAmount">
            <remarks/>
        </member>
        <member name="P:ProductAmountsProductAmount.VariableAmount">
            <remarks/>
        </member>
        <member name="P:ProductAmountsProductAmount.Period">
            <remarks/>
        </member>
        <member name="P:ProductAmountsProductAmount.Version">
            <remarks/>
        </member>
        <member name="P:ProductAmountsProductAmount.Product">
            <remarks/>
        </member>
        <member name="P:ProductAmountsProductAmount.Store">
            <remarks/>
        </member>
        <member name="P:ProductAmountsProductAmount.DateType">
            <remarks/>
        </member>
        <member name="P:ProductAmountsProductAmount.Date">
            <remarks/>
        </member>
        <member name="P:ProductAmountsProductAmount.Parent">
            <remarks/>
        </member>
        <member name="P:ProductAmountsProductAmount.SizeCodePrimary">
            <remarks/>
        </member>
        <member name="P:ProductAmountsProductAmount.SizeCodeSecondary">
            <remarks/>
        </member>
        <member name="P:ProductAmountsProductAmount.SizeCodeProductCategory">
            <remarks/>
        </member>
        <member name="P:ProductAmountsProductAmount.ProductDescription">
            <remarks/>
        </member>
        <member name="P:ProductAmountsProductAmount.ProductName">
            <remarks/>
        </member>
        <member name="T:ProductAmountsProductAmountVariableAmount">
            <remarks/>
        </member>
        <member name="P:ProductAmountsProductAmountVariableAmount.Variable">
            <remarks/>
        </member>
        <member name="P:ProductAmountsProductAmountVariableAmount.Amount">
            <remarks/>
        </member>
        <member name="T:ProductAmountsProductAmountPeriod">
            <remarks/>
        </member>
        <member name="F:ProductAmountsProductAmountPeriod.Week">
            <remarks/>
        </member>
        <member name="F:ProductAmountsProductAmountPeriod.Day">
            <remarks/>
        </member>
        <member name="T:ProductAmountsProductAmountDateType">
            <remarks/>
        </member>
        <member name="F:ProductAmountsProductAmountDateType.Calendar">
            <remarks/>
        </member>
        <member name="F:ProductAmountsProductAmountDateType.Fiscal">
            <remarks/>
        </member>
        <member name="T:RelieveIntransits">
            <remarks/>
        </member>
        <member name="F:RelieveIntransits.RelieveIntransit">
            <remarks/>
        </member>
        <member name="T:RelieveIntransitsRelieveIntransit">
            <remarks/>
        </member>
        <member name="F:RelieveIntransitsRelieveIntransit.RelieveStore">
            <remarks/>
        </member>
        <member name="F:RelieveIntransitsRelieveIntransit.HeaderID">
            <remarks/>
        </member>
        <member name="F:RelieveIntransitsRelieveIntransit.ProductID">
            <remarks/>
        </member>
        <member name="T:RelieveIntransitsRelieveIntransitRelieveStore">
            <remarks/>
        </member>
        <member name="F:RelieveIntransitsRelieveIntransitRelieveStore.StoreID">
            <remarks/>
        </member>
        <member name="F:RelieveIntransitsRelieveIntransitRelieveStore.Units">
            <remarks/>
        </member>
        <member name="F:RelieveIntransitsRelieveIntransitRelieveStore.UnitsSpecified">
            <remarks/>
        </member>
        <member name="F:RelieveIntransitsRelieveIntransitRelieveStore.RelieveAllStores">
            <remarks/>
        </member>
        <member name="F:RelieveIntransitsRelieveIntransitRelieveStore.RelieveAllStoresSpecified">
            <remarks/>
        </member>
        <member name="T:Requests">
            <remarks/>
        </member>
        <member name="F:Requests.Options">
            <remarks/>
        </member>
        <member name="F:Requests.Variables">
            <remarks/>
        </member>
        <member name="F:Requests.Request">
            <remarks/>
        </member>
        <member name="T:RequestsOptions">
            <remarks/>
        </member>
        <member name="F:RequestsOptions.RollupDays">
            <remarks/>
        </member>
        <member name="F:RequestsOptions.HonorLocks">
            <remarks/>
        </member>
        <member name="T:RequestsOptionsRollupDays">
            <remarks/>
        </member>
        <member name="F:RequestsOptionsRollupDays.Current">
            <remarks/>
        </member>
        <member name="F:RequestsOptionsRollupDays.All">
            <remarks/>
        </member>
        <member name="T:RequestsRequest">
            <remarks/>
        </member>
        <member name="F:RequestsRequest.Type">
            <remarks/>
        </member>
        <member name="F:RequestsRequest.Product">
            <remarks/>
        </member>
        <member name="F:RequestsRequest.Version">
            <remarks/>
        </member>
        <member name="F:RequestsRequest.Data">
            <remarks/>
        </member>
        <member name="F:RequestsRequest.Period">
            <remarks/>
        </member>
        <member name="F:RequestsRequest.DateType">
            <remarks/>
        </member>
        <member name="F:RequestsRequest.FromDate">
            <remarks/>
        </member>
        <member name="F:RequestsRequest.ToDate">
            <remarks/>
        </member>
        <member name="F:RequestsRequest.ToLevel">
            <remarks/>
        </member>
        <member name="F:RequestsRequest.FromLevel">
            <remarks/>
        </member>
        <member name="F:RequestsRequest.OverrideVariableLevels">
            <remarks/>
        </member>
        <member name="T:RequestsRequestType">
            <remarks/>
        </member>
        <member name="F:RequestsRequestType.Level">
            <remarks/>
        </member>
        <member name="F:RequestsRequestType.StoreToChain">
            <remarks/>
        </member>
        <member name="F:RequestsRequestType.Posting">
            <remarks/>
        </member>
        <member name="F:RequestsRequestType.Reclass">
            <remarks/>
        </member>
        <member name="F:RequestsRequestType.Intransit">
            <remarks/>
        </member>
        <member name="F:RequestsRequestType.DayToWeek">
            <remarks/>
        </member>
        <member name="T:RequestsRequestData">
            <remarks/>
        </member>
        <member name="F:RequestsRequestData.All">
            <remarks/>
        </member>
        <member name="F:RequestsRequestData.Store">
            <remarks/>
        </member>
        <member name="F:RequestsRequestData.Chain">
            <remarks/>
        </member>
        <member name="T:RequestsRequestPeriod">
            <remarks/>
        </member>
        <member name="F:RequestsRequestPeriod.Week">
            <remarks/>
        </member>
        <member name="F:RequestsRequestPeriod.Day">
            <remarks/>
        </member>
        <member name="T:RequestsRequestDateType">
            <remarks/>
        </member>
        <member name="F:RequestsRequestDateType.Calendar">
            <remarks/>
        </member>
        <member name="F:RequestsRequestDateType.Fiscal">
            <remarks/>
        </member>
        <member name="T:RequestsVariables">
            <remarks/>
        </member>
        <member name="F:RequestsVariables.Name">
            <remarks/>
        </member>
        <member name="F:RequestsVariables.ChainHistoryLevel">
            <remarks/>
        </member>
        <member name="F:RequestsVariables.ChainForecastLevel">
            <remarks/>
        </member>
        <member name="F:RequestsVariables.StoreDailyHistoryLevel">
            <remarks/>
        </member>
        <member name="F:RequestsVariables.StoreWeeklyHistoryLevel">
            <remarks/>
        </member>
        <member name="F:RequestsVariables.StoreForecastLevel">
            <remarks/>
        </member>
        <member name="T:Sizes">
            <remarks/>
        </member>
        <member name="F:Sizes.Size">
            <remarks/>
        </member>
        <member name="T:SizesSize">
            <remarks/>
        </member>
        <member name="F:SizesSize.Code">
            <remarks/>
        </member>
        <member name="F:SizesSize.Primary">
            <remarks/>
        </member>
        <member name="F:SizesSize.Secondary">
            <remarks/>
        </member>
        <member name="F:SizesSize.ProductCategory">
            <remarks/>
        </member>
        <member name="T:SizeConstraintsModels">
            <remarks/>
        </member>
        <member name="F:SizeConstraintsModels.SizeConstraintsModel">
            <remarks/>
        </member>
        <member name="T:SizeConstraintsModelsSizeConstraintsModel">
            <remarks/>
        </member>
        <member name="F:SizeConstraintsModelsSizeConstraintsModel.Set">
            <remarks/>
        </member>
        <member name="F:SizeConstraintsModelsSizeConstraintsModel.Action">
            <remarks/>
        </member>
        <member name="F:SizeConstraintsModelsSizeConstraintsModel.ModelName">
            <remarks/>
        </member>
        <member name="F:SizeConstraintsModelsSizeConstraintsModel.SizeCurve">
            <remarks/>
        </member>
        <member name="F:SizeConstraintsModelsSizeConstraintsModel.SizeGroup">
            <remarks/>
        </member>
        <member name="F:SizeConstraintsModelsSizeConstraintsModel.Attribute">
            <remarks/>
        </member>
        <member name="T:SizeConstraintsModelsSizeConstraintsModelSet">
            <remarks/>
        </member>
        <member name="F:SizeConstraintsModelsSizeConstraintsModelSet.SetName">
            <remarks/>
        </member>
        <member name="F:SizeConstraintsModelsSizeConstraintsModelSet.ColorCode">
            <remarks/>
        </member>
        <member name="F:SizeConstraintsModelsSizeConstraintsModelSet.SizePrimary">
            <remarks/>
        </member>
        <member name="F:SizeConstraintsModelsSizeConstraintsModelSet.SizeSecondary">
            <remarks/>
        </member>
        <member name="F:SizeConstraintsModelsSizeConstraintsModelSet.SizeCode">
            <remarks/>
        </member>
        <member name="F:SizeConstraintsModelsSizeConstraintsModelSet.SizeMin">
            <remarks/>
        </member>
        <member name="F:SizeConstraintsModelsSizeConstraintsModelSet.SizeMax">
            <remarks/>
        </member>
        <member name="F:SizeConstraintsModelsSizeConstraintsModelSet.SizeMult">
            <remarks/>
        </member>
        <member name="T:SizeConstraintsModelsSizeConstraintsModelAction">
            <remarks/>
        </member>
        <member name="F:SizeConstraintsModelsSizeConstraintsModelAction.Create">
            <remarks/>
        </member>
        <member name="F:SizeConstraintsModelsSizeConstraintsModelAction.Modify">
            <remarks/>
        </member>
        <member name="F:SizeConstraintsModelsSizeConstraintsModelAction.Remove">
            <remarks/>
        </member>
        <member name="T:SizeCurveGroups">
            <remarks/>
        </member>
        <member name="F:SizeCurveGroups.SizeCurveGroup">
            <remarks/>
        </member>
        <member name="T:SizeCurveGroupsSizeCurveGroup">
            <remarks/>
        </member>
        <member name="F:SizeCurveGroupsSizeCurveGroup.SizeCurve">
            <remarks/>
        </member>
        <member name="F:SizeCurveGroupsSizeCurveGroup.SizeCurveGroupName">
            <remarks/>
        </member>
        <member name="F:SizeCurveGroupsSizeCurveGroup.SizeCurveGroupAction">
            <remarks/>
        </member>
        <member name="F:SizeCurveGroupsSizeCurveGroup.SizeCurveGroupActionSpecified">
            <remarks/>
        </member>
        <member name="T:SizeCurveGroupsSizeCurveGroupSizeCurve">
            <remarks/>
        </member>
        <member name="F:SizeCurveGroupsSizeCurveGroupSizeCurve.Size">
            <remarks/>
        </member>
        <member name="F:SizeCurveGroupsSizeCurveGroupSizeCurve.SizeCurveName">
            <remarks/>
        </member>
        <member name="F:SizeCurveGroupsSizeCurveGroupSizeCurve.ProductCategory">
            <remarks/>
        </member>
        <member name="F:SizeCurveGroupsSizeCurveGroupSizeCurve.SizeCurveAction">
            <remarks/>
        </member>
        <member name="F:SizeCurveGroupsSizeCurveGroupSizeCurve.SizeCurveActionSpecified">
            <remarks/>
        </member>
        <member name="T:SizeCurveGroupsSizeCurveGroupSizeCurveSize">
            <remarks/>
        </member>
        <member name="F:SizeCurveGroupsSizeCurveGroupSizeCurveSize.CodeID">
            <remarks/>
        </member>
        <member name="F:SizeCurveGroupsSizeCurveGroupSizeCurveSize.Primary">
            <remarks/>
        </member>
        <member name="F:SizeCurveGroupsSizeCurveGroupSizeCurveSize.Secondary">
            <remarks/>
        </member>
        <member name="F:SizeCurveGroupsSizeCurveGroupSizeCurveSize.Value">
            <remarks/>
        </member>
        <member name="F:SizeCurveGroupsSizeCurveGroupSizeCurveSize.ValueSpecified">
            <remarks/>
        </member>
        <member name="F:SizeCurveGroupsSizeCurveGroupSizeCurveSize.SizeAction">
            <remarks/>
        </member>
        <member name="F:SizeCurveGroupsSizeCurveGroupSizeCurveSize.SizeActionSpecified">
            <remarks/>
        </member>
        <member name="T:SizeCurveGroupsSizeCurveGroupSizeCurveSizeSizeAction">
            <remarks/>
        </member>
        <member name="F:SizeCurveGroupsSizeCurveGroupSizeCurveSizeSizeAction.Create">
            <remarks/>
        </member>
        <member name="F:SizeCurveGroupsSizeCurveGroupSizeCurveSizeSizeAction.Modify">
            <remarks/>
        </member>
        <member name="F:SizeCurveGroupsSizeCurveGroupSizeCurveSizeSizeAction.Remove">
            <remarks/>
        </member>
        <member name="T:SizeCurveGroupsSizeCurveGroupSizeCurveSizeCurveAction">
            <remarks/>
        </member>
        <member name="F:SizeCurveGroupsSizeCurveGroupSizeCurveSizeCurveAction.Create">
            <remarks/>
        </member>
        <member name="F:SizeCurveGroupsSizeCurveGroupSizeCurveSizeCurveAction.Modify">
            <remarks/>
        </member>
        <member name="F:SizeCurveGroupsSizeCurveGroupSizeCurveSizeCurveAction.Remove">
            <remarks/>
        </member>
        <member name="T:SizeCurveGroupsSizeCurveGroupSizeCurveGroupAction">
            <remarks/>
        </member>
        <member name="F:SizeCurveGroupsSizeCurveGroupSizeCurveGroupAction.Create">
            <remarks/>
        </member>
        <member name="F:SizeCurveGroupsSizeCurveGroupSizeCurveGroupAction.Modify">
            <remarks/>
        </member>
        <member name="F:SizeCurveGroupsSizeCurveGroupSizeCurveGroupAction.Remove">
            <remarks/>
        </member>
        <member name="T:SizeCurveGroupLoadStatus">
            <remarks/>
        </member>
        <member name="F:SizeCurveGroupLoadStatus.SizeCurveGroupStatus">
            <remarks/>
        </member>
        <member name="T:SizeCurveGroupLoadStatusSizeCurveGroupStatus">
            <remarks/>
        </member>
        <member name="F:SizeCurveGroupLoadStatusSizeCurveGroupStatus.SizeCurveGroupName">
            <remarks/>
        </member>
        <member name="F:SizeCurveGroupLoadStatusSizeCurveGroupStatus.SizeCurveGroupAction">
            <remarks/>
        </member>
        <member name="F:SizeCurveGroupLoadStatusSizeCurveGroupStatus.SizeCurveGroupActionSpecified">
            <remarks/>
        </member>
        <member name="F:SizeCurveGroupLoadStatusSizeCurveGroupStatus.LoadStatus">
            <remarks/>
        </member>
        <member name="F:SizeCurveGroupLoadStatusSizeCurveGroupStatus.LoadStatusSpecified">
            <remarks/>
        </member>
        <member name="T:SizeCurveGroupLoadStatusSizeCurveGroupStatusSizeCurveGroupAction">
            <remarks/>
        </member>
        <member name="F:SizeCurveGroupLoadStatusSizeCurveGroupStatusSizeCurveGroupAction.Create">
            <remarks/>
        </member>
        <member name="F:SizeCurveGroupLoadStatusSizeCurveGroupStatusSizeCurveGroupAction.Modify">
            <remarks/>
        </member>
        <member name="F:SizeCurveGroupLoadStatusSizeCurveGroupStatusSizeCurveGroupAction.Remove">
            <remarks/>
        </member>
        <member name="T:SizeCurves">
            <remarks/>
        </member>
        <member name="F:SizeCurves.SizeCurve">
            <remarks/>
        </member>
        <member name="T:SizeCurvesSizeCurve">
            <remarks/>
        </member>
        <member name="F:SizeCurvesSizeCurve.StoreSizeCurve">
            <remarks/>
        </member>
        <member name="F:SizeCurvesSizeCurve.SizeCurveGroupName">
            <remarks/>
        </member>
        <member name="T:SizeCurvesSizeCurveStoreSizeCurve">
            <remarks/>
        </member>
        <member name="F:SizeCurvesSizeCurveStoreSizeCurve.StoreID">
            <remarks/>
        </member>
        <member name="F:SizeCurvesSizeCurveStoreSizeCurve.SizeCurveName">
            <remarks/>
        </member>
        <member name="T:SizeCurveLoadStatus">
            <remarks/>
        </member>
        <member name="F:SizeCurveLoadStatus.SizeCurveStatus">
            <remarks/>
        </member>
        <member name="T:SizeCurveLoadStatusSizeCurveStatus">
            <remarks/>
        </member>
        <member name="F:SizeCurveLoadStatusSizeCurveStatus.SizeCurveGroupName">
            <remarks/>
        </member>
        <member name="F:SizeCurveLoadStatusSizeCurveStatus.LoadStatus">
            <remarks/>
        </member>
        <member name="F:SizeCurveLoadStatusSizeCurveStatus.LoadStatusSpecified">
            <remarks/>
        </member>
        <member name="T:StoreEligibility">
            <remarks/>
        </member>
        <member name="P:StoreEligibility.Product">
            <remarks/>
        </member>
        <member name="T:StoreEligibilityProduct">
            <remarks/>
        </member>
        <member name="P:StoreEligibilityProduct.Store">
            <remarks/>
        </member>
        <member name="P:StoreEligibilityProduct.ID">
            <remarks/>
        </member>
        <member name="T:StoreEligibilityProductStore">
            <remarks/>
        </member>
        <member name="P:StoreEligibilityProductStore.SimilarStore">
            <remarks/>
        </member>
        <member name="P:StoreEligibilityProductStore.Types">
            <remarks/>
        </member>
        <member name="P:StoreEligibilityProductStore.ID">
            <remarks/>
        </member>
        <member name="P:StoreEligibilityProductStore.Ineligible">
            <remarks/>
        </member>
        <member name="T:StoreEligibilityProductStoreSimilarStore">
            <remarks/>
        </member>
        <member name="P:StoreEligibilityProductStoreSimilarStore.ID">
            <remarks/>
        </member>
        <member name="P:StoreEligibilityProductStoreSimilarStore.Index">
            <remarks/>
        </member>
        <member name="P:StoreEligibilityProductStoreSimilarStore.FromDate">
            <remarks/>
        </member>
        <member name="P:StoreEligibilityProductStoreSimilarStore.UntilDate">
            <remarks/>
        </member>
        <member name="T:StoreEligibilityProductStoreTypes">
            <remarks/>
        </member>
        <member name="P:StoreEligibilityProductStoreTypes.Type">
            <remarks/>
        </member>
        <member name="P:StoreEligibilityProductStoreTypes.Value">
            <remarks/>
        </member>
        <member name="P:StoreEligibilityProductStoreTypes.Model">
            <remarks/>
        </member>
        <member name="T:Stores">
            <remarks/>
        </member>
        <member name="P:Stores.Options">
            <remarks/>
        </member>
        <member name="P:Stores.Store">
            <remarks/>
        </member>
        <member name="T:StoresOptions">
            <remarks/>
        </member>
        <member name="P:StoresOptions.AutoAddCharacteristics">
            <remarks/>
        </member>
        <member name="P:StoresOptions.AutoAddCharacteristicsSpecified">
            <remarks/>
        </member>
        <member name="P:StoresOptions.CharacteristicDelimiter">
            <remarks/>
        </member>
        <member name="T:StoresStore">
            <remarks/>
        </member>
        <member name="P:StoresStore.Characteristic">
            <remarks/>
        </member>
        <member name="P:StoresStore.ID">
            <remarks/>
        </member>
        <member name="P:StoresStore.Name">
            <remarks/>
        </member>
        <member name="P:StoresStore.Description">
            <remarks/>
        </member>
        <member name="P:StoresStore.City">
            <remarks/>
        </member>
        <member name="P:StoresStore.State">
            <remarks/>
        </member>
        <member name="P:StoresStore.SellingSquareFeet">
            <remarks/>
        </member>
        <member name="P:StoresStore.SellingSquareFeetSpecified">
            <remarks/>
        </member>
        <member name="P:StoresStore.SellingOpenDate">
            <remarks/>
        </member>
        <member name="P:StoresStore.SellingOpenDateSpecified">
            <remarks/>
        </member>
        <member name="P:StoresStore.SellingCloseDate">
            <remarks/>
        </member>
        <member name="P:StoresStore.SellingCloseDateSpecified">
            <remarks/>
        </member>
        <member name="P:StoresStore.StockOpenDate">
            <remarks/>
        </member>
        <member name="P:StoresStore.StockOpenDateSpecified">
            <remarks/>
        </member>
        <member name="P:StoresStore.StockCloseDate">
            <remarks/>
        </member>
        <member name="P:StoresStore.StockCloseDateSpecified">
            <remarks/>
        </member>
        <member name="P:StoresStore.ActiveIndicator">
            <remarks/>
        </member>
        <member name="P:StoresStore.ActiveIndicatorSpecified">
            <remarks/>
        </member>
        <member name="P:StoresStore.LeadTime">
            <remarks/>
        </member>
        <member name="P:StoresStore.LeadTimeSpecified">
            <remarks/>
        </member>
        <member name="P:StoresStore.ShipDate">
            <remarks/>
        </member>
        <member name="P:StoresStore.VSWID">
            <remarks/>
        </member>
        <member name="P:StoresStore.Action">
            <remarks/>
        </member>
        <member name="T:StoresStoreCharacteristic">
            <remarks/>
        </member>
        <member name="P:StoresStoreCharacteristic.Name">
            <remarks/>
        </member>
        <member name="P:StoresStoreCharacteristic.Value">
            <remarks/>
        </member>
        <member name="P:StoresStoreCharacteristic.CharType">
            <remarks/>
        </member>
        <member name="T:StoresStoreCharacteristicCharType">
            <remarks/>
        </member>
        <member name="F:StoresStoreCharacteristicCharType.Text">
            <remarks/>
        </member>
        <member name="F:StoresStoreCharacteristicCharType.Date">
            <remarks/>
        </member>
        <member name="F:StoresStoreCharacteristicCharType.Number">
            <remarks/>
        </member>
        <member name="F:StoresStoreCharacteristicCharType.Dollar">
            <remarks/>
        </member>
        <member name="T:StoresStoreAction">
            <remarks/>
        </member>
        <member name="F:StoresStoreAction.Update">
            <remarks/>
        </member>
        <member name="F:StoresStoreAction.Delete">
            <remarks/>
        </member>
        <member name="F:StoresStoreAction.Recover">
            <remarks/>
        </member>
        <member name="T:VSW">
            <remarks/>
        </member>
        <member name="P:VSW.Merchandise">
            <remarks/>
        </member>
        <member name="T:VSWMerchandise">
            <remarks/>
        </member>
        <member name="P:VSWMerchandise.Store">
            <remarks/>
        </member>
        <member name="P:VSWMerchandise.ID">
            <remarks/>
        </member>
        <member name="T:VSWMerchandiseStore">
            <remarks/>
        </member>
        <member name="P:VSWMerchandiseStore.ID">
            <remarks/>
        </member>
        <member name="P:VSWMerchandiseStore.MinShipQty">
            <remarks/>
        </member>
        <member name="P:VSWMerchandiseStore.PctThreshold">
            <remarks/>
        </member>
        <member name="P:VSWMerchandiseStore.ItemMax">
            <remarks/>
        </member>
        <member name="P:VSWMerchandiseStore.FWOSMaxValue">
            <remarks/>
        </member>
        <member name="P:VSWMerchandiseStore.FWOSMaxModel">
            <remarks/>
        </member>
        <member name="P:VSWMerchandiseStore.PushToBkStk">
            <remarks/>
        </member>
    </members>
</doc>
