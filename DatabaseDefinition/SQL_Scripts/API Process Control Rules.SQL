/* Load API_PROCESS_CONTROL_RULES */
/* NOTE: API_ID and PROCESS_ID match the eProcesses enum */

--TRUNCATE TABLE dbo.API_PROCESS_CONTROL_RULES
delete from dbo.API_PROCESS_CONTROL_RULES where LAST_MODIFIED_DATETIME is null

-- from Enums.cs eProcesses
declare @unknown int = 800400
declare @hierarchyLoad int = 800401
declare @storeLoad int = 800402
declare @historyPlanLoad int = 800403
declare @clientApplication int = 800404
declare @storeGroupBuilder int = 800405
declare @hierarchyWebService int = 800406
declare @colorCodeLoad int = 800407
declare @sizeCodeLoad int = 800408
declare @headerLoad int = 800409
declare @forecasting int = 800410
declare @rollup int = 800411
declare @controlService int = 800412
declare @applicationService int = 800413
declare @hierarchyService int = 800414
declare @storeService int = 800415
declare @relieveIntransit int = 800416
declare @purge int = 800417
declare @allocate int = 800418
declare @schedulerService int = 800419
declare @executeJob int = 800420
declare @headerService int = 800421
declare @sizeCurveLoad int = 800422
declare @sqlScript int = 800423
declare @forecastBalancing int = 800424
declare @databaseConversionUtility int = 800425
declare @reBuildIntransit int = 800426  
declare @sizeConstraintsLoad int = 800427
declare @computationDriver int = 800428
declare @specialRequest int = 800429
declare @forecastExportThread int = 800430
declare @assortmentAPI int = 800431
declare @sizeCurveGenerate int = 800432
declare @SizeDayToWeekSummary int = 800435
declare @buildPackCriteriaLoad int = 800436
declare @StoreBinViewer int = 800437
declare @generateRelieveIntransit int = 800439
declare @sizeCurveGenerateThread int = 800438
declare @determineHierarchyActivity int = 800440
declare @ChainSetPercentCriteriaLoad int = 800441
declare @hierarchyReclass int = 800442
declare @pushToBackStock int = 800444
declare @headerAllocationLoad int = 800445
declare @DailyPercentagesCriteraLoad int = 800446
declare @scheduleInterface int = 800447
declare @convertFilters int = 800448 
declare @storeDelete int = 800449
declare @StoreEligibilityCriteraLoad int = 800450 
declare @VSWCriteriaLoad int = 800451 
declare @HeaderReconcile int = 800452		
declare @AllocationTasklist int = 800453	
declare @BatchComp int = 800454				
declare @SchedulerJobManager int = 800455

/* BEGIN TT#1644-VSuart-Process Control-MID */

/* Product Hierarchy Profiles */  
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @hierarchyLoad AND PROCESS_ID =  @hierarchyLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@hierarchyLoad, '0', '0',@hierarchyLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @hierarchyLoad AND PROCESS_ID =  @storeLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@hierarchyLoad, '0', '0',@storeLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @hierarchyLoad AND PROCESS_ID =  @historyPlanLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@hierarchyLoad, '0', '0',@historyPlanLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @hierarchyLoad AND PROCESS_ID =  @colorCodeLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@hierarchyLoad, '0', '0',@colorCodeLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @hierarchyLoad AND PROCESS_ID =  @sizeCodeLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@hierarchyLoad, '0', '0',@sizeCodeLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @hierarchyLoad AND PROCESS_ID =  @headerLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@hierarchyLoad, '0', '0',@headerLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @hierarchyLoad AND PROCESS_ID =  @forecasting)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@hierarchyLoad, '0', '0',@forecasting)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @hierarchyLoad AND PROCESS_ID =  @rollup)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@hierarchyLoad, '0', '1',@rollup)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @hierarchyLoad AND PROCESS_ID =  @relieveIntransit)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@hierarchyLoad, '0', '1',@relieveIntransit)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @hierarchyLoad AND PROCESS_ID =  @purge)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@hierarchyLoad, '0', '1',@purge)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @hierarchyLoad AND PROCESS_ID =  @allocate)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@hierarchyLoad, '0', '0',@allocate)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @hierarchyLoad AND PROCESS_ID =  @sizeCurveLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@hierarchyLoad, '0', '0',@sizeCurveLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @hierarchyLoad AND PROCESS_ID =  @forecastBalancing)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@hierarchyLoad, '0', '0',@forecastBalancing)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @hierarchyLoad AND PROCESS_ID =  @reBuildIntransit)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@hierarchyLoad, '0', '1',@reBuildIntransit)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @hierarchyLoad AND PROCESS_ID =  @sizeConstraintsLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@hierarchyLoad, '0', '0',@sizeConstraintsLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @hierarchyLoad AND PROCESS_ID =  @sizeCurveGenerate)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@hierarchyLoad, '0', '1',@sizeCurveGenerate)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @hierarchyLoad AND PROCESS_ID =  @SizeDayToWeekSummary)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@hierarchyLoad, '0', '0',@SizeDayToWeekSummary)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @hierarchyLoad AND PROCESS_ID =  @buildPackCriteriaLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@hierarchyLoad, '0', '0',@buildPackCriteriaLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @hierarchyLoad AND PROCESS_ID =  @generateRelieveIntransit)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@hierarchyLoad, '0', '0',@generateRelieveIntransit)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @hierarchyLoad AND PROCESS_ID =  @determineHierarchyActivity)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@hierarchyLoad, '0', '1',@determineHierarchyActivity)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @hierarchyLoad AND PROCESS_ID =  @ChainSetPercentCriteriaLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@hierarchyLoad, '0', '1',@ChainSetPercentCriteriaLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @hierarchyLoad AND PROCESS_ID =  @hierarchyReclass)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@hierarchyLoad, '0', '1',@hierarchyReclass)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @hierarchyLoad AND PROCESS_ID =  @pushToBackStock)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@hierarchyLoad, '0', '0',@pushToBackStock)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @hierarchyLoad AND PROCESS_ID =  @headerAllocationLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@hierarchyLoad, '0', '0',@headerAllocationLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @hierarchyLoad AND PROCESS_ID =  @DailyPercentagesCriteraLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@hierarchyLoad, '0', '1',@DailyPercentagesCriteraLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @hierarchyLoad AND PROCESS_ID =  @storeDelete)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@hierarchyLoad, '0', '0',@storeDelete)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @hierarchyLoad AND PROCESS_ID =  @StoreEligibilityCriteraLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@hierarchyLoad, '0', '1',@StoreEligibilityCriteraLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @hierarchyLoad AND PROCESS_ID =  @VSWCriteriaLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@hierarchyLoad, '0', '1',@VSWCriteriaLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @hierarchyLoad AND PROCESS_ID =  @HeaderReconcile)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@hierarchyLoad, '0', '0',@HeaderReconcile)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @hierarchyLoad AND PROCESS_ID =  @BatchComp)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@hierarchyLoad, '0', '0',@BatchComp)   END

/* Store Profiles */  
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @storeLoad AND PROCESS_ID =  @hierarchyLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@storeLoad, '0', '0',@hierarchyLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @storeLoad AND PROCESS_ID =  @storeLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@storeLoad, '0', '1',@storeLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @storeLoad AND PROCESS_ID =  @historyPlanLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@storeLoad, '0', '0',@historyPlanLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @storeLoad AND PROCESS_ID =  @colorCodeLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@storeLoad, '0', '0',@colorCodeLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @storeLoad AND PROCESS_ID =  @sizeCodeLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@storeLoad, '0', '0',@sizeCodeLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @storeLoad AND PROCESS_ID =  @headerLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@storeLoad, '0', '0',@headerLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @storeLoad AND PROCESS_ID =  @forecasting)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@storeLoad, '0', '0',@forecasting)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @storeLoad AND PROCESS_ID =  @rollup)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@storeLoad, '0', '1',@rollup)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @storeLoad AND PROCESS_ID =  @relieveIntransit)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@storeLoad, '0', '1',@relieveIntransit)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @storeLoad AND PROCESS_ID =  @purge)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@storeLoad, '0', '1',@purge)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @storeLoad AND PROCESS_ID =  @allocate)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@storeLoad, '0', '0',@allocate)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @storeLoad AND PROCESS_ID =  @sizeCurveLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@storeLoad, '0', '1',@sizeCurveLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @storeLoad AND PROCESS_ID =  @forecastBalancing)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@storeLoad, '0', '0',@forecastBalancing)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @storeLoad AND PROCESS_ID =  @reBuildIntransit)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@storeLoad, '0', '1',@reBuildIntransit)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @storeLoad AND PROCESS_ID =  @sizeConstraintsLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@storeLoad, '0', '1',@sizeConstraintsLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @storeLoad AND PROCESS_ID =  @sizeCurveGenerate)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@storeLoad, '0', '1',@sizeCurveGenerate)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @storeLoad AND PROCESS_ID =  @SizeDayToWeekSummary)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@storeLoad, '0', '1',@SizeDayToWeekSummary)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @storeLoad AND PROCESS_ID =  @buildPackCriteriaLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@storeLoad, '0', '0',@buildPackCriteriaLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @storeLoad AND PROCESS_ID =  @generateRelieveIntransit)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@storeLoad, '0', '0',@generateRelieveIntransit)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @storeLoad AND PROCESS_ID =  @determineHierarchyActivity)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@storeLoad, '0', '0',@determineHierarchyActivity)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @storeLoad AND PROCESS_ID =  @ChainSetPercentCriteriaLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@storeLoad, '0', '0',@ChainSetPercentCriteriaLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @storeLoad AND PROCESS_ID =  @hierarchyReclass)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@storeLoad, '0', '0',@hierarchyReclass)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @storeLoad AND PROCESS_ID =  @pushToBackStock)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@storeLoad, '0', '1',@pushToBackStock)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @storeLoad AND PROCESS_ID =  @headerAllocationLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@storeLoad, '0', '1',@headerAllocationLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @storeLoad AND PROCESS_ID =  @DailyPercentagesCriteraLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@storeLoad, '0', '1',@DailyPercentagesCriteraLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @storeLoad AND PROCESS_ID =  @storeDelete)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@storeLoad, '0', '0',@storeDelete)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @storeLoad AND PROCESS_ID =  @StoreEligibilityCriteraLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@storeLoad, '0', '1',@StoreEligibilityCriteraLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @storeLoad AND PROCESS_ID =  @VSWCriteriaLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@storeLoad, '0', '1',@VSWCriteriaLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @storeLoad AND PROCESS_ID =  @HeaderReconcile)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@storeLoad, '0', '0',@HeaderReconcile)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @storeLoad AND PROCESS_ID =  @BatchComp)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@storeLoad, '0', '0',@BatchComp)   END

/* History / Plans */  
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @historyPlanLoad AND PROCESS_ID =  @hierarchyLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@historyPlanLoad, '0', '0',@hierarchyLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @historyPlanLoad AND PROCESS_ID =  @storeLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@historyPlanLoad, '0', '0',@storeLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @historyPlanLoad AND PROCESS_ID =  @historyPlanLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@historyPlanLoad, '0', '0',@historyPlanLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @historyPlanLoad AND PROCESS_ID =  @colorCodeLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@historyPlanLoad, '0', '0',@colorCodeLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @historyPlanLoad AND PROCESS_ID =  @sizeCodeLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@historyPlanLoad, '0', '0',@sizeCodeLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @historyPlanLoad AND PROCESS_ID =  @headerLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@historyPlanLoad, '0', '0',@headerLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @historyPlanLoad AND PROCESS_ID =  @forecasting)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@historyPlanLoad, '0', '0',@forecasting)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @historyPlanLoad AND PROCESS_ID =  @rollup)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@historyPlanLoad, '0', '1',@rollup)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @historyPlanLoad AND PROCESS_ID =  @relieveIntransit)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@historyPlanLoad, '0', '0',@relieveIntransit)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @historyPlanLoad AND PROCESS_ID =  @purge)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@historyPlanLoad, '0', '1',@purge)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @historyPlanLoad AND PROCESS_ID =  @allocate)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@historyPlanLoad, '0', '1',@allocate)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @historyPlanLoad AND PROCESS_ID =  @sizeCurveLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@historyPlanLoad, '0', '0',@sizeCurveLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @historyPlanLoad AND PROCESS_ID =  @forecastBalancing)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@historyPlanLoad, '0', '0',@forecastBalancing)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @historyPlanLoad AND PROCESS_ID =  @reBuildIntransit)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@historyPlanLoad, '0', '1',@reBuildIntransit)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @historyPlanLoad AND PROCESS_ID =  @sizeConstraintsLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@historyPlanLoad, '0', '0',@sizeConstraintsLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @historyPlanLoad AND PROCESS_ID =  @sizeCurveGenerate)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@historyPlanLoad, '0', '1',@sizeCurveGenerate)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @historyPlanLoad AND PROCESS_ID =  @SizeDayToWeekSummary)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@historyPlanLoad, '0', '1',@SizeDayToWeekSummary)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @historyPlanLoad AND PROCESS_ID =  @buildPackCriteriaLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@historyPlanLoad, '0', '0',@buildPackCriteriaLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @historyPlanLoad AND PROCESS_ID =  @generateRelieveIntransit)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@historyPlanLoad, '0', '0',@generateRelieveIntransit)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @historyPlanLoad AND PROCESS_ID =  @determineHierarchyActivity)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@historyPlanLoad, '0', '0',@determineHierarchyActivity)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @historyPlanLoad AND PROCESS_ID =  @ChainSetPercentCriteriaLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@historyPlanLoad, '0', '0',@ChainSetPercentCriteriaLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @historyPlanLoad AND PROCESS_ID =  @hierarchyReclass)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@historyPlanLoad, '0', '0',@hierarchyReclass)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @historyPlanLoad AND PROCESS_ID =  @pushToBackStock)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@historyPlanLoad, '0', '0',@pushToBackStock)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @historyPlanLoad AND PROCESS_ID =  @headerAllocationLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@historyPlanLoad, '0', '0',@headerAllocationLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @historyPlanLoad AND PROCESS_ID =  @DailyPercentagesCriteraLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@historyPlanLoad, '0', '0',@DailyPercentagesCriteraLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @historyPlanLoad AND PROCESS_ID =  @storeDelete)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@historyPlanLoad, '0', '0',@storeDelete)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @historyPlanLoad AND PROCESS_ID =  @StoreEligibilityCriteraLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@historyPlanLoad, '0', '0',@StoreEligibilityCriteraLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @historyPlanLoad AND PROCESS_ID =  @VSWCriteriaLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@historyPlanLoad, '0', '0',@VSWCriteriaLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @historyPlanLoad AND PROCESS_ID =  @HeaderReconcile)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@historyPlanLoad, '0', '0',@HeaderReconcile)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @historyPlanLoad AND PROCESS_ID =  @BatchComp)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@historyPlanLoad, '0', '1',@BatchComp)   END

/* Color Code Load */  
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @colorCodeLoad AND PROCESS_ID =  @hierarchyLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@colorCodeLoad, '0', '0',@hierarchyLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @colorCodeLoad AND PROCESS_ID =  @storeLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@colorCodeLoad, '0', '0',@storeLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @colorCodeLoad AND PROCESS_ID =  @historyPlanLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@colorCodeLoad, '0', '0',@historyPlanLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @colorCodeLoad AND PROCESS_ID =  @colorCodeLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@colorCodeLoad, '0', '1',@colorCodeLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @colorCodeLoad AND PROCESS_ID =  @sizeCodeLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@colorCodeLoad, '0', '0',@sizeCodeLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @colorCodeLoad AND PROCESS_ID =  @headerLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@colorCodeLoad, '0', '0',@headerLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @colorCodeLoad AND PROCESS_ID =  @forecasting)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@colorCodeLoad, '0', '0',@forecasting)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @colorCodeLoad AND PROCESS_ID =  @rollup)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@colorCodeLoad, '0', '0',@rollup)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @colorCodeLoad AND PROCESS_ID =  @relieveIntransit)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@colorCodeLoad, '0', '0',@relieveIntransit)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @colorCodeLoad AND PROCESS_ID =  @purge)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@colorCodeLoad, '0', '0',@purge)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @colorCodeLoad AND PROCESS_ID =  @allocate)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@colorCodeLoad, '0', '0',@allocate)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @colorCodeLoad AND PROCESS_ID =  @sizeCurveLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@colorCodeLoad, '0', '0',@sizeCurveLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @colorCodeLoad AND PROCESS_ID =  @forecastBalancing)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@colorCodeLoad, '0', '0',@forecastBalancing)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @colorCodeLoad AND PROCESS_ID =  @reBuildIntransit)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@colorCodeLoad, '0', '0',@reBuildIntransit)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @colorCodeLoad AND PROCESS_ID =  @sizeConstraintsLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@colorCodeLoad, '0', '0',@sizeConstraintsLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @colorCodeLoad AND PROCESS_ID =  @sizeCurveGenerate)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@colorCodeLoad, '0', '0',@sizeCurveGenerate)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @colorCodeLoad AND PROCESS_ID =  @SizeDayToWeekSummary)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@colorCodeLoad, '0', '0',@SizeDayToWeekSummary)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @colorCodeLoad AND PROCESS_ID =  @buildPackCriteriaLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@colorCodeLoad, '0', '0',@buildPackCriteriaLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @colorCodeLoad AND PROCESS_ID =  @generateRelieveIntransit)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@colorCodeLoad, '0', '0',@generateRelieveIntransit)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @colorCodeLoad AND PROCESS_ID =  @determineHierarchyActivity)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@colorCodeLoad, '0', '0',@determineHierarchyActivity)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @colorCodeLoad AND PROCESS_ID =  @ChainSetPercentCriteriaLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@colorCodeLoad, '0', '0',@ChainSetPercentCriteriaLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @colorCodeLoad AND PROCESS_ID =  @hierarchyReclass)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@colorCodeLoad, '0', '0',@hierarchyReclass)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @colorCodeLoad AND PROCESS_ID =  @pushToBackStock)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@colorCodeLoad, '0', '0',@pushToBackStock)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @colorCodeLoad AND PROCESS_ID =  @headerAllocationLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@colorCodeLoad, '0', '0',@headerAllocationLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @colorCodeLoad AND PROCESS_ID =  @DailyPercentagesCriteraLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@colorCodeLoad, '0', '0',@DailyPercentagesCriteraLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @colorCodeLoad AND PROCESS_ID =  @storeDelete)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@colorCodeLoad, '0', '0',@storeDelete)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @colorCodeLoad AND PROCESS_ID =  @StoreEligibilityCriteraLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@colorCodeLoad, '0', '0',@StoreEligibilityCriteraLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @colorCodeLoad AND PROCESS_ID =  @VSWCriteriaLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@colorCodeLoad, '0', '0',@VSWCriteriaLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @colorCodeLoad AND PROCESS_ID =  @HeaderReconcile)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@colorCodeLoad, '0', '0',@HeaderReconcile)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @colorCodeLoad AND PROCESS_ID =  @BatchComp)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@colorCodeLoad, '0', '0',@BatchComp)   END

/* Size Code Load */  
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeCodeLoad AND PROCESS_ID =  @hierarchyLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeCodeLoad, '0', '0',@hierarchyLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeCodeLoad AND PROCESS_ID =  @storeLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeCodeLoad, '0', '0',@storeLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeCodeLoad AND PROCESS_ID =  @historyPlanLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeCodeLoad, '0', '0',@historyPlanLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeCodeLoad AND PROCESS_ID =  @colorCodeLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeCodeLoad, '0', '0',@colorCodeLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeCodeLoad AND PROCESS_ID =  @sizeCodeLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeCodeLoad, '0', '1',@sizeCodeLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeCodeLoad AND PROCESS_ID =  @headerLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeCodeLoad, '0', '0',@headerLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeCodeLoad AND PROCESS_ID =  @forecasting)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeCodeLoad, '0', '0',@forecasting)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeCodeLoad AND PROCESS_ID =  @rollup)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeCodeLoad, '0', '0',@rollup)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeCodeLoad AND PROCESS_ID =  @relieveIntransit)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeCodeLoad, '0', '0',@relieveIntransit)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeCodeLoad AND PROCESS_ID =  @purge)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeCodeLoad, '0', '0',@purge)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeCodeLoad AND PROCESS_ID =  @allocate)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeCodeLoad, '0', '0',@allocate)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeCodeLoad AND PROCESS_ID =  @sizeCurveLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeCodeLoad, '0', '0',@sizeCurveLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeCodeLoad AND PROCESS_ID =  @forecastBalancing)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeCodeLoad, '0', '0',@forecastBalancing)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeCodeLoad AND PROCESS_ID =  @reBuildIntransit)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeCodeLoad, '0', '0',@reBuildIntransit)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeCodeLoad AND PROCESS_ID =  @sizeConstraintsLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeCodeLoad, '0', '0',@sizeConstraintsLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeCodeLoad AND PROCESS_ID =  @sizeCurveGenerate)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeCodeLoad, '0', '0',@sizeCurveGenerate)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeCodeLoad AND PROCESS_ID =  @SizeDayToWeekSummary)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeCodeLoad, '0', '0',@SizeDayToWeekSummary)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeCodeLoad AND PROCESS_ID =  @buildPackCriteriaLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeCodeLoad, '0', '0',@buildPackCriteriaLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeCodeLoad AND PROCESS_ID =  @generateRelieveIntransit)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeCodeLoad, '0', '0',@generateRelieveIntransit)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeCodeLoad AND PROCESS_ID =  @determineHierarchyActivity)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeCodeLoad, '0', '0',@determineHierarchyActivity)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeCodeLoad AND PROCESS_ID =  @ChainSetPercentCriteriaLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeCodeLoad, '0', '0',@ChainSetPercentCriteriaLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeCodeLoad AND PROCESS_ID =  @hierarchyReclass)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeCodeLoad, '0', '0',@hierarchyReclass)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeCodeLoad AND PROCESS_ID =  @pushToBackStock)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeCodeLoad, '0', '0',@pushToBackStock)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeCodeLoad AND PROCESS_ID =  @headerAllocationLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeCodeLoad, '0', '0',@headerAllocationLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeCodeLoad AND PROCESS_ID =  @DailyPercentagesCriteraLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeCodeLoad, '0', '0',@DailyPercentagesCriteraLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeCodeLoad AND PROCESS_ID =  @storeDelete)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeCodeLoad, '0', '0',@storeDelete)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeCodeLoad AND PROCESS_ID =  @StoreEligibilityCriteraLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeCodeLoad, '0', '0',@StoreEligibilityCriteraLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeCodeLoad AND PROCESS_ID =  @VSWCriteriaLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeCodeLoad, '0', '0',@VSWCriteriaLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeCodeLoad AND PROCESS_ID =  @HeaderReconcile)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeCodeLoad, '0', '0',@HeaderReconcile)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeCodeLoad AND PROCESS_ID =  @BatchComp)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeCodeLoad, '0', '0',@BatchComp)   END

/* Allocation Header */  
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @headerLoad AND PROCESS_ID =  @hierarchyLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@headerLoad, '0', '0',@hierarchyLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @headerLoad AND PROCESS_ID =  @storeLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@headerLoad, '0', '0',@storeLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @headerLoad AND PROCESS_ID =  @historyPlanLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@headerLoad, '0', '0',@historyPlanLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @headerLoad AND PROCESS_ID =  @colorCodeLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@headerLoad, '0', '0',@colorCodeLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @headerLoad AND PROCESS_ID =  @sizeCodeLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@headerLoad, '0', '0',@sizeCodeLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @headerLoad AND PROCESS_ID =  @headerLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@headerLoad, '0', '0',@headerLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @headerLoad AND PROCESS_ID =  @forecasting)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@headerLoad, '0', '0',@forecasting)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @headerLoad AND PROCESS_ID =  @rollup)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@headerLoad, '0', '0',@rollup)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @headerLoad AND PROCESS_ID =  @relieveIntransit)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@headerLoad, '0', '0',@relieveIntransit)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @headerLoad AND PROCESS_ID =  @purge)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@headerLoad, '0', '1',@purge)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @headerLoad AND PROCESS_ID =  @allocate)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@headerLoad, '0', '0',@allocate)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @headerLoad AND PROCESS_ID =  @sizeCurveLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@headerLoad, '0', '0',@sizeCurveLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @headerLoad AND PROCESS_ID =  @forecastBalancing)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@headerLoad, '0', '0',@forecastBalancing)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @headerLoad AND PROCESS_ID =  @reBuildIntransit)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@headerLoad, '0', '1',@reBuildIntransit)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @headerLoad AND PROCESS_ID =  @sizeConstraintsLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@headerLoad, '0', '0',@sizeConstraintsLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @headerLoad AND PROCESS_ID =  @sizeCurveGenerate)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@headerLoad, '0', '0',@sizeCurveGenerate)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @headerLoad AND PROCESS_ID =  @SizeDayToWeekSummary)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@headerLoad, '0', '0',@SizeDayToWeekSummary)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @headerLoad AND PROCESS_ID =  @buildPackCriteriaLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@headerLoad, '0', '0',@buildPackCriteriaLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @headerLoad AND PROCESS_ID =  @generateRelieveIntransit)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@headerLoad, '0', '0',@generateRelieveIntransit)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @headerLoad AND PROCESS_ID =  @determineHierarchyActivity)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@headerLoad, '0', '0',@determineHierarchyActivity)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @headerLoad AND PROCESS_ID =  @ChainSetPercentCriteriaLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@headerLoad, '0', '0',@ChainSetPercentCriteriaLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @headerLoad AND PROCESS_ID =  @hierarchyReclass)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@headerLoad, '0', '0',@hierarchyReclass)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @headerLoad AND PROCESS_ID =  @pushToBackStock)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@headerLoad, '0', '1',@pushToBackStock)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @headerLoad AND PROCESS_ID =  @headerAllocationLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@headerLoad, '0', '0',@headerAllocationLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @headerLoad AND PROCESS_ID =  @DailyPercentagesCriteraLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@headerLoad, '0', '0',@DailyPercentagesCriteraLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @headerLoad AND PROCESS_ID =  @storeDelete)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@headerLoad, '0', '0',@storeDelete)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @headerLoad AND PROCESS_ID =  @StoreEligibilityCriteraLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@headerLoad, '0', '0',@StoreEligibilityCriteraLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @headerLoad AND PROCESS_ID =  @VSWCriteriaLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@headerLoad, '0', '0',@VSWCriteriaLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @headerLoad AND PROCESS_ID =  @HeaderReconcile)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@headerLoad, '0', '1',@HeaderReconcile)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @headerLoad AND PROCESS_ID =  @BatchComp)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@headerLoad, '0', '0',@BatchComp)   END

/* Forecasting */  
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @forecasting AND PROCESS_ID =  @hierarchyLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@forecasting, '0', '0',@hierarchyLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @forecasting AND PROCESS_ID =  @storeLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@forecasting, '0', '0',@storeLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @forecasting AND PROCESS_ID =  @historyPlanLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@forecasting, '0', '0',@historyPlanLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @forecasting AND PROCESS_ID =  @colorCodeLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@forecasting, '0', '0',@colorCodeLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @forecasting AND PROCESS_ID =  @sizeCodeLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@forecasting, '0', '0',@sizeCodeLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @forecasting AND PROCESS_ID =  @headerLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@forecasting, '0', '0',@headerLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @forecasting AND PROCESS_ID =  @forecasting)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@forecasting, '0', '0',@forecasting)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @forecasting AND PROCESS_ID =  @rollup)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@forecasting, '0', '1',@rollup)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @forecasting AND PROCESS_ID =  @relieveIntransit)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@forecasting, '0', '1',@relieveIntransit)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @forecasting AND PROCESS_ID =  @purge)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@forecasting, '0', '1',@purge)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @forecasting AND PROCESS_ID =  @allocate)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@forecasting, '0', '1',@allocate)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @forecasting AND PROCESS_ID =  @sizeCurveLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@forecasting, '0', '0',@sizeCurveLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @forecasting AND PROCESS_ID =  @forecastBalancing)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@forecasting, '0', '1',@forecastBalancing)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @forecasting AND PROCESS_ID =  @reBuildIntransit)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@forecasting, '0', '1',@reBuildIntransit)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @forecasting AND PROCESS_ID =  @sizeConstraintsLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@forecasting, '0', '0',@sizeConstraintsLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @forecasting AND PROCESS_ID =  @sizeCurveGenerate)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@forecasting, '0', '0',@sizeCurveGenerate)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @forecasting AND PROCESS_ID =  @SizeDayToWeekSummary)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@forecasting, '0', '0',@SizeDayToWeekSummary)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @forecasting AND PROCESS_ID =  @buildPackCriteriaLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@forecasting, '0', '0',@buildPackCriteriaLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @forecasting AND PROCESS_ID =  @generateRelieveIntransit)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@forecasting, '0', '0',@generateRelieveIntransit)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @forecasting AND PROCESS_ID =  @determineHierarchyActivity)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@forecasting, '0', '0',@determineHierarchyActivity)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @forecasting AND PROCESS_ID =  @ChainSetPercentCriteriaLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@forecasting, '0', '1',@ChainSetPercentCriteriaLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @forecasting AND PROCESS_ID =  @hierarchyReclass)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@forecasting, '0', '0',@hierarchyReclass)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @forecasting AND PROCESS_ID =  @pushToBackStock)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@forecasting, '0', '0',@pushToBackStock)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @forecasting AND PROCESS_ID =  @headerAllocationLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@forecasting, '0', '0',@headerAllocationLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @forecasting AND PROCESS_ID =  @DailyPercentagesCriteraLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@forecasting, '0', '1',@DailyPercentagesCriteraLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @forecasting AND PROCESS_ID =  @storeDelete)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@forecasting, '0', '0',@storeDelete)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @forecasting AND PROCESS_ID =  @StoreEligibilityCriteraLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@forecasting, '0', '1',@StoreEligibilityCriteraLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @forecasting AND PROCESS_ID =  @VSWCriteriaLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@forecasting, '0', '0',@VSWCriteriaLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @forecasting AND PROCESS_ID =  @HeaderReconcile)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@forecasting, '0', '0',@HeaderReconcile)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @forecasting AND PROCESS_ID =  @BatchComp)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@forecasting, '0', '1',@BatchComp)   END

/* Rollup */  
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @rollup AND PROCESS_ID =  @hierarchyLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@rollup, '0', '1',@hierarchyLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @rollup AND PROCESS_ID =  @storeLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@rollup, '0', '1',@storeLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @rollup AND PROCESS_ID =  @historyPlanLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@rollup, '0', '1',@historyPlanLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @rollup AND PROCESS_ID =  @colorCodeLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@rollup, '0', '0',@colorCodeLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @rollup AND PROCESS_ID =  @sizeCodeLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@rollup, '0', '0',@sizeCodeLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @rollup AND PROCESS_ID =  @headerLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@rollup, '0', '0',@headerLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @rollup AND PROCESS_ID =  @forecasting)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@rollup, '0', '1',@forecasting)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @rollup AND PROCESS_ID =  @rollup)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@rollup, '0', '1',@rollup)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @rollup AND PROCESS_ID =  @relieveIntransit)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@rollup, '0', '1',@relieveIntransit)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @rollup AND PROCESS_ID =  @purge)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@rollup, '0', '1',@purge)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @rollup AND PROCESS_ID =  @allocate)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@rollup, '0', '1',@allocate)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @rollup AND PROCESS_ID =  @sizeCurveLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@rollup, '0', '0',@sizeCurveLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @rollup AND PROCESS_ID =  @forecastBalancing)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@rollup, '0', '1',@forecastBalancing)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @rollup AND PROCESS_ID =  @reBuildIntransit)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@rollup, '0', '1',@reBuildIntransit)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @rollup AND PROCESS_ID =  @sizeConstraintsLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@rollup, '0', '0',@sizeConstraintsLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @rollup AND PROCESS_ID =  @sizeCurveGenerate)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@rollup, '0', '0',@sizeCurveGenerate)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @rollup AND PROCESS_ID =  @SizeDayToWeekSummary)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@rollup, '0', '0',@SizeDayToWeekSummary)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @rollup AND PROCESS_ID =  @buildPackCriteriaLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@rollup, '0', '0',@buildPackCriteriaLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @rollup AND PROCESS_ID =  @generateRelieveIntransit)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@rollup, '0', '0',@generateRelieveIntransit)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @rollup AND PROCESS_ID =  @determineHierarchyActivity)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@rollup, '0', '1',@determineHierarchyActivity)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @rollup AND PROCESS_ID =  @ChainSetPercentCriteriaLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@rollup, '0', '0',@ChainSetPercentCriteriaLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @rollup AND PROCESS_ID =  @hierarchyReclass)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@rollup, '0', '0',@hierarchyReclass)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @rollup AND PROCESS_ID =  @pushToBackStock)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@rollup, '0', '0',@pushToBackStock)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @rollup AND PROCESS_ID =  @headerAllocationLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@rollup, '0', '0',@headerAllocationLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @rollup AND PROCESS_ID =  @DailyPercentagesCriteraLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@rollup, '0', '0',@DailyPercentagesCriteraLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @rollup AND PROCESS_ID =  @storeDelete)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@rollup, '0', '0',@storeDelete)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @rollup AND PROCESS_ID =  @StoreEligibilityCriteraLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@rollup, '0', '0',@StoreEligibilityCriteraLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @rollup AND PROCESS_ID =  @VSWCriteriaLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@rollup, '0', '0',@VSWCriteriaLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @rollup AND PROCESS_ID =  @HeaderReconcile)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@rollup, '0', '0',@HeaderReconcile)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @rollup AND PROCESS_ID =  @BatchComp)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@rollup, '0', '1',@BatchComp)   END

/* Relieve Intransit */  
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @relieveIntransit AND PROCESS_ID =  @hierarchyLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@relieveIntransit, '0', '1',@hierarchyLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @relieveIntransit AND PROCESS_ID =  @storeLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@relieveIntransit, '0', '1',@storeLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @relieveIntransit AND PROCESS_ID =  @historyPlanLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@relieveIntransit, '0', '0',@historyPlanLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @relieveIntransit AND PROCESS_ID =  @colorCodeLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@relieveIntransit, '0', '0',@colorCodeLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @relieveIntransit AND PROCESS_ID =  @sizeCodeLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@relieveIntransit, '0', '0',@sizeCodeLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @relieveIntransit AND PROCESS_ID =  @headerLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@relieveIntransit, '0', '0',@headerLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @relieveIntransit AND PROCESS_ID =  @forecasting)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@relieveIntransit, '0', '1',@forecasting)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @relieveIntransit AND PROCESS_ID =  @rollup)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@relieveIntransit, '0', '1',@rollup)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @relieveIntransit AND PROCESS_ID =  @relieveIntransit)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@relieveIntransit, '0', '1',@relieveIntransit)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @relieveIntransit AND PROCESS_ID =  @purge)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@relieveIntransit, '0', '1',@purge)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @relieveIntransit AND PROCESS_ID =  @allocate)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@relieveIntransit, '0', '1',@allocate)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @relieveIntransit AND PROCESS_ID =  @sizeCurveLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@relieveIntransit, '0', '0',@sizeCurveLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @relieveIntransit AND PROCESS_ID =  @forecastBalancing)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@relieveIntransit, '0', '0',@forecastBalancing)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @relieveIntransit AND PROCESS_ID =  @reBuildIntransit)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@relieveIntransit, '0', '1',@reBuildIntransit)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @relieveIntransit AND PROCESS_ID =  @sizeConstraintsLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@relieveIntransit, '0', '0',@sizeConstraintsLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @relieveIntransit AND PROCESS_ID =  @sizeCurveGenerate)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@relieveIntransit, '0', '0',@sizeCurveGenerate)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @relieveIntransit AND PROCESS_ID =  @SizeDayToWeekSummary)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@relieveIntransit, '0', '0',@SizeDayToWeekSummary)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @relieveIntransit AND PROCESS_ID =  @buildPackCriteriaLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@relieveIntransit, '0', '0',@buildPackCriteriaLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @relieveIntransit AND PROCESS_ID =  @generateRelieveIntransit)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@relieveIntransit, '0', '1',@generateRelieveIntransit)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @relieveIntransit AND PROCESS_ID =  @determineHierarchyActivity)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@relieveIntransit, '0', '1',@determineHierarchyActivity)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @relieveIntransit AND PROCESS_ID =  @ChainSetPercentCriteriaLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@relieveIntransit, '0', '0',@ChainSetPercentCriteriaLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @relieveIntransit AND PROCESS_ID =  @hierarchyReclass)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@relieveIntransit, '0', '0',@hierarchyReclass)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @relieveIntransit AND PROCESS_ID =  @pushToBackStock)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@relieveIntransit, '0', '0',@pushToBackStock)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @relieveIntransit AND PROCESS_ID =  @headerAllocationLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@relieveIntransit, '0', '0',@headerAllocationLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @relieveIntransit AND PROCESS_ID =  @DailyPercentagesCriteraLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@relieveIntransit, '0', '0',@DailyPercentagesCriteraLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @relieveIntransit AND PROCESS_ID =  @storeDelete)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@relieveIntransit, '0', '0',@storeDelete)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @relieveIntransit AND PROCESS_ID =  @StoreEligibilityCriteraLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@relieveIntransit, '0', '0',@StoreEligibilityCriteraLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @relieveIntransit AND PROCESS_ID =  @VSWCriteriaLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@relieveIntransit, '0', '0',@VSWCriteriaLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @relieveIntransit AND PROCESS_ID =  @HeaderReconcile)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@relieveIntransit, '0', '0',@HeaderReconcile)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @relieveIntransit AND PROCESS_ID =  @BatchComp)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@relieveIntransit, '0', '0',@BatchComp)   END

/* Purge */  
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @purge AND PROCESS_ID =  @hierarchyLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@purge, '0', '1',@hierarchyLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @purge AND PROCESS_ID =  @storeLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@purge, '0', '1',@storeLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @purge AND PROCESS_ID =  @historyPlanLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@purge, '0', '1',@historyPlanLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @purge AND PROCESS_ID =  @colorCodeLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@purge, '0', '0',@colorCodeLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @purge AND PROCESS_ID =  @sizeCodeLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@purge, '0', '0',@sizeCodeLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @purge AND PROCESS_ID =  @headerLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@purge, '0', '1',@headerLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @purge AND PROCESS_ID =  @forecasting)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@purge, '0', '1',@forecasting)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @purge AND PROCESS_ID =  @rollup)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@purge, '0', '1',@rollup)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @purge AND PROCESS_ID =  @relieveIntransit)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@purge, '0', '1',@relieveIntransit)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @purge AND PROCESS_ID =  @purge)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@purge, '0', '1',@purge)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @purge AND PROCESS_ID =  @allocate)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@purge, '0', '1',@allocate)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @purge AND PROCESS_ID =  @sizeCurveLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@purge, '0', '0',@sizeCurveLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @purge AND PROCESS_ID =  @forecastBalancing)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@purge, '0', '1',@forecastBalancing)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @purge AND PROCESS_ID =  @reBuildIntransit)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@purge, '0', '1',@reBuildIntransit)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @purge AND PROCESS_ID =  @sizeConstraintsLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@purge, '0', '0',@sizeConstraintsLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @purge AND PROCESS_ID =  @sizeCurveGenerate)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@purge, '0', '1',@sizeCurveGenerate)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @purge AND PROCESS_ID =  @SizeDayToWeekSummary)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@purge, '0', '1',@SizeDayToWeekSummary)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @purge AND PROCESS_ID =  @buildPackCriteriaLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@purge, '0', '0',@buildPackCriteriaLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @purge AND PROCESS_ID =  @generateRelieveIntransit)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@purge, '0', '0',@generateRelieveIntransit)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @purge AND PROCESS_ID =  @determineHierarchyActivity)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@purge, '0', '1',@determineHierarchyActivity)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @purge AND PROCESS_ID =  @ChainSetPercentCriteriaLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@purge, '0', '0',@ChainSetPercentCriteriaLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @purge AND PROCESS_ID =  @hierarchyReclass)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@purge, '0', '1',@hierarchyReclass)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @purge AND PROCESS_ID =  @pushToBackStock)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@purge, '0', '0',@pushToBackStock)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @purge AND PROCESS_ID =  @headerAllocationLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@purge, '0', '0',@headerAllocationLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @purge AND PROCESS_ID =  @DailyPercentagesCriteraLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@purge, '0', '0',@DailyPercentagesCriteraLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @purge AND PROCESS_ID =  @storeDelete)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@purge, '0', '0',@storeDelete)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @purge AND PROCESS_ID =  @StoreEligibilityCriteraLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@purge, '0', '0',@StoreEligibilityCriteraLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @purge AND PROCESS_ID =  @VSWCriteriaLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@purge, '0', '0',@VSWCriteriaLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @purge AND PROCESS_ID =  @HeaderReconcile)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@purge, '0', '1',@HeaderReconcile)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @purge AND PROCESS_ID =  @BatchComp)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@purge, '0', '1',@BatchComp)   END

/* Allocate */  
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @allocate AND PROCESS_ID =  @hierarchyLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@allocate, '0', '0',@hierarchyLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @allocate AND PROCESS_ID =  @storeLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@allocate, '0', '0',@storeLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @allocate AND PROCESS_ID =  @historyPlanLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@allocate, '0', '1',@historyPlanLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @allocate AND PROCESS_ID =  @colorCodeLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@allocate, '0', '0',@colorCodeLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @allocate AND PROCESS_ID =  @sizeCodeLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@allocate, '0', '0',@sizeCodeLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @allocate AND PROCESS_ID =  @headerLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@allocate, '0', '0',@headerLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @allocate AND PROCESS_ID =  @forecasting)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@allocate, '0', '1',@forecasting)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @allocate AND PROCESS_ID =  @rollup)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@allocate, '0', '1',@rollup)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @allocate AND PROCESS_ID =  @relieveIntransit)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@allocate, '0', '1',@relieveIntransit)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @allocate AND PROCESS_ID =  @purge)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@allocate, '0', '1',@purge)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @allocate AND PROCESS_ID =  @allocate)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@allocate, '0', '0',@allocate)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @allocate AND PROCESS_ID =  @sizeCurveLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@allocate, '0', '1',@sizeCurveLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @allocate AND PROCESS_ID =  @forecastBalancing)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@allocate, '0', '1',@forecastBalancing)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @allocate AND PROCESS_ID =  @reBuildIntransit)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@allocate, '0', '1',@reBuildIntransit)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @allocate AND PROCESS_ID =  @sizeConstraintsLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@allocate, '0', '1',@sizeConstraintsLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @allocate AND PROCESS_ID =  @sizeCurveGenerate)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@allocate, '0', '1',@sizeCurveGenerate)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @allocate AND PROCESS_ID =  @SizeDayToWeekSummary)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@allocate, '0', '0',@SizeDayToWeekSummary)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @allocate AND PROCESS_ID =  @buildPackCriteriaLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@allocate, '0', '0',@buildPackCriteriaLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @allocate AND PROCESS_ID =  @generateRelieveIntransit)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@allocate, '0', '1',@generateRelieveIntransit)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @allocate AND PROCESS_ID =  @determineHierarchyActivity)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@allocate, '0', '1',@determineHierarchyActivity)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @allocate AND PROCESS_ID =  @ChainSetPercentCriteriaLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@allocate, '0', '0',@ChainSetPercentCriteriaLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @allocate AND PROCESS_ID =  @hierarchyReclass)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@allocate, '0', '0',@hierarchyReclass)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @allocate AND PROCESS_ID =  @pushToBackStock)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@allocate, '0', '1',@pushToBackStock)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @allocate AND PROCESS_ID =  @headerAllocationLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@allocate, '0', '1',@headerAllocationLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @allocate AND PROCESS_ID =  @DailyPercentagesCriteraLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@allocate, '0', '1',@DailyPercentagesCriteraLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @allocate AND PROCESS_ID =  @storeDelete)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@allocate, '0', '0',@storeDelete)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @allocate AND PROCESS_ID =  @StoreEligibilityCriteraLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@allocate, '0', '1',@StoreEligibilityCriteraLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @allocate AND PROCESS_ID =  @VSWCriteriaLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@allocate, '0', '1',@VSWCriteriaLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @allocate AND PROCESS_ID =  @HeaderReconcile)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@allocate, '0', '1',@HeaderReconcile)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @allocate AND PROCESS_ID =  @BatchComp)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@allocate, '0', '0',@BatchComp)   END

/* Size Curve Load */  
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeCurveLoad AND PROCESS_ID =  @hierarchyLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeCurveLoad, '0', '0',@hierarchyLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeCurveLoad AND PROCESS_ID =  @storeLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeCurveLoad, '0', '1',@storeLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeCurveLoad AND PROCESS_ID =  @historyPlanLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeCurveLoad, '0', '0',@historyPlanLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeCurveLoad AND PROCESS_ID =  @colorCodeLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeCurveLoad, '0', '0',@colorCodeLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeCurveLoad AND PROCESS_ID =  @sizeCodeLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeCurveLoad, '0', '0',@sizeCodeLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeCurveLoad AND PROCESS_ID =  @headerLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeCurveLoad, '0', '0',@headerLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeCurveLoad AND PROCESS_ID =  @forecasting)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeCurveLoad, '0', '0',@forecasting)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeCurveLoad AND PROCESS_ID =  @rollup)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeCurveLoad, '0', '0',@rollup)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeCurveLoad AND PROCESS_ID =  @relieveIntransit)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeCurveLoad, '0', '0',@relieveIntransit)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeCurveLoad AND PROCESS_ID =  @purge)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeCurveLoad, '0', '0',@purge)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeCurveLoad AND PROCESS_ID =  @allocate)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeCurveLoad, '0', '1',@allocate)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeCurveLoad AND PROCESS_ID =  @sizeCurveLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeCurveLoad, '0', '0',@sizeCurveLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeCurveLoad AND PROCESS_ID =  @forecastBalancing)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeCurveLoad, '0', '0',@forecastBalancing)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeCurveLoad AND PROCESS_ID =  @reBuildIntransit)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeCurveLoad, '0', '0',@reBuildIntransit)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeCurveLoad AND PROCESS_ID =  @sizeConstraintsLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeCurveLoad, '0', '0',@sizeConstraintsLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeCurveLoad AND PROCESS_ID =  @sizeCurveGenerate)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeCurveLoad, '0', '0',@sizeCurveGenerate)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeCurveLoad AND PROCESS_ID =  @SizeDayToWeekSummary)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeCurveLoad, '0', '0',@SizeDayToWeekSummary)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeCurveLoad AND PROCESS_ID =  @buildPackCriteriaLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeCurveLoad, '0', '0',@buildPackCriteriaLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeCurveLoad AND PROCESS_ID =  @generateRelieveIntransit)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeCurveLoad, '0', '0',@generateRelieveIntransit)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeCurveLoad AND PROCESS_ID =  @determineHierarchyActivity)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeCurveLoad, '0', '0',@determineHierarchyActivity)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeCurveLoad AND PROCESS_ID =  @ChainSetPercentCriteriaLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeCurveLoad, '0', '0',@ChainSetPercentCriteriaLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeCurveLoad AND PROCESS_ID =  @hierarchyReclass)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeCurveLoad, '0', '0',@hierarchyReclass)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeCurveLoad AND PROCESS_ID =  @pushToBackStock)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeCurveLoad, '0', '0',@pushToBackStock)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeCurveLoad AND PROCESS_ID =  @headerAllocationLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeCurveLoad, '0', '0',@headerAllocationLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeCurveLoad AND PROCESS_ID =  @DailyPercentagesCriteraLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeCurveLoad, '0', '0',@DailyPercentagesCriteraLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeCurveLoad AND PROCESS_ID =  @storeDelete)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeCurveLoad, '0', '0',@storeDelete)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeCurveLoad AND PROCESS_ID =  @StoreEligibilityCriteraLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeCurveLoad, '0', '0',@StoreEligibilityCriteraLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeCurveLoad AND PROCESS_ID =  @VSWCriteriaLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeCurveLoad, '0', '0',@VSWCriteriaLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeCurveLoad AND PROCESS_ID =  @HeaderReconcile)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeCurveLoad, '0', '0',@HeaderReconcile)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeCurveLoad AND PROCESS_ID =  @BatchComp)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeCurveLoad, '0', '0',@BatchComp)   END

/* Forecast Balancing */  
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @forecastBalancing AND PROCESS_ID =  @hierarchyLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@forecastBalancing, '0', '0',@hierarchyLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @forecastBalancing AND PROCESS_ID =  @storeLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@forecastBalancing, '0', '0',@storeLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @forecastBalancing AND PROCESS_ID =  @historyPlanLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@forecastBalancing, '0', '0',@historyPlanLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @forecastBalancing AND PROCESS_ID =  @colorCodeLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@forecastBalancing, '0', '0',@colorCodeLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @forecastBalancing AND PROCESS_ID =  @sizeCodeLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@forecastBalancing, '0', '0',@sizeCodeLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @forecastBalancing AND PROCESS_ID =  @headerLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@forecastBalancing, '0', '0',@headerLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @forecastBalancing AND PROCESS_ID =  @forecasting)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@forecastBalancing, '0', '1',@forecasting)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @forecastBalancing AND PROCESS_ID =  @rollup)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@forecastBalancing, '0', '1',@rollup)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @forecastBalancing AND PROCESS_ID =  @relieveIntransit)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@forecastBalancing, '0', '0',@relieveIntransit)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @forecastBalancing AND PROCESS_ID =  @purge)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@forecastBalancing, '0', '1',@purge)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @forecastBalancing AND PROCESS_ID =  @allocate)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@forecastBalancing, '0', '1',@allocate)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @forecastBalancing AND PROCESS_ID =  @sizeCurveLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@forecastBalancing, '0', '0',@sizeCurveLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @forecastBalancing AND PROCESS_ID =  @forecastBalancing)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@forecastBalancing, '0', '0',@forecastBalancing)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @forecastBalancing AND PROCESS_ID =  @reBuildIntransit)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@forecastBalancing, '0', '0',@reBuildIntransit)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @forecastBalancing AND PROCESS_ID =  @sizeConstraintsLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@forecastBalancing, '0', '0',@sizeConstraintsLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @forecastBalancing AND PROCESS_ID =  @sizeCurveGenerate)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@forecastBalancing, '0', '0',@sizeCurveGenerate)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @forecastBalancing AND PROCESS_ID =  @SizeDayToWeekSummary)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@forecastBalancing, '0', '0',@SizeDayToWeekSummary)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @forecastBalancing AND PROCESS_ID =  @buildPackCriteriaLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@forecastBalancing, '0', '0',@buildPackCriteriaLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @forecastBalancing AND PROCESS_ID =  @generateRelieveIntransit)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@forecastBalancing, '0', '0',@generateRelieveIntransit)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @forecastBalancing AND PROCESS_ID =  @determineHierarchyActivity)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@forecastBalancing, '0', '0',@determineHierarchyActivity)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @forecastBalancing AND PROCESS_ID =  @ChainSetPercentCriteriaLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@forecastBalancing, '0', '0',@ChainSetPercentCriteriaLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @forecastBalancing AND PROCESS_ID =  @hierarchyReclass)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@forecastBalancing, '0', '0',@hierarchyReclass)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @forecastBalancing AND PROCESS_ID =  @pushToBackStock)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@forecastBalancing, '0', '0',@pushToBackStock)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @forecastBalancing AND PROCESS_ID =  @headerAllocationLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@forecastBalancing, '0', '0',@headerAllocationLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @forecastBalancing AND PROCESS_ID =  @DailyPercentagesCriteraLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@forecastBalancing, '0', '0',@DailyPercentagesCriteraLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @forecastBalancing AND PROCESS_ID =  @storeDelete)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@forecastBalancing, '0', '0',@storeDelete)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @forecastBalancing AND PROCESS_ID =  @StoreEligibilityCriteraLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@forecastBalancing, '0', '1',@StoreEligibilityCriteraLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @forecastBalancing AND PROCESS_ID =  @VSWCriteriaLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@forecastBalancing, '0', '0',@VSWCriteriaLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @forecastBalancing AND PROCESS_ID =  @HeaderReconcile)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@forecastBalancing, '0', '0',@HeaderReconcile)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @forecastBalancing AND PROCESS_ID =  @BatchComp)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@forecastBalancing, '0', '1',@BatchComp)   END

/* Rebuild Intransit  */  
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @reBuildIntransit AND PROCESS_ID =  @hierarchyLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@reBuildIntransit, '0', '1',@hierarchyLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @reBuildIntransit AND PROCESS_ID =  @storeLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@reBuildIntransit, '0', '1',@storeLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @reBuildIntransit AND PROCESS_ID =  @historyPlanLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@reBuildIntransit, '0', '0',@historyPlanLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @reBuildIntransit AND PROCESS_ID =  @colorCodeLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@reBuildIntransit, '0', '0',@colorCodeLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @reBuildIntransit AND PROCESS_ID =  @sizeCodeLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@reBuildIntransit, '0', '0',@sizeCodeLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @reBuildIntransit AND PROCESS_ID =  @headerLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@reBuildIntransit, '0', '1',@headerLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @reBuildIntransit AND PROCESS_ID =  @forecasting)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@reBuildIntransit, '0', '1',@forecasting)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @reBuildIntransit AND PROCESS_ID =  @rollup)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@reBuildIntransit, '0', '1',@rollup)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @reBuildIntransit AND PROCESS_ID =  @relieveIntransit)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@reBuildIntransit, '0', '1',@relieveIntransit)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @reBuildIntransit AND PROCESS_ID =  @purge)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@reBuildIntransit, '0', '1',@purge)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @reBuildIntransit AND PROCESS_ID =  @allocate)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@reBuildIntransit, '0', '1',@allocate)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @reBuildIntransit AND PROCESS_ID =  @sizeCurveLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@reBuildIntransit, '0', '0',@sizeCurveLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @reBuildIntransit AND PROCESS_ID =  @forecastBalancing)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@reBuildIntransit, '0', '0',@forecastBalancing)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @reBuildIntransit AND PROCESS_ID =  @reBuildIntransit)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@reBuildIntransit, '0', '1',@reBuildIntransit)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @reBuildIntransit AND PROCESS_ID =  @sizeConstraintsLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@reBuildIntransit, '0', '0',@sizeConstraintsLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @reBuildIntransit AND PROCESS_ID =  @sizeCurveGenerate)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@reBuildIntransit, '0', '0',@sizeCurveGenerate)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @reBuildIntransit AND PROCESS_ID =  @SizeDayToWeekSummary)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@reBuildIntransit, '0', '0',@SizeDayToWeekSummary)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @reBuildIntransit AND PROCESS_ID =  @buildPackCriteriaLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@reBuildIntransit, '0', '0',@buildPackCriteriaLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @reBuildIntransit AND PROCESS_ID =  @generateRelieveIntransit)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@reBuildIntransit, '0', '1',@generateRelieveIntransit)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @reBuildIntransit AND PROCESS_ID =  @determineHierarchyActivity)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@reBuildIntransit, '0', '1',@determineHierarchyActivity)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @reBuildIntransit AND PROCESS_ID =  @ChainSetPercentCriteriaLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@reBuildIntransit, '0', '0',@ChainSetPercentCriteriaLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @reBuildIntransit AND PROCESS_ID =  @hierarchyReclass)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@reBuildIntransit, '0', '0',@hierarchyReclass)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @reBuildIntransit AND PROCESS_ID =  @pushToBackStock)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@reBuildIntransit, '0', '0',@pushToBackStock)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @reBuildIntransit AND PROCESS_ID =  @headerAllocationLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@reBuildIntransit, '0', '1',@headerAllocationLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @reBuildIntransit AND PROCESS_ID =  @DailyPercentagesCriteraLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@reBuildIntransit, '0', '0',@DailyPercentagesCriteraLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @reBuildIntransit AND PROCESS_ID =  @storeDelete)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@reBuildIntransit, '0', '0',@storeDelete)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @reBuildIntransit AND PROCESS_ID =  @StoreEligibilityCriteraLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@reBuildIntransit, '0', '0',@StoreEligibilityCriteraLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @reBuildIntransit AND PROCESS_ID =  @VSWCriteriaLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@reBuildIntransit, '0', '0',@VSWCriteriaLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @reBuildIntransit AND PROCESS_ID =  @HeaderReconcile)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@reBuildIntransit, '0', '0',@HeaderReconcile)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @reBuildIntransit AND PROCESS_ID =  @BatchComp)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@reBuildIntransit, '0', '1',@BatchComp)   END

/* Size Constraints Load */  
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeConstraintsLoad AND PROCESS_ID =  @hierarchyLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeConstraintsLoad, '0', '0',@hierarchyLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeConstraintsLoad AND PROCESS_ID =  @storeLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeConstraintsLoad, '0', '1',@storeLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeConstraintsLoad AND PROCESS_ID =  @historyPlanLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeConstraintsLoad, '0', '0',@historyPlanLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeConstraintsLoad AND PROCESS_ID =  @colorCodeLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeConstraintsLoad, '0', '0',@colorCodeLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeConstraintsLoad AND PROCESS_ID =  @sizeCodeLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeConstraintsLoad, '0', '0',@sizeCodeLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeConstraintsLoad AND PROCESS_ID =  @headerLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeConstraintsLoad, '0', '0',@headerLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeConstraintsLoad AND PROCESS_ID =  @forecasting)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeConstraintsLoad, '0', '0',@forecasting)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeConstraintsLoad AND PROCESS_ID =  @rollup)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeConstraintsLoad, '0', '0',@rollup)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeConstraintsLoad AND PROCESS_ID =  @relieveIntransit)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeConstraintsLoad, '0', '0',@relieveIntransit)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeConstraintsLoad AND PROCESS_ID =  @purge)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeConstraintsLoad, '0', '0',@purge)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeConstraintsLoad AND PROCESS_ID =  @allocate)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeConstraintsLoad, '0', '1',@allocate)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeConstraintsLoad AND PROCESS_ID =  @sizeCurveLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeConstraintsLoad, '0', '0',@sizeCurveLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeConstraintsLoad AND PROCESS_ID =  @forecastBalancing)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeConstraintsLoad, '0', '0',@forecastBalancing)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeConstraintsLoad AND PROCESS_ID =  @reBuildIntransit)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeConstraintsLoad, '0', '0',@reBuildIntransit)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeConstraintsLoad AND PROCESS_ID =  @sizeConstraintsLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeConstraintsLoad, '0', '0',@sizeConstraintsLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeConstraintsLoad AND PROCESS_ID =  @sizeCurveGenerate)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeConstraintsLoad, '0', '0',@sizeCurveGenerate)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeConstraintsLoad AND PROCESS_ID =  @SizeDayToWeekSummary)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeConstraintsLoad, '0', '0',@SizeDayToWeekSummary)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeConstraintsLoad AND PROCESS_ID =  @buildPackCriteriaLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeConstraintsLoad, '0', '0',@buildPackCriteriaLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeConstraintsLoad AND PROCESS_ID =  @generateRelieveIntransit)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeConstraintsLoad, '0', '0',@generateRelieveIntransit)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeConstraintsLoad AND PROCESS_ID =  @determineHierarchyActivity)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeConstraintsLoad, '0', '0',@determineHierarchyActivity)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeConstraintsLoad AND PROCESS_ID =  @ChainSetPercentCriteriaLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeConstraintsLoad, '0', '0',@ChainSetPercentCriteriaLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeConstraintsLoad AND PROCESS_ID =  @hierarchyReclass)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeConstraintsLoad, '0', '0',@hierarchyReclass)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeConstraintsLoad AND PROCESS_ID =  @pushToBackStock)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeConstraintsLoad, '0', '0',@pushToBackStock)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeConstraintsLoad AND PROCESS_ID =  @headerAllocationLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeConstraintsLoad, '0', '0',@headerAllocationLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeConstraintsLoad AND PROCESS_ID =  @DailyPercentagesCriteraLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeConstraintsLoad, '0', '0',@DailyPercentagesCriteraLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeConstraintsLoad AND PROCESS_ID =  @storeDelete)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeConstraintsLoad, '0', '0',@storeDelete)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeConstraintsLoad AND PROCESS_ID =  @StoreEligibilityCriteraLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeConstraintsLoad, '0', '0',@StoreEligibilityCriteraLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeConstraintsLoad AND PROCESS_ID =  @VSWCriteriaLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeConstraintsLoad, '0', '0',@VSWCriteriaLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeConstraintsLoad AND PROCESS_ID =  @HeaderReconcile)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeConstraintsLoad, '0', '0',@HeaderReconcile)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeConstraintsLoad AND PROCESS_ID =  @BatchComp)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeConstraintsLoad, '0', '0',@BatchComp)   END

/* Size Curve Generate */  
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeCurveGenerate AND PROCESS_ID =  @hierarchyLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeCurveGenerate, '0', '1',@hierarchyLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeCurveGenerate AND PROCESS_ID =  @storeLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeCurveGenerate, '0', '1',@storeLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeCurveGenerate AND PROCESS_ID =  @historyPlanLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeCurveGenerate, '0', '1',@historyPlanLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeCurveGenerate AND PROCESS_ID =  @colorCodeLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeCurveGenerate, '0', '0',@colorCodeLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeCurveGenerate AND PROCESS_ID =  @sizeCodeLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeCurveGenerate, '0', '0',@sizeCodeLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeCurveGenerate AND PROCESS_ID =  @headerLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeCurveGenerate, '0', '0',@headerLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeCurveGenerate AND PROCESS_ID =  @forecasting)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeCurveGenerate, '0', '0',@forecasting)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeCurveGenerate AND PROCESS_ID =  @rollup)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeCurveGenerate, '0', '0',@rollup)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeCurveGenerate AND PROCESS_ID =  @relieveIntransit)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeCurveGenerate, '0', '0',@relieveIntransit)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeCurveGenerate AND PROCESS_ID =  @purge)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeCurveGenerate, '0', '1',@purge)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeCurveGenerate AND PROCESS_ID =  @allocate)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeCurveGenerate, '0', '1',@allocate)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeCurveGenerate AND PROCESS_ID =  @sizeCurveLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeCurveGenerate, '0', '0',@sizeCurveLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeCurveGenerate AND PROCESS_ID =  @forecastBalancing)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeCurveGenerate, '0', '0',@forecastBalancing)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeCurveGenerate AND PROCESS_ID =  @reBuildIntransit)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeCurveGenerate, '0', '0',@reBuildIntransit)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeCurveGenerate AND PROCESS_ID =  @sizeConstraintsLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeCurveGenerate, '0', '0',@sizeConstraintsLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeCurveGenerate AND PROCESS_ID =  @sizeCurveGenerate)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeCurveGenerate, '0', '0',@sizeCurveGenerate)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeCurveGenerate AND PROCESS_ID =  @SizeDayToWeekSummary)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeCurveGenerate, '0', '1',@SizeDayToWeekSummary)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeCurveGenerate AND PROCESS_ID =  @buildPackCriteriaLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeCurveGenerate, '0', '0',@buildPackCriteriaLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeCurveGenerate AND PROCESS_ID =  @generateRelieveIntransit)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeCurveGenerate, '0', '0',@generateRelieveIntransit)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeCurveGenerate AND PROCESS_ID =  @determineHierarchyActivity)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeCurveGenerate, '0', '0',@determineHierarchyActivity)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeCurveGenerate AND PROCESS_ID =  @ChainSetPercentCriteriaLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeCurveGenerate, '0', '0',@ChainSetPercentCriteriaLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeCurveGenerate AND PROCESS_ID =  @hierarchyReclass)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeCurveGenerate, '0', '0',@hierarchyReclass)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeCurveGenerate AND PROCESS_ID =  @pushToBackStock)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeCurveGenerate, '0', '0',@pushToBackStock)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeCurveGenerate AND PROCESS_ID =  @headerAllocationLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeCurveGenerate, '0', '0',@headerAllocationLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeCurveGenerate AND PROCESS_ID =  @DailyPercentagesCriteraLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeCurveGenerate, '0', '0',@DailyPercentagesCriteraLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeCurveGenerate AND PROCESS_ID =  @storeDelete)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeCurveGenerate, '0', '0',@storeDelete)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeCurveGenerate AND PROCESS_ID =  @StoreEligibilityCriteraLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeCurveGenerate, '0', '0',@StoreEligibilityCriteraLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeCurveGenerate AND PROCESS_ID =  @VSWCriteriaLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeCurveGenerate, '0', '0',@VSWCriteriaLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeCurveGenerate AND PROCESS_ID =  @HeaderReconcile)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeCurveGenerate, '0', '0',@HeaderReconcile)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @sizeCurveGenerate AND PROCESS_ID =  @BatchComp)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@sizeCurveGenerate, '0', '0',@BatchComp)   END

/* Size Day To Week Summary */  
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @SizeDayToWeekSummary AND PROCESS_ID =  @hierarchyLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@SizeDayToWeekSummary, '0', '0',@hierarchyLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @SizeDayToWeekSummary AND PROCESS_ID =  @storeLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@SizeDayToWeekSummary, '0', '1',@storeLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @SizeDayToWeekSummary AND PROCESS_ID =  @historyPlanLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@SizeDayToWeekSummary, '0', '1',@historyPlanLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @SizeDayToWeekSummary AND PROCESS_ID =  @colorCodeLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@SizeDayToWeekSummary, '0', '0',@colorCodeLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @SizeDayToWeekSummary AND PROCESS_ID =  @sizeCodeLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@SizeDayToWeekSummary, '0', '0',@sizeCodeLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @SizeDayToWeekSummary AND PROCESS_ID =  @headerLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@SizeDayToWeekSummary, '0', '0',@headerLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @SizeDayToWeekSummary AND PROCESS_ID =  @forecasting)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@SizeDayToWeekSummary, '0', '0',@forecasting)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @SizeDayToWeekSummary AND PROCESS_ID =  @rollup)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@SizeDayToWeekSummary, '0', '0',@rollup)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @SizeDayToWeekSummary AND PROCESS_ID =  @relieveIntransit)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@SizeDayToWeekSummary, '0', '0',@relieveIntransit)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @SizeDayToWeekSummary AND PROCESS_ID =  @purge)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@SizeDayToWeekSummary, '0', '1',@purge)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @SizeDayToWeekSummary AND PROCESS_ID =  @allocate)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@SizeDayToWeekSummary, '0', '0',@allocate)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @SizeDayToWeekSummary AND PROCESS_ID =  @sizeCurveLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@SizeDayToWeekSummary, '0', '0',@sizeCurveLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @SizeDayToWeekSummary AND PROCESS_ID =  @forecastBalancing)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@SizeDayToWeekSummary, '0', '0',@forecastBalancing)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @SizeDayToWeekSummary AND PROCESS_ID =  @reBuildIntransit)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@SizeDayToWeekSummary, '0', '0',@reBuildIntransit)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @SizeDayToWeekSummary AND PROCESS_ID =  @sizeConstraintsLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@SizeDayToWeekSummary, '0', '0',@sizeConstraintsLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @SizeDayToWeekSummary AND PROCESS_ID =  @sizeCurveGenerate)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@SizeDayToWeekSummary, '0', '1',@sizeCurveGenerate)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @SizeDayToWeekSummary AND PROCESS_ID =  @SizeDayToWeekSummary)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@SizeDayToWeekSummary, '0', '0',@SizeDayToWeekSummary)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @SizeDayToWeekSummary AND PROCESS_ID =  @buildPackCriteriaLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@SizeDayToWeekSummary, '0', '0',@buildPackCriteriaLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @SizeDayToWeekSummary AND PROCESS_ID =  @generateRelieveIntransit)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@SizeDayToWeekSummary, '0', '0',@generateRelieveIntransit)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @SizeDayToWeekSummary AND PROCESS_ID =  @determineHierarchyActivity)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@SizeDayToWeekSummary, '0', '0',@determineHierarchyActivity)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @SizeDayToWeekSummary AND PROCESS_ID =  @ChainSetPercentCriteriaLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@SizeDayToWeekSummary, '0', '0',@ChainSetPercentCriteriaLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @SizeDayToWeekSummary AND PROCESS_ID =  @hierarchyReclass)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@SizeDayToWeekSummary, '0', '0',@hierarchyReclass)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @SizeDayToWeekSummary AND PROCESS_ID =  @pushToBackStock)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@SizeDayToWeekSummary, '0', '0',@pushToBackStock)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @SizeDayToWeekSummary AND PROCESS_ID =  @headerAllocationLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@SizeDayToWeekSummary, '0', '0',@headerAllocationLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @SizeDayToWeekSummary AND PROCESS_ID =  @DailyPercentagesCriteraLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@SizeDayToWeekSummary, '0', '0',@DailyPercentagesCriteraLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @SizeDayToWeekSummary AND PROCESS_ID =  @storeDelete)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@SizeDayToWeekSummary, '0', '0',@storeDelete)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @SizeDayToWeekSummary AND PROCESS_ID =  @StoreEligibilityCriteraLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@SizeDayToWeekSummary, '0', '0',@StoreEligibilityCriteraLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @SizeDayToWeekSummary AND PROCESS_ID =  @VSWCriteriaLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@SizeDayToWeekSummary, '0', '0',@VSWCriteriaLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @SizeDayToWeekSummary AND PROCESS_ID =  @HeaderReconcile)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@SizeDayToWeekSummary, '0', '0',@HeaderReconcile)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @SizeDayToWeekSummary AND PROCESS_ID =  @BatchComp)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@SizeDayToWeekSummary, '0', '0',@BatchComp)   END

/* Build Pack Criteria Load */  
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @buildPackCriteriaLoad AND PROCESS_ID =  @hierarchyLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@buildPackCriteriaLoad, '0', '0',@hierarchyLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @buildPackCriteriaLoad AND PROCESS_ID =  @storeLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@buildPackCriteriaLoad, '0', '0',@storeLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @buildPackCriteriaLoad AND PROCESS_ID =  @historyPlanLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@buildPackCriteriaLoad, '0', '0',@historyPlanLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @buildPackCriteriaLoad AND PROCESS_ID =  @colorCodeLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@buildPackCriteriaLoad, '0', '0',@colorCodeLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @buildPackCriteriaLoad AND PROCESS_ID =  @sizeCodeLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@buildPackCriteriaLoad, '0', '0',@sizeCodeLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @buildPackCriteriaLoad AND PROCESS_ID =  @headerLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@buildPackCriteriaLoad, '0', '0',@headerLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @buildPackCriteriaLoad AND PROCESS_ID =  @forecasting)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@buildPackCriteriaLoad, '0', '0',@forecasting)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @buildPackCriteriaLoad AND PROCESS_ID =  @rollup)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@buildPackCriteriaLoad, '0', '0',@rollup)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @buildPackCriteriaLoad AND PROCESS_ID =  @relieveIntransit)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@buildPackCriteriaLoad, '0', '0',@relieveIntransit)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @buildPackCriteriaLoad AND PROCESS_ID =  @purge)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@buildPackCriteriaLoad, '0', '0',@purge)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @buildPackCriteriaLoad AND PROCESS_ID =  @allocate)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@buildPackCriteriaLoad, '0', '0',@allocate)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @buildPackCriteriaLoad AND PROCESS_ID =  @sizeCurveLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@buildPackCriteriaLoad, '0', '0',@sizeCurveLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @buildPackCriteriaLoad AND PROCESS_ID =  @forecastBalancing)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@buildPackCriteriaLoad, '0', '0',@forecastBalancing)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @buildPackCriteriaLoad AND PROCESS_ID =  @reBuildIntransit)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@buildPackCriteriaLoad, '0', '0',@reBuildIntransit)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @buildPackCriteriaLoad AND PROCESS_ID =  @sizeConstraintsLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@buildPackCriteriaLoad, '0', '0',@sizeConstraintsLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @buildPackCriteriaLoad AND PROCESS_ID =  @sizeCurveGenerate)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@buildPackCriteriaLoad, '0', '0',@sizeCurveGenerate)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @buildPackCriteriaLoad AND PROCESS_ID =  @SizeDayToWeekSummary)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@buildPackCriteriaLoad, '0', '0',@SizeDayToWeekSummary)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @buildPackCriteriaLoad AND PROCESS_ID =  @buildPackCriteriaLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@buildPackCriteriaLoad, '0', '0',@buildPackCriteriaLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @buildPackCriteriaLoad AND PROCESS_ID =  @generateRelieveIntransit)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@buildPackCriteriaLoad, '0', '0',@generateRelieveIntransit)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @buildPackCriteriaLoad AND PROCESS_ID =  @determineHierarchyActivity)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@buildPackCriteriaLoad, '0', '0',@determineHierarchyActivity)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @buildPackCriteriaLoad AND PROCESS_ID =  @ChainSetPercentCriteriaLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@buildPackCriteriaLoad, '0', '0',@ChainSetPercentCriteriaLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @buildPackCriteriaLoad AND PROCESS_ID =  @hierarchyReclass)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@buildPackCriteriaLoad, '0', '0',@hierarchyReclass)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @buildPackCriteriaLoad AND PROCESS_ID =  @pushToBackStock)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@buildPackCriteriaLoad, '0', '0',@pushToBackStock)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @buildPackCriteriaLoad AND PROCESS_ID =  @headerAllocationLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@buildPackCriteriaLoad, '0', '0',@headerAllocationLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @buildPackCriteriaLoad AND PROCESS_ID =  @DailyPercentagesCriteraLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@buildPackCriteriaLoad, '0', '0',@DailyPercentagesCriteraLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @buildPackCriteriaLoad AND PROCESS_ID =  @storeDelete)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@buildPackCriteriaLoad, '0', '0',@storeDelete)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @buildPackCriteriaLoad AND PROCESS_ID =  @StoreEligibilityCriteraLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@buildPackCriteriaLoad, '0', '0',@StoreEligibilityCriteraLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @buildPackCriteriaLoad AND PROCESS_ID =  @VSWCriteriaLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@buildPackCriteriaLoad, '0', '0',@VSWCriteriaLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @buildPackCriteriaLoad AND PROCESS_ID =  @HeaderReconcile)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@buildPackCriteriaLoad, '0', '0',@HeaderReconcile)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @buildPackCriteriaLoad AND PROCESS_ID =  @BatchComp)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@buildPackCriteriaLoad, '0', '0',@BatchComp)   END

/* Relieve Intransit Builder  */  
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @generateRelieveIntransit AND PROCESS_ID =  @hierarchyLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@generateRelieveIntransit, '0', '0',@hierarchyLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @generateRelieveIntransit AND PROCESS_ID =  @storeLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@generateRelieveIntransit, '0', '0',@storeLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @generateRelieveIntransit AND PROCESS_ID =  @historyPlanLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@generateRelieveIntransit, '0', '0',@historyPlanLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @generateRelieveIntransit AND PROCESS_ID =  @colorCodeLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@generateRelieveIntransit, '0', '0',@colorCodeLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @generateRelieveIntransit AND PROCESS_ID =  @sizeCodeLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@generateRelieveIntransit, '0', '0',@sizeCodeLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @generateRelieveIntransit AND PROCESS_ID =  @headerLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@generateRelieveIntransit, '0', '0',@headerLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @generateRelieveIntransit AND PROCESS_ID =  @forecasting)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@generateRelieveIntransit, '0', '0',@forecasting)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @generateRelieveIntransit AND PROCESS_ID =  @rollup)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@generateRelieveIntransit, '0', '0',@rollup)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @generateRelieveIntransit AND PROCESS_ID =  @relieveIntransit)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@generateRelieveIntransit, '0', '1',@relieveIntransit)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @generateRelieveIntransit AND PROCESS_ID =  @purge)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@generateRelieveIntransit, '0', '0',@purge)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @generateRelieveIntransit AND PROCESS_ID =  @allocate)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@generateRelieveIntransit, '0', '1',@allocate)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @generateRelieveIntransit AND PROCESS_ID =  @sizeCurveLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@generateRelieveIntransit, '0', '0',@sizeCurveLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @generateRelieveIntransit AND PROCESS_ID =  @forecastBalancing)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@generateRelieveIntransit, '0', '0',@forecastBalancing)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @generateRelieveIntransit AND PROCESS_ID =  @reBuildIntransit)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@generateRelieveIntransit, '0', '1',@reBuildIntransit)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @generateRelieveIntransit AND PROCESS_ID =  @sizeConstraintsLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@generateRelieveIntransit, '0', '0',@sizeConstraintsLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @generateRelieveIntransit AND PROCESS_ID =  @sizeCurveGenerate)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@generateRelieveIntransit, '0', '0',@sizeCurveGenerate)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @generateRelieveIntransit AND PROCESS_ID =  @SizeDayToWeekSummary)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@generateRelieveIntransit, '0', '0',@SizeDayToWeekSummary)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @generateRelieveIntransit AND PROCESS_ID =  @buildPackCriteriaLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@generateRelieveIntransit, '0', '0',@buildPackCriteriaLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @generateRelieveIntransit AND PROCESS_ID =  @generateRelieveIntransit)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@generateRelieveIntransit, '0', '1',@generateRelieveIntransit)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @generateRelieveIntransit AND PROCESS_ID =  @determineHierarchyActivity)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@generateRelieveIntransit, '0', '0',@determineHierarchyActivity)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @generateRelieveIntransit AND PROCESS_ID =  @ChainSetPercentCriteriaLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@generateRelieveIntransit, '0', '0',@ChainSetPercentCriteriaLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @generateRelieveIntransit AND PROCESS_ID =  @hierarchyReclass)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@generateRelieveIntransit, '0', '0',@hierarchyReclass)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @generateRelieveIntransit AND PROCESS_ID =  @pushToBackStock)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@generateRelieveIntransit, '0', '0',@pushToBackStock)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @generateRelieveIntransit AND PROCESS_ID =  @headerAllocationLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@generateRelieveIntransit, '0', '0',@headerAllocationLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @generateRelieveIntransit AND PROCESS_ID =  @DailyPercentagesCriteraLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@generateRelieveIntransit, '0', '0',@DailyPercentagesCriteraLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @generateRelieveIntransit AND PROCESS_ID =  @storeDelete)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@generateRelieveIntransit, '0', '0',@storeDelete)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @generateRelieveIntransit AND PROCESS_ID =  @StoreEligibilityCriteraLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@generateRelieveIntransit, '0', '0',@StoreEligibilityCriteraLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @generateRelieveIntransit AND PROCESS_ID =  @VSWCriteriaLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@generateRelieveIntransit, '0', '0',@VSWCriteriaLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @generateRelieveIntransit AND PROCESS_ID =  @HeaderReconcile)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@generateRelieveIntransit, '0', '0',@HeaderReconcile)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @generateRelieveIntransit AND PROCESS_ID =  @BatchComp)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@generateRelieveIntransit, '0', '0',@BatchComp)   END

/* Determine Hierarchy Activity */  
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @determineHierarchyActivity AND PROCESS_ID =  @hierarchyLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@determineHierarchyActivity, '0', '1',@hierarchyLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @determineHierarchyActivity AND PROCESS_ID =  @storeLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@determineHierarchyActivity, '0', '0',@storeLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @determineHierarchyActivity AND PROCESS_ID =  @historyPlanLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@determineHierarchyActivity, '0', '0',@historyPlanLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @determineHierarchyActivity AND PROCESS_ID =  @colorCodeLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@determineHierarchyActivity, '0', '0',@colorCodeLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @determineHierarchyActivity AND PROCESS_ID =  @sizeCodeLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@determineHierarchyActivity, '0', '0',@sizeCodeLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @determineHierarchyActivity AND PROCESS_ID =  @headerLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@determineHierarchyActivity, '0', '0',@headerLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @determineHierarchyActivity AND PROCESS_ID =  @forecasting)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@determineHierarchyActivity, '0', '0',@forecasting)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @determineHierarchyActivity AND PROCESS_ID =  @rollup)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@determineHierarchyActivity, '0', '1',@rollup)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @determineHierarchyActivity AND PROCESS_ID =  @relieveIntransit)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@determineHierarchyActivity, '0', '1',@relieveIntransit)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @determineHierarchyActivity AND PROCESS_ID =  @purge)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@determineHierarchyActivity, '0', '1',@purge)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @determineHierarchyActivity AND PROCESS_ID =  @allocate)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@determineHierarchyActivity, '0', '0',@allocate)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @determineHierarchyActivity AND PROCESS_ID =  @sizeCurveLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@determineHierarchyActivity, '0', '0',@sizeCurveLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @determineHierarchyActivity AND PROCESS_ID =  @forecastBalancing)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@determineHierarchyActivity, '0', '0',@forecastBalancing)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @determineHierarchyActivity AND PROCESS_ID =  @reBuildIntransit)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@determineHierarchyActivity, '0', '1',@reBuildIntransit)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @determineHierarchyActivity AND PROCESS_ID =  @sizeConstraintsLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@determineHierarchyActivity, '0', '0',@sizeConstraintsLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @determineHierarchyActivity AND PROCESS_ID =  @sizeCurveGenerate)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@determineHierarchyActivity, '0', '0',@sizeCurveGenerate)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @determineHierarchyActivity AND PROCESS_ID =  @SizeDayToWeekSummary)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@determineHierarchyActivity, '0', '0',@SizeDayToWeekSummary)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @determineHierarchyActivity AND PROCESS_ID =  @buildPackCriteriaLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@determineHierarchyActivity, '0', '0',@buildPackCriteriaLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @determineHierarchyActivity AND PROCESS_ID =  @generateRelieveIntransit)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@determineHierarchyActivity, '0', '0',@generateRelieveIntransit)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @determineHierarchyActivity AND PROCESS_ID =  @determineHierarchyActivity)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@determineHierarchyActivity, '0', '1',@determineHierarchyActivity)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @determineHierarchyActivity AND PROCESS_ID =  @ChainSetPercentCriteriaLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@determineHierarchyActivity, '0', '0',@ChainSetPercentCriteriaLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @determineHierarchyActivity AND PROCESS_ID =  @hierarchyReclass)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@determineHierarchyActivity, '0', '1',@hierarchyReclass)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @determineHierarchyActivity AND PROCESS_ID =  @pushToBackStock)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@determineHierarchyActivity, '0', '0',@pushToBackStock)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @determineHierarchyActivity AND PROCESS_ID =  @headerAllocationLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@determineHierarchyActivity, '0', '0',@headerAllocationLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @determineHierarchyActivity AND PROCESS_ID =  @DailyPercentagesCriteraLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@determineHierarchyActivity, '0', '0',@DailyPercentagesCriteraLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @determineHierarchyActivity AND PROCESS_ID =  @storeDelete)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@determineHierarchyActivity, '0', '0',@storeDelete)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @determineHierarchyActivity AND PROCESS_ID =  @StoreEligibilityCriteraLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@determineHierarchyActivity, '0', '0',@StoreEligibilityCriteraLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @determineHierarchyActivity AND PROCESS_ID =  @VSWCriteriaLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@determineHierarchyActivity, '0', '0',@VSWCriteriaLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @determineHierarchyActivity AND PROCESS_ID =  @HeaderReconcile)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@determineHierarchyActivity, '0', '0',@HeaderReconcile)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @determineHierarchyActivity AND PROCESS_ID =  @BatchComp)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@determineHierarchyActivity, '0', '0',@BatchComp)   END

/* Chain Set Percent */  
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @ChainSetPercentCriteriaLoad AND PROCESS_ID =  @hierarchyLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@ChainSetPercentCriteriaLoad, '0', '1',@hierarchyLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @ChainSetPercentCriteriaLoad AND PROCESS_ID =  @storeLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@ChainSetPercentCriteriaLoad, '0', '0',@storeLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @ChainSetPercentCriteriaLoad AND PROCESS_ID =  @historyPlanLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@ChainSetPercentCriteriaLoad, '0', '0',@historyPlanLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @ChainSetPercentCriteriaLoad AND PROCESS_ID =  @colorCodeLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@ChainSetPercentCriteriaLoad, '0', '0',@colorCodeLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @ChainSetPercentCriteriaLoad AND PROCESS_ID =  @sizeCodeLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@ChainSetPercentCriteriaLoad, '0', '0',@sizeCodeLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @ChainSetPercentCriteriaLoad AND PROCESS_ID =  @headerLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@ChainSetPercentCriteriaLoad, '0', '0',@headerLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @ChainSetPercentCriteriaLoad AND PROCESS_ID =  @forecasting)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@ChainSetPercentCriteriaLoad, '0', '1',@forecasting)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @ChainSetPercentCriteriaLoad AND PROCESS_ID =  @rollup)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@ChainSetPercentCriteriaLoad, '0', '0',@rollup)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @ChainSetPercentCriteriaLoad AND PROCESS_ID =  @relieveIntransit)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@ChainSetPercentCriteriaLoad, '0', '0',@relieveIntransit)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @ChainSetPercentCriteriaLoad AND PROCESS_ID =  @purge)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@ChainSetPercentCriteriaLoad, '0', '0',@purge)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @ChainSetPercentCriteriaLoad AND PROCESS_ID =  @allocate)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@ChainSetPercentCriteriaLoad, '0', '0',@allocate)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @ChainSetPercentCriteriaLoad AND PROCESS_ID =  @sizeCurveLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@ChainSetPercentCriteriaLoad, '0', '0',@sizeCurveLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @ChainSetPercentCriteriaLoad AND PROCESS_ID =  @forecastBalancing)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@ChainSetPercentCriteriaLoad, '0', '0',@forecastBalancing)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @ChainSetPercentCriteriaLoad AND PROCESS_ID =  @reBuildIntransit)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@ChainSetPercentCriteriaLoad, '0', '0',@reBuildIntransit)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @ChainSetPercentCriteriaLoad AND PROCESS_ID =  @sizeConstraintsLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@ChainSetPercentCriteriaLoad, '0', '0',@sizeConstraintsLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @ChainSetPercentCriteriaLoad AND PROCESS_ID =  @sizeCurveGenerate)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@ChainSetPercentCriteriaLoad, '0', '0',@sizeCurveGenerate)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @ChainSetPercentCriteriaLoad AND PROCESS_ID =  @SizeDayToWeekSummary)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@ChainSetPercentCriteriaLoad, '0', '0',@SizeDayToWeekSummary)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @ChainSetPercentCriteriaLoad AND PROCESS_ID =  @buildPackCriteriaLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@ChainSetPercentCriteriaLoad, '0', '0',@buildPackCriteriaLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @ChainSetPercentCriteriaLoad AND PROCESS_ID =  @generateRelieveIntransit)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@ChainSetPercentCriteriaLoad, '0', '0',@generateRelieveIntransit)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @ChainSetPercentCriteriaLoad AND PROCESS_ID =  @determineHierarchyActivity)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@ChainSetPercentCriteriaLoad, '0', '0',@determineHierarchyActivity)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @ChainSetPercentCriteriaLoad AND PROCESS_ID =  @ChainSetPercentCriteriaLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@ChainSetPercentCriteriaLoad, '0', '0',@ChainSetPercentCriteriaLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @ChainSetPercentCriteriaLoad AND PROCESS_ID =  @hierarchyReclass)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@ChainSetPercentCriteriaLoad, '0', '0',@hierarchyReclass)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @ChainSetPercentCriteriaLoad AND PROCESS_ID =  @pushToBackStock)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@ChainSetPercentCriteriaLoad, '0', '0',@pushToBackStock)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @ChainSetPercentCriteriaLoad AND PROCESS_ID =  @headerAllocationLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@ChainSetPercentCriteriaLoad, '0', '0',@headerAllocationLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @ChainSetPercentCriteriaLoad AND PROCESS_ID =  @DailyPercentagesCriteraLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@ChainSetPercentCriteriaLoad, '0', '0',@DailyPercentagesCriteraLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @ChainSetPercentCriteriaLoad AND PROCESS_ID =  @storeDelete)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@ChainSetPercentCriteriaLoad, '0', '0',@storeDelete)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @ChainSetPercentCriteriaLoad AND PROCESS_ID =  @StoreEligibilityCriteraLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@ChainSetPercentCriteriaLoad, '0', '0',@StoreEligibilityCriteraLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @ChainSetPercentCriteriaLoad AND PROCESS_ID =  @VSWCriteriaLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@ChainSetPercentCriteriaLoad, '0', '0',@VSWCriteriaLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @ChainSetPercentCriteriaLoad AND PROCESS_ID =  @HeaderReconcile)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@ChainSetPercentCriteriaLoad, '0', '0',@HeaderReconcile)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @ChainSetPercentCriteriaLoad AND PROCESS_ID =  @BatchComp)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@ChainSetPercentCriteriaLoad, '0', '0',@BatchComp)   END

/* Hierarchy Reclass */  
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @hierarchyReclass AND PROCESS_ID =  @hierarchyLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@hierarchyReclass, '0', '1',@hierarchyLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @hierarchyReclass AND PROCESS_ID =  @storeLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@hierarchyReclass, '0', '0',@storeLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @hierarchyReclass AND PROCESS_ID =  @historyPlanLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@hierarchyReclass, '0', '0',@historyPlanLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @hierarchyReclass AND PROCESS_ID =  @colorCodeLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@hierarchyReclass, '0', '0',@colorCodeLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @hierarchyReclass AND PROCESS_ID =  @sizeCodeLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@hierarchyReclass, '0', '0',@sizeCodeLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @hierarchyReclass AND PROCESS_ID =  @headerLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@hierarchyReclass, '0', '0',@headerLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @hierarchyReclass AND PROCESS_ID =  @forecasting)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@hierarchyReclass, '0', '0',@forecasting)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @hierarchyReclass AND PROCESS_ID =  @rollup)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@hierarchyReclass, '0', '0',@rollup)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @hierarchyReclass AND PROCESS_ID =  @relieveIntransit)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@hierarchyReclass, '0', '0',@relieveIntransit)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @hierarchyReclass AND PROCESS_ID =  @purge)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@hierarchyReclass, '0', '1',@purge)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @hierarchyReclass AND PROCESS_ID =  @allocate)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@hierarchyReclass, '0', '0',@allocate)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @hierarchyReclass AND PROCESS_ID =  @sizeCurveLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@hierarchyReclass, '0', '0',@sizeCurveLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @hierarchyReclass AND PROCESS_ID =  @forecastBalancing)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@hierarchyReclass, '0', '0',@forecastBalancing)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @hierarchyReclass AND PROCESS_ID =  @reBuildIntransit)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@hierarchyReclass, '0', '0',@reBuildIntransit)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @hierarchyReclass AND PROCESS_ID =  @sizeConstraintsLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@hierarchyReclass, '0', '0',@sizeConstraintsLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @hierarchyReclass AND PROCESS_ID =  @sizeCurveGenerate)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@hierarchyReclass, '0', '0',@sizeCurveGenerate)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @hierarchyReclass AND PROCESS_ID =  @SizeDayToWeekSummary)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@hierarchyReclass, '0', '0',@SizeDayToWeekSummary)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @hierarchyReclass AND PROCESS_ID =  @buildPackCriteriaLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@hierarchyReclass, '0', '0',@buildPackCriteriaLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @hierarchyReclass AND PROCESS_ID =  @generateRelieveIntransit)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@hierarchyReclass, '0', '0',@generateRelieveIntransit)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @hierarchyReclass AND PROCESS_ID =  @determineHierarchyActivity)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@hierarchyReclass, '0', '0',@determineHierarchyActivity)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @hierarchyReclass AND PROCESS_ID =  @ChainSetPercentCriteriaLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@hierarchyReclass, '0', '0',@ChainSetPercentCriteriaLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @hierarchyReclass AND PROCESS_ID =  @hierarchyReclass)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@hierarchyReclass, '0', '1',@hierarchyReclass)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @hierarchyReclass AND PROCESS_ID =  @pushToBackStock)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@hierarchyReclass, '0', '0',@pushToBackStock)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @hierarchyReclass AND PROCESS_ID =  @headerAllocationLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@hierarchyReclass, '0', '0',@headerAllocationLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @hierarchyReclass AND PROCESS_ID =  @DailyPercentagesCriteraLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@hierarchyReclass, '0', '0',@DailyPercentagesCriteraLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @hierarchyReclass AND PROCESS_ID =  @storeDelete)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@hierarchyReclass, '0', '0',@storeDelete)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @hierarchyReclass AND PROCESS_ID =  @StoreEligibilityCriteraLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@hierarchyReclass, '0', '0',@StoreEligibilityCriteraLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @hierarchyReclass AND PROCESS_ID =  @VSWCriteriaLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@hierarchyReclass, '0', '0',@VSWCriteriaLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @hierarchyReclass AND PROCESS_ID =  @HeaderReconcile)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@hierarchyReclass, '0', '1',@HeaderReconcile)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @hierarchyReclass AND PROCESS_ID =  @BatchComp)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@hierarchyReclass, '0', '0',@BatchComp)   END

/* Push To Back Stock */  
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @pushToBackStock AND PROCESS_ID =  @hierarchyLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@pushToBackStock, '0', '0',@hierarchyLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @pushToBackStock AND PROCESS_ID =  @storeLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@pushToBackStock, '0', '1',@storeLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @pushToBackStock AND PROCESS_ID =  @historyPlanLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@pushToBackStock, '0', '0',@historyPlanLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @pushToBackStock AND PROCESS_ID =  @colorCodeLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@pushToBackStock, '0', '0',@colorCodeLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @pushToBackStock AND PROCESS_ID =  @sizeCodeLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@pushToBackStock, '0', '0',@sizeCodeLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @pushToBackStock AND PROCESS_ID =  @headerLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@pushToBackStock, '0', '1',@headerLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @pushToBackStock AND PROCESS_ID =  @forecasting)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@pushToBackStock, '0', '0',@forecasting)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @pushToBackStock AND PROCESS_ID =  @rollup)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@pushToBackStock, '0', '0',@rollup)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @pushToBackStock AND PROCESS_ID =  @relieveIntransit)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@pushToBackStock, '0', '0',@relieveIntransit)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @pushToBackStock AND PROCESS_ID =  @purge)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@pushToBackStock, '0', '0',@purge)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @pushToBackStock AND PROCESS_ID =  @allocate)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@pushToBackStock, '0', '1',@allocate)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @pushToBackStock AND PROCESS_ID =  @sizeCurveLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@pushToBackStock, '0', '0',@sizeCurveLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @pushToBackStock AND PROCESS_ID =  @forecastBalancing)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@pushToBackStock, '0', '0',@forecastBalancing)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @pushToBackStock AND PROCESS_ID =  @reBuildIntransit)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@pushToBackStock, '0', '0',@reBuildIntransit)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @pushToBackStock AND PROCESS_ID =  @sizeConstraintsLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@pushToBackStock, '0', '0',@sizeConstraintsLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @pushToBackStock AND PROCESS_ID =  @sizeCurveGenerate)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@pushToBackStock, '0', '0',@sizeCurveGenerate)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @pushToBackStock AND PROCESS_ID =  @SizeDayToWeekSummary)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@pushToBackStock, '0', '0',@SizeDayToWeekSummary)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @pushToBackStock AND PROCESS_ID =  @buildPackCriteriaLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@pushToBackStock, '0', '0',@buildPackCriteriaLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @pushToBackStock AND PROCESS_ID =  @generateRelieveIntransit)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@pushToBackStock, '0', '0',@generateRelieveIntransit)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @pushToBackStock AND PROCESS_ID =  @determineHierarchyActivity)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@pushToBackStock, '0', '0',@determineHierarchyActivity)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @pushToBackStock AND PROCESS_ID =  @ChainSetPercentCriteriaLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@pushToBackStock, '0', '0',@ChainSetPercentCriteriaLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @pushToBackStock AND PROCESS_ID =  @hierarchyReclass)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@pushToBackStock, '0', '0',@hierarchyReclass)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @pushToBackStock AND PROCESS_ID =  @pushToBackStock)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@pushToBackStock, '0', '0',@pushToBackStock)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @pushToBackStock AND PROCESS_ID =  @headerAllocationLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@pushToBackStock, '0', '0',@headerAllocationLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @pushToBackStock AND PROCESS_ID =  @DailyPercentagesCriteraLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@pushToBackStock, '0', '0',@DailyPercentagesCriteraLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @pushToBackStock AND PROCESS_ID =  @storeDelete)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@pushToBackStock, '0', '0',@storeDelete)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @pushToBackStock AND PROCESS_ID =  @StoreEligibilityCriteraLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@pushToBackStock, '0', '0',@StoreEligibilityCriteraLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @pushToBackStock AND PROCESS_ID =  @VSWCriteriaLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@pushToBackStock, '0', '1',@VSWCriteriaLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @pushToBackStock AND PROCESS_ID =  @HeaderReconcile)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@pushToBackStock, '0', '1',@HeaderReconcile)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @pushToBackStock AND PROCESS_ID =  @BatchComp)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@pushToBackStock, '0', '0',@BatchComp)   END

/* Header Allocation Load */  
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @headerAllocationLoad AND PROCESS_ID =  @hierarchyLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@headerAllocationLoad, '0', '0',@hierarchyLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @headerAllocationLoad AND PROCESS_ID =  @storeLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@headerAllocationLoad, '0', '1',@storeLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @headerAllocationLoad AND PROCESS_ID =  @historyPlanLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@headerAllocationLoad, '0', '0',@historyPlanLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @headerAllocationLoad AND PROCESS_ID =  @colorCodeLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@headerAllocationLoad, '0', '0',@colorCodeLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @headerAllocationLoad AND PROCESS_ID =  @sizeCodeLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@headerAllocationLoad, '0', '0',@sizeCodeLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @headerAllocationLoad AND PROCESS_ID =  @headerLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@headerAllocationLoad, '0', '0',@headerLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @headerAllocationLoad AND PROCESS_ID =  @forecasting)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@headerAllocationLoad, '0', '0',@forecasting)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @headerAllocationLoad AND PROCESS_ID =  @rollup)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@headerAllocationLoad, '0', '0',@rollup)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @headerAllocationLoad AND PROCESS_ID =  @relieveIntransit)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@headerAllocationLoad, '0', '0',@relieveIntransit)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @headerAllocationLoad AND PROCESS_ID =  @purge)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@headerAllocationLoad, '0', '0',@purge)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @headerAllocationLoad AND PROCESS_ID =  @allocate)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@headerAllocationLoad, '0', '1',@allocate)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @headerAllocationLoad AND PROCESS_ID =  @sizeCurveLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@headerAllocationLoad, '0', '0',@sizeCurveLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @headerAllocationLoad AND PROCESS_ID =  @forecastBalancing)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@headerAllocationLoad, '0', '0',@forecastBalancing)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @headerAllocationLoad AND PROCESS_ID =  @reBuildIntransit)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@headerAllocationLoad, '0', '1',@reBuildIntransit)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @headerAllocationLoad AND PROCESS_ID =  @sizeConstraintsLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@headerAllocationLoad, '0', '0',@sizeConstraintsLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @headerAllocationLoad AND PROCESS_ID =  @sizeCurveGenerate)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@headerAllocationLoad, '0', '0',@sizeCurveGenerate)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @headerAllocationLoad AND PROCESS_ID =  @SizeDayToWeekSummary)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@headerAllocationLoad, '0', '0',@SizeDayToWeekSummary)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @headerAllocationLoad AND PROCESS_ID =  @buildPackCriteriaLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@headerAllocationLoad, '0', '0',@buildPackCriteriaLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @headerAllocationLoad AND PROCESS_ID =  @generateRelieveIntransit)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@headerAllocationLoad, '0', '0',@generateRelieveIntransit)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @headerAllocationLoad AND PROCESS_ID =  @determineHierarchyActivity)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@headerAllocationLoad, '0', '0',@determineHierarchyActivity)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @headerAllocationLoad AND PROCESS_ID =  @ChainSetPercentCriteriaLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@headerAllocationLoad, '0', '0',@ChainSetPercentCriteriaLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @headerAllocationLoad AND PROCESS_ID =  @hierarchyReclass)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@headerAllocationLoad, '0', '0',@hierarchyReclass)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @headerAllocationLoad AND PROCESS_ID =  @pushToBackStock)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@headerAllocationLoad, '0', '0',@pushToBackStock)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @headerAllocationLoad AND PROCESS_ID =  @headerAllocationLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@headerAllocationLoad, '0', '0',@headerAllocationLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @headerAllocationLoad AND PROCESS_ID =  @DailyPercentagesCriteraLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@headerAllocationLoad, '0', '0',@DailyPercentagesCriteraLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @headerAllocationLoad AND PROCESS_ID =  @storeDelete)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@headerAllocationLoad, '0', '0',@storeDelete)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @headerAllocationLoad AND PROCESS_ID =  @StoreEligibilityCriteraLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@headerAllocationLoad, '0', '0',@StoreEligibilityCriteraLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @headerAllocationLoad AND PROCESS_ID =  @VSWCriteriaLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@headerAllocationLoad, '0', '0',@VSWCriteriaLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @headerAllocationLoad AND PROCESS_ID =  @HeaderReconcile)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@headerAllocationLoad, '0', '1',@HeaderReconcile)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @headerAllocationLoad AND PROCESS_ID =  @BatchComp)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@headerAllocationLoad, '0', '0',@BatchComp)   END

/* Daily Percentages Load */  
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @DailyPercentagesCriteraLoad AND PROCESS_ID =  @hierarchyLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@DailyPercentagesCriteraLoad, '0', '1',@hierarchyLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @DailyPercentagesCriteraLoad AND PROCESS_ID =  @storeLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@DailyPercentagesCriteraLoad, '0', '1',@storeLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @DailyPercentagesCriteraLoad AND PROCESS_ID =  @historyPlanLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@DailyPercentagesCriteraLoad, '0', '0',@historyPlanLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @DailyPercentagesCriteraLoad AND PROCESS_ID =  @colorCodeLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@DailyPercentagesCriteraLoad, '0', '0',@colorCodeLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @DailyPercentagesCriteraLoad AND PROCESS_ID =  @sizeCodeLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@DailyPercentagesCriteraLoad, '0', '0',@sizeCodeLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @DailyPercentagesCriteraLoad AND PROCESS_ID =  @headerLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@DailyPercentagesCriteraLoad, '0', '0',@headerLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @DailyPercentagesCriteraLoad AND PROCESS_ID =  @forecasting)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@DailyPercentagesCriteraLoad, '0', '1',@forecasting)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @DailyPercentagesCriteraLoad AND PROCESS_ID =  @rollup)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@DailyPercentagesCriteraLoad, '0', '0',@rollup)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @DailyPercentagesCriteraLoad AND PROCESS_ID =  @relieveIntransit)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@DailyPercentagesCriteraLoad, '0', '0',@relieveIntransit)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @DailyPercentagesCriteraLoad AND PROCESS_ID =  @purge)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@DailyPercentagesCriteraLoad, '0', '0',@purge)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @DailyPercentagesCriteraLoad AND PROCESS_ID =  @allocate)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@DailyPercentagesCriteraLoad, '0', '1',@allocate)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @DailyPercentagesCriteraLoad AND PROCESS_ID =  @sizeCurveLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@DailyPercentagesCriteraLoad, '0', '0',@sizeCurveLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @DailyPercentagesCriteraLoad AND PROCESS_ID =  @forecastBalancing)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@DailyPercentagesCriteraLoad, '0', '0',@forecastBalancing)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @DailyPercentagesCriteraLoad AND PROCESS_ID =  @reBuildIntransit)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@DailyPercentagesCriteraLoad, '0', '0',@reBuildIntransit)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @DailyPercentagesCriteraLoad AND PROCESS_ID =  @sizeConstraintsLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@DailyPercentagesCriteraLoad, '0', '0',@sizeConstraintsLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @DailyPercentagesCriteraLoad AND PROCESS_ID =  @sizeCurveGenerate)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@DailyPercentagesCriteraLoad, '0', '0',@sizeCurveGenerate)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @DailyPercentagesCriteraLoad AND PROCESS_ID =  @SizeDayToWeekSummary)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@DailyPercentagesCriteraLoad, '0', '0',@SizeDayToWeekSummary)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @DailyPercentagesCriteraLoad AND PROCESS_ID =  @buildPackCriteriaLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@DailyPercentagesCriteraLoad, '0', '0',@buildPackCriteriaLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @DailyPercentagesCriteraLoad AND PROCESS_ID =  @generateRelieveIntransit)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@DailyPercentagesCriteraLoad, '0', '0',@generateRelieveIntransit)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @DailyPercentagesCriteraLoad AND PROCESS_ID =  @determineHierarchyActivity)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@DailyPercentagesCriteraLoad, '0', '0',@determineHierarchyActivity)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @DailyPercentagesCriteraLoad AND PROCESS_ID =  @ChainSetPercentCriteriaLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@DailyPercentagesCriteraLoad, '0', '0',@ChainSetPercentCriteriaLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @DailyPercentagesCriteraLoad AND PROCESS_ID =  @hierarchyReclass)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@DailyPercentagesCriteraLoad, '0', '0',@hierarchyReclass)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @DailyPercentagesCriteraLoad AND PROCESS_ID =  @pushToBackStock)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@DailyPercentagesCriteraLoad, '0', '0',@pushToBackStock)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @DailyPercentagesCriteraLoad AND PROCESS_ID =  @headerAllocationLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@DailyPercentagesCriteraLoad, '0', '0',@headerAllocationLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @DailyPercentagesCriteraLoad AND PROCESS_ID =  @DailyPercentagesCriteraLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@DailyPercentagesCriteraLoad, '0', '0',@DailyPercentagesCriteraLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @DailyPercentagesCriteraLoad AND PROCESS_ID =  @storeDelete)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@DailyPercentagesCriteraLoad, '0', '0',@storeDelete)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @DailyPercentagesCriteraLoad AND PROCESS_ID =  @StoreEligibilityCriteraLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@DailyPercentagesCriteraLoad, '0', '0',@StoreEligibilityCriteraLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @DailyPercentagesCriteraLoad AND PROCESS_ID =  @VSWCriteriaLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@DailyPercentagesCriteraLoad, '0', '0',@VSWCriteriaLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @DailyPercentagesCriteraLoad AND PROCESS_ID =  @HeaderReconcile)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@DailyPercentagesCriteraLoad, '0', '0',@HeaderReconcile)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @DailyPercentagesCriteraLoad AND PROCESS_ID =  @BatchComp)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@DailyPercentagesCriteraLoad, '0', '1',@BatchComp)   END

/* Store Delete */  
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @storeDelete AND PROCESS_ID =  @hierarchyLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@storeDelete, '0', '0',@hierarchyLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @storeDelete AND PROCESS_ID =  @storeLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@storeDelete, '0', '0',@storeLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @storeDelete AND PROCESS_ID =  @historyPlanLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@storeDelete, '0', '0',@historyPlanLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @storeDelete AND PROCESS_ID =  @colorCodeLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@storeDelete, '0', '0',@colorCodeLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @storeDelete AND PROCESS_ID =  @sizeCodeLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@storeDelete, '0', '0',@sizeCodeLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @storeDelete AND PROCESS_ID =  @headerLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@storeDelete, '0', '0',@headerLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @storeDelete AND PROCESS_ID =  @forecasting)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@storeDelete, '0', '0',@forecasting)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @storeDelete AND PROCESS_ID =  @rollup)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@storeDelete, '0', '0',@rollup)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @storeDelete AND PROCESS_ID =  @relieveIntransit)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@storeDelete, '0', '0',@relieveIntransit)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @storeDelete AND PROCESS_ID =  @purge)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@storeDelete, '0', '0',@purge)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @storeDelete AND PROCESS_ID =  @allocate)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@storeDelete, '0', '0',@allocate)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @storeDelete AND PROCESS_ID =  @sizeCurveLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@storeDelete, '0', '0',@sizeCurveLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @storeDelete AND PROCESS_ID =  @forecastBalancing)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@storeDelete, '0', '0',@forecastBalancing)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @storeDelete AND PROCESS_ID =  @reBuildIntransit)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@storeDelete, '0', '0',@reBuildIntransit)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @storeDelete AND PROCESS_ID =  @sizeConstraintsLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@storeDelete, '0', '0',@sizeConstraintsLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @storeDelete AND PROCESS_ID =  @sizeCurveGenerate)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@storeDelete, '0', '0',@sizeCurveGenerate)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @storeDelete AND PROCESS_ID =  @SizeDayToWeekSummary)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@storeDelete, '0', '0',@SizeDayToWeekSummary)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @storeDelete AND PROCESS_ID =  @buildPackCriteriaLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@storeDelete, '0', '0',@buildPackCriteriaLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @storeDelete AND PROCESS_ID =  @generateRelieveIntransit)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@storeDelete, '0', '0',@generateRelieveIntransit)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @storeDelete AND PROCESS_ID =  @determineHierarchyActivity)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@storeDelete, '0', '0',@determineHierarchyActivity)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @storeDelete AND PROCESS_ID =  @ChainSetPercentCriteriaLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@storeDelete, '0', '0',@ChainSetPercentCriteriaLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @storeDelete AND PROCESS_ID =  @hierarchyReclass)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@storeDelete, '0', '0',@hierarchyReclass)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @storeDelete AND PROCESS_ID =  @pushToBackStock)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@storeDelete, '0', '0',@pushToBackStock)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @storeDelete AND PROCESS_ID =  @headerAllocationLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@storeDelete, '0', '0',@headerAllocationLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @storeDelete AND PROCESS_ID =  @DailyPercentagesCriteraLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@storeDelete, '0', '0',@DailyPercentagesCriteraLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @storeDelete AND PROCESS_ID =  @storeDelete)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@storeDelete, '0', '0',@storeDelete)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @storeDelete AND PROCESS_ID =  @StoreEligibilityCriteraLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@storeDelete, '0', '0',@StoreEligibilityCriteraLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @storeDelete AND PROCESS_ID =  @VSWCriteriaLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@storeDelete, '0', '0',@VSWCriteriaLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @storeDelete AND PROCESS_ID =  @HeaderReconcile)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@storeDelete, '0', '0',@HeaderReconcile)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @storeDelete AND PROCESS_ID =  @BatchComp)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@storeDelete, '0', '0',@BatchComp)   END

/* Store Eligibility Load */  
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @StoreEligibilityCriteraLoad AND PROCESS_ID =  @hierarchyLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@StoreEligibilityCriteraLoad, '0', '1',@hierarchyLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @StoreEligibilityCriteraLoad AND PROCESS_ID =  @storeLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@StoreEligibilityCriteraLoad, '0', '1',@storeLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @StoreEligibilityCriteraLoad AND PROCESS_ID =  @historyPlanLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@StoreEligibilityCriteraLoad, '0', '0',@historyPlanLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @StoreEligibilityCriteraLoad AND PROCESS_ID =  @colorCodeLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@StoreEligibilityCriteraLoad, '0', '0',@colorCodeLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @StoreEligibilityCriteraLoad AND PROCESS_ID =  @sizeCodeLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@StoreEligibilityCriteraLoad, '0', '0',@sizeCodeLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @StoreEligibilityCriteraLoad AND PROCESS_ID =  @headerLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@StoreEligibilityCriteraLoad, '0', '0',@headerLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @StoreEligibilityCriteraLoad AND PROCESS_ID =  @forecasting)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@StoreEligibilityCriteraLoad, '0', '1',@forecasting)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @StoreEligibilityCriteraLoad AND PROCESS_ID =  @rollup)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@StoreEligibilityCriteraLoad, '0', '0',@rollup)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @StoreEligibilityCriteraLoad AND PROCESS_ID =  @relieveIntransit)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@StoreEligibilityCriteraLoad, '0', '0',@relieveIntransit)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @StoreEligibilityCriteraLoad AND PROCESS_ID =  @purge)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@StoreEligibilityCriteraLoad, '0', '0',@purge)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @StoreEligibilityCriteraLoad AND PROCESS_ID =  @allocate)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@StoreEligibilityCriteraLoad, '0', '1',@allocate)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @StoreEligibilityCriteraLoad AND PROCESS_ID =  @sizeCurveLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@StoreEligibilityCriteraLoad, '0', '0',@sizeCurveLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @StoreEligibilityCriteraLoad AND PROCESS_ID =  @forecastBalancing)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@StoreEligibilityCriteraLoad, '0', '1',@forecastBalancing)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @StoreEligibilityCriteraLoad AND PROCESS_ID =  @reBuildIntransit)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@StoreEligibilityCriteraLoad, '0', '1',@reBuildIntransit)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @StoreEligibilityCriteraLoad AND PROCESS_ID =  @sizeConstraintsLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@StoreEligibilityCriteraLoad, '0', '0',@sizeConstraintsLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @StoreEligibilityCriteraLoad AND PROCESS_ID =  @sizeCurveGenerate)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@StoreEligibilityCriteraLoad, '0', '0',@sizeCurveGenerate)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @StoreEligibilityCriteraLoad AND PROCESS_ID =  @SizeDayToWeekSummary)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@StoreEligibilityCriteraLoad, '0', '0',@SizeDayToWeekSummary)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @StoreEligibilityCriteraLoad AND PROCESS_ID =  @buildPackCriteriaLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@StoreEligibilityCriteraLoad, '0', '0',@buildPackCriteriaLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @StoreEligibilityCriteraLoad AND PROCESS_ID =  @generateRelieveIntransit)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@StoreEligibilityCriteraLoad, '0', '0',@generateRelieveIntransit)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @StoreEligibilityCriteraLoad AND PROCESS_ID =  @determineHierarchyActivity)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@StoreEligibilityCriteraLoad, '0', '0',@determineHierarchyActivity)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @StoreEligibilityCriteraLoad AND PROCESS_ID =  @ChainSetPercentCriteriaLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@StoreEligibilityCriteraLoad, '0', '0',@ChainSetPercentCriteriaLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @StoreEligibilityCriteraLoad AND PROCESS_ID =  @hierarchyReclass)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@StoreEligibilityCriteraLoad, '0', '0',@hierarchyReclass)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @StoreEligibilityCriteraLoad AND PROCESS_ID =  @pushToBackStock)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@StoreEligibilityCriteraLoad, '0', '0',@pushToBackStock)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @StoreEligibilityCriteraLoad AND PROCESS_ID =  @headerAllocationLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@StoreEligibilityCriteraLoad, '0', '0',@headerAllocationLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @StoreEligibilityCriteraLoad AND PROCESS_ID =  @DailyPercentagesCriteraLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@StoreEligibilityCriteraLoad, '0', '0',@DailyPercentagesCriteraLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @StoreEligibilityCriteraLoad AND PROCESS_ID =  @storeDelete)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@StoreEligibilityCriteraLoad, '0', '0',@storeDelete)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @StoreEligibilityCriteraLoad AND PROCESS_ID =  @StoreEligibilityCriteraLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@StoreEligibilityCriteraLoad, '0', '0',@StoreEligibilityCriteraLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @StoreEligibilityCriteraLoad AND PROCESS_ID =  @VSWCriteriaLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@StoreEligibilityCriteraLoad, '0', '0',@VSWCriteriaLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @StoreEligibilityCriteraLoad AND PROCESS_ID =  @HeaderReconcile)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@StoreEligibilityCriteraLoad, '0', '0',@HeaderReconcile)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @StoreEligibilityCriteraLoad AND PROCESS_ID =  @BatchComp)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@StoreEligibilityCriteraLoad, '0', '0',@BatchComp)   END

/* VSW Load */  
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @VSWCriteriaLoad AND PROCESS_ID =  @hierarchyLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@VSWCriteriaLoad, '0', '1',@hierarchyLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @VSWCriteriaLoad AND PROCESS_ID =  @storeLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@VSWCriteriaLoad, '0', '1',@storeLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @VSWCriteriaLoad AND PROCESS_ID =  @historyPlanLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@VSWCriteriaLoad, '0', '0',@historyPlanLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @VSWCriteriaLoad AND PROCESS_ID =  @colorCodeLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@VSWCriteriaLoad, '0', '0',@colorCodeLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @VSWCriteriaLoad AND PROCESS_ID =  @sizeCodeLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@VSWCriteriaLoad, '0', '0',@sizeCodeLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @VSWCriteriaLoad AND PROCESS_ID =  @headerLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@VSWCriteriaLoad, '0', '0',@headerLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @VSWCriteriaLoad AND PROCESS_ID =  @forecasting)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@VSWCriteriaLoad, '0', '0',@forecasting)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @VSWCriteriaLoad AND PROCESS_ID =  @rollup)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@VSWCriteriaLoad, '0', '0',@rollup)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @VSWCriteriaLoad AND PROCESS_ID =  @relieveIntransit)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@VSWCriteriaLoad, '0', '0',@relieveIntransit)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @VSWCriteriaLoad AND PROCESS_ID =  @purge)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@VSWCriteriaLoad, '0', '0',@purge)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @VSWCriteriaLoad AND PROCESS_ID =  @allocate)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@VSWCriteriaLoad, '0', '1',@allocate)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @VSWCriteriaLoad AND PROCESS_ID =  @sizeCurveLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@VSWCriteriaLoad, '0', '0',@sizeCurveLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @VSWCriteriaLoad AND PROCESS_ID =  @forecastBalancing)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@VSWCriteriaLoad, '0', '0',@forecastBalancing)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @VSWCriteriaLoad AND PROCESS_ID =  @reBuildIntransit)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@VSWCriteriaLoad, '0', '0',@reBuildIntransit)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @VSWCriteriaLoad AND PROCESS_ID =  @sizeConstraintsLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@VSWCriteriaLoad, '0', '0',@sizeConstraintsLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @VSWCriteriaLoad AND PROCESS_ID =  @sizeCurveGenerate)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@VSWCriteriaLoad, '0', '0',@sizeCurveGenerate)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @VSWCriteriaLoad AND PROCESS_ID =  @SizeDayToWeekSummary)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@VSWCriteriaLoad, '0', '0',@SizeDayToWeekSummary)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @VSWCriteriaLoad AND PROCESS_ID =  @buildPackCriteriaLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@VSWCriteriaLoad, '0', '0',@buildPackCriteriaLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @VSWCriteriaLoad AND PROCESS_ID =  @generateRelieveIntransit)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@VSWCriteriaLoad, '0', '0',@generateRelieveIntransit)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @VSWCriteriaLoad AND PROCESS_ID =  @determineHierarchyActivity)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@VSWCriteriaLoad, '0', '0',@determineHierarchyActivity)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @VSWCriteriaLoad AND PROCESS_ID =  @ChainSetPercentCriteriaLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@VSWCriteriaLoad, '0', '0',@ChainSetPercentCriteriaLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @VSWCriteriaLoad AND PROCESS_ID =  @hierarchyReclass)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@VSWCriteriaLoad, '0', '0',@hierarchyReclass)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @VSWCriteriaLoad AND PROCESS_ID =  @pushToBackStock)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@VSWCriteriaLoad, '0', '0',@pushToBackStock)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @VSWCriteriaLoad AND PROCESS_ID =  @headerAllocationLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@VSWCriteriaLoad, '0', '1',@headerAllocationLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @VSWCriteriaLoad AND PROCESS_ID =  @DailyPercentagesCriteraLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@VSWCriteriaLoad, '0', '0',@DailyPercentagesCriteraLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @VSWCriteriaLoad AND PROCESS_ID =  @storeDelete)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@VSWCriteriaLoad, '0', '0',@storeDelete)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @VSWCriteriaLoad AND PROCESS_ID =  @StoreEligibilityCriteraLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@VSWCriteriaLoad, '0', '0',@StoreEligibilityCriteraLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @VSWCriteriaLoad AND PROCESS_ID =  @VSWCriteriaLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@VSWCriteriaLoad, '0', '0',@VSWCriteriaLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @VSWCriteriaLoad AND PROCESS_ID =  @HeaderReconcile)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@VSWCriteriaLoad, '0', '0',@HeaderReconcile)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @VSWCriteriaLoad AND PROCESS_ID =  @BatchComp)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@VSWCriteriaLoad, '0', '0',@BatchComp)   END

/* Header Reconcile */  
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @HeaderReconcile AND PROCESS_ID =  @hierarchyLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@HeaderReconcile, '0', '0',@hierarchyLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @HeaderReconcile AND PROCESS_ID =  @storeLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@HeaderReconcile, '0', '0',@storeLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @HeaderReconcile AND PROCESS_ID =  @historyPlanLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@HeaderReconcile, '0', '0',@historyPlanLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @HeaderReconcile AND PROCESS_ID =  @colorCodeLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@HeaderReconcile, '0', '0',@colorCodeLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @HeaderReconcile AND PROCESS_ID =  @sizeCodeLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@HeaderReconcile, '0', '0',@sizeCodeLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @HeaderReconcile AND PROCESS_ID =  @headerLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@HeaderReconcile, '0', '1',@headerLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @HeaderReconcile AND PROCESS_ID =  @forecasting)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@HeaderReconcile, '0', '0',@forecasting)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @HeaderReconcile AND PROCESS_ID =  @rollup)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@HeaderReconcile, '0', '0',@rollup)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @HeaderReconcile AND PROCESS_ID =  @relieveIntransit)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@HeaderReconcile, '0', '0',@relieveIntransit)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @HeaderReconcile AND PROCESS_ID =  @purge)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@HeaderReconcile, '0', '1',@purge)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @HeaderReconcile AND PROCESS_ID =  @allocate)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@HeaderReconcile, '0', '1',@allocate)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @HeaderReconcile AND PROCESS_ID =  @sizeCurveLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@HeaderReconcile, '0', '0',@sizeCurveLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @HeaderReconcile AND PROCESS_ID =  @forecastBalancing)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@HeaderReconcile, '0', '0',@forecastBalancing)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @HeaderReconcile AND PROCESS_ID =  @reBuildIntransit)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@HeaderReconcile, '0', '0',@reBuildIntransit)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @HeaderReconcile AND PROCESS_ID =  @sizeConstraintsLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@HeaderReconcile, '0', '0',@sizeConstraintsLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @HeaderReconcile AND PROCESS_ID =  @sizeCurveGenerate)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@HeaderReconcile, '0', '0',@sizeCurveGenerate)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @HeaderReconcile AND PROCESS_ID =  @SizeDayToWeekSummary)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@HeaderReconcile, '0', '0',@SizeDayToWeekSummary)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @HeaderReconcile AND PROCESS_ID =  @buildPackCriteriaLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@HeaderReconcile, '0', '0',@buildPackCriteriaLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @HeaderReconcile AND PROCESS_ID =  @generateRelieveIntransit)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@HeaderReconcile, '0', '0',@generateRelieveIntransit)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @HeaderReconcile AND PROCESS_ID =  @determineHierarchyActivity)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@HeaderReconcile, '0', '0',@determineHierarchyActivity)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @HeaderReconcile AND PROCESS_ID =  @ChainSetPercentCriteriaLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@HeaderReconcile, '0', '0',@ChainSetPercentCriteriaLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @HeaderReconcile AND PROCESS_ID =  @hierarchyReclass)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@HeaderReconcile, '0', '1',@hierarchyReclass)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @HeaderReconcile AND PROCESS_ID =  @pushToBackStock)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@HeaderReconcile, '0', '1',@pushToBackStock)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @HeaderReconcile AND PROCESS_ID =  @headerAllocationLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@HeaderReconcile, '0', '1',@headerAllocationLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @HeaderReconcile AND PROCESS_ID =  @DailyPercentagesCriteraLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@HeaderReconcile, '0', '0',@DailyPercentagesCriteraLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @HeaderReconcile AND PROCESS_ID =  @storeDelete)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@HeaderReconcile, '0', '0',@storeDelete)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @HeaderReconcile AND PROCESS_ID =  @StoreEligibilityCriteraLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@HeaderReconcile, '0', '0',@StoreEligibilityCriteraLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @HeaderReconcile AND PROCESS_ID =  @VSWCriteriaLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@HeaderReconcile, '0', '0',@VSWCriteriaLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @HeaderReconcile AND PROCESS_ID =  @HeaderReconcile)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@HeaderReconcile, '0', '1',@HeaderReconcile)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @HeaderReconcile AND PROCESS_ID =  @BatchComp)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@HeaderReconcile, '0', '0',@BatchComp)   END

/* Batch Comp */  
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @BatchComp AND PROCESS_ID =  @hierarchyLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@BatchComp, '0', '0',@hierarchyLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @BatchComp AND PROCESS_ID =  @storeLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@BatchComp, '0', '0',@storeLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @BatchComp AND PROCESS_ID =  @historyPlanLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@BatchComp, '0', '1',@historyPlanLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @BatchComp AND PROCESS_ID =  @colorCodeLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@BatchComp, '0', '0',@colorCodeLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @BatchComp AND PROCESS_ID =  @sizeCodeLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@BatchComp, '0', '0',@sizeCodeLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @BatchComp AND PROCESS_ID =  @headerLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@BatchComp, '0', '0',@headerLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @BatchComp AND PROCESS_ID =  @forecasting)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@BatchComp, '0', '1',@forecasting)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @BatchComp AND PROCESS_ID =  @rollup)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@BatchComp, '0', '1',@rollup)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @BatchComp AND PROCESS_ID =  @relieveIntransit)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@BatchComp, '0', '0',@relieveIntransit)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @BatchComp AND PROCESS_ID =  @purge)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@BatchComp, '0', '1',@purge)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @BatchComp AND PROCESS_ID =  @allocate)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@BatchComp, '0', '0',@allocate)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @BatchComp AND PROCESS_ID =  @sizeCurveLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@BatchComp, '0', '0',@sizeCurveLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @BatchComp AND PROCESS_ID =  @forecastBalancing)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@BatchComp, '0', '1',@forecastBalancing)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @BatchComp AND PROCESS_ID =  @reBuildIntransit)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@BatchComp, '0', '1',@reBuildIntransit)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @BatchComp AND PROCESS_ID =  @sizeConstraintsLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@BatchComp, '0', '0',@sizeConstraintsLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @BatchComp AND PROCESS_ID =  @sizeCurveGenerate)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@BatchComp, '0', '0',@sizeCurveGenerate)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @BatchComp AND PROCESS_ID =  @SizeDayToWeekSummary)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@BatchComp, '0', '0',@SizeDayToWeekSummary)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @BatchComp AND PROCESS_ID =  @buildPackCriteriaLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@BatchComp, '0', '0',@buildPackCriteriaLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @BatchComp AND PROCESS_ID =  @generateRelieveIntransit)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@BatchComp, '0', '0',@generateRelieveIntransit)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @BatchComp AND PROCESS_ID =  @determineHierarchyActivity)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@BatchComp, '0', '0',@determineHierarchyActivity)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @BatchComp AND PROCESS_ID =  @ChainSetPercentCriteriaLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@BatchComp, '0', '0',@ChainSetPercentCriteriaLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @BatchComp AND PROCESS_ID =  @hierarchyReclass)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@BatchComp, '0', '0',@hierarchyReclass)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @BatchComp AND PROCESS_ID =  @pushToBackStock)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@BatchComp, '0', '0',@pushToBackStock)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @BatchComp AND PROCESS_ID =  @headerAllocationLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@BatchComp, '0', '0',@headerAllocationLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @BatchComp AND PROCESS_ID =  @DailyPercentagesCriteraLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@BatchComp, '0', '1',@DailyPercentagesCriteraLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @BatchComp AND PROCESS_ID =  @storeDelete)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@BatchComp, '0', '0',@storeDelete)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @BatchComp AND PROCESS_ID =  @StoreEligibilityCriteraLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@BatchComp, '0', '0',@StoreEligibilityCriteraLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @BatchComp AND PROCESS_ID =  @VSWCriteriaLoad)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@BatchComp, '0', '0',@VSWCriteriaLoad)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @BatchComp AND PROCESS_ID =  @HeaderReconcile)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@BatchComp, '0', '0',@HeaderReconcile)   END
IF NOT EXISTS(SELECT * FROM dbo.API_PROCESS_CONTROL_RULES where API_ID = @BatchComp AND PROCESS_ID =  @BatchComp)  BEGIN   INSERT INTO dbo.API_PROCESS_CONTROL_RULES (API_ID, PROCESS_MUST_BE_RUNNING_IND, PROCESS_CANNOT_BE_RUNNING_IND, PROCESS_ID) VALUES (@BatchComp, '0', '0',@BatchComp)   END

/* Next API */
/* END TT#1644-VSuart-Process Control-MID */
