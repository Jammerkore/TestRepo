CREATE PROCEDURE [dbo].[SP_MID_ST_HIS_WK3_READ]
@dt MID_ST_HIS_WK_READ_TYPE READONLY,
@Rollup CHAR(1) = NULL
AS
SET NOCOUNT ON
DECLARE @Tables INT,
        @Loop INT,
        @HN_TYPE INT,
        @HN_RID INT,
        @HN_MOD INT,
        @ROLL_OPTION INT,
        @LoopCount INT,
        @NextLoopCount INT
SET @Tables = 10
SELECT DISTINCT @HN_TYPE = ph.PH_TYPE, @HN_RID = t.HN_RID, @HN_MOD = t.HN_RID % @Tables,
                @ROLL_OPTION = COALESCE(ph.HISTORY_ROLL_OPTION, 800251)
        FROM HIERARCHY_NODE hn (NOLOCK)
        JOIN PRODUCT_HIERARCHY ph (NOLOCK) ON ph.PH_RID = hn.HOME_PH_RID
        JOIN @dt t on t.HN_RID = hn.HN_RID
IF @HN_TYPE = 800001 and @ROLL_OPTION = 800251 -- Realtime
   BEGIN
   SET @LoopCount = 0
   CREATE TABLE #TREE (LOOPCOUNT INT NOT NULL, PARENT_HN_RID INT NOT NULL, HOME_PH_RID INT, PH_TYPE INT, CHILD_HN_RID INT NOT NULL, CHILD_HN_MOD INT NOT NULL)
   -- insert the children of the node into the temp table
   INSERT #TREE (LOOPCOUNT, PARENT_HN_RID, HOME_PH_RID, PH_TYPE, CHILD_HN_RID, CHILD_HN_MOD) 
       select @LoopCount as LOOPCOUNT, @HN_RID as PARENT_HN_RID, hn.HOME_PH_RID, ph.PH_TYPE, hnj.HN_RID, hnj.HN_RID % @Tables
         from HIER_NODE_JOIN hnj (NOLOCK)
           JOIN HIERARCHY_NODE hn (NOLOCK) ON hn.HN_RID = hnj.HN_RID
           JOIN PRODUCT_HIERARCHY ph (NOLOCK) ON ph.PH_RID = hn.HOME_PH_RID
       where @HN_RID = hnj.PARENT_HN_RID
   SET @Loop = @@ROWCOUNT
   -- chase all paths until you get the main hierarchy (type 800000) or the lowest leaf
   SET @NextLoopCount = @LoopCount + 1
   WHILE @Loop > 0
   BEGIN
      INSERT #TREE
        select @NextLoopCount as LOOPCOUNT, hnj.PARENT_HN_RID, hn.HOME_PH_RID, ph.PH_TYPE, hnj.HN_RID, hnj.HN_RID % @Tables
          from HIER_NODE_JOIN hnj (NOLOCK)
            JOIN HIERARCHY_NODE hn (NOLOCK) ON hn.HN_RID = hnj.HN_RID
            JOIN PRODUCT_HIERARCHY ph (NOLOCK) ON ph.PH_RID = hn.HOME_PH_RID
            JOIN #TREE t ON hnj.PARENT_HN_RID = t.CHILD_HN_RID
        WHERE t.LOOPCOUNT =  @LoopCount AND t.PH_TYPE <> 800000
      SET @Loop = @@ROWCOUNT
      SET @LoopCount = @LoopCount + 1
      SET @NextLoopCount = @LoopCount + 1
   END
   -- join with dates from xml selecting only nodes from the main hierarchy or lowest leaf alternates
   SELECT * 
     INTO #TEMP2
     FROM #TREE
     CROSS JOIN @dt
   where LOOPCOUNT = @LoopCount - 1
	     or PH_TYPE = 800000
       SELECT @HN_RID AS HN_RID, 1 AS FV_RID, ST_RID, shw.TIME_ID, COALESCE(SUM(SALES), 0) SALES, COALESCE(SUM(SALES_REG), 0) SALES_REG, 
          COALESCE(SUM(SALES_PROMO), 0) SALES_PROMO, COALESCE(SUM(SALES_MKDN), 0) SALES_MKDN, COALESCE(SUM(STOCK), 0) STOCK, 
          COALESCE(SUM(STOCK_REG), 0) STOCK_REG, COALESCE(SUM(STOCK_MKDN), 0) STOCK_MKDN, COALESCE(SUM(IN_STOCK_SALES), 0) IN_STOCK_SALES, 
          COALESCE(SUM(IN_STOCK_SALES_REG), 0) IN_STOCK_SALES_REG, COALESCE(SUM(IN_STOCK_SALES_PROMO), 0) IN_STOCK_SALES_PROMO, 
          COALESCE(SUM(IN_STOCK_SALES_MKDN), 0) IN_STOCK_SALES_MKDN, COALESCE(SUM(ACCUM_SELL_THRU_SALES), 0) ACCUM_SELL_THRU_SALES, 
          COALESCE(SUM(ACCUM_SELL_THRU_STOCK), 0) ACCUM_SELL_THRU_STOCK, COALESCE(SUM(DAYS_IN_STOCK), 0) DAYS_IN_STOCK, 
          COALESCE(SUM(RECEIVED_STOCK), 0) RECEIVED_STOCK, 
          0 AS SALES_LOCK, 0 AS SALES_REG_LOCK, 0 AS SALES_PROMO_LOCK, 0 AS SALES_MKDN_LOCK, 0 AS STOCK_LOCK, 
          0 AS STOCK_REG_LOCK, 0 AS STOCK_MKDN_LOCK, 0 AS IN_STOCK_SALES_LOCK, 0 AS IN_STOCK_SALES_REG_LOCK, 
          0 AS IN_STOCK_SALES_PROMO_LOCK, 0 AS IN_STOCK_SALES_MKDN_LOCK, 0 AS ACCUM_SELL_THRU_SALES_LOCK, 
          0 AS ACCUM_SELL_THRU_STOCK_LOCK, 0 AS DAYS_IN_STOCK_LOCK, 0 AS RECEIVED_STOCK_LOCK
		FROM #TEMP2 t
		JOIN VW_STORE_HISTORY_WEEK shw (NOLOCK) ON t.CHILD_HN_RID = shw.HN_RID AND shw.ST_RID > 0
			AND shw.TIME_ID = t.TIME_ID AND t.CHILD_HN_MOD = shw.HN_MOD 
		GROUP BY ST_RID, shw.TIME_ID
		OPTION (MAXDOP 1)
	RETURN 0
	END
-- Process variables
-- GET ALL THE ROWS
IF @Rollup = 'Y'
       SELECT shw.HN_RID, 1 AS FV_RID, shw.ST_RID, COALESCE(SUM(shw.SALES), 0) SALES, COALESCE(SUM(shw.SALES_REG), 0) SALES_REG, 
          COALESCE(SUM(shw.SALES_PROMO), 0) SALES_PROMO, COALESCE(SUM(shw.SALES_MKDN), 0) SALES_MKDN, 
          COALESCE(SUM(shw.STOCK), 0) STOCK, COALESCE(SUM(shw.STOCK_REG), 0) STOCK_REG, COALESCE(SUM(shw.STOCK_MKDN), 0) STOCK_MKDN, 
          COALESCE(SUM(shw.IN_STOCK_SALES), 0) IN_STOCK_SALES, COALESCE(SUM(shw.IN_STOCK_SALES_REG), 0) IN_STOCK_SALES_REG, 
          COALESCE(SUM(shw.IN_STOCK_SALES_PROMO), 0) IN_STOCK_SALES_PROMO, COALESCE(SUM(shw.IN_STOCK_SALES_MKDN), 0) IN_STOCK_SALES_MKDN, 
          COALESCE(SUM(shw.ACCUM_SELL_THRU_SALES), 0) ACCUM_SELL_THRU_SALES, COALESCE(SUM(shw.ACCUM_SELL_THRU_STOCK), 0) ACCUM_SELL_THRU_STOCK, 
          COALESCE(SUM(shw.DAYS_IN_STOCK), 0) DAYS_IN_STOCK, COALESCE(SUM(shw.RECEIVED_STOCK), 0) RECEIVED_STOCK, 
          
          0 AS SALES_LOCK, 0 AS SALES_REG_LOCK, 0 AS SALES_PROMO_LOCK, 0 AS SALES_MKDN_LOCK, 
          0 AS STOCK_LOCK, 0 AS STOCK_REG_LOCK, 0 AS STOCK_MKDN_LOCK, 0 AS IN_STOCK_SALES_LOCK, 
          0 AS IN_STOCK_SALES_REG_LOCK, 0 AS IN_STOCK_SALES_PROMO_LOCK, 0 AS IN_STOCK_SALES_MKDN_LOCK, 
          0 AS ACCUM_SELL_THRU_SALES_LOCK, 0 AS ACCUM_SELL_THRU_STOCK_LOCK, 0 AS DAYS_IN_STOCK_LOCK, 
          0 AS RECEIVED_STOCK_LOCK
        FROM @dt xml
	JOIN VW_STORE_HISTORY_WEEK shw (NOLOCK) ON xml.HN_RID = shw.HN_RID
		AND shw.TIME_ID = xml.TIME_ID
		AND shw.HN_MOD = xml.HN_MOD
	GROUP BY shw.HN_RID, shw.ST_RID
	ORDER BY shw.ST_RID
	OPTION (MAXDOP 1)
ELSE
       SELECT shw.HN_RID, 1 AS FV_RID, shw.TIME_ID, shw.ST_RID, COALESCE(shw.SALES, 0) SALES, 
          COALESCE(shw.SALES_REG, 0) SALES_REG, COALESCE(shw.SALES_PROMO, 0) SALES_PROMO, COALESCE(shw.SALES_MKDN, 0) SALES_MKDN, 
          COALESCE(shw.STOCK, 0) STOCK, COALESCE(shw.STOCK_REG, 0) STOCK_REG, COALESCE(shw.STOCK_MKDN, 0) STOCK_MKDN, 
          COALESCE(shw.IN_STOCK_SALES, 0) IN_STOCK_SALES, COALESCE(shw.IN_STOCK_SALES_REG, 0) IN_STOCK_SALES_REG, 
          COALESCE(shw.IN_STOCK_SALES_PROMO, 0) IN_STOCK_SALES_PROMO, COALESCE(shw.IN_STOCK_SALES_MKDN, 0) IN_STOCK_SALES_MKDN, 
          COALESCE(shw.ACCUM_SELL_THRU_SALES, 0) ACCUM_SELL_THRU_SALES, COALESCE(shw.ACCUM_SELL_THRU_STOCK, 0) ACCUM_SELL_THRU_STOCK, 
          COALESCE(shw.DAYS_IN_STOCK, 0) DAYS_IN_STOCK, COALESCE(shw.RECEIVED_STOCK, 0) RECEIVED_STOCK, 
          
          0 AS SALES_LOCK, 0 AS SALES_REG_LOCK, 0 AS SALES_PROMO_LOCK, 0 AS SALES_MKDN_LOCK, 
          0 AS STOCK_LOCK, 0 AS STOCK_REG_LOCK, 0 AS STOCK_MKDN_LOCK, 0 AS IN_STOCK_SALES_LOCK, 
          0 AS IN_STOCK_SALES_REG_LOCK, 0 AS IN_STOCK_SALES_PROMO_LOCK, 0 AS IN_STOCK_SALES_MKDN_LOCK, 
          0 AS ACCUM_SELL_THRU_SALES_LOCK, 0 AS ACCUM_SELL_THRU_STOCK_LOCK, 0 AS DAYS_IN_STOCK_LOCK, 
          0 AS RECEIVED_STOCK_LOCK
		FROM @dt xml
	JOIN STORE_HISTORY_WEEK3 shw (NOLOCK) ON xml.HN_RID = shw.HN_RID AND shw.HN_MOD = xml.HN_MOD
		AND shw.TIME_ID = xml.TIME_ID
		AND shw.HN_MOD = xml.HN_MOD
	OPTION (MAXDOP 1)


if (select object_id('tempdb.dbo.#TEMP2')) > 0 DROP TABLE #TEMP2




GO


