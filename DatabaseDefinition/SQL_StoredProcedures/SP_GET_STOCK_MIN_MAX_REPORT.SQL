CREATE PROCEDURE [dbo].[SP_GET_STOCK_MIN_MAX_REPORT] 
	@SELECTED_NODE_RID INT,
	@LOWER_LEVEL INT
AS
BEGIN
	DECLARE @SELECTED_NODE_LEVEL AS INT

	SELECT @SELECTED_NODE_LEVEL = HOME_LEVEL
	FROM HIERARCHY_NODE
	WHERE HN_RID = @SELECTED_NODE_RID

	DECLARE @MAX_PHL_SEQUENCE AS INT

	SELECT @MAX_PHL_SEQUENCE = MAX(PHL_SEQUENCE)
	FROM PRODUCT_HIERARCHY_LEVELS

	IF (@LOWER_LEVEL = 0)
	BEGIN
		SELECT @LOWER_LEVEL = @MAX_PHL_SEQUENCE
	END

	DECLARE @LEVEL AS INT

	--SELECT @LEVEL = (@LOWER_LEVEL -  @SELECTED_NODE_LEVEL)+1
	SELECT @LEVEL = @LOWER_LEVEL - 1

	CREATE TABLE #TEMP (
		PARENT_HN_RID INT,
		HN_RID INT,
		BN_ID VARCHAR(356) COLLATE Latin1_General_CS_AS,
		BN_NAME VARCHAR(50) COLLATE Latin1_General_CS_AS,
		BN_DESCRIPTION VARCHAR(250) COLLATE Latin1_General_CS_AS
		)

	INSERT #TEMP (
		PARENT_HN_RID,
		HN_RID,
		BN_ID,
		BN_NAME,
		BN_DESCRIPTION
		)
	EXEC SP_GET_ALL_DESCENDANTS_BY_LEVEL_REPORT @SELECTED_NODE_RID,
		@LEVEL

	SELECT 'PageHeader',
	    -- Begin TT#5382 - JSmith - Product descriptor not displayed when the Store Eligibility is set at the color level
		[dbo].[UDF_MID_GET_NODE_DISPLAY](sm.HN_RID) AS [BN_ID],
		--CASE 
		--	WHEN phl.PHL_DISPLAY_OPTION_ID = 800701
		--		THEN RTRIM(hn.BN_ID)
		--	WHEN phl.PHL_DISPLAY_OPTION_ID = 800702
		--		THEN RTRIM(hn.BN_DESCRIPTION)
		--	WHEN phl.PHL_DISPLAY_OPTION_ID = 800703
		--		THEN RTRIM(hn.BN_ID) + ' [' + RTRIM(hn.BN_NAME) + ']'
		--	WHEN phl.PHL_DISPLAY_OPTION_ID = 800704
		--		THEN RTRIM(hn.BN_ID) + ' [' + RTRIM(hn.BN_DESCRIPTION) + ']'
		--	WHEN phl.PHL_DISPLAY_OPTION_ID = 800705
		--		THEN RTRIM(hn.BN_NAME) + ' [' + RTRIM(hn.BN_DESCRIPTION) + ']'
		--	WHEN phl.PHL_DISPLAY_OPTION_ID = 800706
		--		THEN RTRIM(hn.BN_ID) + ' [' + RTRIM(hn.BN_NAME) + ']' + ' [' + RTRIM(hn.BN_DESCRIPTION) + ']'
		--	ELSE RTRIM(hn.BN_ID) + ' [' + RTRIM(hn.BN_NAME) + ']'
		--	END AS [BN_ID],
		-- End TT#5382 - JSmith - Product descriptor not displayed when the Store Eligibility is set at the color level
		sgl.SGL_ID,
		--	 CASE WHEN sm.BOUNDARY = -1 THEN NULL
		--            ELSE  sm.BOUNDARY
		--	 END AS BOUNDARY ,
		sg.GRADE_CODE AS [BOUNDARY],
		CASE 
			WHEN cdr.CDR_RID > 1
				AND CDR_RANGE_TYPE_ID = 800858
				THEN ap1.TEXT_VALUE + ' ' + ap2.TEXT_VALUE + '(s) ' + CONVERT(VARCHAR(3), cdr.CDR_START) + '-' + CONVERT(VARCHAR(3), cdr.CDR_END)
			WHEN cdr.CDR_RID > 1
				AND CDR_RANGE_TYPE_ID = 800857
				THEN 'Weeks ' + SUBSTRING(CONVERT(VARCHAR(6), fw.FISCAL_WEEK), 5, 6) + '/' + SUBSTRING(CONVERT(VARCHAR(6), fw.FISCAL_WEEK), 1, 4) + ' - ' + SUBSTRING(CONVERT(VARCHAR(6), fw1.FISCAL_WEEK), 5, 6) + '/' + SUBSTRING(CONVERT(VARCHAR(6), fw1.FISCAL_WEEK), 1, 4)
			ELSE '[Defaults]'
			END AS [DateRange],
		sm.MIN_STOCK,
		sm.MAX_STOCK
	FROM NODE_STOCK_MIN_MAX sm
	INNER JOIN HIERARCHY_NODE hen ON hen.HN_RID = sm.HN_RID
	LEFT OUTER JOIN PRODUCT_HIERARCHY_LEVELS phl ON phl.PHL_SEQUENCE = hen.HOME_LEVEL
	INNER JOIN STORE_GROUP_LEVEL sgl ON sgl.SGL_RID = sm.SGL_RID
	INNER JOIN CALENDAR_DATE_RANGE cdr ON cdr.CDR_RID = sm.CDR_RID
	LEFT OUTER JOIN FISCAL_WEEKS fw ON fw.FIRST_DAY_OF_WEEK = cdr.CDR_START
	LEFT OUTER JOIN FISCAL_WEEKS fw1 ON fw1.FIRST_DAY_OF_WEEK = cdr.CDR_END
	INNER JOIN APPLICATION_TEXT ap1 ON ap1.TEXT_CODE = cdr.CDR_RANGE_TYPE_ID
	INNER JOIN APPLICATION_TEXT ap2 ON ap2.TEXT_CODE = cdr.CDR_DATE_TYPE_ID
	LEFT OUTER JOIN (
		SELECT sg.BOUNDARY,
			sg.GRADE_CODE
		FROM STORE_GRADES sg
		WHERE sg.GRADE_CODE IS NOT NULL
		GROUP BY sg.BOUNDARY,
			sg.GRADE_CODE
		) sg ON sg.BOUNDARY = sm.BOUNDARY
		AND sm.BOUNDARY IS NOT NULL
		AND sm.BOUNDARY != - 1
	INNER JOIN (
		SELECT PARENT_HN_RID,
			HN_RID,
			BN_ID,
			BN_NAME,
			BN_DESCRIPTION
		FROM #TEMP
		) hn ON hn.HN_RID = sm.HN_RID
	ORDER BY hn.PARENT_HN_RID,
		hn.HN_RID,
		sg.GRADE_CODE

	IF (
			SELECT object_id('tempdb.dbo.#TEMP')
			) > 0
		DROP TABLE #TEMP
END
GO


