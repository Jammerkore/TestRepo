CREATE PROCEDURE [dbo].[SP_GET_FORECAST_AUDIT_OTSFORECAST_REPORT] 
	@SELECTED_NODE_RID INT,
	@LOWER_LEVEL INT,
	@FV_RID INT,
	@USER_RID INT,
	@TIME_RANGE_BEGIN VARCHAR(50),
	@TIME_RANGE_END VARCHAR(50),
	@USER_GROUP_RID INT
AS
BEGIN
	DECLARE @SELECTED_NODE_LEVEL AS INT

	SELECT @SELECTED_NODE_LEVEL = HOME_LEVEL
	FROM HIERARCHY_NODE
	WHERE HN_RID = @SELECTED_NODE_RID

	DECLARE @MAX_PHL_SEQUENCE AS INT

	SELECT @MAX_PHL_SEQUENCE = MAX(PHL_SEQUENCE)
	FROM PRODUCT_HIERARCHY_LEVELS

	IF (@LOWER_LEVEL = 0)
	BEGIN
		SELECT @LOWER_LEVEL = @MAX_PHL_SEQUENCE
	END

	DECLARE @LEVEL AS INT

	SELECT @LEVEL = (@LOWER_LEVEL - @SELECTED_NODE_LEVEL) + 1

	CREATE TABLE #TEMP (
		PARENT_HN_RID INT,
		HN_RID INT,
		BN_ID CHAR(356) COLLATE Latin1_General_CS_AS,
		BN_NAME CHAR(50) COLLATE Latin1_General_CS_AS,
		BN_DESCRIPTION CHAR(250) COLLATE Latin1_General_CS_AS
		)

	INSERT #TEMP (
		PARENT_HN_RID,
		HN_RID,
		BN_ID,
		BN_NAME,
		BN_DESCRIPTION
		)
	EXEC SP_GET_ALL_DESCENDANTS_BY_LEVEL_REPORT @SELECTED_NODE_RID,
		@LEVEL

	SELECT hyn.HOME_PH_RID,
		hn.PARENT_HN_RID,
		hn.HN_RID,
		hn.BN_ID,
		hn.BN_NAME,
		-- Begin TT#5382 - JSmith - Product descriptor not displayed when the Store Eligibility is set at the color level
		dbo.UDF_MID_GET_NODE_DISPLAY (hn.HN_RID) AS [DISPLAY_TEXT],
		--CASE 
		--	WHEN phl.PHL_DISPLAY_OPTION_ID = 800701
		--		THEN hn.BN_ID
		--	WHEN phl.PHL_DISPLAY_OPTION_ID = 800702
		--		THEN hn.BN_DESCRIPTION
		--	WHEN phl.PHL_DISPLAY_OPTION_ID = 800703
		--		THEN hn.BN_ID + '[' + hn.BN_NAME + ']'
		--	WHEN phl.PHL_DISPLAY_OPTION_ID = 800704
		--		THEN hn.BN_ID + '[' + hn.BN_DESCRIPTION + ']'
		--	WHEN phl.PHL_DISPLAY_OPTION_ID = 800705
		--		THEN hn.BN_NAME + '[' + hn.BN_DESCRIPTION + ']'
		--	WHEN phl.PHL_DISPLAY_OPTION_ID = 800706
		--		THEN hn.BN_ID + '[' + hn.BN_NAME + ']' + '[' + hn.BN_DESCRIPTION + ']'
		--	ELSE hn.BN_ID + '[' + hn.BN_NAME + ']'
		--	END AS [DISPLAY_TEXT],
		-- End TT#5382 - JSmith - Product descriptor not displayed when the Store Eligibility is set at the color level
		af.MethodType,
		af.StoreVersion,
		af.ChainVersion,
		af.TIME_RANGE_BEGIN,
		af.TIME_RANGE_END,
		af.StockMinMax,
		af.Average,
		af.USER_NAME,
		convert(VARCHAR(50), af.PROCESS_DATE_TIME) AS [PROCESS_DATE_TIME],
		af.MethodName,
		af.AttributeSet,
		af.ForecastMethod
	FROM HIERARCHY_NODE hyn
	LEFT OUTER JOIN PRODUCT_HIERARCHY_LEVELS phl ON phl.PHL_SEQUENCE = hyn.HOME_LEVEL
	INNER JOIN (
		SELECT PARENT_HN_RID,
			HN_RID,
			BN_ID,
			BN_NAME,
			BN_DESCRIPTION
		FROM #TEMP
		) hn ON hn.HN_RID = hyn.HN_RID
	INNER JOIN (
		SELECT af.HN_RID,
			apt.TEXT_VALUE AS [MethodType],
			fvs.DESCRIPTION AS [StoreVersion],
			fvc.DESCRIPTION AS [ChainVersion],
			'Week ' + SUBSTRING(CONVERT(VARCHAR(20), af.TIME_RANGE_BEGIN), 5, 6) + '/' + SUBSTRING(CONVERT(VARCHAR(20), af.TIME_RANGE_BEGIN), 1, 4) AS [TIME_RANGE_BEGIN],
			'Week ' + SUBSTRING(CONVERT(VARCHAR(20), af.TIME_RANGE_END), 5, 6) + '/' + SUBSTRING(CONVERT(VARCHAR(20), af.TIME_RANGE_END), 1, 4) AS [TIME_RANGE_END],
			CASE 
				WHEN aofs.STOCK_MIN_MAX = 1
					THEN 'Yes'
				ELSE 'No'
				END AS [StockMinMax],
			NULL AS [Average],
			au.USER_NAME,
			af.PROCESS_DATE_TIME,
			af.METHOD_NAME AS [MethodName],
			aofs.SET_NAME AS [AttributeSet],
			FORECAST_METHOD_TYPE AS [ForecastMethod]
		FROM AUDIT_FORECAST af
		INNER JOIN (
			SELECT USER_RID
			FROM APPLICATION_USER
			WHERE USER_RID = @USER_RID
				AND @USER_RID <> 0
			
			UNION
			
			SELECT USER_RID
			FROM USER_GROUP_JOIN
			WHERE GROUP_RID = @USER_GROUP_RID
				AND @USER_GROUP_RID <> 0
				AND @USER_RID = 0
			) ug ON af.USER_RID = ug.USER_RID
		INNER JOIN APPLICATION_TEXT apt ON apt.TEXT_CODE = af.METHOD_TYPE
		INNER JOIN FORECAST_VERSION fvs ON af.STORE_FV_RID = fvs.FV_RID
			AND (
				(
					@FV_RID > 0
					AND fvs.FV_RID = @FV_RID
					)
				OR @FV_RID <= 0
				)
		INNER JOIN FORECAST_VERSION fvc ON af.CHAIN_FV_RID = fvc.FV_RID
			AND (
				(
					@FV_RID > 0
					AND fvc.FV_RID = @FV_RID
					)
				OR @FV_RID <= 0
				)
		INNER JOIN AUDIT_OTS_FORECAST_SET aofs ON af.AUDIT_FORECAST_RID = aofs.AUDIT_FORECAST_RID
		INNER JOIN APPLICATION_USER au ON au.USER_RID = af.USER_RID
		WHERE (
				(
					@TIME_RANGE_BEGIN <> ''
					AND af.TIME_RANGE_BEGIN >= @TIME_RANGE_BEGIN
					)
				OR @TIME_RANGE_BEGIN = ''
				)
			AND (
				(
					@TIME_RANGE_END <> ''
					AND af.TIME_RANGE_END <= @TIME_RANGE_END
					)
				OR @TIME_RANGE_END = ''
				)
		
		UNION
		
		SELECT NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL AS [Average],
			NULL,
			NULL,
			NULL,
			NULL,
			NULL
		FROM AUDIT_FORECAST af
		INNER JOIN APPLICATION_TEXT apt ON apt.TEXT_CODE = af.METHOD_TYPE
		INNER JOIN AUDIT_MODIFY_SALES ams ON ams.AUDIT_FORECAST_RID = af.AUDIT_FORECAST_RID
		INNER JOIN APPLICATION_USER au ON au.USER_RID = af.USER_RID
		INNER JOIN AUDIT_MODIFY_SALES_MATRIX amsm ON amsm.AUDIT_FORECAST_RID = af.AUDIT_FORECAST_RID
		INNER JOIN STORE_GROUP_LEVEL sgl ON sgl.SGL_RID = amsm.SGL_RID
		LEFT OUTER JOIN (
			SELECT AUDIT_FORECAST_RID,
				SUM(NUMBER_OF_STORES) NUMBER_OF_STORES,
				ap.TEXT_VALUE [MATRIX_RULE],
				SUM(MATRIX_RULE_QUANTITY) MATRIX_RULE_QUANTITY
			FROM AUDIT_MODIFY_SALES_MATRIX a
			INNER JOIN APPLICATION_TEXT ap ON ap.TEXT_CODE = a.MATRIX_RULE
			WHERE SELL_THRU > 200
			GROUP BY AUDIT_FORECAST_RID,
				ap.TEXT_VALUE
			) amsm1 ON amsm1.AUDIT_FORECAST_RID = af.AUDIT_FORECAST_RID
		LEFT OUTER JOIN (
			SELECT AUDIT_FORECAST_RID,
				SUM(NUMBER_OF_STORES) NUMBER_OF_STORES,
				ap.TEXT_VALUE [MATRIX_RULE],
				SUM(MATRIX_RULE_QUANTITY) MATRIX_RULE_QUANTITY
			FROM AUDIT_MODIFY_SALES_MATRIX a
			INNER JOIN APPLICATION_TEXT ap ON ap.TEXT_CODE = a.MATRIX_RULE
			WHERE SELL_THRU BETWEEN 51
					AND 200
			GROUP BY AUDIT_FORECAST_RID,
				ap.TEXT_VALUE
			) amsm2 ON amsm2.AUDIT_FORECAST_RID = af.AUDIT_FORECAST_RID
		LEFT OUTER JOIN (
			SELECT AUDIT_FORECAST_RID,
				SUM(NUMBER_OF_STORES) NUMBER_OF_STORES,
				ap.TEXT_VALUE [MATRIX_RULE],
				SUM(MATRIX_RULE_QUANTITY) MATRIX_RULE_QUANTITY
			FROM AUDIT_MODIFY_SALES_MATRIX a
			INNER JOIN APPLICATION_TEXT ap ON ap.TEXT_CODE = a.MATRIX_RULE
			WHERE SELL_THRU BETWEEN 0
					AND 50
			GROUP BY AUDIT_FORECAST_RID,
				ap.TEXT_VALUE
			) amsm3 ON amsm3.AUDIT_FORECAST_RID = af.AUDIT_FORECAST_RID
		WHERE (
				(
					@TIME_RANGE_BEGIN <> ''
					AND af.TIME_RANGE_BEGIN >= @TIME_RANGE_BEGIN
					)
				OR @TIME_RANGE_BEGIN = ''
				)
			AND (
				(
					@TIME_RANGE_END <> ''
					AND af.TIME_RANGE_END <= @TIME_RANGE_END
					)
				OR @TIME_RANGE_END = ''
				)
			AND @LEVEL = 100
		) af ON hn.HN_RID = af.HN_RID
	ORDER BY hyn.HOME_PH_RID,
		hn.PARENT_HN_RID,
		hn.BN_ID,
		af.MethodType,
		af.MethodName

	IF (
			SELECT object_id('tempdb.dbo.#TEMP')
			) > 0
		DROP TABLE #TEMP
END
GO


