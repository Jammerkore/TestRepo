--dv =============================================
--dv Modified date: 2/19/2014
--dv Flags: REFERENCED_DYNAMICALLY_IN_CODE
--dv Description: Part of rollup
--dv =============================================
CREATE PROCEDURE [dbo].[SP_MID_DUMMY_COLOR_ROLLUP] 
	(
	@PROCESS INT,
	@BATCH_NUMBER INT,
	@ITEM_TYPE INT = 1100
	)
AS
SET NOCOUNT ON

-- select records to process
SELECT *
INTO #TEMP_ROLLUP_ITEM
FROM ROLLUP_ITEM ri WITH (NOLOCK)
WHERE ri.PROCESS = @PROCESS
	AND ri.ITEM_TYPE = @ITEM_TYPE
	AND ri.BATCH_NUMBER = @BATCH_NUMBER

-- determine all size nodes and corresponding color codes
DECLARE @Loop INT,
	@LoopCount INT,
	@NextLoopCount INT,
	@LEVEL_OFFSET INT

SET @LoopCount = 0

CREATE TABLE #TREE (
	LOOPCOUNT INT NOT NULL,
	STYLE_HN_RID INT NOT NULL,
	PARENT_HN_RID INT NOT NULL,
	HOME_PH_RID INT NOT NULL,
	HN_RID INT NOT NULL,
	HOME_LEVEL INT NOT NULL,
	LEVEL_TYPE INT NULL,
	CODE_RID INT NULL,
	TIME_ID INT NULL
	)

-- insert the styles into the temp table
INSERT #TREE (
	LOOPCOUNT,
	STYLE_HN_RID,
	PARENT_HN_RID,
	HOME_PH_RID,
	HN_RID,
	HOME_LEVEL,
	TIME_ID
	)
SELECT @LoopCount AS LOOPCOUNT,
	tmp.HN_RID,
	- 1 AS PARENT_HN_RID,
	tmp.PH_RID,
	tmp.HN_RID,
	hn.HOME_LEVEL,
	tmp.TIME_ID
FROM #TEMP_ROLLUP_ITEM tmp(NOLOCK)
JOIN [dbo].[HIERARCHY_NODE] hn(NOLOCK) ON hn.HN_RID = tmp.HN_RID

-- add level type
BEGIN TRANSACTION

UPDATE #TREE
SET LEVEL_TYPE = (
		SELECT phl.PHL_TYPE
		FROM [dbo].[PRODUCT_HIERARCHY_LEVELS] phl(NOLOCK)
		WHERE #TREE.LOOPCOUNT = @LoopCount
			AND #TREE.HOME_PH_RID = phl.PH_RID
			AND #TREE.HOME_LEVEL = phl.PHL_SEQUENCE
		)
WHERE LEVEL_TYPE IS NULL
	AND #TREE.LOOPCOUNT = @LoopCount

COMMIT

-- chase all paths until you get to size
SET @LEVEL_OFFSET = 3
SET @NextLoopCount = @LoopCount + 1

WHILE @NextLoopCount < @LEVEL_OFFSET
BEGIN
	INSERT #TREE (
		LOOPCOUNT,
		STYLE_HN_RID,
		PARENT_HN_RID,
		HOME_PH_RID,
		HN_RID,
		HOME_LEVEL,
		TIME_ID
		)
	SELECT @NextLoopCount AS LOOPCOUNT,
		t.STYLE_HN_RID,
		hnj.PARENT_HN_RID,
		hn.HOME_PH_RID,
		hnj.HN_RID,
		hn.HOME_LEVEL,
		t.TIME_ID
	FROM [dbo].[HIER_NODE_JOIN] hnj(NOLOCK)
	JOIN #TREE t ON hnj.PARENT_HN_RID = t.HN_RID
		AND hnj.PH_RID = t.HOME_PH_RID
	JOIN [dbo].[HIERARCHY_NODE] hn(NOLOCK) ON hn.HN_RID = hnj.HN_RID
	JOIN [dbo].[PRODUCT_HIERARCHY] ph(NOLOCK) ON ph.PH_RID = hn.HOME_PH_RID
	JOIN [dbo].[HIER_NODE_JOIN] parent(NOLOCK) ON hn.HN_RID = parent.HN_RID
		AND parent.PH_RID = hn.HOME_PH_RID
	WHERE t.LOOPCOUNT = @LoopCount
	  AND hnj.NODE_DELETE_IND = '0' -- TT#3630 - JSmith - Delete My Hierarchy

	-- update counters
	SET @LoopCount = @LoopCount + 1
	SET @NextLoopCount = @LoopCount + 1

	-- add level type
	BEGIN TRANSACTION

	UPDATE #TREE
	SET LEVEL_TYPE = (
			SELECT phl.PHL_TYPE
			FROM [dbo].[PRODUCT_HIERARCHY_LEVELS] phl(NOLOCK)
			WHERE #TREE.LOOPCOUNT = @LoopCount
				AND #TREE.HOME_PH_RID = phl.PH_RID
				AND #TREE.HOME_LEVEL = phl.PHL_SEQUENCE
			)
	WHERE LEVEL_TYPE IS NULL
		AND #TREE.LOOPCOUNT = @LoopCount

	COMMIT
END

-- add color codes
BEGIN TRANSACTION

UPDATE #TREE
SET CODE_RID = (
		SELECT cn.COLOR_CODE_RID
		FROM [dbo].[COLOR_NODE] cn(NOLOCK)
		WHERE #TREE.HN_RID = cn.HN_RID
		)
WHERE LEVEL_TYPE = 800203

COMMIT

-- add size codes
BEGIN TRANSACTION

UPDATE #TREE
SET CODE_RID = (
		SELECT sn.SIZE_CODE_RID
		FROM [dbo].[SIZE_NODE] sn(NOLOCK)
		WHERE #TREE.HN_RID = sn.HN_RID
		)
WHERE LEVEL_TYPE = 800204

COMMIT

-- build a temp table of all summed size values by size code
SELECT t.STYLE_HN_RID,
	t.CODE_RID,
	t.TIME_ID TIME_ID,
	SEI.ST_RID ST_RID,
	SUM(UNITS) UNITS
INTO #TEMP_SUM
FROM STORE_EXTERNAL_INTRANSIT SEI,
	#TREE t,
	#TREE parent
WHERE t.LEVEL_TYPE = 800204
	AND SEI.HN_RID = t.HN_RID
	AND SEI.TIME_ID = t.TIME_ID
	AND t.PARENT_HN_RID = parent.HN_RID
	AND parent.CODE_RID != 0
GROUP BY t.STYLE_HN_RID,
	t.CODE_RID,
	ST_RID,
	t.TIME_ID

-- get size nodes for dummy color
SELECT STYLE_HN_RID,
	PARENT_HN_RID,
	HN_RID,
	CODE_RID,
	TIME_ID
INTO #TEMP_DUMMY_COLOR_SIZES
FROM #TREE t
WHERE t.LEVEL_TYPE = 800204
	AND t.PARENT_HN_RID IN (
		SELECT HN_RID
		FROM #TREE
		WHERE CODE_RID = 0
			AND LEVEL_TYPE = 800203
		)

-- insert dummy color size values into table 
SELECT tdcs.HN_RID,
	tdcs.TIME_ID,
	ts.ST_RID,
	ts.UNITS
INTO #TEMP_VALUES
FROM #TEMP_SUM ts,
	#TEMP_DUMMY_COLOR_SIZES tdcs
WHERE ts.STYLE_HN_RID = tdcs.STYLE_HN_RID
	AND ts.CODE_RID = tdcs.CODE_RID
	AND ts.TIME_ID = tdcs.TIME_ID

-- delete old records
DELETE STORE_EXTERNAL_INTRANSIT
FROM STORE_EXTERNAL_INTRANSIT
INNER JOIN #TEMP_VALUES ON STORE_EXTERNAL_INTRANSIT.HN_RID = #TEMP_VALUES.HN_RID
	AND STORE_EXTERNAL_INTRANSIT.TIME_ID = #TEMP_VALUES.TIME_ID
	AND STORE_EXTERNAL_INTRANSIT.ST_RID = #TEMP_VALUES.ST_RID

-- insert into the table 
INSERT STORE_EXTERNAL_INTRANSIT (
	HN_RID,
	TIME_ID,
	ST_RID,
	UNITS
	)
SELECT HN_RID,
	TIME_ID,
	ST_RID,
	UNITS
FROM #TEMP_VALUES

-- update rollup items that were processed
UPDATE ROLLUP_ITEM
WITH (ROWLOCK)

SET ITEM_PROCESSED = '1'
FROM ROLLUP_ITEM ri
JOIN #TEMP_ROLLUP_ITEM tri ON ri.FV_RID = tri.FV_RID
	AND ri.PROCESS = tri.PROCESS
	AND ri.ITEM_TYPE = tri.ITEM_TYPE
	AND ri.PH_RID = tri.PH_RID
	AND ri.HOME_LEVEL = tri.HOME_LEVEL
	AND ri.HN_RID = tri.HN_RID
	AND ri.TIME_ID = tri.TIME_ID
	AND ri.BATCH_NUMBER = @BATCH_NUMBER
GO


