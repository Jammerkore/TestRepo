--dv =============================================
--dv Modified date: 2/18/2014
--dv Flags:			REFERENCED_FROM_SQL_ONLY
--dv Description:	ULTIMATELY RETURNS SIZE_CURVE_GROUP DATA FILTERED BY A SUPPLIED SIZE GROUP ID
--dv History:		7/09/2004 - JEFF SCHNIERLE                                                
--dv				2/18/2005 - Steve Todd - converting to Size Constraints Model             
--dv				4/18/2008 - Ron Matelic - added UNION statement to pick up Default SGL_RID
--dv				TT#808 -- Create separate upgrade script for Stored Procedure
--dv				5/13/2015 -TT#1517-MD -jsobek -Store Service Optimization
--dv =============================================
CREATE PROCEDURE [dbo].[SP_MID_SIZE_CONST_GET_MINMAX] 
	(
	@SIZECONSTRAINTRID INT,
	@ROWTYPEID INT,
	@SGRID INT,
	@SG_VERSION INT   -- TT#1901-MD - JSmith - Versioning Test - make a str inactive and process Fill Size Holes - Receive a system argument exception
	)
AS
BEGIN
	SET NOCOUNT ON
	SET ANSI_PADDING ON


	--Row types (defined in enums)
	DECLARE @AllColor INT,
		@Color INT,
		@AllColorSize INT,
		@ColorSize INT,
		@AllColorSizeDimension INT,
		@ColorSizeDimension INT,
		@DefaultRow INT

	SELECT @AllColor = 2,
		@Color = 3,
		@AllColorSize = 4,
		@ColorSize = 5,
		@AllColorSizeDimension = 6,
		@ColorSizeDimension = 7,
		@DefaultRow = 8

	DECLARE @DefaultColorCodeRID INT,
		@DEFAULT_ROW_SGL_RID INT,
		@DefaultSizesRID INT,
		@DefaultDimensionsRID INT,
		@DefaultSizeCodeRID INT

	SELECT @DefaultColorCodeRID = - 1,
		@DEFAULT_ROW_SGL_RID = - 1,
		@DefaultSizesRID = - 1,
		@DefaultDimensionsRID = - 1,
		@DefaultSizeCodeRID = - 1

	CREATE TABLE #MINMAX (
		BAND_DSC VARCHAR(20) NULL,
		SIZE_CONSTRAINT_RID INT NOT NULL,
		SGL_RID INT NOT NULL,
		COLOR_CODE_RID INT NOT NULL,
		SIZES_RID INT NOT NULL,
		DIMENSIONS_RID INT NOT NULL,
		SIZE_CODE_RID INT NOT NULL,
		SIZE_MIN INT NULL,
		SIZE_MAX INT NULL,
		SIZE_MULT INT NULL,
		ROW_TYPE_ID INT NOT NULL
		)

	CREATE INDEX #MINMAX_IDX_1 ON #MINMAX (SGL_RID)

	/*FILL THE INITIAL VALUES IN THE TEMP TABLE*/
	INSERT INTO #MINMAX
	SELECT CASE @ROWTYPEID
			WHEN @AllColor
				THEN 'All Colors'
			ELSE NULL
			END AS BAND_DSC,
		MC.SIZE_CONSTRAINT_RID,
		MC.SGL_RID,
		MC.COLOR_CODE_RID,
		MC.SIZES_RID,
		MC.DIMENSIONS_RID,
		MC.SIZE_CODE_RID,
		MC.SIZE_MIN,
		MC.SIZE_MAX,
		MC.SIZE_MULT,
		MC.ROW_TYPE_ID
	FROM SIZE_CONSTRAINT_MINMAX MC WITH (NOLOCK),
		STORE_GROUP_JOIN SGL WITH (NOLOCK)
	WHERE SIZE_CONSTRAINT_RID = @SIZECONSTRAINTRID
		AND MC.ROW_TYPE_ID = @ROWTYPEID
		AND MC.SGL_RID = SGL.SGL_RID -- make sure is for valid set
		AND SGL.SG_VERSION = @SG_VERSION  -- TT#1901-MD - JSmith - Versioning Test - make a str inactive and process Fill Size Holes - Receive a system argument exception
	
	UNION
	
	SELECT CASE @ROWTYPEID
			WHEN @AllColor
				THEN 'All Colors'
			ELSE NULL
			END AS BAND_DSC,
		MC.SIZE_CONSTRAINT_RID,
		MC.SGL_RID,
		MC.COLOR_CODE_RID,
		MC.SIZES_RID,
		MC.DIMENSIONS_RID,
		MC.SIZE_CODE_RID,
		MC.SIZE_MIN,
		MC.SIZE_MAX,
		MC.SIZE_MULT,
		MC.ROW_TYPE_ID
	FROM SIZE_CONSTRAINT_MINMAX MC WITH (NOLOCK)
	WHERE SIZE_CONSTRAINT_RID = @SIZECONSTRAINTRID
		AND MC.ROW_TYPE_ID = @ROWTYPEID
		AND MC.SGL_RID = @DEFAULT_ROW_SGL_RID -- Default set			     

	IF @ROWTYPEID = @AllColor
	BEGIN
		/*ADD ROWS SO ALL COLOR WILL BE DISPLAYED UNDER THE SETS THAT WERE NOT FOUND IN CONSTRAINT TABLES*/
		INSERT INTO #MINMAX
		SELECT 'All Colors',
			@SIZECONSTRAINTRID, --SIZE_CONSTRAINT_RID
			SGL.SGL_RID, --SGL_RID
			@DefaultColorCodeRID, --COLOR_CODE_RID
			@DefaultSizesRID, --SIZES_RID
			@DefaultDimensionsRID, --DIMENSIONS_RID
			@DefaultSizeCodeRID, --SIZE_CODE_RID
			NULL, --SIZE_MIN
			NULL, --SIZE_MAX
			NULL, --SIZE_MULT
			@ROWTYPEID --ROW INDICATOR
		FROM STORE_GROUP_JOIN SGL
		WHERE SGL.SG_RID = @SGRID
		    AND SGL.SG_VERSION = @SG_VERSION  -- TT#1901-MD - JSmith - Versioning Test - make a str inactive and process Fill Size Holes - Receive a system argument exception
			AND SGL.SGL_RID NOT IN (
				SELECT SGL_RID
				FROM #MINMAX
				)

		/*MAKE SURE ALL COLOR WILL BE THERE FOR THE DEFAULT ROW*/
		IF NOT EXISTS (
				SELECT *
				FROM #MINMAX
				WHERE SGL_RID = @DEFAULT_ROW_SGL_RID
				)
		BEGIN
			INSERT INTO #MINMAX
			SELECT 'All Colors',
				@SIZECONSTRAINTRID, --SIZE_CONSTRAINT_RID
				@DEFAULT_ROW_SGL_RID, --SGL_RID
				@DefaultColorCodeRID, --COLOR_CODE_RID
				@DefaultSizesRID, --SIZES_RID
				@DefaultDimensionsRID, --DIMENSIONS_RID
				@DefaultSizeCodeRID, --SIZE_CODE_RID
				NULL, --SIZE_MIN
				NULL, --SIZE_MAX
				NULL, --SIZE_MULT
				@ROWTYPEID --ROW INDICATOR
		END
	END

	/* FILLS IN MISSING, EMPTY TYPE 6 records */
	IF @ROWTYPEID = @AllColorSizeDimension
	BEGIN
		/*ADD ROWS SO ALL COLOR SIZE DIMENSION WILL BE DISPLAYED UNDER THE SETS THAT WERE NOT FOUND IN CONSTRAINT TABLES*/
		INSERT INTO #MINMAX
		SELECT DISTINCT NULL,
			@SIZECONSTRAINTRID, --SIZE_CONSTRAINT_RID
			scm.SGL_RID, --SGL_RID
			@DefaultColorCodeRID, --COLOR_CODE_RID
			@DefaultSizesRID, --SIZES_RID
			scm.DIMENSIONS_RID, --DIMENSIONS_RID
			@DefaultSizeCodeRID, --SIZE_CODE_RID
			NULL, --SIZE_MIN
			NULL, --SIZE_MAX
			NULL, --SIZE_MULT
			@ROWTYPEID --ROW INDICATOR
		FROM SIZE_CONSTRAINT_MINMAX scm
		WHERE ROW_TYPE_ID = @AllColorSize
			AND SIZE_CONSTRAINT_RID = @SIZECONSTRAINTRID
			AND NOT EXISTS (
				SELECT *
				FROM #MINMAX
				WHERE SGL_RID = scm.SGL_RID
					AND DIMENSIONS_RID = scm.DIMENSIONS_RID
				)
	END

	/* FILLS IN MISSING, EMPTY TYPE 7 records */
	IF @ROWTYPEID = @ColorSizeDimension
	BEGIN
		/*ADD ROWS SO ALL COLOR SIZE DIMENSION WILL BE DISPLAYED UNDER THE SETS THAT WERE NOT FOUND IN CONSTRAINT TABLES*/
		INSERT INTO #MINMAX
		SELECT DISTINCT NULL,
			@SIZECONSTRAINTRID, --SIZE_CONSTRAINT_RID
			scm.SGL_RID, --SGL_RID
			scm.COLOR_CODE_RID, --COLOR_CODE_RID
			@DefaultSizesRID, --SIZES_RID
			scm.DIMENSIONS_RID, --DIMENSIONS_RID
			@DefaultSizeCodeRID, --SIZE_CODE_RID
			NULL, --SIZE_MIN
			NULL, --SIZE_MAX
			NULL, --SIZE_MULT
			@ROWTYPEID --ROW INDICATOR
		FROM SIZE_CONSTRAINT_MINMAX scm
		WHERE ROW_TYPE_ID = @ColorSize
			AND SIZE_CONSTRAINT_RID = @SIZECONSTRAINTRID
			AND NOT EXISTS (
				SELECT *
				FROM #MINMAX
				WHERE SGL_RID = scm.SGL_RID
					AND COLOR_CODE_RID = scm.COLOR_CODE_RID
					AND DIMENSIONS_RID = scm.DIMENSIONS_RID
				)
	END

	/* FILLS IN MISSING, EMPTY TYPE 3 records */
	DECLARE @rowCount INT --Fix for database upgrade issues

	IF @ROWTYPEID = @Color
	BEGIN
		/*ADD ROWS SO ALL COLOR SIZE DIMENSION WILL BE DISPLAYED UNDER THE SETS THAT WERE NOT FOUND IN CONSTRAINT TABLES*/
		INSERT INTO #MINMAX
		SELECT DISTINCT NULL,
			@SIZECONSTRAINTRID, --SIZE_CONSTRAINT_RID
			scm.SGL_RID, --SGL_RID
			scm.COLOR_CODE_RID, --COLOR_CODE_RID
			@DefaultSizesRID, --SIZES_RID
			@DefaultDimensionsRID, --DIMENSIONS_RID
			@DefaultSizeCodeRID, --SIZE_CODE_RID
			NULL, --SIZE_MIN
			NULL, --SIZE_MAX
			NULL, --SIZE_MULT
			@ROWTYPEID --ROW INDICATOR
		FROM SIZE_CONSTRAINT_MINMAX scm
		WHERE ROW_TYPE_ID = @ColorSizeDimension
			AND SIZE_CONSTRAINT_RID = @SIZECONSTRAINTRID
			AND NOT EXISTS (
				SELECT *
				FROM #MINMAX
				WHERE SGL_RID = scm.SGL_RID
					AND COLOR_CODE_RID = scm.COLOR_CODE_RID
				)

		SET @rowCount = @@ROWCOUNT

		IF @rowCount = 0
		BEGIN
			INSERT INTO #MINMAX
			SELECT DISTINCT NULL,
				@SIZECONSTRAINTRID, --SIZE_CONSTRAINT_RID
				scm.SGL_RID, --SGL_RID
				scm.COLOR_CODE_RID, --COLOR_CODE_RID
				@DefaultSizesRID, --SIZES_RID
				@DefaultDimensionsRID, --DIMENSIONS_RID
				@DefaultSizeCodeRID, --SIZE_CODE_RID
				NULL, --SIZE_MIN
				NULL, --SIZE_MAX
				NULL, --SIZE_MULT
				@ROWTYPEID --ROW INDICATOR
			FROM SIZE_CONSTRAINT_MINMAX scm
			WHERE ROW_TYPE_ID = @ColorSize
				AND SIZE_CONSTRAINT_RID = @SIZECONSTRAINTRID
				AND NOT EXISTS (
					SELECT *
					FROM #MINMAX
					WHERE SGL_RID = scm.SGL_RID
						AND COLOR_CODE_RID = scm.COLOR_CODE_RID
					)
		END
	END

	SELECT *
	FROM #MINMAX

	SET NOCOUNT OFF
	SET ANSI_PADDING OFF
END
GO


