--dv ============================================= 
--dv Create date: 5/15/2013 
--dv Modified:	5/15/2013 
--dv Description:	Calculates size curve summary data from a starting node and time period 
--dv History:	3/5/2014 TT#3566 -Stock is being summed instead of using the Begining of Week Stock  
--dv History:	5/23/2014 TT#3735 -jsobek -Size Day To Week Summary - Add NOLOCK  
--dv History:	5/27/2014 TT#1223-MD -jsobek -Optimize Size Day to Week Summary  
--dv ============================================= 
CREATE PROCEDURE [dbo].[MID_SIZE_CURVE_INSERT_SUMMARY_DATA_IN_TIME_PERIOD_FROM_NODE] 
	@START_TIME INT, 
	@END_TIME INT, 
	@SELECTED_NODE_RID INT, 
	@STORE_RID INT = -1 
AS 
BEGIN 
--Get option to use either positive sales or net sales 
DECLARE @USE_NET_SALES varchar(1); 
SELECT @USE_NET_SALES=USE_NET_SALES_IN_SIZE_DAY_TO_WEEK_SUMMARY FROM SYSTEM_OPTIONS; 
DECLARE @STORE_TABLE_COUNT int; 
SELECT @STORE_TABLE_COUNT=STORE_TABLE_COUNT FROM SYSTEM_OPTIONS 
DECLARE @TIME_TO_EXECUTE_PROCESS_STEP DATETIME 
DECLARE @TIME_TO_EXECUTE DATETIME  
DECLARE @PROCESS_SUMMARY TABLE 
( 
	PROCESS_STEP varchar(500),  
	PROCESS_STEP_TIME_TO_EXECUTE int,  
	PROCESS_STEP_TIME_TO_EXECUTE_SUBPROCESS int, 
	PROCESS_STEP_DESCRIPTION varchar(500), 
	PROCESS_STEP_RESULTS varchar(500) 
) 
INSERT INTO @PROCESS_SUMMARY SELECT 'Parameter @START_TIME=' + CAST(@START_TIME AS VARCHAR(50)), 0, 0, null, null 
INSERT INTO @PROCESS_SUMMARY SELECT 'Parameter @END_TIME=' + CAST(@END_TIME AS VARCHAR(50)), 0, 0, null, null 
INSERT INTO @PROCESS_SUMMARY SELECT 'Parameter @SELECTED_NODE_RID=' + CAST(@SELECTED_NODE_RID AS VARCHAR(50)), 0, 0, null, null 
INSERT INTO @PROCESS_SUMMARY SELECT 'Parameter @STORE_RID=' + CAST(@STORE_RID AS VARCHAR(50)), 0, 0, null, null 
INSERT INTO @PROCESS_SUMMARY SELECT 'Option @USE_NET_SALES=' + @USE_NET_SALES, 0, 0, null, null 
--Begin Process Step 1a: Read day lookup data
SET @TIME_TO_EXECUTE_PROCESS_STEP = getDate(); 
DECLARE @MIN_FIRST_DAY INT; 
DECLARE @MAX_LAST_DAY INT; 
SELECT 
@MIN_FIRST_DAY = min(fw.FIRST_DAY_OF_WEEK),
@MAX_LAST_DAY = max(fw.LAST_DAY_OF_WEEK) 
FROM [dbo].[FISCAL_WEEKS] fw WITH (NOLOCK) 
WHERE fw.FIRST_DAY_OF_WEEK <=@END_TIME AND fw.LAST_DAY_OF_WEEK>=@START_TIME
IF (@END_TIME < @MAX_LAST_DAY) SET @MAX_LAST_DAY = @END_TIME
DECLARE @DAY_LOOKUP TABLE
( 
FIRST_DAY_OF_WEEK_TIME_ID int, 
DATETIME_TIME_ID datetime, 
PREVIOUS_WEEK_TIME_ID int, 
TIME_ID int, 
IS_MONDAY bit, 
IS_TUESDAY bit, 
IS_WEDNESDAY bit, 
IS_THURSDAY bit, 
IS_FRIDAY bit, 
IS_SATURDAY bit, 
IS_SUNDAY bit 
PRIMARY KEY (TIME_ID) 
) 
DECLARE @DAY_COUNTER INT = @MIN_FIRST_DAY; 
DECLARE @DAY_PART INT; 
WHILE (@DAY_COUNTER <= @MAX_LAST_DAY) 
BEGIN 
SET @DAY_PART = @DAY_COUNTER % 1000 
IF @DAY_PART <= 366 
BEGIN 
INSERT INTO @DAY_LOOKUP SELECT 
(SELECT fw.FIRST_DAY_OF_WEEK FROM [dbo].[FISCAL_WEEKS] fw WITH (NOLOCK) WHERE fw.FIRST_DAY_OF_WEEK <=@DAY_COUNTER AND fw.LAST_DAY_OF_WEEK>=@DAY_COUNTER) AS FIRST_DAY_OF_WEEK_TIME_ID, 
[dbo].[UDF_DATE_GET_DATETIME_FROM_JULIAN_DAY] (@DAY_COUNTER) AS DATETIME_TIME_ID, 
[dbo].[UDF_DATE_GET_PREV_WEEK_FROM_JULIAN_DAY] (@DAY_COUNTER) AS PREVIOUS_WEEK_TIME_ID, 
@DAY_COUNTER, 
null, 
null, 
null, 
null, 
null, 
null, 
null 
END 
SET @DAY_COUNTER = @DAY_COUNTER + 1; 
END 
UPDATE @DAY_LOOKUP 
SET  
IS_MONDAY = CASE WHEN DATENAME(dw, DATETIME_TIME_ID) = 'Monday' THEN 1 ELSE 0 END, 
IS_TUESDAY = CASE WHEN DATENAME(dw, DATETIME_TIME_ID) = 'Tuesday' THEN 1 ELSE 0 END, 
IS_WEDNESDAY = CASE WHEN DATENAME(dw, DATETIME_TIME_ID) = 'Wednesday' THEN 1 ELSE 0 END, 
IS_THURSDAY = CASE WHEN DATENAME(dw, DATETIME_TIME_ID) = 'Thursday' THEN 1 ELSE 0 END, 
IS_FRIDAY = CASE WHEN DATENAME(dw, DATETIME_TIME_ID) = 'Friday' THEN 1 ELSE 0 END, 
IS_SATURDAY = CASE WHEN DATENAME(dw, DATETIME_TIME_ID) = 'Saturday' THEN 1 ELSE 0 END, 
IS_SUNDAY = CASE WHEN DATENAME(dw, DATETIME_TIME_ID) = 'Sunday' THEN 1 ELSE 0 END 
FROM @DAY_LOOKUP dl 
INSERT INTO @PROCESS_SUMMARY SELECT 'Step 1a: Read day lookup data',DATEDIFF(millisecond, @TIME_TO_EXECUTE_PROCESS_STEP, getDate()),0,null, null  

DECLARE @main_PH_RID int;
SELECT @main_PH_RID = PH_RID FROM PRODUCT_HIERARCHY where PH_TYPE = 800000
--SELECT * FROM @DAY_LOOKUP; 
--RETURN; 
--End Process Step 1a: Read day lookup data 
--Begin Process Step 1b: Get data from the store history day tables 
SET @TIME_TO_EXECUTE_PROCESS_STEP = getDate(); 
DECLARE @DATA TABLE	 
				( 
				HN_RID int, 
				PARENT_HN_RID int,  
				TIME_ID int,  
				ST_RID int,  
				SALES int, 
				SALES_REG int, 
				SALES_PROMO int, 
				SALES_MKDN int, 
				STOCK int, 
				STOCK_REG int, 
				STOCK_MKDN int, 
				FIRST_DAY_OF_WEEK_TIME_ID int, 
				IS_MONDAY bit, 
				IS_TUESDAY bit, 
				IS_WEDNESDAY bit, 
				IS_THURSDAY bit, 
				IS_FRIDAY bit, 
				IS_SATURDAY bit, 
				IS_SUNDAY bit 
				) 
INSERT INTO @DATA  
SELECT  
	q1.HN_RID, 
	hnj.PARENT_HN_RID, 
	TIME_ID,  
	ST_RID,  
	SALES, 
	SALES_REG, 
	SALES_PROMO, 
	SALES_MKDN, 
	STOCK, 
	STOCK_REG, 
	STOCK_MKDN, 
	(SELECT dl.FIRST_DAY_OF_WEEK_TIME_ID FROM @DAY_LOOKUP dl WHERE dl.TIME_ID = q1.TIME_ID), 
	(SELECT dl.IS_MONDAY FROM @DAY_LOOKUP dl WHERE dl.TIME_ID = q1.TIME_ID), 
	(SELECT dl.IS_TUESDAY FROM @DAY_LOOKUP dl WHERE dl.TIME_ID = q1.TIME_ID), 
	(SELECT dl.IS_WEDNESDAY FROM @DAY_LOOKUP dl WHERE dl.TIME_ID = q1.TIME_ID), 
	(SELECT dl.IS_THURSDAY FROM @DAY_LOOKUP dl WHERE dl.TIME_ID = q1.TIME_ID), 
	(SELECT dl.IS_FRIDAY FROM @DAY_LOOKUP dl WHERE dl.TIME_ID = q1.TIME_ID), 
	(SELECT dl.IS_SATURDAY FROM @DAY_LOOKUP dl WHERE dl.TIME_ID = q1.TIME_ID), 
	(SELECT dl.IS_SUNDAY FROM @DAY_LOOKUP dl WHERE dl.TIME_ID = q1.TIME_ID) 
FROM 
( 
SELECT			 
 				HN_RID,  
				--hnj.PARENT_HN_RID, 
				TIME_ID,  
				ST_RID,  
				--Equal to SALES if not = to 0, else equal to SALES_REG + SALES_MKDN + SALES_PROMO 
--Equal to SALES if not = to 0, else equal to SALES_REG + SALES_MKDN + SALES_PROMO  
CASE WHEN @USE_NET_SALES='1' THEN 
	CASE WHEN coalesce(SALES,0) <> 0 THEN coalesce(SALES,0) ELSE coalesce(SALES_REG,0) + coalesce(SALES_MKDN,0) + coalesce(SALES_PROMO,0) END 
ELSE 
	CASE WHEN coalesce(CASE WHEN SALES < 0 THEN 0 ELSE SALES END,0) <> 0 THEN coalesce(CASE WHEN SALES < 0 THEN 0 ELSE SALES END,0) ELSE coalesce(CASE WHEN SALES_REG < 0 THEN 0 ELSE SALES_REG END,0) + coalesce(CASE WHEN SALES_MKDN < 0 THEN 0 ELSE SALES_MKDN END,0) + coalesce(CASE WHEN SALES_PROMO < 0 THEN 0 ELSE SALES_PROMO END,0) END  
END AS SALES, 
CASE WHEN @USE_NET_SALES='1' THEN 
	SALES_REG 
ELSE 
	CASE WHEN SALES_REG < 0 THEN 0 ELSE SALES_REG END 
END AS SALES_REG, 
CASE WHEN @USE_NET_SALES='1' THEN 
	SALES_PROMO 
ELSE 
	CASE WHEN SALES_PROMO < 0 THEN 0 ELSE SALES_PROMO END 
END AS SALES_PROMO, 
CASE WHEN @USE_NET_SALES='1' THEN 
	SALES_MKDN 
ELSE 
	CASE WHEN SALES_MKDN < 0 THEN 0 ELSE SALES_MKDN END 
END AS SALES_MKDN, 
--Equal to STOCK if not = to 0, else equal to STOCK_REG + STOCK_MKDN  
CASE WHEN @USE_NET_SALES='1' THEN 
	CASE WHEN coalesce(STOCK,0) <> 0 THEN coalesce(STOCK,0) ELSE coalesce(STOCK_REG,0) + coalesce(STOCK_MKDN,0) END 
ELSE 
	CASE WHEN coalesce(CASE WHEN STOCK < 0 THEN 0 ELSE STOCK END,0) <> 0 THEN coalesce(CASE WHEN STOCK < 0 THEN 0 ELSE STOCK END,0) ELSE coalesce(CASE WHEN STOCK_REG < 0 THEN 0 ELSE STOCK_REG END,0) + coalesce(CASE WHEN STOCK_MKDN < 0 THEN 0 ELSE STOCK_MKDN END,0) END 
END AS STOCK, 
CASE WHEN @USE_NET_SALES='1' THEN 
	STOCK_REG 
ELSE 
	CASE WHEN STOCK_REG < 0 THEN 0 ELSE STOCK_REG END 
END AS STOCK_REG, 
CASE WHEN @USE_NET_SALES='1' THEN 
	STOCK_MKDN 
ELSE 
	CASE WHEN STOCK_MKDN < 0 THEN 0 ELSE STOCK_MKDN END 
END AS STOCK_MKDN 
 FROM [dbo].[UDF_STORE_HISTORY_DAY_GET_DATA_IN_TIME_PERIOD_FROM_NODE] (@START_TIME, @END_TIME, @SELECTED_NODE_RID, @STORE_RID) 
) as q1 
INNER JOIN [dbo].[HIER_NODE_JOIN] hnj WITH (NOLOCK) on hnj.HN_RID = q1.HN_RID 
where hnj.PH_RID = @main_PH_RID

INSERT INTO @PROCESS_SUMMARY SELECT 'Step 1b: Read data from store day history',DATEDIFF(millisecond, @TIME_TO_EXECUTE_PROCESS_STEP, getDate()),0,'Row Count:',(SELECT COUNT(*) FROM @DATA) 
--End Process Step 1b: Get data from the store history day tables 
--Begin Process Step 2: Convert data into a data view 
SET @TIME_TO_EXECUTE_PROCESS_STEP = getDate(); 
DECLARE @DATA_VIEW TABLE	 
			( 
			HN_RID int,  
			PARENT_HN_RID int, 
			ST_RID int,  
			FIRST_DAY_OF_WEEK_TIME_ID int, 
			MONDAY_SALES int, 
			MONDAY_SALES_REG int, 
			MONDAY_SALES_PROMO int, 
			MONDAY_SALES_MKDN int, 
			MONDAY_STOCK int, 
			MONDAY_STOCK_REG int, 
			MONDAY_STOCK_MKDN int, 
			MONDAY_IN_STOCK_DAY int, 
			MONDAY_SELL_THRU float, 
			TUESDAY_SALES int, 
			TUESDAY_SALES_REG int, 
			TUESDAY_SALES_PROMO int, 
			TUESDAY_SALES_MKDN int, 
			TUESDAY_STOCK int, 
			TUESDAY_STOCK_REG int, 
			TUESDAY_STOCK_MKDN int, 
			TUESDAY_IN_STOCK_DAY int, 
			TUESDAY_SELL_THRU float, 
			WEDNESDAY_SALES int, 
			WEDNESDAY_SALES_REG int, 
			WEDNESDAY_SALES_PROMO int, 
			WEDNESDAY_SALES_MKDN int, 
			WEDNESDAY_STOCK int, 
			WEDNESDAY_STOCK_REG int, 
			WEDNESDAY_STOCK_MKDN int, 
			WEDNESDAY_IN_STOCK_DAY int, 
			WEDNESDAY_SELL_THRU float, 
			THURSDAY_SALES int, 
			THURSDAY_SALES_REG int, 
			THURSDAY_SALES_PROMO int, 
			THURSDAY_SALES_MKDN int, 
			THURSDAY_STOCK int, 
			THURSDAY_STOCK_REG int, 
			THURSDAY_STOCK_MKDN int, 
			THURSDAY_IN_STOCK_DAY int, 
			THURSDAY_SELL_THRU float, 
			FRIDAY_SALES int, 
			FRIDAY_SALES_REG int, 
			FRIDAY_SALES_PROMO int, 
			FRIDAY_SALES_MKDN int, 
			FRIDAY_STOCK int, 
			FRIDAY_STOCK_REG int, 
			FRIDAY_STOCK_MKDN int, 
			FRIDAY_IN_STOCK_DAY int, 
			FRIDAY_SELL_THRU float, 
			SATURDAY_SALES int, 
			SATURDAY_SALES_REG int, 
			SATURDAY_SALES_PROMO int, 
			SATURDAY_SALES_MKDN int, 
			SATURDAY_STOCK int, 
			SATURDAY_STOCK_REG int, 
			SATURDAY_STOCK_MKDN int, 
			SATURDAY_IN_STOCK_DAY int, 
			SATURDAY_SELL_THRU float, 
			SUNDAY_SALES int, 
			SUNDAY_SALES_REG int, 
			SUNDAY_SALES_PROMO int, 
			SUNDAY_SALES_MKDN int, 
			SUNDAY_STOCK int, 
			SUNDAY_STOCK_REG int, 
			SUNDAY_STOCK_MKDN int, 
			SUNDAY_IN_STOCK_DAY int, 
			SUNDAY_SELL_THRU float 
			) 
INSERT INTO @DATA_VIEW  
 SELECT			 
 				HN_RID,  
				PARENT_HN_RID, 
				ST_RID,  
				FIRST_DAY_OF_WEEK_TIME_ID int, 
CASE WHEN IS_MONDAY = 1 THEN coalesce(SALES,0) ELSE 0 END AS MONDAY_SALES, 
CASE WHEN IS_MONDAY = 1 THEN coalesce(SALES_REG,0) ELSE 0 END AS MONDAY_SALES_REG, 
CASE WHEN IS_MONDAY = 1 THEN coalesce(SALES_PROMO,0) ELSE 0 END AS MONDAY_SALES_PROMO, 
CASE WHEN IS_MONDAY = 1 THEN coalesce(SALES_MKDN,0) ELSE 0 END AS MONDAY_SALES_MKDN, 
CASE WHEN IS_MONDAY = 1 THEN coalesce(STOCK,0) ELSE 0 END AS MONDAY_STOCK, 
CASE WHEN IS_MONDAY = 1 THEN coalesce(STOCK_REG,0) ELSE 0 END AS MONDAY_STOCK_REG, 
CASE WHEN IS_MONDAY = 1 THEN coalesce(STOCK_MKDN,0) ELSE 0 END AS MONDAY_STOCK_MKDN, 
CASE WHEN IS_MONDAY = 1 THEN (CASE WHEN coalesce(STOCK,0) > 0 THEN 1 ELSE 0 END) ELSE NULL END AS MONDAY_IN_STOCK_DAY, 
CASE WHEN IS_MONDAY = 1 THEN (CASE WHEN coalesce(STOCK,0) <> 0 THEN CAST(SALES AS float) / CAST(STOCK AS float) ELSE CAST(0 AS float) END) ELSE NULL END AS MONDAY_SELL_THRU, 
CASE WHEN IS_TUESDAY = 1 THEN coalesce(SALES,0) ELSE 0 END AS TUESDAY_SALES, 
CASE WHEN IS_TUESDAY = 1 THEN coalesce(SALES_REG,0) ELSE 0 END AS TUESDAY_SALES_REG, 
CASE WHEN IS_TUESDAY = 1 THEN coalesce(SALES_PROMO,0) ELSE 0 END AS TUESDAY_SALES_PROMO, 
CASE WHEN IS_TUESDAY = 1 THEN coalesce(SALES_MKDN,0) ELSE 0 END AS TUESDAY_SALES_MKDN, 
CASE WHEN IS_TUESDAY = 1 THEN coalesce(STOCK,0) ELSE 0 END AS TUESDAY_STOCK, 
CASE WHEN IS_TUESDAY = 1 THEN coalesce(STOCK_REG,0) ELSE 0 END AS TUESDAY_STOCK_REG, 
CASE WHEN IS_TUESDAY = 1 THEN coalesce(STOCK_MKDN,0) ELSE 0 END AS TUESDAY_STOCK_MKDN, 
CASE WHEN IS_TUESDAY = 1 THEN (CASE WHEN coalesce(STOCK,0) > 0 THEN 1 ELSE 0 END) ELSE NULL END AS TUESDAY_IN_STOCK_DAY, 
CASE WHEN IS_TUESDAY = 1 THEN (CASE WHEN coalesce(STOCK,0) <> 0 THEN CAST(SALES AS float) / CAST(STOCK AS float) ELSE CAST(0 AS float) END) ELSE NULL END AS TUESDAY_SELL_THRU, 
CASE WHEN IS_WEDNESDAY = 1 THEN coalesce(SALES,0) ELSE 0 END AS WEDNESDAY_SALES, 
CASE WHEN IS_WEDNESDAY = 1 THEN coalesce(SALES_REG,0) ELSE 0 END AS WEDNESDAY_SALES_REG, 
CASE WHEN IS_WEDNESDAY = 1 THEN coalesce(SALES_PROMO,0) ELSE 0 END AS WEDNESDAY_SALES_PROMO, 
CASE WHEN IS_WEDNESDAY = 1 THEN coalesce(SALES_MKDN,0) ELSE 0 END AS WEDNESDAY_SALES_MKDN, 
CASE WHEN IS_WEDNESDAY = 1 THEN coalesce(STOCK,0) ELSE 0 END AS WEDNESDAY_STOCK, 
CASE WHEN IS_WEDNESDAY = 1 THEN coalesce(STOCK_REG,0) ELSE 0 END AS WEDNESDAY_STOCK_REG, 
CASE WHEN IS_WEDNESDAY = 1 THEN coalesce(STOCK_MKDN,0) ELSE 0 END AS WEDNESDAY_STOCK_MKDN, 
CASE WHEN IS_WEDNESDAY = 1 THEN (CASE WHEN coalesce(STOCK,0) > 0 THEN 1 ELSE 0 END) ELSE NULL END AS WEDNESDAY_IN_STOCK_DAY, 
CASE WHEN IS_WEDNESDAY = 1 THEN (CASE WHEN coalesce(STOCK,0) <> 0 THEN CAST(SALES AS float) / CAST(STOCK AS float) ELSE CAST(0 AS float) END) ELSE NULL END AS WEDNESDAY_SELL_THRU, 
CASE WHEN IS_THURSDAY = 1 THEN coalesce(SALES,0) ELSE 0 END AS THURSDAY_SALES, 
CASE WHEN IS_THURSDAY = 1 THEN coalesce(SALES_REG,0) ELSE 0 END AS THURSDAY_SALES_REG, 
CASE WHEN IS_THURSDAY = 1 THEN coalesce(SALES_PROMO,0) ELSE 0 END AS THURSDAY_SALES_PROMO, 
CASE WHEN IS_THURSDAY = 1 THEN coalesce(SALES_MKDN,0) ELSE 0 END AS THURSDAY_SALES_MKDN, 
CASE WHEN IS_THURSDAY = 1 THEN coalesce(STOCK,0) ELSE 0 END AS THURSDAY_STOCK, 
CASE WHEN IS_THURSDAY = 1 THEN coalesce(STOCK_REG,0) ELSE 0 END AS THURSDAY_STOCK_REG, 
CASE WHEN IS_THURSDAY = 1 THEN coalesce(STOCK_MKDN,0) ELSE 0 END AS THURSDAY_STOCK_MKDN, 
CASE WHEN IS_THURSDAY = 1 THEN (CASE WHEN coalesce(STOCK,0) > 0 THEN 1 ELSE 0 END) ELSE NULL END AS THURSDAY_IN_STOCK_DAY, 
CASE WHEN IS_THURSDAY = 1 THEN (CASE WHEN coalesce(STOCK,0) <> 0 THEN CAST(SALES AS float) / CAST(STOCK AS float) ELSE CAST(0 AS float) END) ELSE NULL END AS THURSDAY_SELL_THRU, 
CASE WHEN IS_FRIDAY = 1 THEN coalesce(SALES,0) ELSE 0 END AS FRIDAY_SALES, 
CASE WHEN IS_FRIDAY = 1 THEN coalesce(SALES_REG,0) ELSE 0 END AS FRIDAY_SALES_REG, 
CASE WHEN IS_FRIDAY = 1 THEN coalesce(SALES_PROMO,0) ELSE 0 END AS FRIDAY_SALES_PROMO, 
CASE WHEN IS_FRIDAY = 1 THEN coalesce(SALES_MKDN,0) ELSE 0 END AS FRIDAY_SALES_MKDN, 
CASE WHEN IS_FRIDAY = 1 THEN coalesce(STOCK,0) ELSE 0 END AS FRIDAY_STOCK, 
CASE WHEN IS_FRIDAY = 1 THEN coalesce(STOCK_REG,0) ELSE 0 END AS FRIDAY_STOCK_REG, 
CASE WHEN IS_FRIDAY = 1 THEN coalesce(STOCK_MKDN,0) ELSE 0 END AS FRIDAY_STOCK_MKDN, 
CASE WHEN IS_FRIDAY = 1 THEN (CASE WHEN coalesce(STOCK,0) > 0 THEN 1 ELSE 0 END) ELSE NULL END AS FRIDAY_IN_STOCK_DAY, 
CASE WHEN IS_FRIDAY = 1 THEN (CASE WHEN coalesce(STOCK,0) <> 0 THEN CAST(SALES AS float) / CAST(STOCK AS float) ELSE CAST(0 AS float) END) ELSE NULL END AS FRIDAY_SELL_THRU, 
CASE WHEN IS_SATURDAY = 1 THEN coalesce(SALES,0) ELSE 0 END AS SATURDAY_SALES, 
CASE WHEN IS_SATURDAY = 1 THEN coalesce(SALES_REG,0) ELSE 0 END AS SATURDAY_SALES_REG, 
CASE WHEN IS_SATURDAY = 1 THEN coalesce(SALES_PROMO,0) ELSE 0 END AS SATURDAY_SALES_PROMO, 
CASE WHEN IS_SATURDAY = 1 THEN coalesce(SALES_MKDN,0) ELSE 0 END AS SATURDAY_SALES_MKDN, 
CASE WHEN IS_SATURDAY = 1 THEN coalesce(STOCK,0) ELSE 0 END AS SATURDAY_STOCK, 
CASE WHEN IS_SATURDAY = 1 THEN coalesce(STOCK_REG,0) ELSE 0 END AS SATURDAY_STOCK_REG, 
CASE WHEN IS_SATURDAY = 1 THEN coalesce(STOCK_MKDN,0) ELSE 0 END AS SATURDAY_STOCK_MKDN, 
CASE WHEN IS_SATURDAY = 1 THEN (CASE WHEN coalesce(STOCK,0) > 0 THEN 1 ELSE 0 END) ELSE NULL END AS SATURDAY_IN_STOCK_DAY, 
CASE WHEN IS_SATURDAY = 1 THEN (CASE WHEN coalesce(STOCK,0) <> 0 THEN CAST(SALES AS float) / CAST(STOCK AS float) ELSE CAST(0 AS float) END) ELSE NULL END AS SATURDAY_SELL_THRU, 
CASE WHEN IS_SUNDAY = 1 THEN coalesce(SALES,0) ELSE 0 END AS SUNDAY_SALES, 
CASE WHEN IS_SUNDAY = 1 THEN coalesce(SALES_REG,0) ELSE 0 END AS SUNDAY_SALES_REG, 
CASE WHEN IS_SUNDAY = 1 THEN coalesce(SALES_PROMO,0) ELSE 0 END AS SUNDAY_SALES_PROMO, 
CASE WHEN IS_SUNDAY = 1 THEN coalesce(SALES_MKDN,0) ELSE 0 END AS SUNDAY_SALES_MKDN, 
CASE WHEN IS_SUNDAY = 1 THEN coalesce(STOCK,0) ELSE 0 END AS SUNDAY_STOCK, 
CASE WHEN IS_SUNDAY = 1 THEN coalesce(STOCK_REG,0) ELSE 0 END AS SUNDAY_STOCK_REG, 
CASE WHEN IS_SUNDAY = 1 THEN coalesce(STOCK_MKDN,0) ELSE 0 END AS SUNDAY_STOCK_MKDN, 
CASE WHEN IS_SUNDAY = 1 THEN (CASE WHEN coalesce(STOCK,0) > 0 THEN 1 ELSE 0 END) ELSE NULL END AS SUNDAY_IN_STOCK_DAY, 
CASE WHEN IS_SUNDAY = 1 THEN (CASE WHEN coalesce(STOCK,0) <> 0 THEN CAST(SALES AS float) / CAST(STOCK AS float) ELSE CAST(0 AS float) END) ELSE NULL END AS SUNDAY_SELL_THRU 
 FROM @DATA	   
INSERT INTO @PROCESS_SUMMARY SELECT 'Step 2: Convert data into a data view',DATEDIFF(millisecond, @TIME_TO_EXECUTE_PROCESS_STEP, getDate()),0,'Row Count:',(SELECT COUNT(*) FROM @DATA_VIEW)  
--SELECT * FROM @DATA_VIEW 
--End Process Step 2: Convert data into a data view 
--Begin Process Step 3: Summarize data for the week 
SET @TIME_TO_EXECUTE_PROCESS_STEP = getDate(); 
DECLARE @SUMMARY_VIEW TABLE	 
( 
	HN_RID int,  
	PARENT_HN_RID int,  
	ST_RID int,  
	FIRST_DAY_OF_WEEK_TIME_ID int, 
	FIRST_DAY_OF_WEEK_DATETIME datetime, 
	PREVIOUS_WEEK_TIME_ID int, 
	BEGINNING_OF_WEEK_STOCK int, 
	SELLTHRU_LIMIT float, 
	OUT_OF_STOCK_VALUE int, --defaults to zero 
	HN_MOD int, 
	--values to update in weekly tables 
	INSERT_OR_UPDATE_FLAG char(1), -- I to Insert, U to Update 
	SALES int, 
	SALES_REG int, 
	SALES_PROMO int, 
	SALES_MKDN int, 
	STOCK int, 
	STOCK_REG int, 
	STOCK_MKDN int, 
	IN_STOCK_SALES int, 
	IN_STOCK_SALES_REG int, 
	IN_STOCK_SALES_PROMO int, 
	IN_STOCK_SALES_MKDN int, 
	ACCUM_SELL_THRU_SALES int, 
	ACCUM_SELL_THRU_STOCK int, 
	DAYS_IN_STOCK int, 
	RECEIVED_STOCK_PREVIOUS_WEEK int, 
	RECEIVED_STOCK int, --received stock during the week 
	RECEIVED_STOCK_ALL_DAYS int, 
	RECEIVED_STOCK_BY_MONDAY int, 
	RECEIVED_STOCK_BY_TUESDAY int, 
	RECEIVED_STOCK_BY_WEDNESDAY int, 
	RECEIVED_STOCK_BY_THURSDAY int, 
	RECEIVED_STOCK_BY_FRIDAY int, 
	RECEIVED_STOCK_BY_SATURDAY int, 
	RECEIVED_STOCK_BY_SUNDAY int, 
	--intermim flags to denote if a particular day contributed to the weekly sum  
	INCLUDED_MONDAY_FLAG int, 
	INCLUDED_TUESDAY_FLAG int, 
	INCLUDED_WEDNESDAY_FLAG int, 
	INCLUDED_THURSDAY_FLAG int, 
	INCLUDED_FRIDAY_FLAG int, 
	INCLUDED_SATURDAY_FLAG int, 
	INCLUDED_SUNDAY_FLAG int, 
	--daily values 
	MONDAY_SALES int, 
	MONDAY_SALES_REG int, 
	MONDAY_SALES_PROMO int, 
	MONDAY_SALES_MKDN int, 
	MONDAY_STOCK int, 
	MONDAY_STOCK_REG int, 
	MONDAY_STOCK_MKDN int, 
	MONDAY_IN_STOCK_DAY int, 
	MONDAY_IN_STOCK_DAY_FOR_OTHER_SIZES int, 
	MONDAY_SELL_THRU float, 
	TUESDAY_SALES int, 
	TUESDAY_SALES_REG int, 
	TUESDAY_SALES_PROMO int, 
	TUESDAY_SALES_MKDN int, 
	TUESDAY_STOCK int, 
	TUESDAY_STOCK_REG int, 
	TUESDAY_STOCK_MKDN int, 
	TUESDAY_IN_STOCK_DAY int, 
	TUESDAY_IN_STOCK_DAY_FOR_OTHER_SIZES int, 
	TUESDAY_SELL_THRU float, 
	WEDNESDAY_SALES int, 
	WEDNESDAY_SALES_REG int, 
	WEDNESDAY_SALES_PROMO int, 
	WEDNESDAY_SALES_MKDN int, 
	WEDNESDAY_STOCK int, 
	WEDNESDAY_STOCK_REG int, 
	WEDNESDAY_STOCK_MKDN int, 
	WEDNESDAY_IN_STOCK_DAY int, 
	WEDNESDAY_IN_STOCK_DAY_FOR_OTHER_SIZES int, 
	WEDNESDAY_SELL_THRU float, 
	THURSDAY_SALES int, 
	THURSDAY_SALES_REG int, 
	THURSDAY_SALES_PROMO int, 
	THURSDAY_SALES_MKDN int, 
	THURSDAY_STOCK int, 
	THURSDAY_STOCK_REG int, 
	THURSDAY_STOCK_MKDN int, 
	THURSDAY_IN_STOCK_DAY int, 
	THURSDAY_IN_STOCK_DAY_FOR_OTHER_SIZES int, 
	THURSDAY_SELL_THRU float, 
	FRIDAY_SALES int, 
	FRIDAY_SALES_REG int, 
	FRIDAY_SALES_PROMO int, 
	FRIDAY_SALES_MKDN int, 
	FRIDAY_STOCK int, 
	FRIDAY_STOCK_REG int, 
	FRIDAY_STOCK_MKDN int, 
	FRIDAY_IN_STOCK_DAY int, 
	FRIDAY_IN_STOCK_DAY_FOR_OTHER_SIZES int, 
	FRIDAY_SELL_THRU float, 
	SATURDAY_SALES int, 
	SATURDAY_SALES_REG int, 
	SATURDAY_SALES_PROMO int, 
	SATURDAY_SALES_MKDN int, 
	SATURDAY_STOCK int, 
	SATURDAY_STOCK_REG int, 
	SATURDAY_STOCK_MKDN int, 
	SATURDAY_IN_STOCK_DAY int, 
	SATURDAY_IN_STOCK_DAY_FOR_OTHER_SIZES int, 
	SATURDAY_SELL_THRU float, 
	SUNDAY_SALES int, 
	SUNDAY_SALES_REG int, 
	SUNDAY_SALES_PROMO int, 
	SUNDAY_SALES_MKDN int, 
	SUNDAY_STOCK int, 
	SUNDAY_STOCK_REG int, 
	SUNDAY_STOCK_MKDN int, 
	SUNDAY_IN_STOCK_DAY int, 
	SUNDAY_IN_STOCK_DAY_FOR_OTHER_SIZES int, 
	SUNDAY_SELL_THRU float 
	PRIMARY KEY (HN_RID, ST_RID, FIRST_DAY_OF_WEEK_TIME_ID) 
) 
INSERT INTO @SUMMARY_VIEW  
 SELECT			 
		HN_RID,  
		PARENT_HN_RID, 
		ST_RID,  
		FIRST_DAY_OF_WEEK_TIME_ID, 
		null, 
		null, 
		0 AS BEGINNING_OF_WEEK_STOCK, 
		0.0 AS SELLTHRU_LIMIT, 
		0 AS OUT_OF_STOCK_VALUE, 
		HN_RID % @STORE_TABLE_COUNT AS HN_MOD, 
		'I' AS INSERT_OR_UPDATE_FLAG, -- I to Insert, U to Update, setting default to insert 
		0 AS SALES, 
		0 AS SALES_REG, 
		0 AS SALES_PROMO, 
		0 AS SALES_MKDN, 
		0 AS STOCK, 
		0 AS STOCK_REG, 
		0 AS STOCK_MKDN, 
		0 AS IN_STOCK_SALES, 
		0 AS IN_STOCK_SALES_REG, 
		0 AS IN_STOCK_SALES_PROMO, 
		0 AS IN_STOCK_SALES_MKDN, 
		0 AS ACCUM_SELL_THRU_SALES, 
		0 AS ACCUM_SELL_THRU_STOCK, 
		0 AS DAYS_IN_STOCK, 
		0 AS RECEIVED_STOCK_PREVIOUS_WEEK, 
		0 AS RECEIVED_STOCK, 
		0 AS RECEIVED_STOCK_ALL_DAYS, 
		0 AS RECEIVED_STOCK_BY_MONDAY, 
		0 AS RECEIVED_STOCK_BY_TUESDAY, 
		0 AS RECEIVED_STOCK_BY_WEDNESDAY, 
		0 AS RECEIVED_STOCK_BY_THURSDAY, 
		0 AS RECEIVED_STOCK_BY_FRIDAY, 
		0 AS RECEIVED_STOCK_BY_SATURDAY, 
		0 AS RECEIVED_STOCK_BY_SUNDAY, 
		null AS	INCLUDED_MONDAY_FLAG, 
		null AS INCLUDED_TUESDAY_FLAG, 
	    null INCLUDED_WEDNESDAY_FLAG, 
	    null INCLUDED_THURSDAY_FLAG, 
		null INCLUDED_FRIDAY_FLAG, 
		null INCLUDED_SATURDAY_FLAG, 
		null INCLUDED_SUNDAY_FLAG, 
		sum(coalesce(MONDAY_SALES,0))			AS MONDAY_SALES, 
		sum(coalesce(MONDAY_SALES_REG,0))		AS MONDAY_SALES_REG, 
		sum(coalesce(MONDAY_SALES_PROMO,0))		AS MONDAY_SALES_PROMO, 
		sum(coalesce(MONDAY_SALES_MKDN,0))		AS MONDAY_SALES_MKDN, 
		sum(coalesce(MONDAY_STOCK,0))			AS MONDAY_STOCK, 
		sum(coalesce(MONDAY_STOCK_REG,0))		AS MONDAY_STOCK_REG, 
		sum(coalesce(MONDAY_STOCK_MKDN,0))		AS MONDAY_STOCK_MKDN, 
		sum(coalesce(MONDAY_IN_STOCK_DAY,0))	AS MONDAY_IN_STOCK_DAY, 
		0 AS MONDAY_IN_STOCK_DAY_FOR_OTHER_SIZES, 
		sum(coalesce(MONDAY_SELL_THRU,0))		AS MONDAY_SELL_THRU, 
		sum(coalesce(TUESDAY_SALES,0))			AS TUESDAY_SALES, 
		sum(coalesce(TUESDAY_SALES_REG,0))		AS TUESDAY_SALES_REG, 
		sum(coalesce(TUESDAY_SALES_PROMO,0))	AS TUESDAY_SALES_PROMO, 
		sum(coalesce(TUESDAY_SALES_MKDN,0))		AS TUESDAY_SALES_MKDN, 
		sum(coalesce(TUESDAY_STOCK,0))			AS TUESDAY_STOCK, 
		sum(coalesce(TUESDAY_STOCK_REG,0))		AS TUESDAY_STOCK_REG, 
		sum(coalesce(TUESDAY_STOCK_MKDN,0))		AS TUESDAY_STOCK_MKDN, 
		sum(coalesce(TUESDAY_IN_STOCK_DAY,0))	AS TUESDAY_IN_STOCK_DAY, 
		0 AS TUESDAY_IN_STOCK_DAY_FOR_OTHER_SIZES, 
		sum(coalesce(TUESDAY_SELL_THRU,0))		AS TUESDAY_SELL_THRU, 
		sum(coalesce(WEDNESDAY_SALES,0))		AS WEDNESDAY_SALES, 
		sum(coalesce(WEDNESDAY_SALES_REG,0))	AS WEDNESDAY_SALES_REG, 
		sum(coalesce(WEDNESDAY_SALES_PROMO,0))	AS WEDNESDAY_SALES_PROMO, 
		sum(coalesce(WEDNESDAY_SALES_MKDN,0))	AS WEDNESDAY_SALES_MKDN, 
		sum(coalesce(WEDNESDAY_STOCK,0))		AS WEDNESDAY_STOCK, 
		sum(coalesce(WEDNESDAY_STOCK_REG,0))	AS WEDNESDAY_STOCK_REG, 
		sum(coalesce(WEDNESDAY_STOCK_MKDN,0))	AS WEDNESDAY_STOCK_MKDN, 
		sum(coalesce(WEDNESDAY_IN_STOCK_DAY,0)) AS WEDNESDAY_IN_STOCK_DAY, 
		0 AS WEDNESDAY_IN_STOCK_DAY_FOR_OTHER_SIZES, 
		sum(coalesce(WEDNESDAY_SELL_THRU,0))	AS WEDNESDAY_SELL_THRU, 
		sum(coalesce(THURSDAY_SALES,0))			AS THURSDAY_SALES, 
		sum(coalesce(THURSDAY_SALES_REG,0))		AS THURSDAY_SALES_REG, 
		sum(coalesce(THURSDAY_SALES_PROMO,0))	AS THURSDAY_SALES_PROMO, 
		sum(coalesce(THURSDAY_SALES_MKDN,0))	AS THURSDAY_SALES_MKDN, 
		sum(coalesce(THURSDAY_STOCK,0))			AS THURSDAY_STOCK, 
		sum(coalesce(THURSDAY_STOCK_REG,0))		AS THURSDAY_STOCK_REG, 
		sum(coalesce(THURSDAY_STOCK_MKDN,0))	AS THURSDAY_STOCK_MKDN, 
		sum(coalesce(THURSDAY_IN_STOCK_DAY,0))	AS THURSDAY_IN_STOCK_DAY, 
		0 AS THURSDAY_IN_STOCK_DAY_FOR_OTHER_SIZES, 
		sum(coalesce(THURSDAY_SELL_THRU,0))		AS THURSDAY_SELL_THRU, 
		sum(coalesce(FRIDAY_SALES,0))			AS FRIDAY_SALES, 
		sum(coalesce(FRIDAY_SALES_REG,0))		AS FRIDAY_SALES_REG, 
		sum(coalesce(FRIDAY_SALES_PROMO,0))		AS FRIDAY_SALES_PROMO, 
		sum(coalesce(FRIDAY_SALES_MKDN,0))		AS FRIDAY_SALES_MKDN, 
		sum(coalesce(FRIDAY_STOCK,0))			AS FRIDAY_STOCK, 
		sum(coalesce(FRIDAY_STOCK_REG,0))		AS FRIDAY_STOCK_REG, 
		sum(coalesce(FRIDAY_STOCK_MKDN,0))		AS FRIDAY_STOCK_MKDN, 
		sum(coalesce(FRIDAY_IN_STOCK_DAY,0))	AS FRIDAY_IN_STOCK_DAY, 
		0 AS FRIDAY_IN_STOCK_DAY_FOR_OTHER_SIZES, 
		sum(coalesce(FRIDAY_SELL_THRU,0))		AS FRIDAY_SELL_THRU, 
		sum(coalesce(SATURDAY_SALES,0))			AS SATURDAY_SALES, 
		sum(coalesce(SATURDAY_SALES_REG,0))		AS SATURDAY_SALES_REG, 
		sum(coalesce(SATURDAY_SALES_PROMO,0))	AS SATURDAY_SALES_PROMO, 
		sum(coalesce(SATURDAY_SALES_MKDN,0))	AS SATURDAY_SALES_MKDN, 
		sum(coalesce(SATURDAY_STOCK,0))			AS SATURDAY_STOCK, 
		sum(coalesce(SATURDAY_STOCK_REG,0))		AS SATURDAY_STOCK_REG, 
		sum(coalesce(SATURDAY_STOCK_MKDN,0))	AS SATURDAY_STOCK_MKDN, 
		sum(coalesce(SATURDAY_IN_STOCK_DAY,0))	AS SATURDAY_IN_STOCK_DAY, 
		0 AS SATURDAY_IN_STOCK_DAY_FOR_OTHER_SIZES, 
		sum(coalesce(SATURDAY_SELL_THRU,0))		AS SATURDAY_SELL_THRU, 
		sum(coalesce(SUNDAY_SALES,0))			AS SUNDAY_SALES, 
		sum(coalesce(SUNDAY_SALES_REG,0))		AS SUNDAY_SALES_REG, 
		sum(coalesce(SUNDAY_SALES_PROMO,0))		AS SUNDAY_SALES_PROMO, 
		sum(coalesce(SUNDAY_SALES_MKDN,0))		AS SUNDAY_SALES_MKDN, 
		sum(coalesce(SUNDAY_STOCK,0))			AS SUNDAY_STOCK, 
		sum(coalesce(SUNDAY_STOCK_REG,0))		AS SUNDAY_STOCK_REG, 
		sum(coalesce(SUNDAY_STOCK_MKDN,0))		AS SUNDAY_STOCK_MKDN, 
		sum(coalesce(SUNDAY_IN_STOCK_DAY,0))	AS SUNDAY_IN_STOCK_DAY, 
		0 AS SUNDAY_IN_STOCK_DAY_FOR_OTHER_SIZES, 
		sum(coalesce(SUNDAY_SELL_THRU,0))		AS SUNDAY_SELL_THRU 
FROM @DATA_VIEW	    
GROUP BY HN_RID, ST_RID, FIRST_DAY_OF_WEEK_TIME_ID, PARENT_HN_RID 
UPDATE sv 
SET 
sv.FIRST_DAY_OF_WEEK_DATETIME=(SELECT dl.DATETIME_TIME_ID FROM @DAY_LOOKUP dl WHERE dl.TIME_ID = sv.FIRST_DAY_OF_WEEK_TIME_ID), 
sv.PREVIOUS_WEEK_TIME_ID= (SELECT dl.PREVIOUS_WEEK_TIME_ID FROM @DAY_LOOKUP dl WHERE dl.TIME_ID = sv.FIRST_DAY_OF_WEEK_TIME_ID) 
FROM @SUMMARY_VIEW sv 
INSERT INTO @PROCESS_SUMMARY SELECT 'Step 3: Summarize data for the week',DATEDIFF(millisecond, @TIME_TO_EXECUTE_PROCESS_STEP, getDate()),0,'Row Count:',(SELECT COUNT(*) FROM @SUMMARY_VIEW)  
--End Process Step 3: Summarize data for the week 
--Begin Process Step 4: Get the node size sell thru limits 
SET @TIME_TO_EXECUTE_PROCESS_STEP = getDate(); 
DECLARE @SELLTHRU_LIMITS TABLE	 
( 
	HN_RID int,   
	HOME_LEVEL int,  
	PH_RID int, 
	PARENT_HN_RID int, 
	SELLTHRU_LIMIT_FINAL float, 
	SELLTHRU_LIMIT_INHERITED_HN_RID int, 
	SELLTHRU_LIMIT_IS_INHERITED int 
) 
INSERT INTO @SELLTHRU_LIMITS  
SELECT	 
 	HN_RID, 
	HOME_LEVEL, 
	PH_RID, 
	PARENT_HN_RID, 
	SELLTHRU_LIMIT_FINAL, 
	SELLTHRU_LIMIT_INHERITED_HN_RID, 
	SELLTHRU_LIMIT_IS_INHERITED 
FROM [dbo].[UDF_HIERARCHY_GET_ACTIVE_SIZE_NODES_WITH_SELLTHRU_LIMITS_FROM_NODE] (@SELECTED_NODE_RID) 
INSERT INTO @PROCESS_SUMMARY SELECT 'Step 4: Get the node size sell thru limits',DATEDIFF(millisecond, @TIME_TO_EXECUTE_PROCESS_STEP, getDate()),0,'Row Count:',(SELECT COUNT(*) FROM @SELLTHRU_LIMITS)  
--End Process Step 4: Get the node size sell thru limits 
--Begin Process Step 5: Update summary with sell thru limits 
SET @TIME_TO_EXECUTE_PROCESS_STEP = getDate(); 
UPDATE sv 
SET sv.SELLTHRU_LIMIT = stl.SELLTHRU_LIMIT_FINAL 
FROM @SUMMARY_VIEW sv 
INNER JOIN @SELLTHRU_LIMITS stl ON sv.HN_RID=stl.HN_RID 
INSERT INTO @PROCESS_SUMMARY SELECT 'Step 5: Update summary with sell thru limits',DATEDIFF(millisecond, @TIME_TO_EXECUTE_PROCESS_STEP, getDate()),0,null,null 
--End Process Step 5: Update summary with sell thru limits 

--Begin Process Step 8: Apply rules and sum 
SET @TIME_TO_EXECUTE_PROCESS_STEP = getDate(); 
SET @TIME_TO_EXECUTE = getDate(); 
UPDATE sv 
SET  
sv.ACCUM_SELL_THRU_SALES= w.ACCUM_SELL_THRU_SALES, 
sv.ACCUM_SELL_THRU_STOCK= w.ACCUM_SELL_THRU_STOCK, 
sv.RECEIVED_STOCK_PREVIOUS_WEEK  = w.RECEIVED_STOCK 
FROM @SUMMARY_VIEW sv 
INNER JOIN [dbo].[STORE_HISTORY_WEEK0] w ON sv.HN_MOD=0 AND w.HN_RID=sv.HN_RID AND w.TIME_ID=sv.PREVIOUS_WEEK_TIME_ID AND w.ST_RID=sv.ST_RID 
UPDATE sv 
SET  
sv.ACCUM_SELL_THRU_SALES= w.ACCUM_SELL_THRU_SALES, 
sv.ACCUM_SELL_THRU_STOCK= w.ACCUM_SELL_THRU_STOCK, 
sv.RECEIVED_STOCK_PREVIOUS_WEEK  = w.RECEIVED_STOCK 
FROM @SUMMARY_VIEW sv 
INNER JOIN [dbo].[STORE_HISTORY_WEEK1] w ON sv.HN_MOD=1 AND w.HN_RID=sv.HN_RID AND w.TIME_ID=sv.PREVIOUS_WEEK_TIME_ID AND w.ST_RID=sv.ST_RID 
UPDATE sv 
SET  
sv.ACCUM_SELL_THRU_SALES= w.ACCUM_SELL_THRU_SALES, 
sv.ACCUM_SELL_THRU_STOCK= w.ACCUM_SELL_THRU_STOCK, 
sv.RECEIVED_STOCK_PREVIOUS_WEEK  = w.RECEIVED_STOCK 
FROM @SUMMARY_VIEW sv 
INNER JOIN [dbo].[STORE_HISTORY_WEEK2] w ON sv.HN_MOD=2 AND w.HN_RID=sv.HN_RID AND w.TIME_ID=sv.PREVIOUS_WEEK_TIME_ID AND w.ST_RID=sv.ST_RID 
UPDATE sv 
SET  
sv.ACCUM_SELL_THRU_SALES= w.ACCUM_SELL_THRU_SALES, 
sv.ACCUM_SELL_THRU_STOCK= w.ACCUM_SELL_THRU_STOCK, 
sv.RECEIVED_STOCK_PREVIOUS_WEEK  = w.RECEIVED_STOCK 
FROM @SUMMARY_VIEW sv 
INNER JOIN [dbo].[STORE_HISTORY_WEEK3] w ON sv.HN_MOD=3 AND w.HN_RID=sv.HN_RID AND w.TIME_ID=sv.PREVIOUS_WEEK_TIME_ID AND w.ST_RID=sv.ST_RID 
UPDATE sv 
SET  
sv.ACCUM_SELL_THRU_SALES= w.ACCUM_SELL_THRU_SALES, 
sv.ACCUM_SELL_THRU_STOCK= w.ACCUM_SELL_THRU_STOCK, 
sv.RECEIVED_STOCK_PREVIOUS_WEEK  = w.RECEIVED_STOCK 
FROM @SUMMARY_VIEW sv 
INNER JOIN [dbo].[STORE_HISTORY_WEEK4] w ON sv.HN_MOD=4 AND w.HN_RID=sv.HN_RID AND w.TIME_ID=sv.PREVIOUS_WEEK_TIME_ID AND w.ST_RID=sv.ST_RID 
UPDATE sv 
SET  
sv.ACCUM_SELL_THRU_SALES= w.ACCUM_SELL_THRU_SALES, 
sv.ACCUM_SELL_THRU_STOCK= w.ACCUM_SELL_THRU_STOCK, 
sv.RECEIVED_STOCK_PREVIOUS_WEEK  = w.RECEIVED_STOCK 
FROM @SUMMARY_VIEW sv 
INNER JOIN [dbo].[STORE_HISTORY_WEEK5] w ON sv.HN_MOD=5 AND w.HN_RID=sv.HN_RID AND w.TIME_ID=sv.PREVIOUS_WEEK_TIME_ID AND w.ST_RID=sv.ST_RID 
UPDATE sv 
SET  
sv.ACCUM_SELL_THRU_SALES= w.ACCUM_SELL_THRU_SALES, 
sv.ACCUM_SELL_THRU_STOCK= w.ACCUM_SELL_THRU_STOCK, 
sv.RECEIVED_STOCK_PREVIOUS_WEEK  = w.RECEIVED_STOCK 
FROM @SUMMARY_VIEW sv 
INNER JOIN [dbo].[STORE_HISTORY_WEEK6] w ON sv.HN_MOD=6 AND w.HN_RID=sv.HN_RID AND w.TIME_ID=sv.PREVIOUS_WEEK_TIME_ID AND w.ST_RID=sv.ST_RID 
UPDATE sv 
SET  
sv.ACCUM_SELL_THRU_SALES= w.ACCUM_SELL_THRU_SALES, 
sv.ACCUM_SELL_THRU_STOCK= w.ACCUM_SELL_THRU_STOCK, 
sv.RECEIVED_STOCK_PREVIOUS_WEEK  = w.RECEIVED_STOCK 
FROM @SUMMARY_VIEW sv 
INNER JOIN [dbo].[STORE_HISTORY_WEEK7] w ON sv.HN_MOD=7 AND w.HN_RID=sv.HN_RID AND w.TIME_ID=sv.PREVIOUS_WEEK_TIME_ID AND w.ST_RID=sv.ST_RID 
UPDATE sv 
SET  
sv.ACCUM_SELL_THRU_SALES= w.ACCUM_SELL_THRU_SALES, 
sv.ACCUM_SELL_THRU_STOCK= w.ACCUM_SELL_THRU_STOCK, 
sv.RECEIVED_STOCK_PREVIOUS_WEEK  = w.RECEIVED_STOCK 
FROM @SUMMARY_VIEW sv 
INNER JOIN [dbo].[STORE_HISTORY_WEEK8] w ON sv.HN_MOD=8 AND w.HN_RID=sv.HN_RID AND w.TIME_ID=sv.PREVIOUS_WEEK_TIME_ID AND w.ST_RID=sv.ST_RID 
UPDATE sv 
SET  
sv.ACCUM_SELL_THRU_SALES= w.ACCUM_SELL_THRU_SALES, 
sv.ACCUM_SELL_THRU_STOCK= w.ACCUM_SELL_THRU_STOCK, 
sv.RECEIVED_STOCK_PREVIOUS_WEEK  = w.RECEIVED_STOCK 
FROM @SUMMARY_VIEW sv 
INNER JOIN [dbo].[STORE_HISTORY_WEEK9] w ON sv.HN_MOD=9 AND w.HN_RID=sv.HN_RID AND w.TIME_ID=sv.PREVIOUS_WEEK_TIME_ID AND w.ST_RID=sv.ST_RID 
INSERT INTO @PROCESS_SUMMARY SELECT 'Step 8c: Apply rules and sum - Get previous weeks accum sell thru sales and stock',0,DATEDIFF(millisecond, @TIME_TO_EXECUTE, getDate()),null, null 
SET @TIME_TO_EXECUTE = getDate(); 
UPDATE sv 
SET sv.DAYS_IN_STOCK = sv.MONDAY_IN_STOCK_DAY + sv.TUESDAY_IN_STOCK_DAY + sv.WEDNESDAY_IN_STOCK_DAY + sv.THURSDAY_IN_STOCK_DAY + sv.FRIDAY_IN_STOCK_DAY + sv.SATURDAY_IN_STOCK_DAY + sv.SUNDAY_IN_STOCK_DAY, 
sv.RECEIVED_STOCK_ALL_DAYS = CASE WHEN (sv.MONDAY_IN_STOCK_DAY + sv.TUESDAY_IN_STOCK_DAY + sv.WEDNESDAY_IN_STOCK_DAY + sv.THURSDAY_IN_STOCK_DAY + sv.FRIDAY_IN_STOCK_DAY + sv.SATURDAY_IN_STOCK_DAY + sv.SUNDAY_IN_STOCK_DAY) > 0 THEN 1 ELSE RECEIVED_STOCK_PREVIOUS_WEEK END, 
sv.RECEIVED_STOCK_BY_MONDAY = 
	CASE 
	WHEN DATENAME(dw, FIRST_DAY_OF_WEEK_DATETIME) = 'Monday' THEN 
		CASE WHEN (sv.MONDAY_IN_STOCK_DAY) > 0 THEN 1 ELSE RECEIVED_STOCK_PREVIOUS_WEEK END 
	WHEN DATENAME(dw, FIRST_DAY_OF_WEEK_DATETIME) = 'Tuesday' THEN 
		CASE WHEN (sv.TUESDAY_IN_STOCK_DAY + sv.WEDNESDAY_IN_STOCK_DAY + sv.THURSDAY_IN_STOCK_DAY + sv.FRIDAY_IN_STOCK_DAY + sv.SATURDAY_IN_STOCK_DAY + sv.SUNDAY_IN_STOCK_DAY + sv.MONDAY_IN_STOCK_DAY) > 0 THEN 1 ELSE RECEIVED_STOCK_PREVIOUS_WEEK END 
	WHEN DATENAME(dw, FIRST_DAY_OF_WEEK_DATETIME) = 'Wednesday' THEN 
		CASE WHEN (sv.WEDNESDAY_IN_STOCK_DAY + sv.THURSDAY_IN_STOCK_DAY + sv.FRIDAY_IN_STOCK_DAY + sv.SATURDAY_IN_STOCK_DAY + sv.SUNDAY_IN_STOCK_DAY + sv.MONDAY_IN_STOCK_DAY) > 0 THEN 1 ELSE RECEIVED_STOCK_PREVIOUS_WEEK END 
	WHEN DATENAME(dw, FIRST_DAY_OF_WEEK_DATETIME) = 'Thursday' THEN 
		CASE WHEN (sv.THURSDAY_IN_STOCK_DAY + sv.FRIDAY_IN_STOCK_DAY + sv.SATURDAY_IN_STOCK_DAY + sv.SUNDAY_IN_STOCK_DAY + sv.MONDAY_IN_STOCK_DAY) > 0 THEN 1 ELSE RECEIVED_STOCK_PREVIOUS_WEEK END 
	WHEN DATENAME(dw, FIRST_DAY_OF_WEEK_DATETIME) = 'Friday' THEN 
		CASE WHEN (sv.FRIDAY_IN_STOCK_DAY + sv.SATURDAY_IN_STOCK_DAY + sv.SUNDAY_IN_STOCK_DAY + sv.MONDAY_IN_STOCK_DAY) > 0 THEN 1 ELSE RECEIVED_STOCK_PREVIOUS_WEEK END 
	WHEN DATENAME(dw, FIRST_DAY_OF_WEEK_DATETIME) = 'Saturday' THEN 
		CASE WHEN (sv.SATURDAY_IN_STOCK_DAY + sv.SUNDAY_IN_STOCK_DAY + sv.MONDAY_IN_STOCK_DAY) > 0 THEN 1 ELSE RECEIVED_STOCK_PREVIOUS_WEEK END 
	WHEN DATENAME(dw, FIRST_DAY_OF_WEEK_DATETIME) = 'Sunday' THEN 
		CASE WHEN (sv.SUNDAY_IN_STOCK_DAY + sv.MONDAY_IN_STOCK_DAY) > 0 THEN 1 ELSE RECEIVED_STOCK_PREVIOUS_WEEK END 
	END, 
sv.RECEIVED_STOCK_BY_TUESDAY =  
	CASE 
	WHEN DATENAME(dw, FIRST_DAY_OF_WEEK_DATETIME) = 'Monday' THEN 
		CASE WHEN (sv.MONDAY_IN_STOCK_DAY + sv.TUESDAY_IN_STOCK_DAY) > 0 THEN 1 ELSE RECEIVED_STOCK_PREVIOUS_WEEK END 
	WHEN DATENAME(dw, FIRST_DAY_OF_WEEK_DATETIME) = 'Tuesday' THEN 
		CASE WHEN (sv.TUESDAY_IN_STOCK_DAY) > 0 THEN 1 ELSE RECEIVED_STOCK_PREVIOUS_WEEK END 
	WHEN DATENAME(dw, FIRST_DAY_OF_WEEK_DATETIME) = 'Wednesday' THEN 
		CASE WHEN (sv.WEDNESDAY_IN_STOCK_DAY + sv.THURSDAY_IN_STOCK_DAY + sv.FRIDAY_IN_STOCK_DAY + sv.SATURDAY_IN_STOCK_DAY + sv.SUNDAY_IN_STOCK_DAY + sv.MONDAY_IN_STOCK_DAY + sv.TUESDAY_IN_STOCK_DAY) > 0 THEN 1 ELSE RECEIVED_STOCK_PREVIOUS_WEEK END 
	WHEN DATENAME(dw, FIRST_DAY_OF_WEEK_DATETIME) = 'Thursday' THEN 
		CASE WHEN (sv.THURSDAY_IN_STOCK_DAY + sv.FRIDAY_IN_STOCK_DAY + sv.SATURDAY_IN_STOCK_DAY + sv.SUNDAY_IN_STOCK_DAY + sv.MONDAY_IN_STOCK_DAY + sv.TUESDAY_IN_STOCK_DAY) > 0 THEN 1 ELSE RECEIVED_STOCK_PREVIOUS_WEEK END 
	WHEN DATENAME(dw, FIRST_DAY_OF_WEEK_DATETIME) = 'Friday' THEN 
		CASE WHEN (sv.FRIDAY_IN_STOCK_DAY + sv.SATURDAY_IN_STOCK_DAY + sv.SUNDAY_IN_STOCK_DAY + sv.MONDAY_IN_STOCK_DAY + sv.TUESDAY_IN_STOCK_DAY) > 0 THEN 1 ELSE RECEIVED_STOCK_PREVIOUS_WEEK END 
	WHEN DATENAME(dw, FIRST_DAY_OF_WEEK_DATETIME) = 'Saturday' THEN 
		CASE WHEN (sv.SATURDAY_IN_STOCK_DAY + sv.SUNDAY_IN_STOCK_DAY + sv.MONDAY_IN_STOCK_DAY + sv.TUESDAY_IN_STOCK_DAY) > 0 THEN 1 ELSE RECEIVED_STOCK_PREVIOUS_WEEK END 
	WHEN DATENAME(dw, FIRST_DAY_OF_WEEK_DATETIME) = 'Sunday' THEN 
		CASE WHEN (sv.SUNDAY_IN_STOCK_DAY + sv.MONDAY_IN_STOCK_DAY + sv.TUESDAY_IN_STOCK_DAY) > 0 THEN 1 ELSE RECEIVED_STOCK_PREVIOUS_WEEK END 
	END, 
sv.RECEIVED_STOCK_BY_WEDNESDAY = 
	CASE 
	WHEN DATENAME(dw, FIRST_DAY_OF_WEEK_DATETIME) = 'Monday' THEN 
		CASE WHEN (sv.MONDAY_IN_STOCK_DAY + sv.TUESDAY_IN_STOCK_DAY + sv.WEDNESDAY_IN_STOCK_DAY) > 0 THEN 1 ELSE RECEIVED_STOCK_PREVIOUS_WEEK END 
	WHEN DATENAME(dw, FIRST_DAY_OF_WEEK_DATETIME) = 'Tuesday' THEN 
		CASE WHEN (sv.TUESDAY_IN_STOCK_DAY + sv.WEDNESDAY_IN_STOCK_DAY) > 0 THEN 1 ELSE RECEIVED_STOCK_PREVIOUS_WEEK END 
	WHEN DATENAME(dw, FIRST_DAY_OF_WEEK_DATETIME) = 'Wednesday' THEN 
		CASE WHEN (sv.WEDNESDAY_IN_STOCK_DAY) > 0 THEN 1 ELSE RECEIVED_STOCK_PREVIOUS_WEEK END 
	WHEN DATENAME(dw, FIRST_DAY_OF_WEEK_DATETIME) = 'Thursday' THEN 
		CASE WHEN (sv.THURSDAY_IN_STOCK_DAY + sv.FRIDAY_IN_STOCK_DAY + sv.SATURDAY_IN_STOCK_DAY + sv.SUNDAY_IN_STOCK_DAY + sv.MONDAY_IN_STOCK_DAY + sv.TUESDAY_IN_STOCK_DAY + sv.WEDNESDAY_IN_STOCK_DAY) > 0 THEN 1 ELSE RECEIVED_STOCK_PREVIOUS_WEEK END 
	WHEN DATENAME(dw, FIRST_DAY_OF_WEEK_DATETIME) = 'Friday' THEN 
		CASE WHEN (sv.FRIDAY_IN_STOCK_DAY + sv.SATURDAY_IN_STOCK_DAY + sv.SUNDAY_IN_STOCK_DAY + sv.MONDAY_IN_STOCK_DAY + sv.TUESDAY_IN_STOCK_DAY + sv.WEDNESDAY_IN_STOCK_DAY) > 0 THEN 1 ELSE RECEIVED_STOCK_PREVIOUS_WEEK END 
	WHEN DATENAME(dw, FIRST_DAY_OF_WEEK_DATETIME) = 'Saturday' THEN 
		CASE WHEN (sv.SATURDAY_IN_STOCK_DAY + sv.SUNDAY_IN_STOCK_DAY + sv.MONDAY_IN_STOCK_DAY + sv.TUESDAY_IN_STOCK_DAY + sv.WEDNESDAY_IN_STOCK_DAY) > 0 THEN 1 ELSE RECEIVED_STOCK_PREVIOUS_WEEK END 
	WHEN DATENAME(dw, FIRST_DAY_OF_WEEK_DATETIME) = 'Sunday' THEN 
		CASE WHEN (sv.SUNDAY_IN_STOCK_DAY + sv.MONDAY_IN_STOCK_DAY + sv.TUESDAY_IN_STOCK_DAY + sv.WEDNESDAY_IN_STOCK_DAY) > 0 THEN 1 ELSE RECEIVED_STOCK_PREVIOUS_WEEK END 
	END, 
sv.RECEIVED_STOCK_BY_THURSDAY = 
	CASE 
	WHEN DATENAME(dw, FIRST_DAY_OF_WEEK_DATETIME) = 'Monday' THEN 
		CASE WHEN (sv.MONDAY_IN_STOCK_DAY + sv.TUESDAY_IN_STOCK_DAY + sv.WEDNESDAY_IN_STOCK_DAY + sv.THURSDAY_IN_STOCK_DAY) > 0 THEN 1 ELSE RECEIVED_STOCK_PREVIOUS_WEEK END 
	WHEN DATENAME(dw, FIRST_DAY_OF_WEEK_DATETIME) = 'Tuesday' THEN 
		CASE WHEN (sv.TUESDAY_IN_STOCK_DAY + sv.WEDNESDAY_IN_STOCK_DAY + sv.THURSDAY_IN_STOCK_DAY) > 0 THEN 1 ELSE RECEIVED_STOCK_PREVIOUS_WEEK END 
	WHEN DATENAME(dw, FIRST_DAY_OF_WEEK_DATETIME) = 'Wednesday' THEN 
		CASE WHEN (sv.WEDNESDAY_IN_STOCK_DAY + sv.THURSDAY_IN_STOCK_DAY) > 0 THEN 1 ELSE RECEIVED_STOCK_PREVIOUS_WEEK END 
	WHEN DATENAME(dw, FIRST_DAY_OF_WEEK_DATETIME) = 'Thursday' THEN 
		CASE WHEN (sv.THURSDAY_IN_STOCK_DAY) > 0 THEN 1 ELSE RECEIVED_STOCK_PREVIOUS_WEEK END 
	WHEN DATENAME(dw, FIRST_DAY_OF_WEEK_DATETIME) = 'Friday' THEN 
		CASE WHEN (sv.FRIDAY_IN_STOCK_DAY + sv.SATURDAY_IN_STOCK_DAY + sv.SUNDAY_IN_STOCK_DAY + sv.MONDAY_IN_STOCK_DAY + sv.TUESDAY_IN_STOCK_DAY + sv.WEDNESDAY_IN_STOCK_DAY + sv.THURSDAY_IN_STOCK_DAY) > 0 THEN 1 ELSE RECEIVED_STOCK_PREVIOUS_WEEK END 
	WHEN DATENAME(dw, FIRST_DAY_OF_WEEK_DATETIME) = 'Saturday' THEN 
		CASE WHEN (sv.SATURDAY_IN_STOCK_DAY + sv.SUNDAY_IN_STOCK_DAY + sv.MONDAY_IN_STOCK_DAY + sv.TUESDAY_IN_STOCK_DAY + sv.WEDNESDAY_IN_STOCK_DAY + sv.THURSDAY_IN_STOCK_DAY) > 0 THEN 1 ELSE RECEIVED_STOCK_PREVIOUS_WEEK END 
	WHEN DATENAME(dw, FIRST_DAY_OF_WEEK_DATETIME) = 'Sunday' THEN 
		CASE WHEN (sv.SUNDAY_IN_STOCK_DAY + sv.MONDAY_IN_STOCK_DAY + sv.TUESDAY_IN_STOCK_DAY + sv.WEDNESDAY_IN_STOCK_DAY + sv.THURSDAY_IN_STOCK_DAY) > 0 THEN 1 ELSE RECEIVED_STOCK_PREVIOUS_WEEK END 
	END, 
sv.RECEIVED_STOCK_BY_FRIDAY = 
	CASE 
	WHEN DATENAME(dw, FIRST_DAY_OF_WEEK_DATETIME) = 'Monday' THEN 
		CASE WHEN (sv.MONDAY_IN_STOCK_DAY + sv.TUESDAY_IN_STOCK_DAY + sv.WEDNESDAY_IN_STOCK_DAY + sv.THURSDAY_IN_STOCK_DAY + sv.FRIDAY_IN_STOCK_DAY) > 0 THEN 1 ELSE RECEIVED_STOCK_PREVIOUS_WEEK END 
	WHEN DATENAME(dw, FIRST_DAY_OF_WEEK_DATETIME) = 'Tuesday' THEN 
		CASE WHEN (sv.TUESDAY_IN_STOCK_DAY + sv.WEDNESDAY_IN_STOCK_DAY + sv.THURSDAY_IN_STOCK_DAY + sv.FRIDAY_IN_STOCK_DAY) > 0 THEN 1 ELSE RECEIVED_STOCK_PREVIOUS_WEEK END 
	WHEN DATENAME(dw, FIRST_DAY_OF_WEEK_DATETIME) = 'Wednesday' THEN 
		CASE WHEN (sv.WEDNESDAY_IN_STOCK_DAY + sv.THURSDAY_IN_STOCK_DAY + sv.FRIDAY_IN_STOCK_DAY) > 0 THEN 1 ELSE RECEIVED_STOCK_PREVIOUS_WEEK END 
	WHEN DATENAME(dw, FIRST_DAY_OF_WEEK_DATETIME) = 'Thursday' THEN 
		CASE WHEN (sv.THURSDAY_IN_STOCK_DAY + sv.FRIDAY_IN_STOCK_DAY) > 0 THEN 1 ELSE RECEIVED_STOCK_PREVIOUS_WEEK END 
	WHEN DATENAME(dw, FIRST_DAY_OF_WEEK_DATETIME) = 'Friday' THEN 
		CASE WHEN (sv.FRIDAY_IN_STOCK_DAY) > 0 THEN 1 ELSE RECEIVED_STOCK_PREVIOUS_WEEK END 
	WHEN DATENAME(dw, FIRST_DAY_OF_WEEK_DATETIME) = 'Saturday' THEN 
		CASE WHEN (sv.SATURDAY_IN_STOCK_DAY + sv.SUNDAY_IN_STOCK_DAY + sv.MONDAY_IN_STOCK_DAY + sv.TUESDAY_IN_STOCK_DAY + sv.WEDNESDAY_IN_STOCK_DAY + sv.THURSDAY_IN_STOCK_DAY + sv.FRIDAY_IN_STOCK_DAY) > 0 THEN 1 ELSE RECEIVED_STOCK_PREVIOUS_WEEK END 
	WHEN DATENAME(dw, FIRST_DAY_OF_WEEK_DATETIME) = 'Sunday' THEN 
		CASE WHEN (sv.SUNDAY_IN_STOCK_DAY + sv.MONDAY_IN_STOCK_DAY + sv.TUESDAY_IN_STOCK_DAY + sv.WEDNESDAY_IN_STOCK_DAY + sv.THURSDAY_IN_STOCK_DAY + sv.FRIDAY_IN_STOCK_DAY) > 0 THEN 1 ELSE RECEIVED_STOCK_PREVIOUS_WEEK END 
	END, 
sv.RECEIVED_STOCK_BY_SATURDAY = 
	CASE 
	WHEN DATENAME(dw, FIRST_DAY_OF_WEEK_DATETIME) = 'Monday' THEN 
		CASE WHEN (sv.MONDAY_IN_STOCK_DAY + sv.TUESDAY_IN_STOCK_DAY + sv.WEDNESDAY_IN_STOCK_DAY + sv.THURSDAY_IN_STOCK_DAY + sv.FRIDAY_IN_STOCK_DAY + sv.SATURDAY_IN_STOCK_DAY) > 0 THEN 1 ELSE RECEIVED_STOCK_PREVIOUS_WEEK END 
	WHEN DATENAME(dw, FIRST_DAY_OF_WEEK_DATETIME) = 'Tuesday' THEN 
		CASE WHEN (sv.TUESDAY_IN_STOCK_DAY + sv.WEDNESDAY_IN_STOCK_DAY + sv.THURSDAY_IN_STOCK_DAY + sv.FRIDAY_IN_STOCK_DAY + sv.SATURDAY_IN_STOCK_DAY) > 0 THEN 1 ELSE RECEIVED_STOCK_PREVIOUS_WEEK END 
	WHEN DATENAME(dw, FIRST_DAY_OF_WEEK_DATETIME) = 'Wednesday' THEN 
		CASE WHEN (sv.WEDNESDAY_IN_STOCK_DAY + sv.THURSDAY_IN_STOCK_DAY + sv.FRIDAY_IN_STOCK_DAY + sv.SATURDAY_IN_STOCK_DAY) > 0 THEN 1 ELSE RECEIVED_STOCK_PREVIOUS_WEEK END 
	WHEN DATENAME(dw, FIRST_DAY_OF_WEEK_DATETIME) = 'Thursday' THEN 
		CASE WHEN (sv.THURSDAY_IN_STOCK_DAY + sv.FRIDAY_IN_STOCK_DAY + sv.SATURDAY_IN_STOCK_DAY) > 0 THEN 1 ELSE RECEIVED_STOCK_PREVIOUS_WEEK END 
	WHEN DATENAME(dw, FIRST_DAY_OF_WEEK_DATETIME) = 'Friday' THEN 
		CASE WHEN (sv.FRIDAY_IN_STOCK_DAY + sv.SATURDAY_IN_STOCK_DAY) > 0 THEN 1 ELSE RECEIVED_STOCK_PREVIOUS_WEEK END 
	WHEN DATENAME(dw, FIRST_DAY_OF_WEEK_DATETIME) = 'Saturday' THEN 
		CASE WHEN (sv.SATURDAY_IN_STOCK_DAY) > 0 THEN 1 ELSE RECEIVED_STOCK_PREVIOUS_WEEK END 
	WHEN DATENAME(dw, FIRST_DAY_OF_WEEK_DATETIME) = 'Sunday' THEN 
		CASE WHEN (sv.SUNDAY_IN_STOCK_DAY + sv.MONDAY_IN_STOCK_DAY + sv.TUESDAY_IN_STOCK_DAY + sv.WEDNESDAY_IN_STOCK_DAY + sv.THURSDAY_IN_STOCK_DAY + sv.FRIDAY_IN_STOCK_DAY + sv.SATURDAY_IN_STOCK_DAY) > 0 THEN 1 ELSE RECEIVED_STOCK_PREVIOUS_WEEK END 
	END, 
sv.RECEIVED_STOCK_BY_SUNDAY = 
	CASE 
	WHEN DATENAME(dw, FIRST_DAY_OF_WEEK_DATETIME) = 'Monday' THEN 
		CASE WHEN (sv.MONDAY_IN_STOCK_DAY + sv.TUESDAY_IN_STOCK_DAY + sv.WEDNESDAY_IN_STOCK_DAY + sv.THURSDAY_IN_STOCK_DAY + sv.FRIDAY_IN_STOCK_DAY + sv.SATURDAY_IN_STOCK_DAY + sv.SUNDAY_IN_STOCK_DAY) > 0 THEN 1 ELSE RECEIVED_STOCK_PREVIOUS_WEEK END 
	WHEN DATENAME(dw, FIRST_DAY_OF_WEEK_DATETIME) = 'Tuesday' THEN 
		CASE WHEN (sv.TUESDAY_IN_STOCK_DAY + sv.WEDNESDAY_IN_STOCK_DAY + sv.THURSDAY_IN_STOCK_DAY + sv.FRIDAY_IN_STOCK_DAY + sv.SATURDAY_IN_STOCK_DAY + sv.SUNDAY_IN_STOCK_DAY) > 0 THEN 1 ELSE RECEIVED_STOCK_PREVIOUS_WEEK END 
	WHEN DATENAME(dw, FIRST_DAY_OF_WEEK_DATETIME) = 'Wednesday' THEN 
		CASE WHEN (sv.WEDNESDAY_IN_STOCK_DAY + sv.THURSDAY_IN_STOCK_DAY + sv.FRIDAY_IN_STOCK_DAY + sv.SATURDAY_IN_STOCK_DAY + sv.SUNDAY_IN_STOCK_DAY) > 0 THEN 1 ELSE RECEIVED_STOCK_PREVIOUS_WEEK END 
	WHEN DATENAME(dw, FIRST_DAY_OF_WEEK_DATETIME) = 'Thursday' THEN 
		CASE WHEN (sv.THURSDAY_IN_STOCK_DAY + sv.FRIDAY_IN_STOCK_DAY + sv.SATURDAY_IN_STOCK_DAY + sv.SUNDAY_IN_STOCK_DAY) > 0 THEN 1 ELSE RECEIVED_STOCK_PREVIOUS_WEEK END 
	WHEN DATENAME(dw, FIRST_DAY_OF_WEEK_DATETIME) = 'Friday' THEN 
		CASE WHEN (sv.FRIDAY_IN_STOCK_DAY + sv.SATURDAY_IN_STOCK_DAY + sv.SUNDAY_IN_STOCK_DAY) > 0 THEN 1 ELSE RECEIVED_STOCK_PREVIOUS_WEEK END 
	WHEN DATENAME(dw, FIRST_DAY_OF_WEEK_DATETIME) = 'Saturday' THEN 
		CASE WHEN (sv.SATURDAY_IN_STOCK_DAY + sv.SUNDAY_IN_STOCK_DAY) > 0 THEN 1 ELSE RECEIVED_STOCK_PREVIOUS_WEEK END 
	WHEN DATENAME(dw, FIRST_DAY_OF_WEEK_DATETIME) = 'Sunday' THEN 
		CASE WHEN (sv.SUNDAY_IN_STOCK_DAY) > 0 THEN 1 ELSE RECEIVED_STOCK_PREVIOUS_WEEK END 
	END 
FROM @SUMMARY_VIEW sv 
INSERT INTO @PROCESS_SUMMARY SELECT 'Step 8a: Apply rules and sum - Calculate Days in Stock',0,DATEDIFF(millisecond, @TIME_TO_EXECUTE, getDate()),null, null 
SET @TIME_TO_EXECUTE = getDate(); 
DECLARE @COLOR_IN_STOCK_DAYS TABLE	 
( 
	PARENT_HN_RID int,   
	ST_RID int,  
	FIRST_DAY_OF_WEEK_TIME_ID int, 
	COUNT_OF_OTHER_SIZES int, 
	MONDAY_IN_STOCK_DAY_FOR_OTHER_SIZES int, 
	TUESDAY_IN_STOCK_DAY_FOR_OTHER_SIZES int, 
	WEDNESDAY_IN_STOCK_DAY_FOR_OTHER_SIZES int, 
	THURSDAY_IN_STOCK_DAY_FOR_OTHER_SIZES int, 
	FRIDAY_IN_STOCK_DAY_FOR_OTHER_SIZES int, 
	SATURDAY_IN_STOCK_DAY_FOR_OTHER_SIZES int, 
	SUNDAY_IN_STOCK_DAY_FOR_OTHER_SIZES int 
	PRIMARY KEY (PARENT_HN_RID, ST_RID, FIRST_DAY_OF_WEEK_TIME_ID) 
) 
--add all the in-stock-days for the sizes together 
INSERT INTO @COLOR_IN_STOCK_DAYS  
 SELECT			 
		PARENT_HN_RID,  
		ST_RID,  
		FIRST_DAY_OF_WEEK_TIME_ID, 
COUNT(PARENT_HN_RID) -1  AS COUNT_OF_OTHER_SIZES, 
--when received stock is zero, treat all days for that size as an In Stock day 
SUM(CASE WHEN RECEIVED_STOCK_BY_MONDAY=0 THEN 1 ELSE MONDAY_IN_STOCK_DAY END) 	AS MONDAY_IN_STOCK_DAY_FOR_OTHER_SIZES, 
SUM(CASE WHEN RECEIVED_STOCK_BY_TUESDAY=0 THEN 1 ELSE TUESDAY_IN_STOCK_DAY END)  AS TUESDAY_IN_STOCK_DAY_FOR_OTHER_SIZES, 
SUM(CASE WHEN RECEIVED_STOCK_BY_WEDNESDAY=0 THEN 1 ELSE WEDNESDAY_IN_STOCK_DAY END)  AS WEDNESDAY_IN_STOCK_DAY_FOR_OTHER_SIZES, 
SUM(CASE WHEN RECEIVED_STOCK_BY_THURSDAY=0 THEN 1 ELSE THURSDAY_IN_STOCK_DAY END)  AS THURSDAY_IN_STOCK_DAY_FOR_OTHER_SIZES, 
SUM(CASE WHEN RECEIVED_STOCK_BY_FRIDAY=0 THEN 1 ELSE FRIDAY_IN_STOCK_DAY END)  AS FRIDAY_IN_STOCK_DAY_FOR_OTHER_SIZES, 
SUM(CASE WHEN RECEIVED_STOCK_BY_SATURDAY=0 THEN 1 ELSE SATURDAY_IN_STOCK_DAY END)  AS SATURDAY_IN_STOCK_DAY_FOR_OTHER_SIZES, 
SUM(CASE WHEN RECEIVED_STOCK_BY_SUNDAY=0 THEN 1 ELSE SUNDAY_IN_STOCK_DAY END)  AS SUNDAY_IN_STOCK_DAY_FOR_OTHER_SIZES 
FROM @SUMMARY_VIEW	    
GROUP BY PARENT_HN_RID, ST_RID, FIRST_DAY_OF_WEEK_TIME_ID 
INSERT INTO @PROCESS_SUMMARY SELECT 'Step 8b1: Apply rules and sum - Calculate In Stock Days for other sizes',0,DATEDIFF(millisecond, @TIME_TO_EXECUTE, getDate()),null, null 
--subtract out its own in stock day 
UPDATE sv 
SET  
sv.MONDAY_IN_STOCK_DAY_FOR_OTHER_SIZES = CASE WHEN (cisd.MONDAY_IN_STOCK_DAY_FOR_OTHER_SIZES - (CASE WHEN sv.RECEIVED_STOCK_BY_MONDAY=0 THEN 1 ELSE sv.MONDAY_IN_STOCK_DAY END)) = COUNT_OF_OTHER_SIZES THEN 1 ELSE 0 END, 
sv.TUESDAY_IN_STOCK_DAY_FOR_OTHER_SIZES = CASE WHEN (cisd.TUESDAY_IN_STOCK_DAY_FOR_OTHER_SIZES - (CASE WHEN sv.RECEIVED_STOCK_BY_TUESDAY=0 THEN 1 ELSE sv.TUESDAY_IN_STOCK_DAY END)) = COUNT_OF_OTHER_SIZES THEN 1 ELSE 0 END, 
sv.WEDNESDAY_IN_STOCK_DAY_FOR_OTHER_SIZES = CASE WHEN (cisd.WEDNESDAY_IN_STOCK_DAY_FOR_OTHER_SIZES - (CASE WHEN sv.RECEIVED_STOCK_BY_WEDNESDAY=0 THEN 1 ELSE sv.WEDNESDAY_IN_STOCK_DAY END)) = COUNT_OF_OTHER_SIZES THEN 1 ELSE 0 END, 
sv.THURSDAY_IN_STOCK_DAY_FOR_OTHER_SIZES = CASE WHEN (cisd.THURSDAY_IN_STOCK_DAY_FOR_OTHER_SIZES - (CASE WHEN sv.RECEIVED_STOCK_BY_THURSDAY=0 THEN 1 ELSE sv.THURSDAY_IN_STOCK_DAY END)) = COUNT_OF_OTHER_SIZES THEN 1 ELSE 0 END, 
sv.FRIDAY_IN_STOCK_DAY_FOR_OTHER_SIZES = CASE WHEN (cisd.FRIDAY_IN_STOCK_DAY_FOR_OTHER_SIZES - (CASE WHEN sv.RECEIVED_STOCK_BY_FRIDAY=0 THEN 1 ELSE sv.FRIDAY_IN_STOCK_DAY END)) = COUNT_OF_OTHER_SIZES THEN 1 ELSE 0 END, 
sv.SATURDAY_IN_STOCK_DAY_FOR_OTHER_SIZES = CASE WHEN (cisd.SATURDAY_IN_STOCK_DAY_FOR_OTHER_SIZES - (CASE WHEN sv.RECEIVED_STOCK_BY_SATURDAY=0 THEN 1 ELSE sv.SATURDAY_IN_STOCK_DAY END)) = COUNT_OF_OTHER_SIZES THEN 1 ELSE 0 END, 
sv.SUNDAY_IN_STOCK_DAY_FOR_OTHER_SIZES = CASE WHEN (cisd.SUNDAY_IN_STOCK_DAY_FOR_OTHER_SIZES - (CASE WHEN sv.RECEIVED_STOCK_BY_SUNDAY=0 THEN 1 ELSE sv.SUNDAY_IN_STOCK_DAY END)) = COUNT_OF_OTHER_SIZES THEN 1 ELSE 0 END 
FROM @SUMMARY_VIEW sv 
INNER JOIN @COLOR_IN_STOCK_DAYS cisd ON sv.PARENT_HN_RID= cisd.PARENT_HN_RID AND sv.ST_RID=cisd.ST_RID AND sv.FIRST_DAY_OF_WEEK_TIME_ID=cisd.FIRST_DAY_OF_WEEK_TIME_ID  
INSERT INTO @PROCESS_SUMMARY SELECT 'Step 8b2: Apply rules and sum - Calculate In Stock Days for other sizes',0,DATEDIFF(millisecond, @TIME_TO_EXECUTE, getDate()),null, null 
SET @TIME_TO_EXECUTE = getDate(); 
UPDATE sv 
SET  
INCLUDED_MONDAY_FLAG = (CASE WHEN ((RECEIVED_STOCK_BY_MONDAY=1 AND MONDAY_IN_STOCK_DAY=1 AND MONDAY_IN_STOCK_DAY_FOR_OTHER_SIZES=1) OR (RECEIVED_STOCK_BY_MONDAY=0 AND MONDAY_IN_STOCK_DAY=0 AND MONDAY_IN_STOCK_DAY_FOR_OTHER_SIZES=1)) AND (SELLTHRU_LIMIT=0 OR MONDAY_SELL_THRU >= SELLTHRU_LIMIT) THEN 1 ELSE 0 END), 
INCLUDED_TUESDAY_FLAG = (CASE WHEN ((RECEIVED_STOCK_BY_TUESDAY=1 AND TUESDAY_IN_STOCK_DAY=1 AND TUESDAY_IN_STOCK_DAY_FOR_OTHER_SIZES=1) OR (RECEIVED_STOCK_BY_TUESDAY=0 AND TUESDAY_IN_STOCK_DAY=0 AND TUESDAY_IN_STOCK_DAY_FOR_OTHER_SIZES=1)) AND (SELLTHRU_LIMIT=0 OR TUESDAY_SELL_THRU >= SELLTHRU_LIMIT) THEN 1 ELSE 0 END), 
INCLUDED_WEDNESDAY_FLAG = (CASE WHEN ((RECEIVED_STOCK_BY_WEDNESDAY=1 AND WEDNESDAY_IN_STOCK_DAY=1 AND WEDNESDAY_IN_STOCK_DAY_FOR_OTHER_SIZES=1) OR (RECEIVED_STOCK_BY_WEDNESDAY=0 AND WEDNESDAY_IN_STOCK_DAY=0 AND WEDNESDAY_IN_STOCK_DAY_FOR_OTHER_SIZES=1)) AND (SELLTHRU_LIMIT=0 OR WEDNESDAY_SELL_THRU >= SELLTHRU_LIMIT) THEN 1 ELSE 0 END), 
INCLUDED_THURSDAY_FLAG = (CASE WHEN ((RECEIVED_STOCK_BY_THURSDAY=1 AND THURSDAY_IN_STOCK_DAY=1 AND THURSDAY_IN_STOCK_DAY_FOR_OTHER_SIZES=1) OR (RECEIVED_STOCK_BY_THURSDAY=0 AND THURSDAY_IN_STOCK_DAY=0 AND THURSDAY_IN_STOCK_DAY_FOR_OTHER_SIZES=1)) AND (SELLTHRU_LIMIT=0 OR THURSDAY_SELL_THRU >= SELLTHRU_LIMIT) THEN 1 ELSE 0 END), 
INCLUDED_FRIDAY_FLAG = (CASE WHEN ((RECEIVED_STOCK_BY_FRIDAY=1 AND FRIDAY_IN_STOCK_DAY=1 AND FRIDAY_IN_STOCK_DAY_FOR_OTHER_SIZES=1) OR (RECEIVED_STOCK_BY_FRIDAY=0 AND FRIDAY_IN_STOCK_DAY=0 AND FRIDAY_IN_STOCK_DAY_FOR_OTHER_SIZES=1)) AND (SELLTHRU_LIMIT=0 OR FRIDAY_SELL_THRU >= SELLTHRU_LIMIT) THEN 1 ELSE 0 END), 
INCLUDED_SATURDAY_FLAG = (CASE WHEN ((RECEIVED_STOCK_BY_SATURDAY=1 AND SATURDAY_IN_STOCK_DAY=1 AND SATURDAY_IN_STOCK_DAY_FOR_OTHER_SIZES=1) OR (RECEIVED_STOCK_BY_SATURDAY=0 AND SATURDAY_IN_STOCK_DAY=0 AND SATURDAY_IN_STOCK_DAY_FOR_OTHER_SIZES=1)) AND (SELLTHRU_LIMIT=0 OR SATURDAY_SELL_THRU >= SELLTHRU_LIMIT) THEN 1 ELSE 0 END), 
INCLUDED_SUNDAY_FLAG = (CASE WHEN ((RECEIVED_STOCK_BY_SUNDAY=1 AND SUNDAY_IN_STOCK_DAY=1 AND SUNDAY_IN_STOCK_DAY_FOR_OTHER_SIZES=1) OR (RECEIVED_STOCK_BY_SUNDAY=0 AND SUNDAY_IN_STOCK_DAY=0 AND SUNDAY_IN_STOCK_DAY_FOR_OTHER_SIZES=1)) AND (SELLTHRU_LIMIT=0 OR SUNDAY_SELL_THRU >= SELLTHRU_LIMIT) THEN 1 ELSE 0 END) 
FROM @SUMMARY_VIEW sv 
INSERT INTO @PROCESS_SUMMARY SELECT 'Step 8d: Apply rules and sum - Determine days included',0,DATEDIFF(millisecond, @TIME_TO_EXECUTE, getDate()),null, null 
SET @TIME_TO_EXECUTE = getDate(); 
UPDATE sv 
SET  
SALES =  
  MONDAY_SALES 
+ TUESDAY_SALES 
+ WEDNESDAY_SALES 
+ THURSDAY_SALES 
+ FRIDAY_SALES 
+ SATURDAY_SALES 
+ SUNDAY_SALES, 
SALES_REG =  
  MONDAY_SALES_REG 
+ TUESDAY_SALES_REG 
+ WEDNESDAY_SALES_REG 
+ THURSDAY_SALES_REG 
+ FRIDAY_SALES_REG 
+ SATURDAY_SALES_REG 
+ SUNDAY_SALES_REG, 
SALES_PROMO =  
  MONDAY_SALES_PROMO 
+ TUESDAY_SALES_PROMO 
+ WEDNESDAY_SALES_PROMO 
+ THURSDAY_SALES_PROMO 
+ FRIDAY_SALES_PROMO 
+ SATURDAY_SALES_PROMO 
+ SUNDAY_SALES_PROMO, 
SALES_MKDN =  
  MONDAY_SALES_MKDN 
+ TUESDAY_SALES_MKDN 
+ WEDNESDAY_SALES_MKDN 
+ THURSDAY_SALES_MKDN 
+ FRIDAY_SALES_MKDN 
+ SATURDAY_SALES_MKDN 
+ SUNDAY_SALES_MKDN, 
STOCK = 
CASE 
WHEN DATENAME(dw, FIRST_DAY_OF_WEEK_DATETIME) = 'Monday' THEN MONDAY_STOCK 
WHEN DATENAME(dw, FIRST_DAY_OF_WEEK_DATETIME) = 'Tuesday' THEN TUESDAY_STOCK 
WHEN DATENAME(dw, FIRST_DAY_OF_WEEK_DATETIME) = 'Wednesday' THEN WEDNESDAY_STOCK 
WHEN DATENAME(dw, FIRST_DAY_OF_WEEK_DATETIME) = 'Thursday' THEN THURSDAY_STOCK 
WHEN DATENAME(dw, FIRST_DAY_OF_WEEK_DATETIME) = 'Friday' THEN FRIDAY_STOCK 
WHEN DATENAME(dw, FIRST_DAY_OF_WEEK_DATETIME) = 'Saturday' THEN SATURDAY_STOCK 
WHEN DATENAME(dw, FIRST_DAY_OF_WEEK_DATETIME) = 'Sunday' THEN SUNDAY_STOCK 
END,
STOCK_REG = 
CASE 
WHEN DATENAME(dw, FIRST_DAY_OF_WEEK_DATETIME) = 'Monday' THEN MONDAY_STOCK_REG 
WHEN DATENAME(dw, FIRST_DAY_OF_WEEK_DATETIME) = 'Tuesday' THEN TUESDAY_STOCK_REG 
WHEN DATENAME(dw, FIRST_DAY_OF_WEEK_DATETIME) = 'Wednesday' THEN WEDNESDAY_STOCK_REG 
WHEN DATENAME(dw, FIRST_DAY_OF_WEEK_DATETIME) = 'Thursday' THEN THURSDAY_STOCK_REG 
WHEN DATENAME(dw, FIRST_DAY_OF_WEEK_DATETIME) = 'Friday' THEN FRIDAY_STOCK_REG 
WHEN DATENAME(dw, FIRST_DAY_OF_WEEK_DATETIME) = 'Saturday' THEN SATURDAY_STOCK_REG 
WHEN DATENAME(dw, FIRST_DAY_OF_WEEK_DATETIME) = 'Sunday' THEN SUNDAY_STOCK_REG 
END,
STOCK_MKDN = 
CASE 
WHEN DATENAME(dw, FIRST_DAY_OF_WEEK_DATETIME) = 'Monday' THEN MONDAY_STOCK_MKDN 
WHEN DATENAME(dw, FIRST_DAY_OF_WEEK_DATETIME) = 'Tuesday' THEN TUESDAY_STOCK_MKDN 
WHEN DATENAME(dw, FIRST_DAY_OF_WEEK_DATETIME) = 'Wednesday' THEN WEDNESDAY_STOCK_MKDN 
WHEN DATENAME(dw, FIRST_DAY_OF_WEEK_DATETIME) = 'Thursday' THEN THURSDAY_STOCK_MKDN 
WHEN DATENAME(dw, FIRST_DAY_OF_WEEK_DATETIME) = 'Friday' THEN FRIDAY_STOCK_MKDN 
WHEN DATENAME(dw, FIRST_DAY_OF_WEEK_DATETIME) = 'Saturday' THEN SATURDAY_STOCK_MKDN 
WHEN DATENAME(dw, FIRST_DAY_OF_WEEK_DATETIME) = 'Sunday' THEN SUNDAY_STOCK_MKDN 
END,
IN_STOCK_SALES =  
  (CASE WHEN INCLUDED_MONDAY_FLAG=1 THEN MONDAY_SALES ELSE 0 END)  
+ (CASE WHEN INCLUDED_TUESDAY_FLAG=1 THEN TUESDAY_SALES ELSE 0 END)  
+ (CASE WHEN INCLUDED_WEDNESDAY_FLAG=1 THEN WEDNESDAY_SALES ELSE 0 END)  
+ (CASE WHEN INCLUDED_THURSDAY_FLAG=1 THEN THURSDAY_SALES ELSE 0 END)  
+ (CASE WHEN INCLUDED_FRIDAY_FLAG=1 THEN FRIDAY_SALES ELSE 0 END)  
+ (CASE WHEN INCLUDED_SATURDAY_FLAG=1 THEN SATURDAY_SALES ELSE 0 END)  
+ (CASE WHEN INCLUDED_SUNDAY_FLAG=1 THEN SUNDAY_SALES ELSE 0 END), 
IN_STOCK_SALES_REG =  
  (CASE WHEN INCLUDED_MONDAY_FLAG=1 THEN MONDAY_SALES_REG ELSE 0 END)  
+ (CASE WHEN INCLUDED_TUESDAY_FLAG=1 THEN TUESDAY_SALES_REG ELSE 0 END)  
+ (CASE WHEN INCLUDED_WEDNESDAY_FLAG=1 THEN WEDNESDAY_SALES_REG ELSE 0 END)  
+ (CASE WHEN INCLUDED_THURSDAY_FLAG=1 THEN THURSDAY_SALES_REG ELSE 0 END)  
+ (CASE WHEN INCLUDED_FRIDAY_FLAG=1 THEN FRIDAY_SALES_REG ELSE 0 END)  
+ (CASE WHEN INCLUDED_SATURDAY_FLAG=1 THEN SATURDAY_SALES_REG ELSE 0 END)  
+ (CASE WHEN INCLUDED_SUNDAY_FLAG=1 THEN SUNDAY_SALES_REG ELSE 0 END), 
IN_STOCK_SALES_PROMO =  
  (CASE WHEN INCLUDED_MONDAY_FLAG=1 THEN MONDAY_SALES_PROMO ELSE 0 END)  
+ (CASE WHEN INCLUDED_TUESDAY_FLAG=1 THEN TUESDAY_SALES_PROMO ELSE 0 END)  
+ (CASE WHEN INCLUDED_WEDNESDAY_FLAG=1 THEN WEDNESDAY_SALES_PROMO ELSE 0 END)  
+ (CASE WHEN INCLUDED_THURSDAY_FLAG=1 THEN THURSDAY_SALES_PROMO ELSE 0 END)  
+ (CASE WHEN INCLUDED_FRIDAY_FLAG=1 THEN FRIDAY_SALES_PROMO ELSE 0 END)  
+ (CASE WHEN INCLUDED_SATURDAY_FLAG=1 THEN SATURDAY_SALES_PROMO ELSE 0 END)  
+ (CASE WHEN INCLUDED_SUNDAY_FLAG=1 THEN SUNDAY_SALES_PROMO ELSE 0 END), 
IN_STOCK_SALES_MKDN =  
  (CASE WHEN INCLUDED_MONDAY_FLAG=1 THEN MONDAY_SALES_MKDN ELSE 0 END)  
+ (CASE WHEN INCLUDED_TUESDAY_FLAG=1 THEN TUESDAY_SALES_MKDN ELSE 0 END)  
+ (CASE WHEN INCLUDED_WEDNESDAY_FLAG=1 THEN WEDNESDAY_SALES_MKDN ELSE 0 END)  
+ (CASE WHEN INCLUDED_THURSDAY_FLAG=1 THEN THURSDAY_SALES_MKDN ELSE 0 END)  
+ (CASE WHEN INCLUDED_FRIDAY_FLAG=1 THEN FRIDAY_SALES_MKDN ELSE 0 END)  
+ (CASE WHEN INCLUDED_SATURDAY_FLAG=1 THEN SATURDAY_SALES_MKDN ELSE 0 END)  
+ (CASE WHEN INCLUDED_SUNDAY_FLAG=1 THEN SUNDAY_SALES_MKDN ELSE 0 END), 
ACCUM_SELL_THRU_SALES = ACCUM_SELL_THRU_SALES + 
  MONDAY_SALES 
+ TUESDAY_SALES 
+ WEDNESDAY_SALES 
+ THURSDAY_SALES 
+ FRIDAY_SALES 
+ SATURDAY_SALES 
+ SUNDAY_SALES, 
ACCUM_SELL_THRU_STOCK = ACCUM_SELL_THRU_STOCK + 
  MONDAY_STOCK 
+ TUESDAY_STOCK 
+ WEDNESDAY_STOCK 
+ THURSDAY_STOCK 
+ FRIDAY_STOCK 
+ SATURDAY_STOCK 
+ SUNDAY_STOCK, 
RECEIVED_STOCK = CASE WHEN ( 
		       SELLTHRU_LIMIT<>0 AND 
			   ( 
			   MONDAY_SELL_THRU < SELLTHRU_LIMIT 
			   OR TUESDAY_SELL_THRU < SELLTHRU_LIMIT 
			   OR WEDNESDAY_SELL_THRU < SELLTHRU_LIMIT 
			   OR THURSDAY_SELL_THRU < SELLTHRU_LIMIT 
			   OR FRIDAY_SELL_THRU < SELLTHRU_LIMIT 
			   OR SATURDAY_SELL_THRU < SELLTHRU_LIMIT 
			   OR SUNDAY_SELL_THRU < SELLTHRU_LIMIT 
			   ) 
		   ) 
	THEN 0 
	ELSE RECEIVED_STOCK_ALL_DAYS --received stock by the end of the week 
	END --Reset the recieved stock back to zero (never received stock) if at any point the sell thru goes below the sell thru limit 
FROM @SUMMARY_VIEW sv 
INSERT INTO @PROCESS_SUMMARY SELECT 'Step 8e: Apply rules and sum - Sum values',0,DATEDIFF(millisecond, @TIME_TO_EXECUTE, getDate()),null, null 
INSERT INTO @PROCESS_SUMMARY SELECT 'Step 8: Apply rules and sum',DATEDIFF(millisecond, @TIME_TO_EXECUTE_PROCESS_STEP, getDate()),0,null,null 
--End Process Step 8: Apply rules and sum 
--Begin Process Step 9: Update weekly size tables 
SET @TIME_TO_EXECUTE_PROCESS_STEP = getDate(); 
DECLARE @UPDATED_ROWS INT 
DECLARE @TOTAL_UPDATED_ROWS INT 
SET @TOTAL_UPDATED_ROWS = 0 
--Determine which rows to update and which rows to insert  (By default, the flag is set to insert) 
SET @TIME_TO_EXECUTE = getDate(); 
UPDATE sv 
SET sv.INSERT_OR_UPDATE_FLAG='U' 
FROM @SUMMARY_VIEW sv 
INNER JOIN [dbo].[STORE_HISTORY_WEEK0] w ON sv.HN_MOD=0 AND w.HN_RID=sv.HN_RID AND w.TIME_ID=sv.FIRST_DAY_OF_WEEK_TIME_ID AND w.ST_RID=sv.ST_RID 
UPDATE sv 
SET sv.INSERT_OR_UPDATE_FLAG='U' 
FROM @SUMMARY_VIEW sv 
INNER JOIN [dbo].[STORE_HISTORY_WEEK1] w ON sv.HN_MOD=1 AND w.HN_RID=sv.HN_RID AND w.TIME_ID=sv.FIRST_DAY_OF_WEEK_TIME_ID AND w.ST_RID=sv.ST_RID 
UPDATE sv 
SET sv.INSERT_OR_UPDATE_FLAG='U' 
FROM @SUMMARY_VIEW sv 
INNER JOIN [dbo].[STORE_HISTORY_WEEK2] w ON sv.HN_MOD=2 AND w.HN_RID=sv.HN_RID AND w.TIME_ID=sv.FIRST_DAY_OF_WEEK_TIME_ID AND w.ST_RID=sv.ST_RID 
UPDATE sv 
SET sv.INSERT_OR_UPDATE_FLAG='U' 
FROM @SUMMARY_VIEW sv 
INNER JOIN [dbo].[STORE_HISTORY_WEEK3] w ON sv.HN_MOD=3 AND w.HN_RID=sv.HN_RID AND w.TIME_ID=sv.FIRST_DAY_OF_WEEK_TIME_ID AND w.ST_RID=sv.ST_RID 
UPDATE sv 
SET sv.INSERT_OR_UPDATE_FLAG='U' 
FROM @SUMMARY_VIEW sv 
INNER JOIN [dbo].[STORE_HISTORY_WEEK4] w ON sv.HN_MOD=4 AND w.HN_RID=sv.HN_RID AND w.TIME_ID=sv.FIRST_DAY_OF_WEEK_TIME_ID AND w.ST_RID=sv.ST_RID 
UPDATE sv 
SET sv.INSERT_OR_UPDATE_FLAG='U' 
FROM @SUMMARY_VIEW sv 
INNER JOIN [dbo].[STORE_HISTORY_WEEK5] w ON sv.HN_MOD=5 AND w.HN_RID=sv.HN_RID AND w.TIME_ID=sv.FIRST_DAY_OF_WEEK_TIME_ID AND w.ST_RID=sv.ST_RID 
UPDATE sv 
SET sv.INSERT_OR_UPDATE_FLAG='U' 
FROM @SUMMARY_VIEW sv 
INNER JOIN [dbo].[STORE_HISTORY_WEEK6] w ON sv.HN_MOD=6 AND w.HN_RID=sv.HN_RID AND w.TIME_ID=sv.FIRST_DAY_OF_WEEK_TIME_ID AND w.ST_RID=sv.ST_RID 
UPDATE sv 
SET sv.INSERT_OR_UPDATE_FLAG='U' 
FROM @SUMMARY_VIEW sv 
INNER JOIN [dbo].[STORE_HISTORY_WEEK7] w ON sv.HN_MOD=7 AND w.HN_RID=sv.HN_RID AND w.TIME_ID=sv.FIRST_DAY_OF_WEEK_TIME_ID AND w.ST_RID=sv.ST_RID 
UPDATE sv 
SET sv.INSERT_OR_UPDATE_FLAG='U' 
FROM @SUMMARY_VIEW sv 
INNER JOIN [dbo].[STORE_HISTORY_WEEK8] w ON sv.HN_MOD=8 AND w.HN_RID=sv.HN_RID AND w.TIME_ID=sv.FIRST_DAY_OF_WEEK_TIME_ID AND w.ST_RID=sv.ST_RID 
UPDATE sv 
SET sv.INSERT_OR_UPDATE_FLAG='U' 
FROM @SUMMARY_VIEW sv 
INNER JOIN [dbo].[STORE_HISTORY_WEEK9] w ON sv.HN_MOD=9 AND w.HN_RID=sv.HN_RID AND w.TIME_ID=sv.FIRST_DAY_OF_WEEK_TIME_ID AND w.ST_RID=sv.ST_RID 
INSERT INTO @PROCESS_SUMMARY SELECT 'Step 9a: Update weekly size tables - Determine rows to update',0,DATEDIFF(millisecond, @TIME_TO_EXECUTE, getDate()),null, null 
SET @TIME_TO_EXECUTE = getDate(); 
UPDATE w 
SET  
w.SALES = sv.SALES, 
w.SALES_REG = sv.SALES_REG, 
w.SALES_PROMO = sv.SALES_PROMO, 
w.SALES_MKDN = sv.SALES_MKDN, 
w.STOCK = sv.STOCK, 
w.STOCK_REG = sv.STOCK_REG, 
w.STOCK_MKDN = sv.STOCK_MKDN, 
w.IN_STOCK_SALES = sv.IN_STOCK_SALES, 
w.IN_STOCK_SALES_REG = sv.IN_STOCK_SALES_REG, 
w.IN_STOCK_SALES_PROMO = sv.IN_STOCK_SALES_PROMO, 
w.IN_STOCK_SALES_MKDN = sv.IN_STOCK_SALES_MKDN, 
w.ACCUM_SELL_THRU_SALES = sv.ACCUM_SELL_THRU_SALES, 
w.ACCUM_SELL_THRU_STOCK = sv.ACCUM_SELL_THRU_STOCK, 
w.DAYS_IN_STOCK = sv.DAYS_IN_STOCK, 
w.RECEIVED_STOCK = sv.RECEIVED_STOCK 
FROM [dbo].[STORE_HISTORY_WEEK0] w 
INNER JOIN @SUMMARY_VIEW sv ON w.HN_RID=sv.HN_RID AND w.TIME_ID=sv.FIRST_DAY_OF_WEEK_TIME_ID AND w.ST_RID=sv.ST_RID 
WHERE sv.HN_MOD=0 AND sv.INSERT_OR_UPDATE_FLAG='U' 
SET @UPDATED_ROWS = @@ROWCOUNT 
SET @TOTAL_UPDATED_ROWS = @TOTAL_UPDATED_ROWS + @UPDATED_ROWS 
INSERT INTO @PROCESS_SUMMARY SELECT 'Step 9: Update weekly size tables - Table 0',0,DATEDIFF(millisecond, @TIME_TO_EXECUTE, getDate()),'Updated Rows:', (SELECT @UPDATED_ROWS) 
SET @TIME_TO_EXECUTE = getDate(); 
UPDATE w 
SET  
w.SALES = sv.SALES, 
w.SALES_REG = sv.SALES_REG, 
w.SALES_PROMO = sv.SALES_PROMO, 
w.SALES_MKDN = sv.SALES_MKDN, 
w.STOCK = sv.STOCK, 
w.STOCK_REG = sv.STOCK_REG, 
w.STOCK_MKDN = sv.STOCK_MKDN, 
w.IN_STOCK_SALES = sv.IN_STOCK_SALES, 
w.IN_STOCK_SALES_REG = sv.IN_STOCK_SALES_REG, 
w.IN_STOCK_SALES_PROMO = sv.IN_STOCK_SALES_PROMO, 
w.IN_STOCK_SALES_MKDN = sv.IN_STOCK_SALES_MKDN, 
w.ACCUM_SELL_THRU_SALES = sv.ACCUM_SELL_THRU_SALES, 
w.ACCUM_SELL_THRU_STOCK = sv.ACCUM_SELL_THRU_STOCK, 
w.DAYS_IN_STOCK = sv.DAYS_IN_STOCK, 
w.RECEIVED_STOCK = sv.RECEIVED_STOCK 
FROM [dbo].[STORE_HISTORY_WEEK1] w 
INNER JOIN @SUMMARY_VIEW sv ON w.HN_RID=sv.HN_RID AND w.TIME_ID=sv.FIRST_DAY_OF_WEEK_TIME_ID AND w.ST_RID=sv.ST_RID 
WHERE sv.HN_MOD=1 AND sv.INSERT_OR_UPDATE_FLAG='U' 
SET @UPDATED_ROWS = @@ROWCOUNT 
SET @TOTAL_UPDATED_ROWS = @TOTAL_UPDATED_ROWS + @UPDATED_ROWS 
INSERT INTO @PROCESS_SUMMARY SELECT 'Step 9: Update weekly size tables - Table 1',0,DATEDIFF(millisecond, @TIME_TO_EXECUTE, getDate()),'Updated Rows:', (SELECT @UPDATED_ROWS) 
SET @TIME_TO_EXECUTE = getDate(); 
UPDATE w 
SET  
w.SALES = sv.SALES, 
w.SALES_REG = sv.SALES_REG, 
w.SALES_PROMO = sv.SALES_PROMO, 
w.SALES_MKDN = sv.SALES_MKDN, 
w.STOCK = sv.STOCK, 
w.STOCK_REG = sv.STOCK_REG, 
w.STOCK_MKDN = sv.STOCK_MKDN, 
w.IN_STOCK_SALES = sv.IN_STOCK_SALES, 
w.IN_STOCK_SALES_REG = sv.IN_STOCK_SALES_REG, 
w.IN_STOCK_SALES_PROMO = sv.IN_STOCK_SALES_PROMO, 
w.IN_STOCK_SALES_MKDN = sv.IN_STOCK_SALES_MKDN, 
w.ACCUM_SELL_THRU_SALES = sv.ACCUM_SELL_THRU_SALES, 
w.ACCUM_SELL_THRU_STOCK = sv.ACCUM_SELL_THRU_STOCK, 
w.DAYS_IN_STOCK = sv.DAYS_IN_STOCK, 
w.RECEIVED_STOCK = sv.RECEIVED_STOCK 
FROM [dbo].[STORE_HISTORY_WEEK2] w 
INNER JOIN @SUMMARY_VIEW sv ON w.HN_RID=sv.HN_RID AND w.TIME_ID=sv.FIRST_DAY_OF_WEEK_TIME_ID AND w.ST_RID=sv.ST_RID 
WHERE sv.HN_MOD=2 AND sv.INSERT_OR_UPDATE_FLAG='U' 
SET @UPDATED_ROWS = @@ROWCOUNT 
SET @TOTAL_UPDATED_ROWS = @TOTAL_UPDATED_ROWS + @UPDATED_ROWS 
INSERT INTO @PROCESS_SUMMARY SELECT 'Step 9: Update weekly size tables - Table 2',0,DATEDIFF(millisecond, @TIME_TO_EXECUTE, getDate()),'Updated Rows:', (SELECT @UPDATED_ROWS) 
SET @TIME_TO_EXECUTE = getDate(); 
UPDATE w 
SET  
w.SALES = sv.SALES, 
w.SALES_REG = sv.SALES_REG, 
w.SALES_PROMO = sv.SALES_PROMO, 
w.SALES_MKDN = sv.SALES_MKDN, 
w.STOCK = sv.STOCK, 
w.STOCK_REG = sv.STOCK_REG, 
w.STOCK_MKDN = sv.STOCK_MKDN, 
w.IN_STOCK_SALES = sv.IN_STOCK_SALES, 
w.IN_STOCK_SALES_REG = sv.IN_STOCK_SALES_REG, 
w.IN_STOCK_SALES_PROMO = sv.IN_STOCK_SALES_PROMO, 
w.IN_STOCK_SALES_MKDN = sv.IN_STOCK_SALES_MKDN, 
w.ACCUM_SELL_THRU_SALES = sv.ACCUM_SELL_THRU_SALES, 
w.ACCUM_SELL_THRU_STOCK = sv.ACCUM_SELL_THRU_STOCK, 
w.DAYS_IN_STOCK = sv.DAYS_IN_STOCK, 
w.RECEIVED_STOCK = sv.RECEIVED_STOCK 
FROM [dbo].[STORE_HISTORY_WEEK3] w 
INNER JOIN @SUMMARY_VIEW sv ON w.HN_RID=sv.HN_RID AND w.TIME_ID=sv.FIRST_DAY_OF_WEEK_TIME_ID AND w.ST_RID=sv.ST_RID 
WHERE sv.HN_MOD=3 AND sv.INSERT_OR_UPDATE_FLAG='U' 
SET @UPDATED_ROWS = @@ROWCOUNT 
SET @TOTAL_UPDATED_ROWS = @TOTAL_UPDATED_ROWS + @UPDATED_ROWS 
INSERT INTO @PROCESS_SUMMARY SELECT 'Step 9: Update weekly size tables - Table 3',0,DATEDIFF(millisecond, @TIME_TO_EXECUTE, getDate()),'Updated Rows:', (SELECT @UPDATED_ROWS) 
SET @TIME_TO_EXECUTE = getDate(); 
UPDATE w 
SET  
w.SALES = sv.SALES, 
w.SALES_REG = sv.SALES_REG, 
w.SALES_PROMO = sv.SALES_PROMO, 
w.SALES_MKDN = sv.SALES_MKDN, 
w.STOCK = sv.STOCK, 
w.STOCK_REG = sv.STOCK_REG, 
w.STOCK_MKDN = sv.STOCK_MKDN, 
w.IN_STOCK_SALES = sv.IN_STOCK_SALES, 
w.IN_STOCK_SALES_REG = sv.IN_STOCK_SALES_REG, 
w.IN_STOCK_SALES_PROMO = sv.IN_STOCK_SALES_PROMO, 
w.IN_STOCK_SALES_MKDN = sv.IN_STOCK_SALES_MKDN, 
w.ACCUM_SELL_THRU_SALES = sv.ACCUM_SELL_THRU_SALES, 
w.ACCUM_SELL_THRU_STOCK = sv.ACCUM_SELL_THRU_STOCK, 
w.DAYS_IN_STOCK = sv.DAYS_IN_STOCK, 
w.RECEIVED_STOCK = sv.RECEIVED_STOCK 
FROM [dbo].[STORE_HISTORY_WEEK4] w 
INNER JOIN @SUMMARY_VIEW sv ON w.HN_RID=sv.HN_RID AND w.TIME_ID=sv.FIRST_DAY_OF_WEEK_TIME_ID AND w.ST_RID=sv.ST_RID 
WHERE sv.HN_MOD=4 AND sv.INSERT_OR_UPDATE_FLAG='U' 
SET @UPDATED_ROWS = @@ROWCOUNT 
SET @TOTAL_UPDATED_ROWS = @TOTAL_UPDATED_ROWS + @UPDATED_ROWS 
INSERT INTO @PROCESS_SUMMARY SELECT 'Step 9: Update weekly size tables - Table 4',0,DATEDIFF(millisecond, @TIME_TO_EXECUTE, getDate()),'Updated Rows:', (SELECT @UPDATED_ROWS) 
SET @TIME_TO_EXECUTE = getDate(); 
UPDATE w 
SET  
w.SALES = sv.SALES, 
w.SALES_REG = sv.SALES_REG, 
w.SALES_PROMO = sv.SALES_PROMO, 
w.SALES_MKDN = sv.SALES_MKDN, 
w.STOCK = sv.STOCK, 
w.STOCK_REG = sv.STOCK_REG, 
w.STOCK_MKDN = sv.STOCK_MKDN, 
w.IN_STOCK_SALES = sv.IN_STOCK_SALES, 
w.IN_STOCK_SALES_REG = sv.IN_STOCK_SALES_REG, 
w.IN_STOCK_SALES_PROMO = sv.IN_STOCK_SALES_PROMO, 
w.IN_STOCK_SALES_MKDN = sv.IN_STOCK_SALES_MKDN, 
w.ACCUM_SELL_THRU_SALES = sv.ACCUM_SELL_THRU_SALES, 
w.ACCUM_SELL_THRU_STOCK = sv.ACCUM_SELL_THRU_STOCK, 
w.DAYS_IN_STOCK = sv.DAYS_IN_STOCK, 
w.RECEIVED_STOCK = sv.RECEIVED_STOCK 
FROM [dbo].[STORE_HISTORY_WEEK5] w 
INNER JOIN @SUMMARY_VIEW sv ON w.HN_RID=sv.HN_RID AND w.TIME_ID=sv.FIRST_DAY_OF_WEEK_TIME_ID AND w.ST_RID=sv.ST_RID 
WHERE sv.HN_MOD=5 AND sv.INSERT_OR_UPDATE_FLAG='U' 
SET @UPDATED_ROWS = @@ROWCOUNT 
SET @TOTAL_UPDATED_ROWS = @TOTAL_UPDATED_ROWS + @UPDATED_ROWS 
INSERT INTO @PROCESS_SUMMARY SELECT 'Step 9: Update weekly size tables - Table 5',0,DATEDIFF(millisecond, @TIME_TO_EXECUTE, getDate()),'Updated Rows:', (SELECT @UPDATED_ROWS) 
SET @TIME_TO_EXECUTE = getDate(); 
UPDATE w 
SET  
w.SALES = sv.SALES, 
w.SALES_REG = sv.SALES_REG, 
w.SALES_PROMO = sv.SALES_PROMO, 
w.SALES_MKDN = sv.SALES_MKDN, 
w.STOCK = sv.STOCK, 
w.STOCK_REG = sv.STOCK_REG, 
w.STOCK_MKDN = sv.STOCK_MKDN, 
w.IN_STOCK_SALES = sv.IN_STOCK_SALES, 
w.IN_STOCK_SALES_REG = sv.IN_STOCK_SALES_REG, 
w.IN_STOCK_SALES_PROMO = sv.IN_STOCK_SALES_PROMO, 
w.IN_STOCK_SALES_MKDN = sv.IN_STOCK_SALES_MKDN, 
w.ACCUM_SELL_THRU_SALES = sv.ACCUM_SELL_THRU_SALES, 
w.ACCUM_SELL_THRU_STOCK = sv.ACCUM_SELL_THRU_STOCK, 
w.DAYS_IN_STOCK = sv.DAYS_IN_STOCK, 
w.RECEIVED_STOCK = sv.RECEIVED_STOCK 
FROM [dbo].[STORE_HISTORY_WEEK6] w 
INNER JOIN @SUMMARY_VIEW sv ON w.HN_RID=sv.HN_RID AND w.TIME_ID=sv.FIRST_DAY_OF_WEEK_TIME_ID AND w.ST_RID=sv.ST_RID 
WHERE sv.HN_MOD=6 AND sv.INSERT_OR_UPDATE_FLAG='U' 
SET @UPDATED_ROWS = @@ROWCOUNT 
SET @TOTAL_UPDATED_ROWS = @TOTAL_UPDATED_ROWS + @UPDATED_ROWS 
INSERT INTO @PROCESS_SUMMARY SELECT 'Step 9: Update weekly size tables - Table 6',0,DATEDIFF(millisecond, @TIME_TO_EXECUTE, getDate()),'Updated Rows:', (SELECT @UPDATED_ROWS) 
SET @TIME_TO_EXECUTE = getDate(); 
UPDATE w 
SET  
w.SALES = sv.SALES, 
w.SALES_REG = sv.SALES_REG, 
w.SALES_PROMO = sv.SALES_PROMO, 
w.SALES_MKDN = sv.SALES_MKDN, 
w.STOCK = sv.STOCK, 
w.STOCK_REG = sv.STOCK_REG, 
w.STOCK_MKDN = sv.STOCK_MKDN, 
w.IN_STOCK_SALES = sv.IN_STOCK_SALES, 
w.IN_STOCK_SALES_REG = sv.IN_STOCK_SALES_REG, 
w.IN_STOCK_SALES_PROMO = sv.IN_STOCK_SALES_PROMO, 
w.IN_STOCK_SALES_MKDN = sv.IN_STOCK_SALES_MKDN, 
w.ACCUM_SELL_THRU_SALES = sv.ACCUM_SELL_THRU_SALES, 
w.ACCUM_SELL_THRU_STOCK = sv.ACCUM_SELL_THRU_STOCK, 
w.DAYS_IN_STOCK = sv.DAYS_IN_STOCK, 
w.RECEIVED_STOCK = sv.RECEIVED_STOCK 
FROM [dbo].[STORE_HISTORY_WEEK7] w 
INNER JOIN @SUMMARY_VIEW sv ON w.HN_RID=sv.HN_RID AND w.TIME_ID=sv.FIRST_DAY_OF_WEEK_TIME_ID AND w.ST_RID=sv.ST_RID 
WHERE sv.HN_MOD=7 AND sv.INSERT_OR_UPDATE_FLAG='U' 
SET @UPDATED_ROWS = @@ROWCOUNT 
SET @TOTAL_UPDATED_ROWS = @TOTAL_UPDATED_ROWS + @UPDATED_ROWS 
INSERT INTO @PROCESS_SUMMARY SELECT 'Step 9: Update weekly size tables - Table 7',0,DATEDIFF(millisecond, @TIME_TO_EXECUTE, getDate()),'Updated Rows:', (SELECT @UPDATED_ROWS) 
SET @TIME_TO_EXECUTE = getDate(); 
UPDATE w 
SET  
w.SALES = sv.SALES, 
w.SALES_REG = sv.SALES_REG, 
w.SALES_PROMO = sv.SALES_PROMO, 
w.SALES_MKDN = sv.SALES_MKDN, 
w.STOCK = sv.STOCK, 
w.STOCK_REG = sv.STOCK_REG, 
w.STOCK_MKDN = sv.STOCK_MKDN, 
w.IN_STOCK_SALES = sv.IN_STOCK_SALES, 
w.IN_STOCK_SALES_REG = sv.IN_STOCK_SALES_REG, 
w.IN_STOCK_SALES_PROMO = sv.IN_STOCK_SALES_PROMO, 
w.IN_STOCK_SALES_MKDN = sv.IN_STOCK_SALES_MKDN, 
w.ACCUM_SELL_THRU_SALES = sv.ACCUM_SELL_THRU_SALES, 
w.ACCUM_SELL_THRU_STOCK = sv.ACCUM_SELL_THRU_STOCK, 
w.DAYS_IN_STOCK = sv.DAYS_IN_STOCK, 
w.RECEIVED_STOCK = sv.RECEIVED_STOCK 
FROM [dbo].[STORE_HISTORY_WEEK8] w 
INNER JOIN @SUMMARY_VIEW sv ON w.HN_RID=sv.HN_RID AND w.TIME_ID=sv.FIRST_DAY_OF_WEEK_TIME_ID AND w.ST_RID=sv.ST_RID 
WHERE sv.HN_MOD=8 AND sv.INSERT_OR_UPDATE_FLAG='U' 
SET @UPDATED_ROWS = @@ROWCOUNT 
SET @TOTAL_UPDATED_ROWS = @TOTAL_UPDATED_ROWS + @UPDATED_ROWS 
INSERT INTO @PROCESS_SUMMARY SELECT 'Step 9: Update weekly size tables - Table 8',0,DATEDIFF(millisecond, @TIME_TO_EXECUTE, getDate()),'Updated Rows:', (SELECT @UPDATED_ROWS) 
SET @TIME_TO_EXECUTE = getDate(); 
UPDATE w 
SET  
w.SALES = sv.SALES, 
w.SALES_REG = sv.SALES_REG, 
w.SALES_PROMO = sv.SALES_PROMO, 
w.SALES_MKDN = sv.SALES_MKDN, 
w.STOCK = sv.STOCK, 
w.STOCK_REG = sv.STOCK_REG, 
w.STOCK_MKDN = sv.STOCK_MKDN, 
w.IN_STOCK_SALES = sv.IN_STOCK_SALES, 
w.IN_STOCK_SALES_REG = sv.IN_STOCK_SALES_REG, 
w.IN_STOCK_SALES_PROMO = sv.IN_STOCK_SALES_PROMO, 
w.IN_STOCK_SALES_MKDN = sv.IN_STOCK_SALES_MKDN, 
w.ACCUM_SELL_THRU_SALES = sv.ACCUM_SELL_THRU_SALES, 
w.ACCUM_SELL_THRU_STOCK = sv.ACCUM_SELL_THRU_STOCK, 
w.DAYS_IN_STOCK = sv.DAYS_IN_STOCK, 
w.RECEIVED_STOCK = sv.RECEIVED_STOCK 
FROM [dbo].[STORE_HISTORY_WEEK9] w 
INNER JOIN @SUMMARY_VIEW sv ON w.HN_RID=sv.HN_RID AND w.TIME_ID=sv.FIRST_DAY_OF_WEEK_TIME_ID AND w.ST_RID=sv.ST_RID 
WHERE sv.HN_MOD=9 AND sv.INSERT_OR_UPDATE_FLAG='U' 
SET @UPDATED_ROWS = @@ROWCOUNT 
SET @TOTAL_UPDATED_ROWS = @TOTAL_UPDATED_ROWS + @UPDATED_ROWS 
INSERT INTO @PROCESS_SUMMARY SELECT 'Step 9: Update weekly size tables - Table 9',0,DATEDIFF(millisecond, @TIME_TO_EXECUTE, getDate()),'Updated Rows:', (SELECT @UPDATED_ROWS) 
INSERT INTO @PROCESS_SUMMARY SELECT 'Step 9: Update weekly size tables',DATEDIFF(millisecond, @TIME_TO_EXECUTE_PROCESS_STEP, getDate()),0,'Total Updated Rows:', (SELECT @TOTAL_UPDATED_ROWS) 
--End Process Step 9: Update weekly size tables 
--Begin Process Step 10: Add rows to weekly size tables 
SET @TIME_TO_EXECUTE_PROCESS_STEP = getDate(); 
DECLARE @INSERTED_ROWS INT 
DECLARE @TOTAL_INSERTED_ROWS INT 
SET @TOTAL_INSERTED_ROWS=0 
SET @TIME_TO_EXECUTE = getDate(); 
INSERT INTO [dbo].[STORE_HISTORY_WEEK0]  
( 
	HN_MOD, 
	HN_RID, 
	TIME_ID, 
	ST_RID, 
	SALES, 
	SALES_REG, 
	SALES_PROMO, 
	SALES_MKDN, 
	STOCK, 
	STOCK_REG, 
	STOCK_MKDN, 
	IN_STOCK_SALES, 
	IN_STOCK_SALES_REG, 
	IN_STOCK_SALES_PROMO, 
	IN_STOCK_SALES_MKDN, 
	ACCUM_SELL_THRU_SALES, 
	ACCUM_SELL_THRU_STOCK, 
	DAYS_IN_STOCK, 
	RECEIVED_STOCK 
) 
SELECT  
	HN_MOD, 
	HN_RID, 
	FIRST_DAY_OF_WEEK_TIME_ID AS TIME_ID, 
	ST_RID, 
	SALES, 
	SALES_REG, 
	SALES_PROMO, 
	SALES_MKDN, 
	STOCK, 
	STOCK_REG, 
	STOCK_MKDN, 
	IN_STOCK_SALES, 
	IN_STOCK_SALES_REG, 
	IN_STOCK_SALES_PROMO, 
	IN_STOCK_SALES_MKDN, 
	ACCUM_SELL_THRU_SALES, 
	ACCUM_SELL_THRU_STOCK, 
	DAYS_IN_STOCK, 
	RECEIVED_STOCK 
FROM 
@SUMMARY_VIEW sv 
WHERE sv.HN_MOD=0 AND sv.INSERT_OR_UPDATE_FLAG='I' 
SET @INSERTED_ROWS = @@ROWCOUNT 
SET @TOTAL_INSERTED_ROWS = @TOTAL_INSERTED_ROWS + @INSERTED_ROWS 
INSERT INTO @PROCESS_SUMMARY SELECT 'Step 10: Add rows to weekly size tables - Table 0',0,DATEDIFF(millisecond, @TIME_TO_EXECUTE, getDate()),'Inserted Rows:', (SELECT @INSERTED_ROWS) 
SET @TIME_TO_EXECUTE = getDate(); 
INSERT INTO [dbo].[STORE_HISTORY_WEEK1]  
( 
	HN_MOD, 
	HN_RID, 
	TIME_ID, 
	ST_RID, 
	SALES, 
	SALES_REG, 
	SALES_PROMO, 
	SALES_MKDN, 
	STOCK, 
	STOCK_REG, 
	STOCK_MKDN, 
	IN_STOCK_SALES, 
	IN_STOCK_SALES_REG, 
	IN_STOCK_SALES_PROMO, 
	IN_STOCK_SALES_MKDN, 
	ACCUM_SELL_THRU_SALES, 
	ACCUM_SELL_THRU_STOCK, 
	DAYS_IN_STOCK, 
	RECEIVED_STOCK 
) 
SELECT  
	HN_MOD, 
	HN_RID, 
	FIRST_DAY_OF_WEEK_TIME_ID AS TIME_ID, 
	ST_RID, 
	SALES, 
	SALES_REG, 
	SALES_PROMO, 
	SALES_MKDN, 
	STOCK, 
	STOCK_REG, 
	STOCK_MKDN, 
	IN_STOCK_SALES, 
	IN_STOCK_SALES_REG, 
	IN_STOCK_SALES_PROMO, 
	IN_STOCK_SALES_MKDN, 
	ACCUM_SELL_THRU_SALES, 
	ACCUM_SELL_THRU_STOCK, 
	DAYS_IN_STOCK, 
	RECEIVED_STOCK 
FROM 
@SUMMARY_VIEW sv 
WHERE sv.HN_MOD=1 AND sv.INSERT_OR_UPDATE_FLAG='I' 
SET @INSERTED_ROWS = @@ROWCOUNT 
SET @TOTAL_INSERTED_ROWS = @TOTAL_INSERTED_ROWS + @INSERTED_ROWS 
INSERT INTO @PROCESS_SUMMARY SELECT 'Step 10: Add rows to weekly size tables - Table 1',0,DATEDIFF(millisecond, @TIME_TO_EXECUTE, getDate()),'Inserted Rows:', (SELECT @INSERTED_ROWS) 
SET @TIME_TO_EXECUTE = getDate(); 
INSERT INTO [dbo].[STORE_HISTORY_WEEK2]  
( 
	HN_MOD, 
	HN_RID, 
	TIME_ID, 
	ST_RID, 
	SALES, 
	SALES_REG, 
	SALES_PROMO, 
	SALES_MKDN, 
	STOCK, 
	STOCK_REG, 
	STOCK_MKDN, 
	IN_STOCK_SALES, 
	IN_STOCK_SALES_REG, 
	IN_STOCK_SALES_PROMO, 
	IN_STOCK_SALES_MKDN, 
	ACCUM_SELL_THRU_SALES, 
	ACCUM_SELL_THRU_STOCK, 
	DAYS_IN_STOCK, 
	RECEIVED_STOCK 
) 
SELECT  
	HN_MOD, 
	HN_RID, 
	FIRST_DAY_OF_WEEK_TIME_ID AS TIME_ID, 
	ST_RID, 
	SALES, 
	SALES_REG, 
	SALES_PROMO, 
	SALES_MKDN, 
	STOCK, 
	STOCK_REG, 
	STOCK_MKDN, 
	IN_STOCK_SALES, 
	IN_STOCK_SALES_REG, 
	IN_STOCK_SALES_PROMO, 
	IN_STOCK_SALES_MKDN, 
	ACCUM_SELL_THRU_SALES, 
	ACCUM_SELL_THRU_STOCK, 
	DAYS_IN_STOCK, 
	RECEIVED_STOCK 
FROM 
@SUMMARY_VIEW sv 
WHERE sv.HN_MOD=2 AND sv.INSERT_OR_UPDATE_FLAG='I' 
SET @INSERTED_ROWS = @@ROWCOUNT 
SET @TOTAL_INSERTED_ROWS = @TOTAL_INSERTED_ROWS + @INSERTED_ROWS 
INSERT INTO @PROCESS_SUMMARY SELECT 'Step 10: Add rows to weekly size tables - Table 2',0,DATEDIFF(millisecond, @TIME_TO_EXECUTE, getDate()),'Inserted Rows:', (SELECT @INSERTED_ROWS) 
SET @TIME_TO_EXECUTE = getDate(); 
INSERT INTO [dbo].[STORE_HISTORY_WEEK3]  
( 
	HN_MOD, 
	HN_RID, 
	TIME_ID, 
	ST_RID, 
	SALES, 
	SALES_REG, 
	SALES_PROMO, 
	SALES_MKDN, 
	STOCK, 
	STOCK_REG, 
	STOCK_MKDN, 
	IN_STOCK_SALES, 
	IN_STOCK_SALES_REG, 
	IN_STOCK_SALES_PROMO, 
	IN_STOCK_SALES_MKDN, 
	ACCUM_SELL_THRU_SALES, 
	ACCUM_SELL_THRU_STOCK, 
	DAYS_IN_STOCK, 
	RECEIVED_STOCK 
) 
SELECT  
	HN_MOD, 
	HN_RID, 
	FIRST_DAY_OF_WEEK_TIME_ID AS TIME_ID, 
	ST_RID, 
	SALES, 
	SALES_REG, 
	SALES_PROMO, 
	SALES_MKDN, 
	STOCK, 
	STOCK_REG, 
	STOCK_MKDN, 
	IN_STOCK_SALES, 
	IN_STOCK_SALES_REG, 
	IN_STOCK_SALES_PROMO, 
	IN_STOCK_SALES_MKDN, 
	ACCUM_SELL_THRU_SALES, 
	ACCUM_SELL_THRU_STOCK, 
	DAYS_IN_STOCK, 
	RECEIVED_STOCK 
FROM 
@SUMMARY_VIEW sv 
WHERE sv.HN_MOD=3 AND sv.INSERT_OR_UPDATE_FLAG='I' 
SET @INSERTED_ROWS = @@ROWCOUNT 
SET @TOTAL_INSERTED_ROWS = @TOTAL_INSERTED_ROWS + @INSERTED_ROWS 
INSERT INTO @PROCESS_SUMMARY SELECT 'Step 10: Add rows to weekly size tables - Table 3',0,DATEDIFF(millisecond, @TIME_TO_EXECUTE, getDate()),'Inserted Rows:', (SELECT @INSERTED_ROWS) 
SET @TIME_TO_EXECUTE = getDate(); 
INSERT INTO [dbo].[STORE_HISTORY_WEEK4]  
( 
	HN_MOD, 
	HN_RID, 
	TIME_ID, 
	ST_RID, 
	SALES, 
	SALES_REG, 
	SALES_PROMO, 
	SALES_MKDN, 
	STOCK, 
	STOCK_REG, 
	STOCK_MKDN, 
	IN_STOCK_SALES, 
	IN_STOCK_SALES_REG, 
	IN_STOCK_SALES_PROMO, 
	IN_STOCK_SALES_MKDN, 
	ACCUM_SELL_THRU_SALES, 
	ACCUM_SELL_THRU_STOCK, 
	DAYS_IN_STOCK, 
	RECEIVED_STOCK 
) 
SELECT  
	HN_MOD, 
	HN_RID, 
	FIRST_DAY_OF_WEEK_TIME_ID AS TIME_ID, 
	ST_RID, 
	SALES, 
	SALES_REG, 
	SALES_PROMO, 
	SALES_MKDN, 
	STOCK, 
	STOCK_REG, 
	STOCK_MKDN, 
	IN_STOCK_SALES, 
	IN_STOCK_SALES_REG, 
	IN_STOCK_SALES_PROMO, 
	IN_STOCK_SALES_MKDN, 
	ACCUM_SELL_THRU_SALES, 
	ACCUM_SELL_THRU_STOCK, 
	DAYS_IN_STOCK, 
	RECEIVED_STOCK 
FROM 
@SUMMARY_VIEW sv 
WHERE sv.HN_MOD=4 AND sv.INSERT_OR_UPDATE_FLAG='I' 
SET @INSERTED_ROWS = @@ROWCOUNT 
SET @TOTAL_INSERTED_ROWS = @TOTAL_INSERTED_ROWS + @INSERTED_ROWS 
INSERT INTO @PROCESS_SUMMARY SELECT 'Step 10: Add rows to weekly size tables - Table 4',0,DATEDIFF(millisecond, @TIME_TO_EXECUTE, getDate()),'Inserted Rows:', (SELECT @INSERTED_ROWS) 
SET @TIME_TO_EXECUTE = getDate(); 
INSERT INTO [dbo].[STORE_HISTORY_WEEK5]  
( 
	HN_MOD, 
	HN_RID, 
	TIME_ID, 
	ST_RID, 
	SALES, 
	SALES_REG, 
	SALES_PROMO, 
	SALES_MKDN, 
	STOCK, 
	STOCK_REG, 
	STOCK_MKDN, 
	IN_STOCK_SALES, 
	IN_STOCK_SALES_REG, 
	IN_STOCK_SALES_PROMO, 
	IN_STOCK_SALES_MKDN, 
	ACCUM_SELL_THRU_SALES, 
	ACCUM_SELL_THRU_STOCK, 
	DAYS_IN_STOCK, 
	RECEIVED_STOCK 
) 
SELECT  
	HN_MOD, 
	HN_RID, 
	FIRST_DAY_OF_WEEK_TIME_ID AS TIME_ID, 
	ST_RID, 
	SALES, 
	SALES_REG, 
	SALES_PROMO, 
	SALES_MKDN, 
	STOCK, 
	STOCK_REG, 
	STOCK_MKDN, 
	IN_STOCK_SALES, 
	IN_STOCK_SALES_REG, 
	IN_STOCK_SALES_PROMO, 
	IN_STOCK_SALES_MKDN, 
	ACCUM_SELL_THRU_SALES, 
	ACCUM_SELL_THRU_STOCK, 
	DAYS_IN_STOCK, 
	RECEIVED_STOCK 
FROM 
@SUMMARY_VIEW sv 
WHERE sv.HN_MOD=5 AND sv.INSERT_OR_UPDATE_FLAG='I' 
SET @INSERTED_ROWS = @@ROWCOUNT 
SET @TOTAL_INSERTED_ROWS = @TOTAL_INSERTED_ROWS + @INSERTED_ROWS 
INSERT INTO @PROCESS_SUMMARY SELECT 'Step 10: Add rows to weekly size tables - Table 5',0,DATEDIFF(millisecond, @TIME_TO_EXECUTE, getDate()),'Inserted Rows:', (SELECT @INSERTED_ROWS) 
SET @TIME_TO_EXECUTE = getDate(); 
INSERT INTO [dbo].[STORE_HISTORY_WEEK6]  
( 
	HN_MOD, 
	HN_RID, 
	TIME_ID, 
	ST_RID, 
	SALES, 
	SALES_REG, 
	SALES_PROMO, 
	SALES_MKDN, 
	STOCK, 
	STOCK_REG, 
	STOCK_MKDN, 
	IN_STOCK_SALES, 
	IN_STOCK_SALES_REG, 
	IN_STOCK_SALES_PROMO, 
	IN_STOCK_SALES_MKDN, 
	ACCUM_SELL_THRU_SALES, 
	ACCUM_SELL_THRU_STOCK, 
	DAYS_IN_STOCK, 
	RECEIVED_STOCK 
) 
SELECT  
	HN_MOD, 
	HN_RID, 
	FIRST_DAY_OF_WEEK_TIME_ID AS TIME_ID, 
	ST_RID, 
	SALES, 
	SALES_REG, 
	SALES_PROMO, 
	SALES_MKDN, 
	STOCK, 
	STOCK_REG, 
	STOCK_MKDN, 
	IN_STOCK_SALES, 
	IN_STOCK_SALES_REG, 
	IN_STOCK_SALES_PROMO, 
	IN_STOCK_SALES_MKDN, 
	ACCUM_SELL_THRU_SALES, 
	ACCUM_SELL_THRU_STOCK, 
	DAYS_IN_STOCK, 
	RECEIVED_STOCK 
FROM 
@SUMMARY_VIEW sv 
WHERE sv.HN_MOD=6 AND sv.INSERT_OR_UPDATE_FLAG='I' 
SET @INSERTED_ROWS = @@ROWCOUNT 
SET @TOTAL_INSERTED_ROWS = @TOTAL_INSERTED_ROWS + @INSERTED_ROWS 
INSERT INTO @PROCESS_SUMMARY SELECT 'Step 10: Add rows to weekly size tables - Table 6',0,DATEDIFF(millisecond, @TIME_TO_EXECUTE, getDate()),'Inserted Rows:', (SELECT @INSERTED_ROWS) 
SET @TIME_TO_EXECUTE = getDate(); 
INSERT INTO [dbo].[STORE_HISTORY_WEEK7]  
( 
	HN_MOD, 
	HN_RID, 
	TIME_ID, 
	ST_RID, 
	SALES, 
	SALES_REG, 
	SALES_PROMO, 
	SALES_MKDN, 
	STOCK, 
	STOCK_REG, 
	STOCK_MKDN, 
	IN_STOCK_SALES, 
	IN_STOCK_SALES_REG, 
	IN_STOCK_SALES_PROMO, 
	IN_STOCK_SALES_MKDN, 
	ACCUM_SELL_THRU_SALES, 
	ACCUM_SELL_THRU_STOCK, 
	DAYS_IN_STOCK, 
	RECEIVED_STOCK 
) 
SELECT  
	HN_MOD, 
	HN_RID, 
	FIRST_DAY_OF_WEEK_TIME_ID AS TIME_ID, 
	ST_RID, 
	SALES, 
	SALES_REG, 
	SALES_PROMO, 
	SALES_MKDN, 
	STOCK, 
	STOCK_REG, 
	STOCK_MKDN, 
	IN_STOCK_SALES, 
	IN_STOCK_SALES_REG, 
	IN_STOCK_SALES_PROMO, 
	IN_STOCK_SALES_MKDN, 
	ACCUM_SELL_THRU_SALES, 
	ACCUM_SELL_THRU_STOCK, 
	DAYS_IN_STOCK, 
	RECEIVED_STOCK 
FROM 
@SUMMARY_VIEW sv 
WHERE sv.HN_MOD=7 AND sv.INSERT_OR_UPDATE_FLAG='I' 
SET @INSERTED_ROWS = @@ROWCOUNT 
SET @TOTAL_INSERTED_ROWS = @TOTAL_INSERTED_ROWS + @INSERTED_ROWS 
INSERT INTO @PROCESS_SUMMARY SELECT 'Step 10: Add rows to weekly size tables - Table 7',0,DATEDIFF(millisecond, @TIME_TO_EXECUTE, getDate()),'Inserted Rows:', (SELECT @INSERTED_ROWS) 
SET @TIME_TO_EXECUTE = getDate(); 
INSERT INTO [dbo].[STORE_HISTORY_WEEK8]  
( 
	HN_MOD, 
	HN_RID, 
	TIME_ID, 
	ST_RID, 
	SALES, 
	SALES_REG, 
	SALES_PROMO, 
	SALES_MKDN, 
	STOCK, 
	STOCK_REG, 
	STOCK_MKDN, 
	IN_STOCK_SALES, 
	IN_STOCK_SALES_REG, 
	IN_STOCK_SALES_PROMO, 
	IN_STOCK_SALES_MKDN, 
	ACCUM_SELL_THRU_SALES, 
	ACCUM_SELL_THRU_STOCK, 
	DAYS_IN_STOCK, 
	RECEIVED_STOCK 
) 
SELECT  
	HN_MOD, 
	HN_RID, 
	FIRST_DAY_OF_WEEK_TIME_ID AS TIME_ID, 
	ST_RID, 
	SALES, 
	SALES_REG, 
	SALES_PROMO, 
	SALES_MKDN, 
	STOCK, 
	STOCK_REG, 
	STOCK_MKDN, 
	IN_STOCK_SALES, 
	IN_STOCK_SALES_REG, 
	IN_STOCK_SALES_PROMO, 
	IN_STOCK_SALES_MKDN, 
	ACCUM_SELL_THRU_SALES, 
	ACCUM_SELL_THRU_STOCK, 
	DAYS_IN_STOCK, 
	RECEIVED_STOCK 
FROM 
@SUMMARY_VIEW sv 
WHERE sv.HN_MOD=8 AND sv.INSERT_OR_UPDATE_FLAG='I' 
SET @INSERTED_ROWS = @@ROWCOUNT 
SET @TOTAL_INSERTED_ROWS = @TOTAL_INSERTED_ROWS + @INSERTED_ROWS 
INSERT INTO @PROCESS_SUMMARY SELECT 'Step 10: Add rows to weekly size tables - Table 8',0,DATEDIFF(millisecond, @TIME_TO_EXECUTE, getDate()),'Inserted Rows:', (SELECT @INSERTED_ROWS) 
SET @TIME_TO_EXECUTE = getDate(); 
INSERT INTO [dbo].[STORE_HISTORY_WEEK9]  
( 
	HN_MOD, 
	HN_RID, 
	TIME_ID, 
	ST_RID, 
	SALES, 
	SALES_REG, 
	SALES_PROMO, 
	SALES_MKDN, 
	STOCK, 
	STOCK_REG, 
	STOCK_MKDN, 
	IN_STOCK_SALES, 
	IN_STOCK_SALES_REG, 
	IN_STOCK_SALES_PROMO, 
	IN_STOCK_SALES_MKDN, 
	ACCUM_SELL_THRU_SALES, 
	ACCUM_SELL_THRU_STOCK, 
	DAYS_IN_STOCK, 
	RECEIVED_STOCK 
) 
SELECT  
	HN_MOD, 
	HN_RID, 
	FIRST_DAY_OF_WEEK_TIME_ID AS TIME_ID, 
	ST_RID, 
	SALES, 
	SALES_REG, 
	SALES_PROMO, 
	SALES_MKDN, 
	STOCK, 
	STOCK_REG, 
	STOCK_MKDN, 
	IN_STOCK_SALES, 
	IN_STOCK_SALES_REG, 
	IN_STOCK_SALES_PROMO, 
	IN_STOCK_SALES_MKDN, 
	ACCUM_SELL_THRU_SALES, 
	ACCUM_SELL_THRU_STOCK, 
	DAYS_IN_STOCK, 
	RECEIVED_STOCK 
FROM 
@SUMMARY_VIEW sv 
WHERE sv.HN_MOD=9 AND sv.INSERT_OR_UPDATE_FLAG='I' 
SET @INSERTED_ROWS = @@ROWCOUNT 
SET @TOTAL_INSERTED_ROWS = @TOTAL_INSERTED_ROWS + @INSERTED_ROWS 
INSERT INTO @PROCESS_SUMMARY SELECT 'Step 10: Add rows to weekly size tables - Table 9',0,DATEDIFF(millisecond, @TIME_TO_EXECUTE, getDate()),'Inserted Rows:', (SELECT @INSERTED_ROWS) 
INSERT INTO @PROCESS_SUMMARY SELECT 'Step 10: Add rows to weekly size tables',DATEDIFF(millisecond, @TIME_TO_EXECUTE_PROCESS_STEP, getDate()),0,'Total Inserted Rows:', (SELECT @TOTAL_INSERTED_ROWS) 
--End Process Step 10: Add rows to weekly size tables 
--Begin Process Step 11: Sum values for color nodes 
SET @TIME_TO_EXECUTE_PROCESS_STEP = getDate(); 
DECLARE @COLOR_SUMMARY_VIEW TABLE	 
( 
	HN_MOD int, 
	HN_RID int,   
	ST_RID int,  
	FIRST_DAY_OF_WEEK_TIME_ID int, 
	IN_STOCK_SALES int, 
	IN_STOCK_SALES_REG int, 
	IN_STOCK_SALES_PROMO int, 
	IN_STOCK_SALES_MKDN int, 
	ACCUM_SELL_THRU_SALES int, 
	ACCUM_SELL_THRU_STOCK int, 
	DAYS_IN_STOCK int, 
	RECEIVED_STOCK int --received stock during the week 
) 
INSERT INTO @COLOR_SUMMARY_VIEW  
 SELECT			 
		PARENT_HN_RID % @STORE_TABLE_COUNT AS HN_MOD, 
		PARENT_HN_RID AS HN_RID,  
		ST_RID,  
		FIRST_DAY_OF_WEEK_TIME_ID, 
		sum(IN_STOCK_SALES)	AS IN_STOCK_SALES, 
		sum(IN_STOCK_SALES_REG) AS IN_STOCK_SALES_REG, 
		sum(IN_STOCK_SALES_PROMO) AS IN_STOCK_SALES_PROMO, 
		sum(IN_STOCK_SALES_MKDN) AS IN_STOCK_SALES_MKDN, 
		sum(ACCUM_SELL_THRU_SALES) AS ACCUM_SELL_THRU_SALES, 
		sum(ACCUM_SELL_THRU_STOCK) AS ACCUM_SELL_THRU_STOCK, 
		max(DAYS_IN_STOCK) AS DAYS_IN_STOCK, 
		max(RECEIVED_STOCK) AS RECEIVED_STOCK	 
FROM @SUMMARY_VIEW	    
GROUP BY PARENT_HN_RID, ST_RID, FIRST_DAY_OF_WEEK_TIME_ID 
INSERT INTO @PROCESS_SUMMARY SELECT 'Step 11: Sum values for color nodes',DATEDIFF(millisecond, @TIME_TO_EXECUTE_PROCESS_STEP, getDate()),0,'Color node rows:', (SELECT count(*) FROM @COLOR_SUMMARY_VIEW) 
--End Process Step 11: Sum values for color nodes 
--Begin Process Step 12: Update weekly tables with color node sums 
SET @TIME_TO_EXECUTE_PROCESS_STEP = getDate(); 
SET @TOTAL_UPDATED_ROWS = 0 
SET @TIME_TO_EXECUTE = getDate(); 
UPDATE w 
SET w.IN_STOCK_SALES = csv.IN_STOCK_SALES, 
w.IN_STOCK_SALES_REG = csv.IN_STOCK_SALES_REG, 
w.IN_STOCK_SALES_PROMO = csv.IN_STOCK_SALES_PROMO, 
w.IN_STOCK_SALES_MKDN = csv.IN_STOCK_SALES_MKDN, 
w.ACCUM_SELL_THRU_SALES = null, --csv.ACCUM_SELL_THRU_SALES, 
w.ACCUM_SELL_THRU_STOCK = null, --csv.ACCUM_SELL_THRU_STOCK, 
w.DAYS_IN_STOCK = null, --csv.DAYS_IN_STOCK, 
w.RECEIVED_STOCK = null --csv.RECEIVED_STOCK 
FROM [dbo].[STORE_HISTORY_WEEK0] w 
INNER JOIN @COLOR_SUMMARY_VIEW csv ON w.HN_RID=csv.HN_RID AND w.TIME_ID=csv.FIRST_DAY_OF_WEEK_TIME_ID AND w.ST_RID=csv.ST_RID 
WHERE csv.HN_MOD=0 
SET @UPDATED_ROWS = @@ROWCOUNT 
SET @TOTAL_UPDATED_ROWS = @TOTAL_UPDATED_ROWS + @UPDATED_ROWS 
INSERT INTO @PROCESS_SUMMARY SELECT 'Step 12: Update weekly tables with color node sums - Table 0',0,DATEDIFF(millisecond, @TIME_TO_EXECUTE, getDate()),'Updated rows:', (SELECT @UPDATED_ROWS) 
SET @TIME_TO_EXECUTE = getDate(); 
UPDATE w 
SET w.IN_STOCK_SALES = csv.IN_STOCK_SALES, 
w.IN_STOCK_SALES_REG = csv.IN_STOCK_SALES_REG, 
w.IN_STOCK_SALES_PROMO = csv.IN_STOCK_SALES_PROMO, 
w.IN_STOCK_SALES_MKDN = csv.IN_STOCK_SALES_MKDN, 
w.ACCUM_SELL_THRU_SALES = null, --csv.ACCUM_SELL_THRU_SALES, 
w.ACCUM_SELL_THRU_STOCK = null, --csv.ACCUM_SELL_THRU_STOCK, 
w.DAYS_IN_STOCK = null, --csv.DAYS_IN_STOCK, 
w.RECEIVED_STOCK = null --csv.RECEIVED_STOCK 
FROM [dbo].[STORE_HISTORY_WEEK1] w 
INNER JOIN @COLOR_SUMMARY_VIEW csv ON w.HN_RID=csv.HN_RID AND w.TIME_ID=csv.FIRST_DAY_OF_WEEK_TIME_ID AND w.ST_RID=csv.ST_RID 
WHERE csv.HN_MOD=1 
SET @UPDATED_ROWS = @@ROWCOUNT 
SET @TOTAL_UPDATED_ROWS = @TOTAL_UPDATED_ROWS + @UPDATED_ROWS 
INSERT INTO @PROCESS_SUMMARY SELECT 'Step 12: Update weekly tables with color node sums - Table 1',0,DATEDIFF(millisecond, @TIME_TO_EXECUTE, getDate()),'Updated rows:', (SELECT @UPDATED_ROWS) 
SET @TIME_TO_EXECUTE = getDate(); 
UPDATE w 
SET w.IN_STOCK_SALES = csv.IN_STOCK_SALES, 
w.IN_STOCK_SALES_REG = csv.IN_STOCK_SALES_REG, 
w.IN_STOCK_SALES_PROMO = csv.IN_STOCK_SALES_PROMO, 
w.IN_STOCK_SALES_MKDN = csv.IN_STOCK_SALES_MKDN, 
w.ACCUM_SELL_THRU_SALES = null, --csv.ACCUM_SELL_THRU_SALES, 
w.ACCUM_SELL_THRU_STOCK = null, --csv.ACCUM_SELL_THRU_STOCK, 
w.DAYS_IN_STOCK = null, --csv.DAYS_IN_STOCK, 
w.RECEIVED_STOCK = null --csv.RECEIVED_STOCK 
FROM [dbo].[STORE_HISTORY_WEEK2] w 
INNER JOIN @COLOR_SUMMARY_VIEW csv ON w.HN_RID=csv.HN_RID AND w.TIME_ID=csv.FIRST_DAY_OF_WEEK_TIME_ID AND w.ST_RID=csv.ST_RID 
WHERE csv.HN_MOD=2 
SET @UPDATED_ROWS = @@ROWCOUNT 
SET @TOTAL_UPDATED_ROWS = @TOTAL_UPDATED_ROWS + @UPDATED_ROWS 
INSERT INTO @PROCESS_SUMMARY SELECT 'Step 12: Update weekly tables with color node sums - Table 2',0,DATEDIFF(millisecond, @TIME_TO_EXECUTE, getDate()),'Updated rows:', (SELECT @UPDATED_ROWS) 
SET @TIME_TO_EXECUTE = getDate(); 
UPDATE w 
SET w.IN_STOCK_SALES = csv.IN_STOCK_SALES, 
w.IN_STOCK_SALES_REG = csv.IN_STOCK_SALES_REG, 
w.IN_STOCK_SALES_PROMO = csv.IN_STOCK_SALES_PROMO, 
w.IN_STOCK_SALES_MKDN = csv.IN_STOCK_SALES_MKDN, 
w.ACCUM_SELL_THRU_SALES = null, --csv.ACCUM_SELL_THRU_SALES, 
w.ACCUM_SELL_THRU_STOCK = null, --csv.ACCUM_SELL_THRU_STOCK, 
w.DAYS_IN_STOCK = null, --csv.DAYS_IN_STOCK, 
w.RECEIVED_STOCK = null --csv.RECEIVED_STOCK 
FROM [dbo].[STORE_HISTORY_WEEK3] w 
INNER JOIN @COLOR_SUMMARY_VIEW csv ON w.HN_RID=csv.HN_RID AND w.TIME_ID=csv.FIRST_DAY_OF_WEEK_TIME_ID AND w.ST_RID=csv.ST_RID 
WHERE csv.HN_MOD=3 
SET @UPDATED_ROWS = @@ROWCOUNT 
SET @TOTAL_UPDATED_ROWS = @TOTAL_UPDATED_ROWS + @UPDATED_ROWS 
INSERT INTO @PROCESS_SUMMARY SELECT 'Step 12: Update weekly tables with color node sums - Table 3',0,DATEDIFF(millisecond, @TIME_TO_EXECUTE, getDate()),'Updated rows:', (SELECT @UPDATED_ROWS) 
SET @TIME_TO_EXECUTE = getDate(); 
UPDATE w 
SET w.IN_STOCK_SALES = csv.IN_STOCK_SALES, 
w.IN_STOCK_SALES_REG = csv.IN_STOCK_SALES_REG, 
w.IN_STOCK_SALES_PROMO = csv.IN_STOCK_SALES_PROMO, 
w.IN_STOCK_SALES_MKDN = csv.IN_STOCK_SALES_MKDN, 
w.ACCUM_SELL_THRU_SALES = null, --csv.ACCUM_SELL_THRU_SALES, 
w.ACCUM_SELL_THRU_STOCK = null, --csv.ACCUM_SELL_THRU_STOCK, 
w.DAYS_IN_STOCK = null, --csv.DAYS_IN_STOCK, 
w.RECEIVED_STOCK = null --csv.RECEIVED_STOCK 
FROM [dbo].[STORE_HISTORY_WEEK4] w 
INNER JOIN @COLOR_SUMMARY_VIEW csv ON w.HN_RID=csv.HN_RID AND w.TIME_ID=csv.FIRST_DAY_OF_WEEK_TIME_ID AND w.ST_RID=csv.ST_RID 
WHERE csv.HN_MOD=4 
SET @UPDATED_ROWS = @@ROWCOUNT 
SET @TOTAL_UPDATED_ROWS = @TOTAL_UPDATED_ROWS + @UPDATED_ROWS 
INSERT INTO @PROCESS_SUMMARY SELECT 'Step 12: Update weekly tables with color node sums - Table 4',0,DATEDIFF(millisecond, @TIME_TO_EXECUTE, getDate()),'Updated rows:', (SELECT @UPDATED_ROWS) 
SET @TIME_TO_EXECUTE = getDate(); 
UPDATE w 
SET w.IN_STOCK_SALES = csv.IN_STOCK_SALES, 
w.IN_STOCK_SALES_REG = csv.IN_STOCK_SALES_REG, 
w.IN_STOCK_SALES_PROMO = csv.IN_STOCK_SALES_PROMO, 
w.IN_STOCK_SALES_MKDN = csv.IN_STOCK_SALES_MKDN, 
w.ACCUM_SELL_THRU_SALES = null, --csv.ACCUM_SELL_THRU_SALES, 
w.ACCUM_SELL_THRU_STOCK = null, --csv.ACCUM_SELL_THRU_STOCK, 
w.DAYS_IN_STOCK = null, --csv.DAYS_IN_STOCK, 
w.RECEIVED_STOCK = null --csv.RECEIVED_STOCK 
FROM [dbo].[STORE_HISTORY_WEEK5] w 
INNER JOIN @COLOR_SUMMARY_VIEW csv ON w.HN_RID=csv.HN_RID AND w.TIME_ID=csv.FIRST_DAY_OF_WEEK_TIME_ID AND w.ST_RID=csv.ST_RID 
WHERE csv.HN_MOD=5 
SET @UPDATED_ROWS = @@ROWCOUNT 
SET @TOTAL_UPDATED_ROWS = @TOTAL_UPDATED_ROWS + @UPDATED_ROWS 
INSERT INTO @PROCESS_SUMMARY SELECT 'Step 12: Update weekly tables with color node sums - Table 5',0,DATEDIFF(millisecond, @TIME_TO_EXECUTE, getDate()),'Updated rows:', (SELECT @UPDATED_ROWS) 
SET @TIME_TO_EXECUTE = getDate(); 
UPDATE w 
SET w.IN_STOCK_SALES = csv.IN_STOCK_SALES, 
w.IN_STOCK_SALES_REG = csv.IN_STOCK_SALES_REG, 
w.IN_STOCK_SALES_PROMO = csv.IN_STOCK_SALES_PROMO, 
w.IN_STOCK_SALES_MKDN = csv.IN_STOCK_SALES_MKDN, 
w.ACCUM_SELL_THRU_SALES = null, --csv.ACCUM_SELL_THRU_SALES, 
w.ACCUM_SELL_THRU_STOCK = null, --csv.ACCUM_SELL_THRU_STOCK, 
w.DAYS_IN_STOCK = null, --csv.DAYS_IN_STOCK, 
w.RECEIVED_STOCK = null --csv.RECEIVED_STOCK 
FROM [dbo].[STORE_HISTORY_WEEK6] w 
INNER JOIN @COLOR_SUMMARY_VIEW csv ON w.HN_RID=csv.HN_RID AND w.TIME_ID=csv.FIRST_DAY_OF_WEEK_TIME_ID AND w.ST_RID=csv.ST_RID 
WHERE csv.HN_MOD=6 
SET @UPDATED_ROWS = @@ROWCOUNT 
SET @TOTAL_UPDATED_ROWS = @TOTAL_UPDATED_ROWS + @UPDATED_ROWS 
INSERT INTO @PROCESS_SUMMARY SELECT 'Step 12: Update weekly tables with color node sums - Table 6',0,DATEDIFF(millisecond, @TIME_TO_EXECUTE, getDate()),'Updated rows:', (SELECT @UPDATED_ROWS) 
SET @TIME_TO_EXECUTE = getDate(); 
UPDATE w 
SET w.IN_STOCK_SALES = csv.IN_STOCK_SALES, 
w.IN_STOCK_SALES_REG = csv.IN_STOCK_SALES_REG, 
w.IN_STOCK_SALES_PROMO = csv.IN_STOCK_SALES_PROMO, 
w.IN_STOCK_SALES_MKDN = csv.IN_STOCK_SALES_MKDN, 
w.ACCUM_SELL_THRU_SALES = null, --csv.ACCUM_SELL_THRU_SALES, 
w.ACCUM_SELL_THRU_STOCK = null, --csv.ACCUM_SELL_THRU_STOCK, 
w.DAYS_IN_STOCK = null, --csv.DAYS_IN_STOCK, 
w.RECEIVED_STOCK = null --csv.RECEIVED_STOCK 
FROM [dbo].[STORE_HISTORY_WEEK7] w 
INNER JOIN @COLOR_SUMMARY_VIEW csv ON w.HN_RID=csv.HN_RID AND w.TIME_ID=csv.FIRST_DAY_OF_WEEK_TIME_ID AND w.ST_RID=csv.ST_RID 
WHERE csv.HN_MOD=7 
SET @UPDATED_ROWS = @@ROWCOUNT 
SET @TOTAL_UPDATED_ROWS = @TOTAL_UPDATED_ROWS + @UPDATED_ROWS 
INSERT INTO @PROCESS_SUMMARY SELECT 'Step 12: Update weekly tables with color node sums - Table 7',0,DATEDIFF(millisecond, @TIME_TO_EXECUTE, getDate()),'Updated rows:', (SELECT @UPDATED_ROWS) 
SET @TIME_TO_EXECUTE = getDate(); 
UPDATE w 
SET w.IN_STOCK_SALES = csv.IN_STOCK_SALES, 
w.IN_STOCK_SALES_REG = csv.IN_STOCK_SALES_REG, 
w.IN_STOCK_SALES_PROMO = csv.IN_STOCK_SALES_PROMO, 
w.IN_STOCK_SALES_MKDN = csv.IN_STOCK_SALES_MKDN, 
w.ACCUM_SELL_THRU_SALES = null, --csv.ACCUM_SELL_THRU_SALES, 
w.ACCUM_SELL_THRU_STOCK = null, --csv.ACCUM_SELL_THRU_STOCK, 
w.DAYS_IN_STOCK = null, --csv.DAYS_IN_STOCK, 
w.RECEIVED_STOCK = null --csv.RECEIVED_STOCK 
FROM [dbo].[STORE_HISTORY_WEEK8] w 
INNER JOIN @COLOR_SUMMARY_VIEW csv ON w.HN_RID=csv.HN_RID AND w.TIME_ID=csv.FIRST_DAY_OF_WEEK_TIME_ID AND w.ST_RID=csv.ST_RID 
WHERE csv.HN_MOD=8 
SET @UPDATED_ROWS = @@ROWCOUNT 
SET @TOTAL_UPDATED_ROWS = @TOTAL_UPDATED_ROWS + @UPDATED_ROWS 
INSERT INTO @PROCESS_SUMMARY SELECT 'Step 12: Update weekly tables with color node sums - Table 8',0,DATEDIFF(millisecond, @TIME_TO_EXECUTE, getDate()),'Updated rows:', (SELECT @UPDATED_ROWS) 
SET @TIME_TO_EXECUTE = getDate(); 
UPDATE w 
SET w.IN_STOCK_SALES = csv.IN_STOCK_SALES, 
w.IN_STOCK_SALES_REG = csv.IN_STOCK_SALES_REG, 
w.IN_STOCK_SALES_PROMO = csv.IN_STOCK_SALES_PROMO, 
w.IN_STOCK_SALES_MKDN = csv.IN_STOCK_SALES_MKDN, 
w.ACCUM_SELL_THRU_SALES = null, --csv.ACCUM_SELL_THRU_SALES, 
w.ACCUM_SELL_THRU_STOCK = null, --csv.ACCUM_SELL_THRU_STOCK, 
w.DAYS_IN_STOCK = null, --csv.DAYS_IN_STOCK, 
w.RECEIVED_STOCK = null --csv.RECEIVED_STOCK 
FROM [dbo].[STORE_HISTORY_WEEK9] w 
INNER JOIN @COLOR_SUMMARY_VIEW csv ON w.HN_RID=csv.HN_RID AND w.TIME_ID=csv.FIRST_DAY_OF_WEEK_TIME_ID AND w.ST_RID=csv.ST_RID 
WHERE csv.HN_MOD=9 
SET @UPDATED_ROWS = @@ROWCOUNT 
SET @TOTAL_UPDATED_ROWS = @TOTAL_UPDATED_ROWS + @UPDATED_ROWS 
INSERT INTO @PROCESS_SUMMARY SELECT 'Step 12: Update weekly tables with color node sums - Table 9',0,DATEDIFF(millisecond, @TIME_TO_EXECUTE, getDate()),'Updated rows:', (SELECT @UPDATED_ROWS) 
INSERT INTO @PROCESS_SUMMARY SELECT 'Step 12: Update weekly tables with color node sums',DATEDIFF(millisecond, @TIME_TO_EXECUTE_PROCESS_STEP, getDate()),0,'Total updated rows:', (SELECT @TOTAL_UPDATED_ROWS) 
--End Process Step 12: Update weekly tables with color node sums 
--SELECT * FROM @SUMMARY_VIEW 
SELECT * FROM @PROCESS_SUMMARY 
END 

GO


