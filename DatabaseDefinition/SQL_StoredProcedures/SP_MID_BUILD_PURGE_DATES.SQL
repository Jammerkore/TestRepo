CREATE PROCEDURE [dbo].[SP_MID_BUILD_PURGE_DATES] 
	@PH_RID INT,
	@PHL_SEQUENCE INT,
	@debug BIT = 0
AS
BEGIN
	SET NOCOUNT ON

	DECLARE @HN_TYPE INT,
		@Tables INT

	SELECT @HN_TYPE = ph.PH_TYPE
	FROM PRODUCT_HIERARCHY ph WITH (NOLOCK)
	WHERE ph.PH_RID = @PH_RID

	SELECT @Tables = STORE_TABLE_COUNT
	FROM SYSTEM_OPTIONS WITH (NOLOCK)

	-- create work table
	CREATE TABLE #PURGE_DATES (
		HN_RID INT NOT NULL,
		HN_MOD INT NULL,
		PURGE_DAILY_HISTORY_WEEKS INT NULL,
		PURGE_WEEKLY_HISTORY_WEEKS INT NULL,
		PURGE_PLANS_WEEKS INT NULL,
		PURGE_HEADERS_WEEKS_RECEIPT INT NULL,
		PURGE_HEADERS_WEEKS_ASN INT NULL,
		PURGE_HEADERS_WEEKS_DUMMY INT NULL,
		PURGE_HEADERS_WEEKS_DROPSHIP INT NULL,
		PURGE_HEADERS_WEEKS_RESERVE INT NULL,
		PURGE_HEADERS_WEEKS_WORKUPTOTALBUY INT NULL,
		PURGE_HEADERS_WEEKS_PO INT NULL,
		PURGE_HEADERS_WEEKS_VSW INT NULL
		)

	-- Translate header purge rows to columns
	SELECT *
	INTO #NodeHeaderPurge
	FROM dbo.UDF_MID_TRANSPOSE_NODE_PURGE_DATES()

	CREATE CLUSTERED INDEX #NodeHeaderPurge_idx ON #NodeHeaderPurge (HN_RID)

	-- Insert values into table
	IF @HN_TYPE = 800000
	BEGIN
		SELECT *
		INTO #LevelHeaderPurge
		FROM dbo.UDF_MID_TRANSPOSE_LEVEL_PURGE_DATES()

		CREATE CLUSTERED INDEX #LevelHeaderPurge_idx ON #LevelHeaderPurge (
			PH_RID,
			PHL_SEQUENCE
			)

		INSERT #PURGE_DATES (
			HN_RID,
			PURGE_DAILY_HISTORY_WEEKS,
			PURGE_WEEKLY_HISTORY_WEEKS,
			PURGE_PLANS_WEEKS,
			PURGE_HEADERS_WEEKS_RECEIPT,
			PURGE_HEADERS_WEEKS_ASN,
			PURGE_HEADERS_WEEKS_DUMMY,
			PURGE_HEADERS_WEEKS_DROPSHIP,
			PURGE_HEADERS_WEEKS_RESERVE,
			PURGE_HEADERS_WEEKS_WORKUPTOTALBUY,
			PURGE_HEADERS_WEEKS_PO,
			PURGE_HEADERS_WEEKS_VSW,
			HN_MOD
			)
		SELECT hn.HN_RID,
			COALESCE(pc.PURGE_DAILY_HISTORY, COALESCE(phl.PURGE_DAILY_HISTORY, pd.PURGE_DAILY_HISTORY_WEEKS)),
			COALESCE(pc.PURGE_WEEKLY_HISTORY, COALESCE(phl.PURGE_WEEKLY_HISTORY, pd.PURGE_WEEKLY_HISTORY_WEEKS)),
			COALESCE(pc.PURGE_PLANS, COALESCE(phl.PURGE_PLANS, pd.PURGE_PLANS_WEEKS)),
			COALESCE(nhp.PURGE_HEADERS_WEEKS_RECEIPT, COALESCE(lhp.PURGE_HEADERS_WEEKS_RECEIPT, pd.PURGE_HEADERS_WEEKS_RECEIPT)),
			COALESCE(nhp.PURGE_HEADERS_WEEKS_ASN, COALESCE(lhp.PURGE_HEADERS_WEEKS_ASN, pd.PURGE_HEADERS_WEEKS_ASN)),
			COALESCE(nhp.PURGE_HEADERS_WEEKS_DUMMY, COALESCE(lhp.PURGE_HEADERS_WEEKS_DUMMY, pd.PURGE_HEADERS_WEEKS_DUMMY)),
			COALESCE(nhp.PURGE_HEADERS_WEEKS_DROPSHIP, COALESCE(lhp.PURGE_HEADERS_WEEKS_DROPSHIP, pd.PURGE_HEADERS_WEEKS_DROPSHIP)),
			COALESCE(nhp.PURGE_HEADERS_WEEKS_RESERVE, COALESCE(lhp.PURGE_HEADERS_WEEKS_RESERVE, pd.PURGE_HEADERS_WEEKS_RESERVE)),
			COALESCE(nhp.PURGE_HEADERS_WEEKS_WORKUPTOTALBUY, COALESCE(lhp.PURGE_HEADERS_WEEKS_WORKUPTOTALBUY, pd.PURGE_HEADERS_WEEKS_WORKUPTOTALBUY)),
			COALESCE(nhp.PURGE_HEADERS_WEEKS_PO, COALESCE(lhp.PURGE_HEADERS_WEEKS_PO, pd.PURGE_HEADERS_WEEKS_PO)),
			COALESCE(nhp.PURGE_HEADERS_WEEKS_VSW, COALESCE(lhp.PURGE_HEADERS_WEEKS_VSW, pd.PURGE_HEADERS_WEEKS_VSW)),
			hn.HN_RID % @Tables
		FROM HIERARCHY_NODE hn WITH (NOLOCK) -- node information
		LEFT OUTER JOIN HIER_NODE_PROPERTIES hnp ON hnp.HN_RID = hn.HN_RID -- node properties
		LEFT OUTER JOIN HIER_NODE_JOIN hnj WITH (NOLOCK) ON hnj.PH_RID = @PH_RID
			AND hnj.HN_RID = hn.HN_RID -- parent of nodes
		LEFT OUTER JOIN PURGE_DATES pd WITH (NOLOCK) ON pd.HN_RID = hnj.PARENT_HN_RID -- purge dates of parents
		LEFT OUTER JOIN PURGE_CRITERIA pc WITH (NOLOCK) ON pc.HN_RID = hn.HN_RID -- purge criteria
		LEFT OUTER JOIN #NodeHeaderPurge nhp ON nhp.HN_RID = hn.HN_RID -- header purge criteria
		LEFT OUTER JOIN PRODUCT_HIERARCHY_LEVELS phl WITH (NOLOCK) ON phl.PH_RID = @PH_RID
			AND phl.PHL_SEQUENCE = @PHL_SEQUENCE -- level information
		LEFT OUTER JOIN #LevelHeaderPurge lhp ON lhp.PH_RID = @PH_RID
			AND lhp.PHL_SEQUENCE = @PHL_SEQUENCE -- level purge information
		WHERE hn.HOME_PH_RID = @PH_RID
			AND hn.HOME_LEVEL = @PHL_SEQUENCE
			AND hn.HN_RID NOT IN (
				SELECT HN_RID
				FROM #PURGE_DATES
				)

		DELETE
		FROM #PURGE_DATES
		WHERE HN_RID IN (
				SELECT HN_RID
				FROM PURGE_DATES
				)

		ALTER TABLE [dbo].[PURGE_DATES] DROP CONSTRAINT [PURGE_DATES_PK]   -- TT#5208 - JSmith - Database timeout determining purge dates
		INSERT PURGE_DATES (
			HN_RID,
			PURGE_DAILY_HISTORY_WEEKS,
			PURGE_WEEKLY_HISTORY_WEEKS,
			PURGE_PLANS_WEEKS,
			PURGE_HEADERS_WEEKS_RECEIPT,
			PURGE_HEADERS_WEEKS_ASN,
			PURGE_HEADERS_WEEKS_DUMMY,
			PURGE_HEADERS_WEEKS_DROPSHIP,
			PURGE_HEADERS_WEEKS_RESERVE,
			PURGE_HEADERS_WEEKS_WORKUPTOTALBUY,
			PURGE_HEADERS_WEEKS_PO,
			PURGE_HEADERS_WEEKS_VSW,
			HN_MOD
			)
		SELECT DISTINCT HN_RID,
			PURGE_DAILY_HISTORY_WEEKS,
			PURGE_WEEKLY_HISTORY_WEEKS,
			PURGE_PLANS_WEEKS,
			PURGE_HEADERS_WEEKS_RECEIPT,
			PURGE_HEADERS_WEEKS_ASN,
			PURGE_HEADERS_WEEKS_DUMMY,
			PURGE_HEADERS_WEEKS_DROPSHIP,
			PURGE_HEADERS_WEEKS_RESERVE,
			PURGE_HEADERS_WEEKS_WORKUPTOTALBUY,
			PURGE_HEADERS_WEEKS_PO,
			PURGE_HEADERS_WEEKS_VSW,
			HN_MOD
		FROM #PURGE_DATES
	    ALTER TABLE [dbo].[PURGE_DATES] 	ADD CONSTRAINT [PURGE_DATES_PK] PRIMARY KEY CLUSTERED ([HN_RID] ASC)   -- TT#5208 - JSmith - Database timeout determining purge dates  
	END
	ELSE
	BEGIN
		INSERT #PURGE_DATES (
			HN_RID,
			PURGE_DAILY_HISTORY_WEEKS,
			PURGE_WEEKLY_HISTORY_WEEKS,
			PURGE_PLANS_WEEKS,
			PURGE_HEADERS_WEEKS_RECEIPT,
			PURGE_HEADERS_WEEKS_ASN,
			PURGE_HEADERS_WEEKS_DUMMY,
			PURGE_HEADERS_WEEKS_DROPSHIP,
			PURGE_HEADERS_WEEKS_RESERVE,
			PURGE_HEADERS_WEEKS_WORKUPTOTALBUY,
			PURGE_HEADERS_WEEKS_PO,
			PURGE_HEADERS_WEEKS_VSW,
			HN_MOD
			)
		SELECT hn.HN_RID,
			COALESCE(pc.PURGE_DAILY_HISTORY, COALESCE(pdApply.PURGE_DAILY_HISTORY, pd.PURGE_DAILY_HISTORY_WEEKS)),
			COALESCE(pc.PURGE_WEEKLY_HISTORY, COALESCE(pdApply.PURGE_WEEKLY_HISTORY, pd.PURGE_WEEKLY_HISTORY_WEEKS)),
			COALESCE(pc.PURGE_PLANS, COALESCE(pdApply.PURGE_PLANS, pd.PURGE_PLANS_WEEKS)),
			COALESCE(nhp.PURGE_HEADERS_WEEKS_RECEIPT, COALESCE(nhpApply.PURGE_HEADERS_WEEKS_RECEIPT, pd.PURGE_HEADERS_WEEKS_RECEIPT)),
			COALESCE(nhp.PURGE_HEADERS_WEEKS_ASN, COALESCE(nhpApply.PURGE_HEADERS_WEEKS_ASN, pd.PURGE_HEADERS_WEEKS_ASN)),
			COALESCE(nhp.PURGE_HEADERS_WEEKS_DUMMY, COALESCE(nhpApply.PURGE_HEADERS_WEEKS_DUMMY, pd.PURGE_HEADERS_WEEKS_DUMMY)),
			COALESCE(nhp.PURGE_HEADERS_WEEKS_DROPSHIP, COALESCE(nhpApply.PURGE_HEADERS_WEEKS_DROPSHIP, pd.PURGE_HEADERS_WEEKS_DROPSHIP)),
			COALESCE(nhp.PURGE_HEADERS_WEEKS_RESERVE, COALESCE(nhpApply.PURGE_HEADERS_WEEKS_RESERVE, pd.PURGE_HEADERS_WEEKS_RESERVE)),
			COALESCE(nhp.PURGE_HEADERS_WEEKS_WORKUPTOTALBUY, COALESCE(nhpApply.PURGE_HEADERS_WEEKS_WORKUPTOTALBUY, pd.PURGE_HEADERS_WEEKS_WORKUPTOTALBUY)),
			COALESCE(nhp.PURGE_HEADERS_WEEKS_PO, COALESCE(nhpApply.PURGE_HEADERS_WEEKS_PO, pd.PURGE_HEADERS_WEEKS_PO)),
			COALESCE(nhp.PURGE_HEADERS_WEEKS_VSW, COALESCE(nhpApply.PURGE_HEADERS_WEEKS_VSW, pd.PURGE_HEADERS_WEEKS_VSW)),
			hn.HN_RID % @Tables
		FROM HIERARCHY_NODE hn WITH (NOLOCK) -- node information
		LEFT OUTER JOIN HIER_NODE_PROPERTIES hnp ON hnp.HN_RID = hn.HN_RID -- node properties
		LEFT OUTER JOIN HIER_NODE_JOIN hnj WITH (NOLOCK) ON hnj.PH_RID = @PH_RID
			AND hnj.HN_RID = hn.HN_RID -- parent of nodes
		LEFT OUTER JOIN PURGE_DATES pd WITH (NOLOCK) ON pd.HN_RID = hnj.PARENT_HN_RID -- purge dates of parents
		LEFT OUTER JOIN PURGE_CRITERIA pc WITH (NOLOCK) ON pc.HN_RID = hn.HN_RID -- purge criteria
		LEFT OUTER JOIN PURGE_CRITERIA pdApply WITH (NOLOCK) ON pdApply.HN_RID = hnp.APPLY_HN_RID_FROM -- apply from purge criteria
		LEFT OUTER JOIN #NodeHeaderPurge nhp ON nhp.HN_RID = hn.HN_RID -- header purge criteria
		LEFT OUTER JOIN #NodeHeaderPurge nhpApply ON nhpApply.HN_RID = hnp.APPLY_HN_RID_FROM -- apply from header purge criteria
		WHERE hn.HOME_PH_RID = @PH_RID
			AND hn.HOME_LEVEL = @PHL_SEQUENCE
			AND hn.HN_RID NOT IN (
				SELECT HN_RID
				FROM #PURGE_DATES
				)

                /* Begin TT#4153 - JSmith - Purge Fails With Duplicate Key During Build Purge Dates  */
                alter table #PURGE_DATES add  rno int identity(1,1)

                delete E
                from  #PURGE_DATES E
                inner join
                (select *,
                RANK() OVER ( PARTITION BY HN_RID ORDER BY rno DESC )RANK
                From #PURGE_DATES )T on E.rno=T.rno
                where T.RANK>1

                alter table #PURGE_DATES 
                drop  column rno
                /* End TT#4153 - JSmith - Purge Fails With Duplicate Key During Build Purge Dates  */
   
		DELETE
		FROM #PURGE_DATES
		WHERE HN_RID IN (
				SELECT HN_RID
				FROM PURGE_DATES
				)

	    ALTER TABLE [dbo].[PURGE_DATES] DROP CONSTRAINT [PURGE_DATES_PK]   -- TT#5208 - JSmith - Database timeout determining purge dates
		INSERT PURGE_DATES (
			HN_RID,
			PURGE_DAILY_HISTORY_WEEKS,
			PURGE_WEEKLY_HISTORY_WEEKS,
			PURGE_PLANS_WEEKS,
			PURGE_HEADERS_WEEKS_RECEIPT,
			PURGE_HEADERS_WEEKS_ASN,
			PURGE_HEADERS_WEEKS_DUMMY,
			PURGE_HEADERS_WEEKS_DROPSHIP,
			PURGE_HEADERS_WEEKS_RESERVE,
			PURGE_HEADERS_WEEKS_WORKUPTOTALBUY,
			PURGE_HEADERS_WEEKS_PO,
			PURGE_HEADERS_WEEKS_VSW,
			HN_MOD
			)
		SELECT DISTINCT HN_RID,
			PURGE_DAILY_HISTORY_WEEKS,
			PURGE_WEEKLY_HISTORY_WEEKS,
			PURGE_PLANS_WEEKS,
			PURGE_HEADERS_WEEKS_RECEIPT,
			PURGE_HEADERS_WEEKS_ASN,
			PURGE_HEADERS_WEEKS_DUMMY,
			PURGE_HEADERS_WEEKS_DROPSHIP,
			PURGE_HEADERS_WEEKS_RESERVE,
			PURGE_HEADERS_WEEKS_WORKUPTOTALBUY,
			PURGE_HEADERS_WEEKS_PO,
			PURGE_HEADERS_WEEKS_VSW,
			HN_MOD
		FROM #PURGE_DATES
		ALTER TABLE [dbo].[PURGE_DATES] 	ADD CONSTRAINT [PURGE_DATES_PK] PRIMARY KEY CLUSTERED ([HN_RID] ASC)   -- TT#5208 - JSmith - Database timeout determining purge dates
	END

	SELECT @@ROWCOUNT

	IF @debug <> 0
		SELECT *
		FROM PURGE_DATES pd
		ORDER BY HN_RID

	-- Remove temp tables
	IF (
			SELECT object_id('tempdb.dbo.#NodeHeaderPurge')
			) > 0
		DROP TABLE #NodeHeaderPurge

	IF (
			SELECT object_id('tempdb.dbo.#LevelHeaderPurge')
			) > 0
		DROP TABLE #LevelHeaderPurge

	IF (
			SELECT object_id('tempdb.dbo.#PURGE_DATES')
			) > 0
		DROP TABLE #PURGE_DATES

	
END
	/* End TT#3065 - JSmith - Purge process failed with timeout error */
	/* END TT#400-MD - JSmith - Add Header Purge Criteria by Header Type */
GO


