--dv =============================================
--dv Create date:	3/31/2004 
--dv Description:	Returns out of stock values   
--dv History:		5/13/2015 -TT#1517-MD -jsobek -Store Service Optimization
--dv =============================================
CREATE PROCEDURE [dbo].[SP_MID_ND_SZ_OOS_VALUES_GET] 
	(
	@HN_RID INT,
	@SG_RID INT,
	@SG_VERSION INT,   -- TT#1935-MD - JSmith - SVC - Node Properties- Chain Set Percent - Select Str Attribute, Date Range and type in % by week.  Select the Apply button and receive a DB Error.
	@SIZE_GROUP_RID INT,
	@FOR_NODE_PROPERTIES INT
	)
AS
BEGIN
	SET NOCOUNT ON

	DECLARE @HOME_PH_RID INT,
		@HN_TYPE INT,
		@HOME_LEVEL INT,
		@LOOPCOUNT INT,
		@SAVECOUNT INT,
		@ANC_HN_RID INT,
		@ANC_SG_RID INT,
		@ANC_HOME_PH_RID INT,
		@ANC_HOME_LEVEL INT,
		@FIRST_LOOP INT,
		@CONTINUE_LOOP INT

	-- Begin TT#1935-MD - JSmith - SVC - Node Properties- Chain Set Percent - Select Str Attribute, Date Range and type in % by week.  Select the Apply button and receive a DB Error.
	if @SG_VERSION = -1
	BEGIN
	   SELECT @SG_VERSION = SG_VERSION FROM STORE_GROUP WHERE SG_RID = @SG_RID
	END
	-- End TT#1935-MD - JSmith - SVC - Node Properties- Chain Set Percent - Select Str Attribute, Date Range and type in % by week.  Select the Apply button and receive a DB Error.

	/* Get the Home PH RID and TYPE and HOME LEVEL */
	SELECT @HOME_PH_RID = HOME_PH_RID,
		@HN_TYPE = HN_TYPE,
		@HOME_LEVEL = HOME_LEVEL
	FROM HIERARCHY_NODE WITH (NOLOCK)
	WHERE HN_RID = @HN_RID

	/*============================*/
	/* GET ALL COLOR NODES        */
	/*============================*/
	/* Get all Color Nodes under the given Hierarchy Node */
	CREATE TABLE #TEMP0 (
		HN_RID INT,
		LEVEL_TYPE INT,
		VIRTUAL_IND INT,
		ACTIVE_IND CHAR(1),
		HOME_LEVEL INT,
		COLORORSIZECODE_RID INT
		) --TT#17 - MD - DOConnell - System Exception Error

	IF @HN_TYPE < 800203
	BEGIN
		INSERT INTO #TEMP0
		EXEC SP_MID_GET_DESCENDANTS_BY_TYPE @HN_RID,
			800203
	END
	ELSE IF @HN_TYPE = 800203
	BEGIN
		INSERT INTO #TEMP0 (
			HN_RID,
			LEVEL_TYPE,
			VIRTUAL_IND,
			ACTIVE_IND,
			HOME_LEVEL
			)
		VALUES (
			@HN_RID,
			@HN_TYPE,
			0,
			'1',
			@HOME_LEVEL
			)
	END

	SELECT *
	INTO #COLORNODES
	FROM COLOR_NODE
	WHERE HN_RID IN (
			SELECT HN_RID
			FROM #TEMP0
			)

	/*============================*/
	/* GET ALL COLOR CODES        */
	/*============================*/
	/* Find all valid Color/Size Code combinations for detail Size values */
	CREATE TABLE #COLORCODES (
		COLOR_CODE_RID INT,
		COLOR_CODE_ID VARCHAR(50),
		COLOR_CODE_NAME VARCHAR(250)
		)

	INSERT #COLORCODES
	SELECT DISTINCT CNT.COLOR_CODE_RID,
		CC.COLOR_CODE_ID,
		CC.COLOR_CODE_NAME
	FROM #COLORNODES CN
	JOIN COLOR_NODE CNT WITH (NOLOCK) ON CN.HN_RID = CNT.HN_RID
	JOIN COLOR_CODE CC WITH (NOLOCK) ON CNT.COLOR_CODE_RID = CC.COLOR_CODE_RID

	/*============================*/
	/* GET ALL SIZE CODES         */
	/*============================*/
	/* Get the Size Codes for all Size Nodes under the Color Nodes */
	CREATE TABLE #SIZECODES (
		HN_RID INT,
		SIZE_CODE_RID INT,
		SIZE_SEQUENCE INT
		)

	IF @SIZE_GROUP_RID = - 1
	BEGIN
		INSERT INTO #SIZECODES
		SELECT HNJ.HN_RID,
			SN.SIZE_CODE_RID,
			SN.SIZE_CODE_RID
		FROM HIER_NODE_JOIN HNJ WITH (NOLOCK)
		JOIN #COLORNODES CN ON HNJ.PARENT_HN_RID = CN.HN_RID
		JOIN HIERARCHY_NODE HN WITH (NOLOCK) ON HN.HN_RID = HNJ.HN_RID
		JOIN PRODUCT_HIERARCHY PH WITH (NOLOCK) ON PH.PH_RID = HN.HOME_PH_RID
		JOIN HIER_NODE_JOIN HNJP WITH (NOLOCK) ON HN.HN_RID = HNJP.HN_RID
			AND HNJP.PH_RID = HN.HOME_PH_RID
		JOIN SIZE_NODE SN WITH (NOLOCK) ON HNJ.HN_RID = SN.HN_RID
	END
	ELSE
	BEGIN
		INSERT INTO #SIZECODES
		SELECT HNJ.HN_RID,
			SN.SIZE_CODE_RID,
			SGJ.SEQ
		FROM HIER_NODE_JOIN HNJ WITH (NOLOCK)
		JOIN #COLORNODES CN ON HNJ.PARENT_HN_RID = CN.HN_RID
		JOIN HIERARCHY_NODE HN WITH (NOLOCK) ON HN.HN_RID = HNJ.HN_RID
		JOIN PRODUCT_HIERARCHY PH WITH (NOLOCK) ON PH.PH_RID = HN.HOME_PH_RID
		JOIN HIER_NODE_JOIN HNJP WITH (NOLOCK) ON HN.HN_RID = HNJP.HN_RID
			AND HNJP.PH_RID = HN.HOME_PH_RID
		JOIN SIZE_NODE SN WITH (NOLOCK) ON HNJ.HN_RID = SN.HN_RID
		JOIN SIZE_GROUP_JOIN SGJ WITH (NOLOCK) ON SIZE_GROUP_RID = @SIZE_GROUP_RID
			AND SGJ.SIZE_CODE_RID = SN.SIZE_CODE_RID
	END

	/*============================*/
	/* GET COLOR/SIZE CODE PAIRS  */
	/*============================*/
	/* Find all valid Color/Size Code combinations for detail Size values */
	CREATE TABLE #COLORSIZECODES (
		COLOR_CODE_RID INT,
		COLOR_CODE_ID VARCHAR(50),
		COLOR_CODE_NAME VARCHAR(250),
		SIZE_CODE_RID INT,
		SIZE_SEQUENCE INT,
		SIZE_CODE_PRIMARY VARCHAR(100),
		SIZE_CODE_SECONDARY VARCHAR(100),
		SIZES_RID INT,
		DIMENSIONS_RID INT
		)

	INSERT #COLORSIZECODES
	SELECT DISTINCT CN.COLOR_CODE_RID,
		CC.COLOR_CODE_ID,
		CC.COLOR_CODE_NAME,
		SC.SIZE_CODE_RID,
		SC.SIZE_SEQUENCE,
		SCT.SIZE_CODE_PRIMARY,
		COALESCE(SCT.SIZE_CODE_SECONDARY, 'None') SIZE_CODE_SECONDARY,
		ST.SIZES_RID,
		COALESCE(DT.DIMENSIONS_RID, - 1) DIMENSIONS_RID
	FROM HIER_NODE_JOIN HNJ WITH (NOLOCK)
	JOIN #SIZECODES SC ON HNJ.HN_RID = SC.HN_RID
	JOIN HIERARCHY_NODE HN WITH (NOLOCK) ON HN.HN_RID = HNJ.PARENT_HN_RID
	JOIN PRODUCT_HIERARCHY PH WITH (NOLOCK) ON PH.PH_RID = HN.HOME_PH_RID
	JOIN #COLORNODES CN WITH (NOLOCK) ON HNJ.PARENT_HN_RID = CN.HN_RID
	JOIN COLOR_CODE CC WITH (NOLOCK) ON CN.COLOR_CODE_RID = CC.COLOR_CODE_RID
	JOIN SIZE_CODE SCT WITH (NOLOCK) ON SC.SIZE_CODE_RID = SCT.SIZE_CODE_RID
	JOIN SIZES ST WITH (NOLOCK) ON SCT.SIZE_CODE_PRIMARY = ST.SIZE_CODE_PRIMARY
	LEFT OUTER JOIN DIMENSIONS DT WITH (NOLOCK) ON SCT.SIZE_CODE_SECONDARY = DT.SIZE_CODE_SECONDARY
	WHERE PH.PH_RID = @HOME_PH_RID

	/* Create internal Size Code table for reading */
	SELECT CSC.*,
		ROW_TYPE_ID = 5
	INTO #READCOLORSIZECODES
	FROM #COLORSIZECODES CSC

	/* Add rows for detail Size/Dimension values */
	SELECT DISTINCT COLOR_CODE_RID,
		COLOR_CODE_ID,
		COLOR_CODE_NAME,
		SIZE_CODE_SECONDARY,
		DIMENSIONS_RID
	INTO #TEMP1
	FROM #READCOLORSIZECODES

	INSERT #READCOLORSIZECODES
	SELECT COLOR_CODE_RID,
		COLOR_CODE_ID,
		COLOR_CODE_NAME,
		SIZE_CODE_RID = - 1,
		DIMENSIONS_RID,
		SIZE_CODE_PRIMARY = NULL,
		SIZE_CODE_SECONDARY,
		SIZES_RID = - 1,
		DIMENSIONS_RID,
		ROW_TYPE_ID = 7
	FROM #TEMP1

	DROP TABLE #TEMP1

	/* Add rows for detail Color values */
	SELECT DISTINCT COLOR_CODE_RID,
		COLOR_CODE_ID,
		COLOR_CODE_NAME
	INTO #TEMP2
	FROM #COLORCODES

	INSERT #READCOLORSIZECODES
	SELECT COLOR_CODE_RID,
		COLOR_CODE_ID,
		COLOR_CODE_NAME,
		SIZE_CODE_RID = - 1,
		SIZE_SEQUENCE = - 1,
		SIZE_CODE_PRIMARY = NULL,
		SIZE_CODE_SECONDARY = NULL,
		SIZES_RID = - 1,
		DIMENSIONS_RID = - 1,
		ROW_TYPE_ID = 3
	FROM #TEMP2

	DROP TABLE #TEMP2

	/* Add All-color rows for detail Size values */
	SELECT COLOR_CODE_RID = - 1,
		COLOR_CODE_ID = NULL,
		COLOR_CODE_NAME = NULL,
		SIZE_CODE_RID,
		SIZE_CODE_PRIMARY,
		SIZE_CODE_SECONDARY,
		SIZES_RID,
		DIMENSIONS_RID,
		ROW_TYPE_ID = 4
	INTO #TEMP3
	FROM #READCOLORSIZECODES
	WHERE ROW_TYPE_ID = 5

	INSERT #READCOLORSIZECODES
	SELECT DISTINCT COLOR_CODE_RID,
		COLOR_CODE_ID,
		COLOR_CODE_NAME,
		SIZE_CODE_RID,
		SIZE_CODE_RID,
		SIZE_CODE_PRIMARY,
		SIZE_CODE_SECONDARY,
		SIZES_RID,
		DIMENSIONS_RID,
		ROW_TYPE_ID
	FROM #TEMP3

	DROP TABLE #TEMP3

	/* Add All-color rows for detail Size/Dimension values */
	SELECT COLOR_CODE_RID = - 1,
		COLOR_CODE_ID = NULL,
		COLOR_CODE_NAME = NULL,
		SIZE_CODE_RID,
		SIZE_CODE_PRIMARY,
		SIZE_CODE_SECONDARY,
		SIZES_RID,
		DIMENSIONS_RID,
		ROW_TYPE_ID = 6
	INTO #TEMP4
	FROM #READCOLORSIZECODES
	WHERE ROW_TYPE_ID = 7

	INSERT #READCOLORSIZECODES
	SELECT DISTINCT COLOR_CODE_RID,
		COLOR_CODE_ID,
		COLOR_CODE_NAME,
		SIZE_CODE_RID,
		SIZE_CODE_RID,
		SIZE_CODE_PRIMARY,
		SIZE_CODE_SECONDARY,
		SIZES_RID,
		DIMENSIONS_RID,
		ROW_TYPE_ID
	FROM #TEMP4

	DROP TABLE #TEMP4

	/* Add All-color rows for detail Color values */
	SELECT COLOR_CODE_RID = - 1,
		COLOR_CODE_ID = NULL,
		COLOR_CODE_NAME = NULL,
		SIZE_CODE_RID,
		SIZE_CODE_PRIMARY,
		SIZE_CODE_SECONDARY,
		SIZES_RID,
		DIMENSIONS_RID,
		ROW_TYPE_ID = 2
	INTO #TEMP5
	FROM #READCOLORSIZECODES
	WHERE ROW_TYPE_ID = 3

	INSERT #READCOLORSIZECODES
	SELECT DISTINCT COLOR_CODE_RID,
		COLOR_CODE_ID,
		COLOR_CODE_NAME,
		SIZE_CODE_RID,
		SIZE_CODE_RID,
		SIZE_CODE_PRIMARY,
		SIZE_CODE_SECONDARY,
		SIZES_RID,
		DIMENSIONS_RID,
		ROW_TYPE_ID
	FROM #TEMP5

	DROP TABLE #TEMP5

	/* Add the All Color node if it doesn't exist */
	IF NOT EXISTS (
			SELECT *
			FROM #READCOLORSIZECODES
			WHERE COLOR_CODE_RID = - 1
				AND SIZES_RID = - 1
				AND DIMENSIONS_RID = - 1
				AND SIZE_CODE_RID = - 1
			)
	BEGIN
		INSERT INTO #READCOLORSIZECODES
		SELECT - 1,
			NULL,
			NULL,
			- 1,
			- 1,
			NULL,
			NULL,
			- 1,
			- 1,
			ROW_TYPE_ID = 2
	END

	/*============================*/
	/* GET ANCESTOR NODES         */
	/*============================*/
	/* Get all Ancestors for the given Node */
	CREATE TABLE #TEMP6 (
		LOOPCOUNT INT NOT NULL,
		HN_RID INT NOT NULL,
		HOME_PH_RID INT NOT NULL,
		HOME_LEVEL INT NOT NULL
		)

	SELECT @HOME_PH_RID = HOME_PH_RID
	FROM HIERARCHY_NODE WITH (NOLOCK)
	WHERE HN_RID = @HN_RID

	INSERT #TEMP6 (
		LOOPCOUNT,
		HN_RID,
		HOME_PH_RID,
		HOME_LEVEL
		)
	SELECT 0,
		@HN_RID,
		HN.HOME_PH_RID,
		HN.HOME_LEVEL
	FROM HIERARCHY_NODE HN WITH (NOLOCK)
	WHERE HN.HN_RID = @HN_RID

	SET @SAVECOUNT = @@ROWCOUNT
	SET @LOOPCOUNT = 0

	WHILE @SAVECOUNT > 0
	BEGIN
		INSERT #TEMP6 (
			LOOPCOUNT,
			HN_RID,
			HOME_PH_RID,
			HOME_LEVEL
			)
		SELECT @LOOPCOUNT + 1,
			HNJ.PARENT_HN_RID,
			hn.HOME_PH_RID,
			hn.HOME_LEVEL
		FROM HIER_NODE_JOIN HNJ WITH (NOLOCK)
		JOIN #TEMP6 T4 ON HNJ.HN_RID = T4.HN_RID
		JOIN HIERARCHY_NODE hn WITH (NOLOCK) ON hn.HN_RID = HNJ.PARENT_HN_RID
		JOIN PRODUCT_HIERARCHY PH WITH (NOLOCK) ON PH.PH_RID = hn.HOME_PH_RID
		WHERE T4.LOOPCOUNT = @LOOPCOUNT
			AND PH.PH_RID = @HOME_PH_RID

		SET @SAVECOUNT = @@ROWCOUNT
		SET @LOOPCOUNT = @LOOPCOUNT + 1
	END

	SELECT DISTINCT HN_RID,
		HOME_PH_RID,
		HOME_LEVEL
	INTO #ANCESTORS
	FROM #TEMP6
	ORDER BY HOME_LEVEL DESC

	DROP TABLE #TEMP6

	/*============================*/
	/* GET GROUP LEVELS           */
	/*============================*/
	/* Get all valid Group Levels */
	CREATE TABLE #GROUPLEVELS (
		SGL_RID INT NOT NULL,
		SGL_SEQUENCE INT NOT NULL,
		SGL_ID VARCHAR(50) NOT NULL
		)

	INSERT INTO #GROUPLEVELS
	SELECT SGL_RID,
		SGL_OVERRIDE_SEQUENCE,
		SGL_OVERRIDE_ID
	FROM STORE_GROUP_JOIN SGL WITH (NOLOCK)
	WHERE SG_RID = @SG_RID
	  AND SGL.SG_VERSION = @SG_VERSION  -- TT#1935-MD - JSmith - SVC - Node Properties- Chain Set Percent - Select Str Attribute, Date Range and type in % by week.  Select the Apply button and receive a DB Error.

	/* Add row for the Default Group Level */
	INSERT INTO #GROUPLEVELS (
		SGL_RID,
		SGL_SEQUENCE,
		SGL_ID
		)
	VALUES (
		- 1,
		0,
		'Default'
		)

	/*============================*/
	/* READ GRPLVL VALUES         */
	/*============================*/
	/* Create the output table for OOS values */
	CREATE TABLE #GRPLVLVALUES (
		BAND_DSC VARCHAR(50),
		SGL_RID INT NOT NULL,
		SGL_SEQUENCE INT NOT NULL,
		ROW_TYPE_ID INT NOT NULL,
		OOS_QUANTITY INT NULL,
		IS_INHERITED INT NULL,
		IS_INHERITED_FROM INT NULL
		)

	/* Create Cursor to walk through Ancestors */
	SET @FIRST_LOOP = 1
	SET @CONTINUE_LOOP = 1

	DECLARE C2 CURSOR
	FOR
	SELECT HN_RID,
		HOME_PH_RID,
		HOME_LEVEL
	FROM #ANCESTORS

	OPEN C2

	FETCH NEXT
	FROM C2
	INTO @ANC_HN_RID,
		@ANC_HOME_PH_RID,
		@ANC_HOME_LEVEL

	WHILE @@FETCH_STATUS = 0
		AND @CONTINUE_LOOP = 1
	BEGIN
		SET @CONTINUE_LOOP = 0

		CREATE TABLE #GLTEMP1 (
			SG_RID INT NOT NULL,
			SG_RID_IS_INHERITED INT NOT NULL,
			SG_RID_IS_INHERITED_FROM INT NOT NULL,
			SIZE_GROUP_RID INT NOT NULL,
			SIZE_GROUP_RID_IS_INHERITED INT NOT NULL,
			SIZE_GROUP_RID_IS_INHERITED_FROM INT NOT NULL
			)

		INSERT INTO #GLTEMP1
		EXEC SP_MID_ND_SZ_OOS_HEADER_GET @ANC_HN_RID

		SELECT TOP 1 @ANC_SG_RID = SG_RID
		FROM #GLTEMP1

		DROP TABLE #GLTEMP1

		IF (
				@ANC_SG_RID IS NULL
				OR @ANC_SG_RID = @SG_RID
				)
		BEGIN
			SET @CONTINUE_LOOP = 1

			SELECT GL.SGL_ID,
				NSOGL.SGL_RID,
				GL.SGL_SEQUENCE,
				NSOGL.ROW_TYPE_ID,
				NSOGL.OOS_QUANTITY,
				GLV.IS_INHERITED,
				GLV.IS_INHERITED_FROM
			INTO #GLTEMP2
			FROM NODE_SIZE_OUTOFSTOCK_GRPLVL NSOGL WITH (NOLOCK)
			JOIN #GROUPLEVELS GL ON NSOGL.SGL_RID = GL.SGL_RID
			LEFT OUTER JOIN #GRPLVLVALUES GLV ON NSOGL.SGL_RID = GLV.SGL_RID
				AND NSOGL.ROW_TYPE_ID = GLV.ROW_TYPE_ID
			WHERE NSOGL.HN_RID = @ANC_HN_RID
				AND GLV.IS_INHERITED_FROM IS NULL

			IF @FIRST_LOOP = 1
			BEGIN
				UPDATE #GLTEMP2
				SET IS_INHERITED = 0,
					IS_INHERITED_FROM = - 1
			END
			ELSE
			BEGIN
				UPDATE #GLTEMP2
				SET IS_INHERITED = 1,
					IS_INHERITED_FROM = @ANC_HN_RID
			END

			INSERT INTO #GRPLVLVALUES
			SELECT *
			FROM #GLTEMP2

			DROP TABLE #GLTEMP2

			FETCH NEXT
			FROM C2
			INTO @ANC_HN_RID,
				@ANC_HOME_PH_RID,
				@ANC_HOME_LEVEL

			SET @FIRST_LOOP = 0
		END
	END

	CLOSE C2

	DEALLOCATE C2

	IF @FOR_NODE_PROPERTIES = 1
	BEGIN
		/* Add missing Default All Color row */
		IF NOT EXISTS (
				SELECT *
				FROM #GRPLVLVALUES
				WHERE SGL_RID = - 1
					AND ROW_TYPE_ID = 8
				)
		BEGIN
			INSERT INTO #GRPLVLVALUES
			SELECT 'Default',
				- 1,
				0,
				8,
				NULL,
				0,
				- 1
		END

		INSERT INTO #GRPLVLVALUES
		SELECT GL.SGL_ID,
			GL.SGL_RID,
			GL.SGL_SEQUENCE,
			1,
			NULL,
			0,
			- 1
		FROM #GROUPLEVELS GL
		WHERE GL.SGL_RID <> - 1
			AND GL.SGL_RID NOT IN (
				SELECT DISTINCT SGL_RID
				FROM #GRPLVLVALUES
				WHERE ROW_TYPE_ID = 1
				)
	END

	/*============================*/
	/* READ QUANTITY VALUES       */
	/*============================*/
	/* Create the output table for OOS values */
	CREATE TABLE #QUANTITYVALUES (
		BAND_DSC VARCHAR(50) NULL,
		SGL_RID INT NOT NULL,
		COLOR_CODE_RID INT NOT NULL,
		SIZES_RID INT NOT NULL,
		DIMENSIONS_RID INT NOT NULL,
		ROW_TYPE_ID INT NOT NULL,
		SIZE_CODE_RID INT NOT NULL,
		SIZE_SEQUENCE INT NOT NULL,
		OOS_QUANTITY INT NULL,
		IS_INHERITED INT NULL,
		IS_INHERITED_FROM INT NULL
		)

	/* Create Cursor to walk through Ancestors */
	SET @FIRST_LOOP = 1
	SET @CONTINUE_LOOP = 1

	DECLARE C3 CURSOR
	FOR
	SELECT HN_RID,
		HOME_PH_RID,
		HOME_LEVEL
	FROM #ANCESTORS

	OPEN C3

	FETCH NEXT
	FROM C3
	INTO @ANC_HN_RID,
		@ANC_HOME_PH_RID,
		@ANC_HOME_LEVEL

	WHILE @@FETCH_STATUS = 0
		AND @CONTINUE_LOOP = 1
	BEGIN
		SET @CONTINUE_LOOP = 0

		CREATE TABLE #QTEMP1 (
			SG_RID INT NOT NULL,
			SG_RID_IS_INHERITED INT NOT NULL,
			SG_RID_IS_INHERITED_FROM INT NOT NULL,
			SIZE_GROUP_RID INT NOT NULL,
			SIZE_GROUP_RID_IS_INHERITED INT NOT NULL,
			SIZE_GROUP_RID_IS_INHERITED_FROM INT NOT NULL
			)

		INSERT INTO #QTEMP1
		EXEC SP_MID_ND_SZ_OOS_HEADER_GET @ANC_HN_RID

		SELECT TOP 1 @ANC_SG_RID = SG_RID
		FROM #QTEMP1

		DROP TABLE #QTEMP1

		IF (
				@ANC_SG_RID IS NULL
				OR @ANC_SG_RID = @SG_RID
				)
		BEGIN
			SET @CONTINUE_LOOP = 1

			CREATE TABLE #QTEMP2 (
				BAND_DSC VARCHAR(50) NULL,
				SGL_RID INT NOT NULL,
				COLOR_CODE_RID INT NOT NULL,
				SIZES_RID INT NOT NULL,
				DIMENSIONS_RID INT NOT NULL,
				ROW_TYPE_ID INT NOT NULL,
				SIZE_CODE_RID INT NOT NULL,
				SIZE_SEQUENCE INT NOT NULL,
				OOS_QUANTITY INT NULL,
				IS_INHERITED INT NULL,
				IS_INHERITED_FROM INT NULL
				)

			INSERT INTO #QTEMP2
			SELECT CASE NSOQ.ROW_TYPE_ID
					WHEN 2
						THEN 'All Colors'
					ELSE NULL
					END AS BAND_DSC,
				NSOQ.SGL_RID,
				NSOQ.COLOR_CODE_RID,
				NSOQ.SIZES_RID,
				NSOQ.DIMENSIONS_RID,
				NSOQ.ROW_TYPE_ID,
				NSOQ.SIZE_CODE_RID,
				CSC.SIZE_SEQUENCE,
				NSOQ.OOS_QUANTITY,
				QV.IS_INHERITED,
				QV.IS_INHERITED_FROM
			FROM NODE_SIZE_OUTOFSTOCK_QUANTITY NSOQ WITH (NOLOCK)
			JOIN #GROUPLEVELS GL ON NSOQ.SGL_RID = GL.SGL_RID
			JOIN #READCOLORSIZECODES CSC ON NSOQ.COLOR_CODE_RID = CSC.COLOR_CODE_RID
				AND NSOQ.SIZE_CODE_RID = CSC.SIZE_CODE_RID
				AND NSOQ.SIZES_RID = CSC.SIZES_RID
				AND NSOQ.DIMENSIONS_RID = CSC.DIMENSIONS_RID
				AND NSOQ.ROW_TYPE_ID = CSC.ROW_TYPE_ID
			LEFT OUTER JOIN #QUANTITYVALUES QV ON NSOQ.SGL_RID = QV.SGL_RID
				AND NSOQ.COLOR_CODE_RID = QV.COLOR_CODE_RID
				AND NSOQ.SIZES_RID = QV.SIZES_RID
				AND NSOQ.DIMENSIONS_RID = QV.DIMENSIONS_RID
				AND NSOQ.ROW_TYPE_ID = QV.ROW_TYPE_ID
				AND NSOQ.SIZE_CODE_RID = QV.SIZE_CODE_RID
			WHERE NSOQ.HN_RID = @ANC_HN_RID
				AND QV.IS_INHERITED_FROM IS NULL

			IF @FIRST_LOOP = 1
			BEGIN
				UPDATE #QTEMP2
				SET IS_INHERITED = 0,
					IS_INHERITED_FROM = - 1
			END
			ELSE
			BEGIN
				UPDATE #QTEMP2
				SET IS_INHERITED = 1,
					IS_INHERITED_FROM = @ANC_HN_RID
			END

			INSERT INTO #QUANTITYVALUES
			SELECT *
			FROM #QTEMP2

			DROP TABLE #QTEMP2

			FETCH NEXT
			FROM C3
			INTO @ANC_HN_RID,
				@ANC_HOME_PH_RID,
				@ANC_HOME_LEVEL

			SET @FIRST_LOOP = 0
		END
	END

	CLOSE C3

	DEALLOCATE C3

	IF @FOR_NODE_PROPERTIES = 1
	BEGIN
		/* Add missing Color Dimension rows */
		CREATE TABLE #QTEMP3 (
			BAND_DSC VARCHAR(50) NULL,
			SGL_RID INT NOT NULL,
			COLOR_CODE_RID INT NOT NULL,
			SIZES_RID INT NOT NULL,
			DIMENSIONS_RID INT NOT NULL,
			ROW_TYPE_ID INT NOT NULL,
			SIZE_CODE_RID INT NOT NULL,
			SIZE_SEQUENCE INT NOT NULL,
			OOS_QUANTITY INT NULL,
			IS_INHERITED INT NULL,
			IS_INHERITED_FROM INT NULL
			)

		INSERT INTO #QTEMP3
		SELECT DISTINCT BAND_DSC = NULL,
			SGL_RID,
			COLOR_CODE_RID,
			SIZES_RID = - 1,
			DIMENSIONS_RID,
			ROW_TYPE_ID = 6,
			SIZE_CODE_RID = - 1,
			SIZE_SEQUENCE = DIMENSIONS_RID,
			OOS_QUANTITY = NULL,
			IS_INHERITED = 0,
			IS_INHERITED_FROM = - 1
		FROM #QUANTITYVALUES QV
		WHERE QV.ROW_TYPE_ID = 4

		INSERT INTO #QTEMP3
		SELECT DISTINCT BAND_DSC = NULL,
			SGL_RID,
			COLOR_CODE_RID,
			SIZES_RID = - 1,
			DIMENSIONS_RID,
			ROW_TYPE_ID = 7,
			SIZE_CODE_RID = - 1,
			SIZE_SEQUENCE = DIMENSIONS_RID,
			OOS_QUANTITY = 0,
			IS_INHERITED = 0,
			IS_INHERITED_FROM = - 1
		FROM #QUANTITYVALUES QV
		WHERE QV.ROW_TYPE_ID = 5

		INSERT INTO #QUANTITYVALUES
		SELECT QT3.BAND_DSC,
			QT3.SGL_RID,
			QT3.COLOR_CODE_RID,
			QT3.SIZES_RID,
			QT3.DIMENSIONS_RID,
			QT3.ROW_TYPE_ID,
			QT3.SIZE_CODE_RID,
			QT3.SIZE_SEQUENCE,
			QV.OOS_QUANTITY,
			QT3.IS_INHERITED,
			QT3.IS_INHERITED_FROM
		FROM #QTEMP3 QT3
		LEFT OUTER JOIN #QUANTITYVALUES QV ON QT3.SGL_RID = QV.SGL_RID
			AND QT3.COLOR_CODE_RID = QV.COLOR_CODE_RID
			AND QT3.SIZES_RID = QV.SIZES_RID
			AND QT3.DIMENSIONS_RID = QV.DIMENSIONS_RID
			AND QT3.ROW_TYPE_ID = QV.ROW_TYPE_ID
			AND QT3.SIZE_CODE_RID = QV.SIZE_CODE_RID
		WHERE QV.OOS_QUANTITY IS NULL

		DROP TABLE #QTEMP3

		/* Add missing Color rows */
		CREATE TABLE #QTEMP4 (
			BAND_DSC VARCHAR(50) NULL,
			SGL_RID INT NOT NULL,
			COLOR_CODE_RID INT NOT NULL,
			SIZES_RID INT NOT NULL,
			DIMENSIONS_RID INT NOT NULL,
			ROW_TYPE_ID INT NOT NULL,
			SIZE_CODE_RID INT NOT NULL,
			SIZE_SEQUENCE INT NOT NULL,
			OOS_QUANTITY INT NULL,
			IS_INHERITED INT NULL,
			IS_INHERITED_FROM INT NULL
			)

		INSERT INTO #QTEMP4
		SELECT DISTINCT BAND_DSC = NULL,
			SGL_RID,
			COLOR_CODE_RID,
			SIZES_RID = - 1,
			DIMENSIONS_RID = - 1,
			ROW_TYPE_ID = 3,
			SIZE_CODE_RID = - 1,
			SIZE_SEQUENCE = - 1,
			OOS_QUANTITY = NULL,
			IS_INHERITED = 0,
			IS_INHERITED_FROM = - 1
		FROM #QUANTITYVALUES QV
		WHERE QV.ROW_TYPE_ID = 7

		INSERT INTO #QUANTITYVALUES
		SELECT QT5.BAND_DSC,
			QT5.SGL_RID,
			QT5.COLOR_CODE_RID,
			QT5.SIZES_RID,
			QT5.DIMENSIONS_RID,
			QT5.ROW_TYPE_ID,
			QT5.SIZE_CODE_RID,
			QT5.SIZE_SEQUENCE,
			QV.OOS_QUANTITY,
			QT5.IS_INHERITED,
			QT5.IS_INHERITED_FROM
		FROM #QTEMP4 QT5
		LEFT OUTER JOIN #QUANTITYVALUES QV ON QT5.SGL_RID = QV.SGL_RID
			AND QT5.COLOR_CODE_RID = QV.COLOR_CODE_RID
			AND QT5.SIZES_RID = QV.SIZES_RID
			AND QT5.DIMENSIONS_RID = QV.DIMENSIONS_RID
			AND QT5.ROW_TYPE_ID = QV.ROW_TYPE_ID
			AND QT5.SIZE_CODE_RID = QV.SIZE_CODE_RID
		WHERE QV.OOS_QUANTITY IS NULL

		DROP TABLE #QTEMP4

		/* Add missing All Color rows */
		/* Add missing All Color rows for each Store Group Level */
		INSERT INTO #QUANTITYVALUES
		SELECT SGL_ID = 'All Colors',
			SGL.SGL_RID,
			COLOR_CODE_RID = - 1,
			SIZES_RID = - 1,
			DIMENSIONS_RID = - 1,
			ROW_TYPE_ID = 2,
			SIZE_CODE_RID = - 1,
			SIZE_SEQUENCE = - 1,
			OOS_QUANTITY = NULL,
			IS_INHERITED = 0,
			IS_INHERITED_FROM = - 1
		FROM STORE_GROUP_JOIN SGL WITH (NOLOCK)
		LEFT OUTER JOIN #QUANTITYVALUES QV ON QV.SGL_RID = SGL.SGL_RID
			AND QV.COLOR_CODE_RID = - 1
			AND QV.SIZES_RID = - 1
			AND QV.DIMENSIONS_RID = - 1
			AND QV.ROW_TYPE_ID = 2
			AND QV.SIZE_CODE_RID = - 1
		WHERE SGL.SG_RID = @SG_RID
			AND QV.IS_INHERITED_FROM IS NULL
			AND SGL.SG_VERSION = @SG_VERSION  -- TT#1935-MD - JSmith - SVC - Node Properties- Chain Set Percent - Select Str Attribute, Date Range and type in % by week.  Select the Apply button and receive a DB Error.

		/* Add missing Default All Color row */
		IF NOT EXISTS (
				SELECT *
				FROM #QUANTITYVALUES
				WHERE SGL_RID = - 1
					AND COLOR_CODE_RID = - 1
					AND SIZES_RID = - 1
					AND DIMENSIONS_RID = - 1
					AND ROW_TYPE_ID = 2
					AND SIZE_CODE_RID = - 1
				)
		BEGIN
			INSERT INTO #QUANTITYVALUES
			SELECT 'All Colors',
				- 1,
				- 1,
				- 1,
				- 1,
				2,
				- 1,
				- 1,
				NULL,
				0,
				- 1
		END
	END

	/* Select to return values */
	SELECT *
	FROM #GRPLVLVALUES
	ORDER BY SGL_SEQUENCE,
		ROW_TYPE_ID

	SELECT *
	FROM #QUANTITYVALUES
	ORDER BY SIZE_SEQUENCE,
		ROW_TYPE_ID

	IF @FOR_NODE_PROPERTIES = 1
	BEGIN
		SELECT *
		FROM #COLORCODES

		SELECT *
		FROM #COLORSIZECODES
		ORDER BY SIZE_SEQUENCE
	END

	IF (
			SELECT OBJECT_ID('tempdb.dbo.#COLORNODES')
			) > 0
		DROP TABLE #COLORNODES

	IF (
			SELECT OBJECT_ID('tempdb.dbo.#SIZENODES')
			) > 0
		DROP TABLE #SIZENODES

	IF (
			SELECT OBJECT_ID('tempdb.dbo.#SIZECODES')
			) > 0
		DROP TABLE #SIZECODES

	IF (
			SELECT OBJECT_ID('tempdb.dbo.#COLORCODES')
			) > 0
		DROP TABLE #COLORCODES

	IF (
			SELECT OBJECT_ID('tempdb.dbo.#COLORSIZECODES')
			) > 0
		DROP TABLE #COLORSIZECODES

	IF (
			SELECT OBJECT_ID('tempdb.dbo.#READCOLORSIZECODES')
			) > 0
		DROP TABLE #READCOLORSIZECODES

	IF (
			SELECT OBJECT_ID('tempdb.dbo.#ANCESTORS')
			) > 0
		DROP TABLE #ANCESTORS

	IF (
			SELECT OBJECT_ID('tempdb.dbo.#GRPLVLVALUES')
			) > 0
		DROP TABLE #GRPLVLVALUES

	IF (
			SELECT OBJECT_ID('tempdb.dbo.#QUANTITYVALUES')
			) > 0
		DROP TABLE #QUANTITYVALUES

	IF (
			SELECT OBJECT_ID('tempdb.dbo.#GROUPLEVELS')
			) > 0
		DROP TABLE #GROUPLEVELS

	IF (
			SELECT OBJECT_ID('tempdb.dbo.#TEMP0')
			) > 0
		DROP TABLE #TEMP0

	IF (
			SELECT OBJECT_ID('tempdb.dbo.#TEMP1')
			) > 0
		DROP TABLE #TEMP1

	IF (
			SELECT OBJECT_ID('tempdb.dbo.#TEMP2')
			) > 0
		DROP TABLE #TEMP2

	IF (
			SELECT OBJECT_ID('tempdb.dbo.#TEMP3')
			) > 0
		DROP TABLE #TEMP3

	IF (
			SELECT OBJECT_ID('tempdb.dbo.#TEMP4')
			) > 0
		DROP TABLE #TEMP4

	IF (
			SELECT OBJECT_ID('tempdb.dbo.#TEMP5')
			) > 0
		DROP TABLE #TEMP5

	IF (
			SELECT OBJECT_ID('tempdb.dbo.#TEMP6')
			) > 0
		DROP TABLE #TEMP6

	IF (
			SELECT OBJECT_ID('tempdb.dbo.#GLTEMP1')
			) > 0
		DROP TABLE #GLTEMP1

	IF (
			SELECT OBJECT_ID('tempdb.dbo.#GLTEMP2')
			) > 0
		DROP TABLE #GLTEMP2

	IF (
			SELECT OBJECT_ID('tempdb.dbo.#QTEMP1')
			) > 0
		DROP TABLE #QTEMP1

	IF (
			SELECT OBJECT_ID('tempdb.dbo.#QTEMP2')
			) > 0
		DROP TABLE #QTEMP2

	IF (
			SELECT OBJECT_ID('tempdb.dbo.#QTEMP3')
			) > 0
		DROP TABLE #QTEMP3

	IF (
			SELECT OBJECT_ID('tempdb.dbo.#QTEMP4')
			) > 0
		DROP TABLE #QTEMP4
END
GO


