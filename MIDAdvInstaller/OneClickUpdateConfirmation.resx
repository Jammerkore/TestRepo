<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="stop_picture.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAACEAAAAhCAYAAABX5MJvAAAABGdBTUEAALGPC/xhBQAAAAd0SU1FB9kH
        ExQIK3Yju8IAAAV/SURBVFhHvZhbTFRHHMbPiy9GweuLsY082DQ+WNtEU69JvUaJidEa0xhTo1HbNDVq
        DLXWWzWgkqgRvGJUQEQF5V6gVRtAAlLAywoL6+6C7LKIGhBwcXdZ4Os3xx1cDmeVS9Mv+bK758z85zf/
        +c+cA8rH9IuiBO9VlMx9ilI2ELNP6gFFCfKFGbwEAAOWVl++jLe1tQNyxdmzYN/CIYFIABMBvK9eoauu
        Dl3PnvXPNpvap/LMmcGDSICqCxfQ0dCArspKdD94MCB3GY1q3yfR0QMHkQBGzsLD2XeWl6O7sHBQFn1F
        DMOJE/0HkQAVJ0/CbTaj8949dOXm6rotJwc1tI326NyX9hLGbbHgUWTkx0EkgOHYMbiYSu/t2+hMSdH1
        m1u3kMVPI5ep9P59FKWm6raTFrFEzIcREYFBJMCjo0fx9vFjdGRkwJuQ0Mf1V66gIDERKbGxuHnjBoQc
        DgcuXryIv3jdxPt6/YQ9mZlq7PJDh/qCSICH4eFoLyuDJykJHTExuo47fx51XON/SkqQePWqClFfX4+o
        qCg0NjYi4dIlNLONXl9hN2OLMUr37+8Nwh/Zpfv2wVlcDFdcHNwsIq0r6Wgu0+HDh9WBhR5wBwi1trbC
        wjUXSrl2Ddbjx3VjSLvi49WxinftEiBJEsLwkqlqZypdzIaeT3EtX3HfJzLlUiXMhlBLSwsMBoP6PYkx
        zEy3Xgx/tzNOA2uFY9/rgXjBC05uyfbdu/u4mQ7fu1cd5M6dO+qnUCGrXqi5uRnl3IpC8efOwcgZ6sXx
        t5NL42BN9YJovH4dbUyjc9u2PjZv3YpjnJ1QDrejVF5envrZ1NSEoqIi9fuhnTtROH8+Xs+di9oZM7Bt
        zhx8N28erLzWsnQp2taswZvNm9HGGrIza70gbKdP4zUJWzdtQisb+btkwwZEc9cIpTBjUnJpbDyir/qK
        NHT2bGQGBeH5mDH4euxYnGfctStWIHbECLzktR6vWoXqAwd6Q5gJ8HzhQjSy44sJE/AiJKTHSRMn4uf1
        69VB/AvzDJdPSOwWCbGMEOmE+J0D/bZ9u3pt7tSpyA8ORiOv9Tg0FBU7duhDiBlofZmz+GHdOjWggKio
        qFC35FYu05EjR7Bnzx6EhYXB5XJhKSFi2P7LSZPgdrtht9sxedSovnEDQTQQwsEGWp/zQYjzYOPGjcjK
        ylIHkOru7obJZILH48E306cjaNgw/H33rnov4uBBhDEL2pgNgSAchLCzgdaxI0fi+5UrkZ+fD6/XqwYP
        pDIeRLl8XggJuM+5lMXMhDamIxCEnRB1bKD1Ta7xt4sWqYEDqZiHj9wtUunp6VgybpxuzPpAEDZC1LKB
        1jlM50KmOZBEhpKTk32/3mvGlClI4QT0Yto/BFHDBlobR4/Gp9w1ehK1IYpTq7usiVnsoxdPOCBE3fLl
        sLCBnj+jxaGkVQKfjlar1ffrveZMm4YE1pJeLGEbzwktREbm4sVo4IxqZs7EUzbSegtnFcd3Ta0i+EzR
        Ko3vFrN0YkjX8AR9zrHSeYruV5RrKoR4nBKk8I8lS1QQK0Gq2djff7Iuvpo8GR0dHb6h3qmgoMD37Z3M
        fBsLYTGK9toYwlYJwKXnmHkce7gKIaQFsRDEyE7+/onZWMs0Op1O35C9lZOdjZDx4xHPYtT2FbZ8CEBK
        C2ImSCU7SxvoH1mkn/Bz/erVOMgXk0i+N4bzQFrMtl/wXhoz4N9H2twfACktiInBnzCIv+9zsFMsul+H
        D8d2ehd9hbN/rGkn/ZQAIla/AKS0INUEEQMMxqbBAEhpQaoI8pBBB+KqoQBIaUHMfH48XbasX7awgIcM
        ICVBxDli4mvbQJy2YMHQAaQEiPgznwF1/wUQyOyT/J8A/D9SlH8BWP3q4tUVyO4AAAAASUVORK5CYII=
</value>
  </data>
</root>