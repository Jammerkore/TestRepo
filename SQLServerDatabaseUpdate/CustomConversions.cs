using System;
using System.Collections;
using System.ComponentModel;
using System.Globalization;
using System.Data;
using System.Configuration;
//Begin Track #3999 - JScott - Blank rows being written to STORE_FORECAST_WEEK_LOCK table
using System.IO;
//End Track #3999 - JScott - Blank rows being written to STORE_FORECAST_WEEK_LOCK table
//Begin TT#188 - JScott - Rebrand application
using System.Reflection;
using System.Runtime.Serialization;
using System.Runtime.Serialization.Formatters.Binary;
//End TT#188 - JScott - Rebrand application
using System.ServiceProcess;
using System.ServiceProcess.Design;
using System.Threading;

//Begin TT#188 - JScott - Rebrand application
using MIDRetail.Business;
//End TT#188 - JScott - Rebrand application
using MIDRetail.Common;
using MIDRetail.DataCommon;
using MIDRetail.Data;

namespace MIDRetail.DatabaseUpdate
{
//    public interface ICustomConversion
//    {
////Begin Track #3999 - JScott - Blank rows being written to STORE_FORECAST_WEEK_LOCK table
////		void Execute(string aConnectionString);
//        void Execute(string aConnectionString, Queue aMessageQueue, Queue aProcessedQueue,
//            eDatabaseType aDatabaseType, int aNoDataTables, string aAllocationFileGroup, 
//            string aForecastFileGroup, string aHistoryFileGroup, int aNoHistoryFileGroup, 
//            string aDailyHistoryFileGroup, int aNoDailyHistoryFileGroup,
//            string aAuditFileGroup, string aWeekArchiveFileGroup, string aDayArchiveFileGroup); // TT#173 Provide database container for large data collections
////End Track #3999 - JScott - Blank rows being written to STORE_FORECAST_WEEK_LOCK table
//    }

////Begin Track #3999 - JScott - Blank rows being written to STORE_FORECAST_WEEK_LOCK table
//    /// <summary>
//    /// RegenerateStoredProcedures is a custom conversion routine used to regenerate the database's Store Procedures.
//    /// </summary>

//    public class RegenerateStoredProcedures : ICustomConversion
//    {
//        public void Execute(string aConnectionString, Queue aMessageQueue, Queue aProcessedQueue,
//            eDatabaseType aDatabaseType, int aNoDataTables, string aAllocationFileGroup, 
//            string aForecastFileGroup, string aHistoryFileGroup, int aNoHistoryFileGroup, 
//            string aDailyHistoryFileGroup, int aNoDailyHistoryFileGroup,
//            string aAuditFileGroup, string aWeekArchiveFileGroup, string aDayArchiveFileGroup) // TT#173 Provide database container for large data collections
//        {
//            string fileName;
//            DatabaseObjectGen dog;

//            try
//            {
//                fileName = Path.GetTempPath() + "\\database.sql";

//                dog = new DatabaseObjectGen(aDatabaseType);
//                dog.GenFile(fileName, false, true, aNoDataTables,  aAllocationFileGroup, 
//                    aForecastFileGroup, aHistoryFileGroup, aNoHistoryFileGroup, 
//                    aDailyHistoryFileGroup, aNoDailyHistoryFileGroup, aAuditFileGroup, aWeekArchiveFileGroup, aDayArchiveFileGroup);  // TT#173 Provide database container for large data collections

//                //Begin TT#808 - JScott - Create separate upgrade script for Stored Procedure
//                //UpdateRoutines.ProcessScripts(fileName, "TableFile", aMessageQueue, aProcessedQueue, false, 
//                UpdateRoutines.ProcessScripts(fileName, "TableFile", aMessageQueue, aProcessedQueue, false, false,
//                //End TT#808 - JScott - Create separate upgrade script for Stored Procedure
//                    aConnectionString, aDatabaseType,  false, aNoDataTables,  aAllocationFileGroup, 
//                    aForecastFileGroup, aHistoryFileGroup, aNoHistoryFileGroup, 
//                    aDailyHistoryFileGroup, aNoDailyHistoryFileGroup, aAuditFileGroup, aWeekArchiveFileGroup, aDayArchiveFileGroup);  // TT#173 Provide database container for large data collections
//            }
//            catch
//            {
//                throw;
//            }
//        }
//    }

////End Track #3999 - JScott - Blank rows being written to STORE_FORECAST_WEEK_LOCK table
//    /// <summary>
//    /// FolderConversion is a custom conversion routine used in converting to release 2.0.0 for changes made to the folder structure in the Filter
//    /// Explorer.  Should not be run in any upgrade after 2.0.0.
//    /// </summary>

//    public class FolderConversion : ICustomConversion
//    {
//        private DatabaseAccess _dba;
//        private Hashtable _userFavoriteList;
//        private Hashtable _typeList;

//        //Begin Track #5005 - JScott - Need ability to organize methods, workflows, tasks, filters etc into subfolders
//        private enum eFolderType
//        {
//            None = -1,
//            FilterFavorites = 1,
//            FilterGlobal = 2,
//            FilterUser = 3,
//        }

//        private enum eFolderChildType
//        {
//            None = -1,
//            Folder = 1,
//            Filter = 2,
//        }

//        //End Track #5005 - JScott - Need ability to organize methods, workflows, tasks, filters etc into subfolders
//        public FolderConversion()
//        {
//        }

////Begin Track #3999 - JScott - Blank rows being written to STORE_FORECAST_WEEK_LOCK table
////		public void Execute(string aConnectionString)
//        public void Execute(string aConnectionString, Queue aMessageQueue, Queue aProcessedQueue,
//            eDatabaseType aDatabaseType, int aNoDataTables, string aAllocationFileGroup, 
//            string aForecastFileGroup, string aHistoryFileGroup, int aNoHistoryFileGroup, 
//            string aDailyHistoryFileGroup, int aNoDailyHistoryFileGroup,
//            string aAuditFileGroup, string aWeekArchiveFileGroup, string aDayArchiveFileGroup) // TT#173 Provide database container for large data collections
////End Track #3999 - JScott - Blank rows being written to STORE_FORECAST_WEEK_LOCK table
//        {
//            //MIDConnectionString connectionString;
//            int folderRID;
//            int maxFolderRID = 0;
//            DataTable dtFolders;
//            DataTable dtFilters;
//            DataTable dtFavorites;
//            DataTable dtFolderJoin;
//            int userRID;
//            int childItemRID;
//            int parentFolderRID;
//            eFolderChildType childType;
//            Hashtable objectList;
//            Hashtable userList;
//            IDictionaryEnumerator typeEnum;
//            IDictionaryEnumerator objectEnum;
//            IDictionaryEnumerator userEnum;
//            DataRow objectRow;

//            try
//            {
//                // STEP 1: Instantiate variables

////				connectionString = new MIDConnectionString();
////				connectionString.WriteConnectionString(aConnectionString);
//                MIDConnectionString.ConnectionString = aConnectionString;

//                _dba = new DatabaseAccess();
//                _userFavoriteList = new Hashtable();
//                _typeList = new Hashtable();
//                _typeList[eFolderChildType.Filter] = new Hashtable();
//                _typeList[eFolderChildType.Folder] = new Hashtable();

//                // STEP 2: Create new Shortcut table

//                _dba.OpenUpdateConnection();

//                try
//                {
//                    FolderShortcutCreate();
//                    _dba.CommitData();
//                }
//                catch
//                {
//                    throw;
//                }
//                finally
//                {
//                    _dba.CloseUpdateConnection();
//                }

//                // STEP 3: Convert the FolderType on the FOLDER table

//                dtFolders = FolderRead((eFolderType)1);

//                _dba.OpenUpdateConnection();

//                try
//                {
//                    FolderDropAndCreate();
//                    FolderSetIdentityOn();

//                    foreach (DataRow row in dtFolders.Rows)
//                    {
//                        folderRID = Convert.ToInt32(row["FOLDER_RID"]);
//                        maxFolderRID = Math.Max(maxFolderRID, folderRID);
//                        FolderInsertIdentity(Convert.ToInt32(row["FOLDER_RID"]), Convert.ToInt32(row["USER_RID"]), Convert.ToString(row["FOLDER_ID"]), eFolderType.FilterUser);
//                    }

//                    _dba.CommitData();

//                    FolderSetIdentityOff();
//                    FolderReseed(maxFolderRID);
//                }
//                catch
//                {
//                    throw;
//                }
//                finally
//                {
//                    _dba.CloseUpdateConnection();
//                }

//                // STEP 4: Create Global folder and User Favorites folders, and convert favorites to shortcuts

//                dtFavorites = FavoritesRead();

//                _dba.OpenUpdateConnection();

//                try
//                {
//                    _userFavoriteList[Include.UndefinedUserRID] = FolderCreate(Include.UndefinedUserRID, "Global Filters", eFolderType.FilterGlobal);

//                    foreach (DataRow row in dtFavorites.Rows)
//                    {
//                        userRID = Convert.ToInt32(row["USER_RID"]);

//                        if (!_userFavoriteList.Contains(userRID))
//                        {
//                            _userFavoriteList[userRID] = FolderCreate(userRID, "My Favorites", eFolderType.FilterFavorites);
//                        }

//                        FavoritesDelete(1, userRID, Convert.ToInt32(row["FAV_ITEM_RID"]));
//                        FolderShortcutInsert(Convert.ToInt32(_userFavoriteList[userRID]), Convert.ToInt32(row["FAV_ITEM_RID"]), eFolderChildType.Filter);
//                    }

//                    _dba.CommitData();
//                }
//                catch
//                {
//                    throw;
//                }
//                finally
//                {
//                    _dba.CloseUpdateConnection();
//                }

//                // STEP 5: Create Global folder and User Favorites folders

//                dtFilters = FilterRead();
//                dtFolders = FolderRead(eFolderType.FilterUser);
//                dtFilters.PrimaryKey = new DataColumn[] { dtFilters.Columns["STORE_FILTER_RID"] };
//                dtFolders.PrimaryKey = new DataColumn[] { dtFolders.Columns["FOLDER_RID"] };

//                dtFolderJoin = FolderJoinRead();

//                _dba.OpenUpdateConnection();

//                try
//                {
//                    foreach (DataRow row in dtFolderJoin.Rows)
//                    {
//                        userRID = Convert.ToInt32(row["USER_RID"]);
//                        childItemRID = Convert.ToInt32(row["CHILD_ITEM_RID"]);

//                        if (!_userFavoriteList.Contains(userRID))
//                        {
//                            _userFavoriteList[userRID] = FolderCreate(userRID, "My Favorites", eFolderType.FilterFavorites);
//                        }

//                        if (row["PARENT_FOLDER_RID"] == System.DBNull.Value)
//                        {
//                            parentFolderRID = (int)_userFavoriteList[userRID];
//                        }
//                        else
//                        {
//                            parentFolderRID = Convert.ToInt32(row["PARENT_FOLDER_RID"]);
//                        }

//                        if (Convert.ToInt32(row["CHILD_ITEM_TYPE"]) == 1)
//                        {
//                            childType = eFolderChildType.Filter;
//                            objectRow = dtFilters.Rows.Find(childItemRID);
//                        }
//                        else
//                        {
//                            childType = eFolderChildType.Folder;
//                            objectRow = dtFolders.Rows.Find(childItemRID);
//                        }

//                        if (objectRow != null && objectRow["USER_RID"] != DBNull.Value)
//                        {
//                            objectList = (Hashtable)_typeList[childType];

//                            if (!objectList.Contains(childItemRID))
//                            {
//                                userList = new Hashtable();
//                                userList[userRID] = parentFolderRID;
//                                objectList[childItemRID] = userList;
//                            }
//                            else
//                            {
//                                userList = (Hashtable)objectList[childItemRID];
//                                userList[userRID] = parentFolderRID;

//                                if (!userList.Contains(Include.UndefinedUserRID))
//                                {
//                                    userList[Include.UndefinedUserRID] = _userFavoriteList[Include.UndefinedUserRID];
//                                }
//                            }
//                        }
//                    }

//                    _dba.CommitData();
//                }
//                catch
//                {
//                    throw;
//                }
//                finally
//                {
//                    _dba.CloseUpdateConnection();
//                }

//                _dba.OpenUpdateConnection();

//                try
//                {
//                    FolderItemClearAndModify();

//                    _dba.CommitData();
//                }
//                catch
//                {
//                    throw;
//                }
//                finally
//                {
//                    _dba.CloseUpdateConnection();
//                }

//                _dba.OpenUpdateConnection();

//                try
//                {
//                    typeEnum = _typeList.GetEnumerator();

//                    while (typeEnum.MoveNext())
//                    {
//                        childType = (eFolderChildType)typeEnum.Key;
//                        objectList = (Hashtable)typeEnum.Value;

//                        objectEnum = objectList.GetEnumerator();

//                        while (objectEnum.MoveNext())
//                        {
//                            childItemRID = (int)objectEnum.Key;
//                            userList = (Hashtable)objectEnum.Value;

//                            userEnum = userList.GetEnumerator();

//                            while (userEnum.MoveNext())
//                            {
//                                userRID = (int)userEnum.Key;
//                                parentFolderRID = (int)userEnum.Value;

//                                if (userList.Count > 1 && userRID != Include.UndefinedUserRID)
//                                {
//                                    FolderShortcutInsert(parentFolderRID, childItemRID, childType);
//                                }
//                                else
//                                {
//                                    FolderItemInsert(parentFolderRID, childItemRID, childType);
//                                }

//                                _dba.CommitData();
//                            }
//                        }
//                    }
//                }
//                catch
//                {
//                    throw;
//                }
//                finally
//                {
//                    _dba.CloseUpdateConnection();
//                }
//            }
//            catch
//            {
//                throw;
//            }
//        }

//        private DataTable FilterRead()
//        {
//            try
//            {
//                return _dba.ExecuteSQLQuery("SELECT * FROM STORE_FILTER", "Folder");
//            }
//            catch
//            {
//                throw;
//            }
//        }

//        private DataTable FolderRead(eFolderType aFolderType)
//        {
//            try
//            {
//                return _dba.ExecuteSQLQuery("SELECT * FROM FOLDER WHERE FOLDER_TYPE = " + (int)aFolderType, "Folder");
//            }
//            catch
//            {
//                throw;
//            }
//        }

//        private DataTable FolderJoinRead()
//        {
//            try
//            {
//                return _dba.ExecuteSQLQuery("SELECT * FROM FOLDER_JOIN", "FolderJoin");
//            }
//            catch
//            {
//                throw;
//            }
//        }

//        private DataTable FavoritesRead()
//        {
//            try
//            {
//                return _dba.ExecuteSQLQuery("SELECT * FROM FAVORITES WHERE FAV_TYPE = 1", "Favorites");
//            }
//            catch
//            {
//                throw;
//            }
//        }

//        private void FolderDropAndCreate()
//        {
//            try
//            {
//                _dba.ExecuteNonQuery("DROP TABLE FOLDER");
//                _dba.ExecuteNonQuery("CREATE TABLE FOLDER (FOLDER_RID int identity not null, USER_RID int not null, FOLDER_ID varchar(100) not null, FOLDER_TYPE int not null)");
//            }
//            catch
//            {
//                throw;
//            }
//        }

//        private void FolderSetIdentityOn()
//        {
//            try
//            {
//                _dba.ExecuteNonQuery("set IDENTITY_INSERT FOLDER ON");
//            }
//            catch
//            {
//                throw;
//            }
//        }

//        private void FolderSetIdentityOff()
//        {
//            try
//            {
//                _dba.ExecuteNonQuery("set IDENTITY_INSERT FOLDER OFF");
//            }
//            catch
//            {
//                throw;
//            }
//        }

//        private void FolderReseed(int aLastRID)
//        {
//            try
//            {
//                _dba.ExecuteNonQuery("DBCC CHECKIDENT (FOLDER,reseed," + (aLastRID + 1) + ")");
//            }
//            catch
//            {
//                throw;
//            }
//        }

//        private int FolderCreate(int aUserRID, string aName, eFolderType aFolderType)
//        {
//            MIDDbParameter[] inParams;
//            MIDDbParameter[] outParams;

//            try
//            {
//                inParams = new MIDDbParameter[3];
//                inParams[0] = new MIDDbParameter("@USER_ID", aUserRID);
//                inParams[0].DbType = eDbType.Int;
//                inParams[0].Direction = eParameterDirection.Input;
//                inParams[1] = new MIDDbParameter("@FOLDER_ID", aName);
//                inParams[1].DbType = eDbType.VarChar;
//                inParams[1].Direction = eParameterDirection.Input;
//                inParams[2] = new MIDDbParameter("@FOLDER_TYPE", (int)aFolderType);
//                inParams[2].DbType = eDbType.Int;
//                inParams[2].Direction = eParameterDirection.Input;

//                outParams = new MIDDbParameter[1];
//                outParams[0] = new MIDDbParameter("@FOLDER_RID", DBNull.Value);
//                outParams[0].DbType = eDbType.Int;
//                outParams[0].Direction = eParameterDirection.Output;

//                return _dba.ExecuteStoredProcedure("SP_MID_FOLDER_INSERT", inParams, outParams);
//            }
//            catch
//            {
//                throw;
//            }
//        }

//        private void FolderInsertIdentity(int aFolderRID, int aUserRID, string aName, eFolderType aFolderType)
//        {
//            string SQLCommand;
//            MIDDbParameter[] inParams;

//            try
//            {
//                SQLCommand = "INSERT INTO FOLDER " +
//                    @"(FOLDER_RID, USER_RID, FOLDER_ID, FOLDER_TYPE) " +
//                    @"VALUES (@FOLDER_RID, @USER_RID, @FOLDER_ID, @FOLDER_TYPE)";

//                inParams = new MIDDbParameter[4];
//                inParams[0] = new MIDDbParameter("@FOLDER_RID", aFolderRID);
//                inParams[0].DbType = eDbType.Int;
//                inParams[0].Direction = eParameterDirection.Input;
//                inParams[1] = new MIDDbParameter("@USER_RID", aUserRID);
//                inParams[1].DbType = eDbType.Int;
//                inParams[1].Direction = eParameterDirection.Input;
//                inParams[2] = new MIDDbParameter("@FOLDER_ID", aName);
//                inParams[2].DbType = eDbType.VarChar;
//                inParams[2].Direction = eParameterDirection.Input;
//                inParams[3] = new MIDDbParameter("@FOLDER_TYPE", (int)aFolderType);
//                inParams[3].DbType = eDbType.Int;
//                inParams[3].Direction = eParameterDirection.Input;

//                _dba.ExecuteNonQuery(SQLCommand, inParams);
//            }
//            catch
//            {
//                throw;
//            }
//        }

//        private void FavoritesDelete(int favoritesType, int userRID, int itemRID)
//        {
//            try
//            {
//                string SqlStatement = "DELETE FROM FAVORITES " +
//                    "WHERE FAV_TYPE = " + favoritesType.ToString(CultureInfo.CurrentUICulture) +
//                    " AND USER_RID = " + userRID.ToString(CultureInfo.CurrentUICulture) +
//                    " AND FAV_ITEM_RID = " + itemRID.ToString(CultureInfo.CurrentUICulture);
								
//                _dba.ExecuteNonQuery(SqlStatement);

//                return;
//            }
//            catch
//            {
//                throw;
//            }
//        }

//        private void FolderShortcutCreate()
//        {
//            try
//            {
//                string command = "if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FOLDER_SHORTCUT]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) ";
//                command += " drop table [dbo].[FOLDER_SHORTCUT]";
//                _dba.ExecuteNonQuery(command);

//                _dba.ExecuteNonQuery("CREATE TABLE FOLDER_SHORTCUT (PARENT_FOLDER_RID int not null, CHILD_SHORTCUT_RID int not null, CHILD_SHORTCUT_TYPE int not null)");
//                _dba.ExecuteNonQuery("ALTER TABLE FOLDER_SHORTCUT ADD CONSTRAINT FOLDER_SHORTCUT_PK PRIMARY KEY CLUSTERED (PARENT_FOLDER_RID, CHILD_SHORTCUT_RID, CHILD_SHORTCUT_TYPE)");
//            }
//            catch
//            {
//                throw;
//            }
//        }

//        private bool FolderShortcutExists(int aFolderRID, int aChildRID, eFolderChildType aFolderChildType)
//        {
//            try
//            {
//                return _dba.ExecuteRecordCount("SELECT COUNT(*) MyCount FROM FOLDER_SHORTCUT" +
//                    " WHERE PARENT_FOLDER_RID = " + aFolderRID +
//                    " AND CHILD_SHORTCUT_RID = " + aChildRID +
//                    " AND CHILD_SHORTCUT_TYPE = " + (int)aFolderChildType) > 0;
//            }
//            catch
//            {
//                throw;
//            }
//        }

//        private void FolderShortcutInsert(int aFolderRID, int aChildRID, eFolderChildType aFolderChildType)
//        {
//            try
//            {
//                if (!FolderShortcutExists(aFolderRID, aChildRID, aFolderChildType))
//                {
//                    _dba.ExecuteNonQuery("INSERT INTO FOLDER_SHORTCUT (PARENT_FOLDER_RID, CHILD_SHORTCUT_RID, CHILD_SHORTCUT_TYPE)" +
//                        " VALUES (" + aFolderRID + "," + aChildRID + "," + Convert.ToInt32(aFolderChildType) + ")");
//                }
//            }
//            catch
//            {
//                throw;
//            }
//        }

//        private void FolderItemDelete(DataRow aRow)
//        {
//            try
//            {
//                if (aRow["PARENT_FOLDER_RID"] == System.DBNull.Value)
//                {
//                    _dba.ExecuteNonQuery("DELETE FROM FOLDER_JOIN " +
//                        " WHERE CHILD_ITEM_TYPE = " + Convert.ToInt32(aRow["CHILD_ITEM_TYPE"]) +
//                        " AND PARENT_FOLDER_RID IS NULL " +
//                        " AND CHILD_ITEM_RID = " + Convert.ToInt32(aRow["CHILD_ITEM_RID"]));
//                }
//                else
//                {
//                    _dba.ExecuteNonQuery("DELETE FROM FOLDER_JOIN " +
//                        " WHERE CHILD_ITEM_TYPE = " + Convert.ToInt32(aRow["CHILD_ITEM_TYPE"]) +
//                        " AND PARENT_FOLDER_RID = " + Convert.ToInt32(aRow["PARENT_FOLDER_RID"]) +
//                        " AND CHILD_ITEM_RID = " + Convert.ToInt32(aRow["CHILD_ITEM_RID"]));
//                }
//            }
//            catch
//            {
//                throw;
//            }
//        }
	
//        private void FolderItemClearAndModify()
//        {
//            try
//            {
//                _dba.ExecuteNonQuery("DELETE FROM FOLDER_JOIN");
//                _dba.CommitData();

//                try
//                {
//                    _dba.ExecuteNonQuery("ALTER TABLE FOLDER_JOIN DROP CONSTRAINT FK_FOLDER_JOIN_APPLICATION_USER");
//                    _dba.CommitData();
//                }
//                catch
//                {
//                    _dba.OpenUpdateConnection();
//                }

//                try
//                {
//                    _dba.ExecuteNonQuery("ALTER TABLE FOLDER_JOIN DROP CONSTRAINT APP_USER_FOLDER_JOIN_FK1");
//                    _dba.CommitData();
//                }
//                catch
//                {
//                    _dba.OpenUpdateConnection();
//                }

//                _dba.ExecuteNonQuery("ALTER TABLE FOLDER_JOIN DROP COLUMN USER_RID");
//                _dba.ExecuteNonQuery("ALTER TABLE FOLDER_JOIN ALTER COLUMN PARENT_FOLDER_RID int not null");
//                _dba.ExecuteNonQuery("ALTER TABLE FOLDER_JOIN ADD CONSTRAINT FOLDER_JOIN_PK PRIMARY KEY CLUSTERED (PARENT_FOLDER_RID, CHILD_ITEM_RID, CHILD_ITEM_TYPE)");
//                _dba.CommitData();
//            }
//            catch
//            {
//                throw;
//            }
//        }

//        private void FolderItemInsert(int aFolderRID, int aChildRID, eFolderChildType aFolderChildType)
//        {
//            try
//            {
//                _dba.ExecuteNonQuery("INSERT INTO FOLDER_JOIN (PARENT_FOLDER_RID, CHILD_ITEM_RID, CHILD_ITEM_TYPE)" +
//                    " VALUES (" + aFolderRID + "," + aChildRID + "," + Convert.ToInt32(aFolderChildType) + ")");
//            }
//            catch
//            {
//                throw;
//            }
//        }
//    }
////Begin Track #4010 - JScott - Add all forecast methods and workflows to the scheduler.

//    public class ForecastBalanceConversion : ICustomConversion
//    {
//        private DatabaseAccess _dba;

//        public ForecastBalanceConversion()
//        {
//        }

////Begin Track #3999 - JScott - Blank rows being written to STORE_FORECAST_WEEK_LOCK table
////		public void Execute(string aConnectionString)
//        public void Execute(string aConnectionString, Queue aMessageQueue, Queue aProcessedQueue,
//            eDatabaseType aDatabaseType, int aNoDataTables, string aAllocationFileGroup, 
//            string aForecastFileGroup, string aHistoryFileGroup, int aNoHistoryFileGroup, 
//            string aDailyHistoryFileGroup, int aNoDailyHistoryFileGroup,
//            string aAuditFileGroup, string aWeekArchiveFileGroup, string aDayArchiveFileGroup) // TT#173 Provide database container for large data collections
////End Track #3999 - JScott - Blank rows being written to STORE_FORECAST_WEEK_LOCK table
//        {
//            try
//            {
//                // STEP 1: Instantiate variables

//                MIDConnectionString.ConnectionString = aConnectionString;

//                _dba = new DatabaseAccess();

//                // STEP 2: Move TaskForecastBalance rows to TaskForecast

//                _dba.OpenUpdateConnection();

//                try
//                {
//                    ConvertForecastBalance();
//                    _dba.CommitData();
//                }
//                catch
//                {
//                    throw;
//                }
//                finally
//                {
//                    _dba.CloseUpdateConnection();
//                }
//            }
//            catch
//            {
//                throw;
//            }
//        }

//        public void ConvertForecastBalance()
//        {
//            DataTable dtTasks;
//            DataTable dtForeBal;
//            DataTable dtForeBalDet;

//            try
//            {
//                dtTasks = SelectTask();

//                foreach (DataRow taskRow in dtTasks.Rows)
//                {
//                    dtForeBal = SelectTaskForecastBalance(taskRow);

//                    foreach (DataRow foreBalRow in dtForeBal.Rows)
//                    {
//                        InsertTaskForecast(foreBalRow);
//                        dtForeBalDet = SelectTaskForecastBalanceDetail(foreBalRow);

//                        foreach (DataRow foreBalDetRow in dtForeBalDet.Rows)
//                        {
//                            InsertTaskForecastDetail(foreBalDetRow);
//                        }
//                    }

//                    UpdateTask(taskRow);
//                }
//            }
//            catch
//            {
//                throw;
//            }
//        }

//        public DataTable SelectTask()
//        {
//            string SQLCommand;

//            try
//            {
//                SQLCommand = "SELECT * FROM TASK WHERE TASK_TYPE = 800424";

//                return _dba.ExecuteSQLQuery(SQLCommand, "Tasks");
//            }
//            catch
//            {
//                throw;
//            }
//        }

//        public void UpdateTask(DataRow aTaskRow)
//        {
//            string SQLCommand;

//            try
//            {
//                SQLCommand = "UPDATE TASK SET TASK_TYPE = " + Convert.ToString((int)eTaskType.Forecasting) +
//                    " WHERE TASKLIST_RID = " + Convert.ToString(aTaskRow["TASKLIST_RID"]) +
//                    " AND TASK_SEQUENCE = " + Convert.ToString(aTaskRow["TASK_SEQUENCE"]);

//                _dba.ExecuteNonQuery(SQLCommand);
//            }
//            catch
//            {
//                throw;
//            }
//        }

//        public DataTable SelectTaskForecastBalance(DataRow aTaskRow)
//        {
//            string SQLCommand;

//            try
//            {
//                SQLCommand = "SELECT * FROM TASK_FORECAST_BALANCE" +
//                    " WHERE TASKLIST_RID = " + Convert.ToString(aTaskRow["TASKLIST_RID"]) +
//                    " AND TASK_SEQUENCE = " + Convert.ToString(aTaskRow["TASK_SEQUENCE"]);

//                return _dba.ExecuteSQLQuery(SQLCommand, "ForeBal");
//            }
//            catch
//            {
//                throw;
//            }
//        }

//        public void InsertTaskForecast(DataRow aForeBalRow)
//        {
//            MIDDbParameter[] inParams;
//            string SQLCommand;

//            try
//            {
//                SQLCommand = "INSERT INTO TASK_FORECAST(TASKLIST_RID, TASK_SEQUENCE, FORECAST_SEQUENCE, HN_RID, FV_RID) " +
//                    "VALUES(@TASKLIST_RID, @TASK_SEQUENCE, @FORECAST_SEQUENCE, @HN_RID, @FV_RID)";

//                inParams = new MIDDbParameter[5];

//                inParams[0] = new MIDDbParameter("@TASKLIST_RID", Convert.ToInt32(aForeBalRow["TASKLIST_RID"], CultureInfo.CurrentUICulture), eDbType.Int);
//                inParams[0].Direction = eParameterDirection.Input;
//                inParams[1] = new MIDDbParameter("@TASK_SEQUENCE", Convert.ToInt32(aForeBalRow["TASK_SEQUENCE"], CultureInfo.CurrentUICulture), eDbType.Int);
//                inParams[1].Direction = eParameterDirection.Input;
//                inParams[2] = new MIDDbParameter("@FORECAST_SEQUENCE", Convert.ToInt32(aForeBalRow["FORECAST_BALANCE_SEQUENCE"], CultureInfo.CurrentUICulture), eDbType.Int);
//                inParams[2].Direction = eParameterDirection.Input;

//                if (aForeBalRow["HN_RID"] == System.DBNull.Value)
//                {
//                    inParams[3] = new MIDDbParameter("@HN_RID", System.DBNull.Value);
//                }
//                else
//                {
//                    inParams[3] = new MIDDbParameter("@HN_RID", Convert.ToInt32(aForeBalRow["HN_RID"], CultureInfo.CurrentUICulture), eDbType.Int);
//                }
//                inParams[3].Direction = eParameterDirection.Input;

//                if (aForeBalRow["FV_RID"] == System.DBNull.Value)
//                {
//                    inParams[4] = new MIDDbParameter("@FV_RID", System.DBNull.Value);
//                }
//                else
//                {
//                    inParams[4] = new MIDDbParameter("@FV_RID", Convert.ToInt32(aForeBalRow["FV_RID"], CultureInfo.CurrentUICulture), eDbType.Int);
//                }
//                inParams[4].Direction = eParameterDirection.Input;

//                _dba.ExecuteNonQuery(SQLCommand, inParams);
//            }
//            catch
//            {
//                throw;
//            }
//        }

//        public DataTable SelectTaskForecastBalanceDetail(DataRow aForeBalRow)
//        {
//            string SQLCommand;

//            try
//            {
//                SQLCommand = "SELECT * FROM TASK_FORECAST_BALANCE_DETAIL" +
//                    " WHERE TASKLIST_RID = " + Convert.ToString(aForeBalRow["TASKLIST_RID"]) +
//                    " AND TASK_SEQUENCE = " + Convert.ToString(aForeBalRow["TASK_SEQUENCE"]) +
//                    " AND FORECAST_BALANCE_SEQUENCE = " + Convert.ToString(aForeBalRow["FORECAST_BALANCE_SEQUENCE"]);

//                return _dba.ExecuteSQLQuery(SQLCommand, "ForeBalDet");
//            }
//            catch
//            {
//                throw;
//            }
//        }

//        public void InsertTaskForecastDetail(DataRow aForeBalDetRow)
//        {
//            MIDDbParameter[] inParams;
//            string SQLCommand;

//            try
//            {
//                SQLCommand = "INSERT INTO TASK_FORECAST_DETAIL(TASKLIST_RID, TASK_SEQUENCE, FORECAST_SEQUENCE, DETAIL_SEQUENCE, WORKFLOW_METHOD_IND, METHOD_RID, WORKFLOW_RID, EXECUTE_CDR_RID) " +
//                    "VALUES(@TASKLIST_RID, @TASK_SEQUENCE, @FORECAST_SEQUENCE, @DETAIL_SEQUENCE, @WORKFLOW_METHOD_IND, @METHOD_RID, @WORKFLOW_RID, @EXECUTE_CDR_RID)";

//                inParams = new MIDDbParameter[8];

//                inParams[0] = new MIDDbParameter("@TASKLIST_RID", Convert.ToInt32(aForeBalDetRow["TASKLIST_RID"], CultureInfo.CurrentUICulture), eDbType.Int);
//                inParams[0].Direction = eParameterDirection.Input;
//                inParams[1] = new MIDDbParameter("@TASK_SEQUENCE", Convert.ToInt32(aForeBalDetRow["TASK_SEQUENCE"], CultureInfo.CurrentUICulture), eDbType.Int);
//                inParams[1].Direction = eParameterDirection.Input;
//                inParams[2] = new MIDDbParameter("@FORECAST_SEQUENCE", Convert.ToInt32(aForeBalDetRow["FORECAST_BALANCE_SEQUENCE"], CultureInfo.CurrentUICulture), eDbType.Int);
//                inParams[2].Direction = eParameterDirection.Input;
//                inParams[3] = new MIDDbParameter("@DETAIL_SEQUENCE", Convert.ToInt32(aForeBalDetRow["DETAIL_SEQUENCE"], CultureInfo.CurrentUICulture), eDbType.Int);
//                inParams[3].Direction = eParameterDirection.Input;
//                inParams[4] = new MIDDbParameter("@WORKFLOW_METHOD_IND", Convert.ToInt32(eWorkflowMethodType.Method, CultureInfo.CurrentUICulture), eDbType.Int);
//                inParams[4].Direction = eParameterDirection.Input;

//                if (aForeBalDetRow["METHOD_RID"] == System.DBNull.Value)
//                {
//                    inParams[5] = new MIDDbParameter("@METHOD_RID", System.DBNull.Value);
//                }
//                else
//                {
//                    inParams[5] = new MIDDbParameter("@METHOD_RID", Convert.ToInt32(aForeBalDetRow["METHOD_RID"], CultureInfo.CurrentUICulture), eDbType.Int);
//                }
//                inParams[5].Direction = eParameterDirection.Input;

//                inParams[6] = new MIDDbParameter("@WORKFLOW_RID", System.DBNull.Value);
//                inParams[6].Direction = eParameterDirection.Input;

//                if (aForeBalDetRow["EXECUTE_CDR_RID"] == System.DBNull.Value)
//                {
//                    inParams[7] = new MIDDbParameter("@EXECUTE_CDR_RID", System.DBNull.Value);
//                }
//                else
//                {
//                    inParams[7] = new MIDDbParameter("@EXECUTE_CDR_RID", Convert.ToInt32(aForeBalDetRow["EXECUTE_CDR_RID"], CultureInfo.CurrentUICulture), eDbType.Int);
//                }
//                inParams[7].Direction = eParameterDirection.Input;

//                _dba.ExecuteNonQuery(SQLCommand, inParams);
//            }
//            catch
//            {
//                throw;
//            }
//        }
//    }
////End Track #4010 - JScott - Add all forecast methods and workflows to the scheduler.

//    public class AuditForecastDateConversion : ICustomConversion
//    {
//        private DatabaseAccess _dba;
//        private MRSCalendar _calendar;

//        public AuditForecastDateConversion()
//        {
//            _calendar = new MRSCalendar(); 
//        }

////		public void Execute(string aConnectionString)
//        public void Execute(string aConnectionString, Queue aMessageQueue, Queue aProcessedQueue,
//            eDatabaseType aDatabaseType, int aNoDataTables, string aAllocationFileGroup, 
//            string aForecastFileGroup, string aHistoryFileGroup, int aNoHistoryFileGroup, 
//            string aDailyHistoryFileGroup, int aNoDailyHistoryFileGroup,
//            string aAuditFileGroup, string aWeekArchiveFileGroup, string aDayArchiveFileGroup) // TT#173 Provide database container for large data collections
//        {
//            DataTable dtAuditForecasts;
//            try
//            {
//                // STEP 1: Instantiate variables

//                MIDConnectionString.ConnectionString = aConnectionString;

//                _dba = new DatabaseAccess();

//                // STEP 2: Get all AUDIT_FORECAST rows
//                dtAuditForecasts = SelectAuditForecasts();

//                _dba.OpenUpdateConnection();

//                try
//                {
//                    // STEP 3: Change columns from datetime to int
//                    ModifyAuditForecastColumns();
//                    // STEP 4: convert dates
//                    ConvertAuditForecastDates(dtAuditForecasts);
//                    _dba.CommitData();
//                }
//                catch
//                {
//                    throw;
//                }
//                finally
//                {
//                    _dba.CloseUpdateConnection();
//                }
//            }
//            catch
//            {
//                throw;
//            }
//        }

//        public void ConvertAuditForecastDates(DataTable dtAuditForecasts)
//        {
//            try
//            {
//                foreach (DataRow forecastRow in dtAuditForecasts.Rows)
//                {
//                    UpdateAuditForecast(forecastRow);
//                }
//            }
//            catch
//            {
//                throw;
//            }
//        }

//        public DataTable SelectAuditForecasts()
//        {
//            string SQLCommand;

//            try
//            {
//                SQLCommand = "SELECT * FROM AUDIT_FORECAST";

//                return _dba.ExecuteSQLQuery(SQLCommand, "AUDIT_FORECAST");
//            }
//            catch
//            {
//                throw;
//            }
//        }

//        public void ModifyAuditForecastColumns()
//        {
//            string SQLCommand;

//            try
//            {
//                // drop original column definitions
//                SQLCommand = "alter table AUDIT_FORECAST drop column TIME_RANGE_BEGIN; ";
//                _dba.ExecuteNonQuery(SQLCommand);
//                SQLCommand = "alter table AUDIT_FORECAST drop column TIME_RANGE_END; ";
//                _dba.ExecuteNonQuery(SQLCommand);
//                _dba.CommitData();

//                // add new column definitions
//                SQLCommand = "alter table AUDIT_FORECAST add TIME_RANGE_BEGIN int null";
//                _dba.ExecuteNonQuery(SQLCommand);
//                SQLCommand = "alter table AUDIT_FORECAST add TIME_RANGE_END int null";
//                _dba.ExecuteNonQuery(SQLCommand);
//                _dba.CommitData();
//            }
//            catch
//            {
//                throw;
//            }
//        }


//        public void UpdateAuditForecast(DataRow aForecastRow)
//        {
//            MIDDbParameter[] inParams;
//            string SQLCommand;
//            DateTime dtTimeRange;

//            try
//            {
//                SQLCommand = "update AUDIT_FORECAST " +
//                    "set TIME_RANGE_BEGIN = @TIME_RANGE_BEGIN, " +
//                    "TIME_RANGE_END = @TIME_RANGE_END " +
//                    "where AUDIT_FORECAST_RID = @AUDIT_FORECAST_RID";

//                inParams = new MIDDbParameter[3];

//                inParams[0] = new MIDDbParameter("@AUDIT_FORECAST_RID", Convert.ToInt32(aForecastRow["AUDIT_FORECAST_RID"], CultureInfo.CurrentUICulture), eDbType.Int);
//                inParams[0].Direction = eParameterDirection.Input;

//                if (aForecastRow["TIME_RANGE_BEGIN"] == System.DBNull.Value)
//                {
//                    inParams[1] = new MIDDbParameter("@TIME_RANGE_BEGIN", System.DBNull.Value);
//                }
//                else
//                {
//                    dtTimeRange = Convert.ToDateTime(aForecastRow["TIME_RANGE_BEGIN"], CultureInfo.CurrentUICulture);
//                    inParams[1] = new MIDDbParameter("@TIME_RANGE_BEGIN", ((WeekProfile)_calendar.GetWeek(dtTimeRange)).Days[0].Key, eDbType.Int);
//                }
//                inParams[1].Direction = eParameterDirection.Input;

//                if (aForecastRow["TIME_RANGE_END"] == System.DBNull.Value)
//                {
//                    inParams[2] = new MIDDbParameter("@TIME_RANGE_END", System.DBNull.Value);
//                }
//                else
//                {
//                    dtTimeRange = Convert.ToDateTime(aForecastRow["TIME_RANGE_END"], CultureInfo.CurrentUICulture);
//                    inParams[2] = new MIDDbParameter("@TIME_RANGE_END", ((WeekProfile)_calendar.GetWeek(dtTimeRange)).Days[0].Key, eDbType.Int);
//                }
//                inParams[2].Direction = eParameterDirection.Input;

//                _dba.ExecuteNonQuery(SQLCommand, inParams);
//            }
//            catch
//            {
//                throw;
//            }
//        }
//    }

//    class AssortmentConversion : ICustomConversion
//    {
//        //=======
//        // FIELDS
//        //=======

//        private DatabaseAccess _dba;
//        private Header _header;

//        //=============
//        // CONSTRUCTORS
//        //=============

//        public AssortmentConversion()
//        {
//        }

//        //=============
//        // METHODS
//        //=============
//        //public void Execute(string aConnectionString, Queue aMessageQueue, Queue aProcessedQueue)
//        public void Execute(string aConnectionString, Queue aMessageQueue, Queue aProcessedQueue,
//            eDatabaseType aDatabaseType, int aNoDataTables, string aAllocationFileGroup, 
//            string aForecastFileGroup, string aHistoryFileGroup, int aNoHistoryFileGroup, 
//            string aDailyHistoryFileGroup, int aNoDailyHistoryFileGroup,
//            string aAuditFileGroup, string aWeekArchiveFileGroup, string aDayArchiveFileGroup)// TT#173 Provide database container for large data collections
//        {
//            try
//            {
//                ConvertAssortmentDB(aConnectionString, aMessageQueue);
//            }
//            catch
//            {
//                throw;
//            }
//        }

//        private void ConvertAssortmentDB(string aConnectionString, Queue aMessageQueue)
//        {
//            MIDConnectionString.ConnectionString = aConnectionString;
//            _dba = new DatabaseAccess();
//            _dba.OpenUpdateConnection();
//            _header = new Header();
//            try
//            {

//                CleanUpData();
//                AddHeaderColumns();
//                ConvertBulkColor();
//                ConvertBulkColorSizeNeed();
//                ConvertBulkColorRuleLayer();
//                ConvertBulkColorAllocation();
//                ConvertBulkColorSize();
//                ConvertColorAllocationBin();
//                ConvertColorSizeAllocationBin();
//                AddPackColumn();
//                ConvertPackColor();
//                ConvertPackColorSize();
//                ConvertPackAllocation();
//                ConvertMethodRule();
//                ConvertMasterHeader();
//                ModifyStoredProcedures();
//                PopulateHeaderStatusFields();
//                _dba.CommitData();
//            }
//            catch (Exception exc)
//            {
//                //SAB.ClientServerSession.Audit.Add_Msg(eMIDMessageLevel.Severe, exc.ToString(), GetType().Name);
//                aMessageQueue.Enqueue("UNEXPECTED EXCEPTION: " + exc.ToString());
//                throw;
//            }
//            finally
//            {
//                _dba.CloseUpdateConnection();
//            }
//        }

//        private void CleanUpData()
//        {
//            try
//            {
//                string sql = "update HEADER_BULK_COLOR_SIZE_NEED set SIZE_CURVE_GROUP_RID = null where SIZE_CURVE_GROUP_RID not in (select SIZE_CURVE_GROUP_RID from SIZE_CURVE_GROUP)";
//                _dba.ExecuteNonQuery(sql);
//                 sql = "update HEADER_SIZE_NEED set SIZE_CURVE_GROUP_RID = null where SIZE_CURVE_GROUP_RID not in (select SIZE_CURVE_GROUP_RID from SIZE_CURVE_GROUP)";
//                _dba.ExecuteNonQuery(sql);
//                 sql = "update SIZE_CONSTRAINT_MODEL set SIZE_CURVE_GROUP_RID = null where SIZE_CURVE_GROUP_RID not in (select SIZE_CURVE_GROUP_RID from SIZE_CURVE_GROUP)";
//                _dba.ExecuteNonQuery(sql);
//                 sql = "update METHOD_SIZE_NEED set SIZE_CURVE_GROUP_RID = null where SIZE_CURVE_GROUP_RID not in (select SIZE_CURVE_GROUP_RID from SIZE_CURVE_GROUP)";
//                _dba.ExecuteNonQuery(sql);
//                 sql = "update STORE_SIZE_CURVE_BY_GROUP set SIZE_CURVE_GROUP_RID = null where SIZE_CURVE_GROUP_RID not in (select SIZE_CURVE_GROUP_RID from SIZE_CURVE_GROUP)";
//                _dba.ExecuteNonQuery(sql);
//                 sql = "update METHOD_FILL_SIZE_HOLES set SIZE_CURVE_GROUP_RID = null where SIZE_CURVE_GROUP_RID not in (select SIZE_CURVE_GROUP_RID from SIZE_CURVE_GROUP)";
//                _dba.ExecuteNonQuery(sql);
//                 sql = "update METHOD_SIZE_BASIS_ALLOCATION set SIZE_CURVE_GROUP_RID = null where SIZE_CURVE_GROUP_RID not in (select SIZE_CURVE_GROUP_RID from SIZE_CURVE_GROUP)";
//                _dba.ExecuteNonQuery(sql);
//                 sql = "update METHOD_SIZE_NEED_ALLOCATION set SIZE_CURVE_GROUP_RID = null where SIZE_CURVE_GROUP_RID not in (select SIZE_CURVE_GROUP_RID from SIZE_CURVE_GROUP)";
//                _dba.ExecuteNonQuery(sql);
//                sql = "update SIZE_CURVE_GROUP_JOIN set SIZE_CURVE_GROUP_RID = null where SIZE_CURVE_GROUP_RID not in (select SIZE_CURVE_GROUP_RID from SIZE_CURVE_GROUP)";
//                _dba.ExecuteNonQuery(sql);
//            }
//            catch
//            {
//                throw;
//            }
//        }


//        private void AddHeaderColumns()
//        {
//            try
//            {
//                string sql = "IF .dbo.UDF_ColumnAlreadyExists('HEADER', 'VIRTUAL_IND') = 0 " +
//                             "ALTER TABLE HEADER ADD VIRTUAL_IND char(1) null";
//                _dba.ExecuteNonQuery(sql);

//                sql = "IF .dbo.UDF_ColumnAlreadyExists('HEADER', 'ASRT_RID') = 0 " +
//                            "ALTER TABLE HEADER ADD ASRT_RID int null";
//                _dba.ExecuteNonQuery(sql);

//                sql = "if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[HEADER_ASRT_FK1]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1) " +
//                      "ALTER TABLE [dbo].[HEADER] DROP CONSTRAINT HEADER_ASRT_FK1";
//                _dba.ExecuteNonQuery(sql);

//                sql = "ALTER TABLE HEADER ADD CONSTRAINT HEADER_ASRT_FK1 FOREIGN KEY(ASRT_RID) REFERENCES " +
//                      "HEADER (HDR_RID) ON UPDATE NO ACTION ON DELETE NO ACTION";
//                _dba.ExecuteNonQuery(sql);

//                sql = "IF EXISTS (SELECT name FROM sysindexes WHERE name = 'HEADER_IDX2') " +
//                      "DROP INDEX HEADER.HEADER_IDX2";
//                _dba.ExecuteNonQuery(sql);

//                sql = "CREATE INDEX HEADER_IDX2 ON HEADER (ASRT_RID ASC)";
//                _dba.ExecuteNonQuery(sql);

//                _dba.CommitData();

//            }
//            catch
//            {
//                throw;
//            }
//        }

//        private void ConvertBulkColor()
//        {
//            try
//            {
//                //DataTable dtBulkColor = _header.GetBulkColors(); // "header" is being changed to reflect new table definitions
//                string SQLCommand = "select * from HEADER_BULK_COLOR order by HDR_RID";
//                DataTable dtBulkColor = _dba.ExecuteSQLQuery( SQLCommand, "GET_HEADER_BULK_COLORS" );
//                string[] values = new string[dtBulkColor.Rows.Count];
//                int last_BCSZ_KEY_USED;
//                int hdrRID;
//                int colorRID;
//                int i=0;
//                foreach (DataRow row in dtBulkColor.Rows)
//                {
//                    hdrRID = (int)row["HDR_RID"];
//                    colorRID = (int)row["COLOR_CODE_RID"];
//                    SQLCommand = "select count(*) as MyCount from HEADER_BULK_COLOR_SIZE where HDR_RID = "
//                                 + hdrRID.ToString() 
//                                 + " and COLOR_CODE_RID = "
//                                 + colorRID.ToString(); 
//                    last_BCSZ_KEY_USED  = _dba.ExecuteRecordCount(SQLCommand);
//                    values[i] = " VALUES ( "
//                                    + hdrRID.ToString() + ", "
//                                    + colorRID.ToString() + ", "
//                                    + row["UNITS"].ToString() + ", "
//                                    + row["MULTIPLE"].ToString() + ", "
//                                    + row["MINIMUM"].ToString() + ", "
//                                    + row["MAXIMUM"].ToString() + ", "
//                                    + row["RESERVE_UNITS"].ToString() + ", "
//                                    + row["SEQ"].ToString() + ", "
//                                    + last_BCSZ_KEY_USED.ToString() + " )";
//                    i++;
//                }

//                dtBulkColor = null;

//                string sql;

//                sql = "if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[COLOR_ALLOCATION_BIN]') " +
//                            "and OBJECTPROPERTY(id,N'IsUserTable') = 1) " +
//                            "exec SP_MID_DROP_CONSTRAINTS 'COLOR_ALLOCATION_BIN', 'FOREIGN KEY'";
//                _dba.ExecuteNonQuery(sql);

//                sql = "if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[BULK_COLOR_ALLOCATION]') " +
//                             "and OBJECTPROPERTY(id,N'IsUserTable') = 1) " +
//                             "exec SP_MID_DROP_CONSTRAINTS 'BULK_COLOR_ALLOCATION', 'FOREIGN KEY'";
//                _dba.ExecuteNonQuery(sql);

//                sql = "if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[BULK_COLOR_RULE_LAYER]') " +
//                             "and OBJECTPROPERTY(id,N'IsUserTable') = 1) " +
//                             "exec SP_MID_DROP_CONSTRAINTS 'BULK_COLOR_RULE_LAYER', 'FOREIGN KEY'";
//                _dba.ExecuteNonQuery(sql);

//                sql = "if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[HEADER_BULK_COLOR_SIZE]') " +
//                      "and OBJECTPROPERTY(id,N'IsUserTable') = 1) " +
//                      "exec SP_MID_DROP_CONSTRAINTS 'HEADER_BULK_COLOR_SIZE', 'FOREIGN KEY'";
//                _dba.ExecuteNonQuery(sql);

//                sql = "if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[HEADER_BULK_COLOR_SIZE_NEED]') " +
//                      "and OBJECTPROPERTY(id,N'IsUserTable') = 1) " +
//                      "exec SP_MID_DROP_CONSTRAINTS 'HEADER_BULK_COLOR_SIZE_NEED', 'FOREIGN KEY'";
//                _dba.ExecuteNonQuery(sql);

//                sql = "if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[METHOD_RULE]') " +
//                      "and OBJECTPROPERTY(id,N'IsUserTable') = 1) " +
//                      "exec SP_MID_DROP_CONSTRAINTS 'METHOD_RULE', 'FOREIGN KEY'";
//                _dba.ExecuteNonQuery(sql);

//                sql = "if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[MASTER_HEADER]') " +
//                    "and OBJECTPROPERTY(id,N'IsUserTable') = 1) " +
//                    "exec SP_MID_DROP_CONSTRAINTS 'MASTER_HEADER', 'FOREIGN KEY'";
//                _dba.ExecuteNonQuery(sql);

//                sql = "if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[HEADER_BULK_COLOR]') " +
//                      "and OBJECTPROPERTY(id,N'IsUserTable') = 1) " +
//                      "exec SP_MID_DROP_CONSTRAINTS 'HEADER_BULK_COLOR', 'FOREIGN KEY'";
//                _dba.ExecuteNonQuery(sql);
            
//                sql = "IF EXISTS (SELECT name FROM sysindexes WHERE name = 'HEADER_BULK_COLOR_IDX1') " +
//                      "DROP INDEX HEADER_BULK_COLOR.HEADER_BULK_COLOR_IDX1";
//                _dba.ExecuteNonQuery(sql);

//                sql = "IF EXISTS (SELECT name FROM sysindexes WHERE name = 'HEADER_BULK_COLOR_IDX2') " +
//                      "DROP INDEX HEADER_BULK_COLOR.HEADER_BULK_COLOR_IDX2";
//                _dba.ExecuteNonQuery(sql);


//                sql = "if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[HEADER_BULK_COLOR]') " +
//                      "and OBJECTPROPERTY(id,N'IsUserTable') = 1) " +
//                      "DROP TABLE [dbo].[HEADER_BULK_COLOR]";
//                _dba.ExecuteNonQuery(sql);

//                sql = "CREATE TABLE HEADER_BULK_COLOR ( " +
//                           "HDR_RID int not null, " +
//                           "HDR_BC_RID int identity(100,1) not null, " +
//                          // "HDR_RID int not null, " +
//                           "COLOR_CODE_RID  int not null, " +
//                           "UNITS int not null, " +
//                           "MULTIPLE  int not null, " +
//                           "MINIMUM  int not null, " +
//                           "MAXIMUM int not null, " +
//                           "RESERVE_UNITS int null, " +
//                           "SEQ int null, " +
//                           "NAME  varchar(50) null, " +
//                           "DESCRIPTION  varchar(100) null, " +
//                           "ASRT_BC_RID int null, " +
//                           "LAST_BCSZ_KEY_USED int default 0)";
//                _dba.ExecuteNonQuery(sql);

//                // Begin TT#1211 - JSmith - Database upgrade procedure times out
//                //sql = "CREATE CLUSTERED INDEX HEADER_BULK_COLOR_IDX1 ON HEADER_BULK_COLOR (HDR_RID, HDR_BC_RID)";
//                //_dba.ExecuteNonQuery(sql);

//                //sql = "ALTER TABLE HEADER_BULK_COLOR ADD CONSTRAINT HEADER_BULK_COLOR_PK PRIMARY KEY (HDR_BC_RID)";
//                //_dba.ExecuteNonQuery(sql);
//                // End TT#1211

//                string insertIN = "INSERT INTO HEADER_BULK_COLOR " +
//                                  "(HDR_RID,COLOR_CODE_RID,UNITS,MULTIPLE,MINIMUM,MAXIMUM,RESERVE_UNITS,SEQ,LAST_BCSZ_KEY_USED)";

//                foreach (string value in values)
//                {
//                    _dba.ExecuteNonQuery(insertIN + value);
//                }

//                // Begin TT#1211 - JSmith - Database upgrade procedure times out
//                sql = "CREATE CLUSTERED INDEX HEADER_BULK_COLOR_IDX1 ON HEADER_BULK_COLOR (HDR_RID, HDR_BC_RID)";
//                _dba.ExecuteNonQuery(sql);

//                sql = "ALTER TABLE HEADER_BULK_COLOR ADD CONSTRAINT HEADER_BULK_COLOR_PK PRIMARY KEY (HDR_BC_RID)";
//                _dba.ExecuteNonQuery(sql);
//                // End TT#1211

//                sql = "ALTER TABLE HEADER_BULK_COLOR ADD CONSTRAINT HEADER_HDR_BC_FK1 FOREIGN KEY (HDR_RID) " +
//                      "REFERENCES HEADER (HDR_RID) ON UPDATE NO ACTION ON DELETE NO ACTION";
//                _dba.ExecuteNonQuery(sql);

//                sql = "ALTER TABLE  HEADER_BULK_COLOR ADD CONSTRAINT COLOR_CODE_HDR_BC_FK1 FOREIGN KEY (COLOR_CODE_RID) " +
//                      "REFERENCES COLOR_CODE (COLOR_CODE_RID) ON UPDATE NO ACTION ON DELETE NO ACTION";
//                _dba.ExecuteNonQuery(sql);

//                sql = "ALTER TABLE HEADER_BULK_COLOR ADD CONSTRAINT HDR_BC_HDR_BC_FK1 FOREIGN KEY (ASRT_BC_RID) " +
//                      "REFERENCES HEADER_BULK_COLOR (HDR_BC_RID) ON UPDATE NO ACTION ON DELETE NO ACTION";
//                _dba.ExecuteNonQuery(sql);

//                sql = "CREATE INDEX HEADER_BULK_COLOR_IDX2 on HEADER_BULK_COLOR (ASRT_BC_RID) ";
//                _dba.ExecuteNonQuery(sql);
//                _dba.CommitData();
//            }
//            catch
//            {
//                throw;
//            }
//        }

//        private void ConvertBulkColorSizeNeed()
//        {
//            try
//            {
//                string sql;
//                sql = "CREATE TABLE #headerbulkcolorsizeneed( " +
//                      "HDR_RID int, HDR_BC_RID int, COLOR_CODE_RID int, SIZE_CURVE_GROUP_RID int null, " +
//                      "MERCH_TYPE int null, HN_RID int null, PH_RID int null, PHL_SEQUENCE int null, " +
//                      "SIZE_CONSTRAINT_RID int null, SIZE_ALTERNATE_RID int null, NORMALIZE_SIZE_CURVES_IND char(1) null)";
//                _dba.ExecuteNonQuery(sql);

//                sql = "if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[HEADER_BULK_COLOR_SIZE_NEED]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) " +
//                      "INSERT INTO #headerbulkcolorsizeneed " +
//                      "SELECT bcsneed.HDR_RID, bcolor.HDR_BC_RID, bcsneed.COLOR_CODE_RID, " +
//                      "bcsneed.SIZE_CURVE_GROUP_RID,bcsneed.MERCH_TYPE,bcsneed.HN_RID, " +
//                      "bcsneed.PH_RID,bcsneed.PHL_SEQUENCE,	bcsneed.SIZE_CONSTRAINT_RID, " +
//                      "bcsneed.SIZE_ALTERNATE_RID, " +
//                      "bcsneed.NORMALIZE_SIZE_CURVES_IND " +
//                      "FROM HEADER_BULK_COLOR_SIZE_NEED bcsneed,HEADER_BULK_COLOR bcolor " +
//                      "WHERE bcolor.HDR_RID = bcsneed.HDR_RID AND " +
//                      "bcolor.COLOR_CODE_RID = bcsneed.COLOR_CODE_RID";
//                _dba.ExecuteNonQuery(sql);

//                sql = "if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[HEADER_BULK_COLOR_SIZE_NEED]') " +
//                      "and OBJECTPROPERTY(id, N'IsUserTable') = 1) " +
//                      "drop table [dbo].[HEADER_BULK_COLOR_SIZE_NEED]";
//                _dba.ExecuteNonQuery(sql);

//                sql = "CREATE TABLE HEADER_BULK_COLOR_SIZE_NEED ( " +
//                           "HDR_RID int not null," +
//                           "HDR_BC_RID int not null, " +
//                           "SIZE_CURVE_GROUP_RID int null, " +
//                           "MERCH_TYPE  int null, " +
//                           "HN_RID int null, " +
//                           "PH_RID  int  null, " +
//                           "PHL_SEQUENCE int null, " +
//                           "SIZE_CONSTRAINT_RID int null, " +
//                           "SIZE_ALTERNATE_RID int null, " +
//                           "NORMALIZE_SIZE_CURVES_IND char(1) null)";
//                _dba.ExecuteNonQuery(sql);

//                // Begin TT#1211 - JSmith - Database upgrade procedure times out
//                //sql = "CREATE CLUSTERED INDEX HEADER_BULK_CLR_SZ_NEED_IDX1 ON HEADER_BULK_COLOR_SIZE_NEED (HDR_RID, HDR_BC_RID)";
//                //_dba.ExecuteNonQuery(sql);

//                //sql = "ALTER TABLE HEADER_BULK_COLOR_SIZE_NEED ADD CONSTRAINT HEADER_BULK_COLOR_SIZE_NEED_PK PRIMARY KEY (HDR_BC_RID)";
//                //_dba.ExecuteNonQuery(sql);
                
//                //sql = "create index HEADER_BCSN_SZ_CRV_GRP_IDX1 on HEADER_BULK_COLOR_SIZE_NEED (" +
//                //      "SIZE_CURVE_GROUP_RID)";
//                //_dba.ExecuteNonQuery(sql);
//                // End TT#1211

//                string insertIN = "INSERT INTO HEADER_BULK_COLOR_SIZE_NEED " +
//                                  "(HDR_RID, HDR_BC_RID,SIZE_CURVE_GROUP_RID,MERCH_TYPE,HN_RID,PH_RID,PHL_SEQUENCE," +
//                                  "SIZE_CONSTRAINT_RID,SIZE_ALTERNATE_RID,NORMALIZE_SIZE_CURVES_IND) " +
//                                  "SELECT HDR_RID, HDR_BC_RID,SIZE_CURVE_GROUP_RID,MERCH_TYPE,HN_RID,PH_RID,PHL_SEQUENCE," +
//                                  "SIZE_CONSTRAINT_RID,SIZE_ALTERNATE_RID,NORMALIZE_SIZE_CURVES_IND " +
//                                  "FROM #headerbulkcolorsizeneed";
//                _dba.ExecuteNonQuery(insertIN);

//                // Begin TT#1211 - JSmith - Database upgrade procedure times out
//                sql = "CREATE CLUSTERED INDEX HEADER_BULK_CLR_SZ_NEED_IDX1 ON HEADER_BULK_COLOR_SIZE_NEED (HDR_RID, HDR_BC_RID)";
//                _dba.ExecuteNonQuery(sql);

//                sql = "ALTER TABLE HEADER_BULK_COLOR_SIZE_NEED ADD CONSTRAINT HEADER_BULK_COLOR_SIZE_NEED_PK PRIMARY KEY (HDR_BC_RID)";
//                _dba.ExecuteNonQuery(sql);

//                sql = "create index HEADER_BCSN_SZ_CRV_GRP_IDX1 on HEADER_BULK_COLOR_SIZE_NEED (" +
//                      "SIZE_CURVE_GROUP_RID)";
//                _dba.ExecuteNonQuery(sql);
//                // End TT#1211

//                sql = "drop table #headerbulkcolorsizeneed";
//                _dba.ExecuteNonQuery(sql);

//                // Add foreign key constraints to table "HEADER_BULK_COLOR_SIZE_NEED". 
//                sql = "ALTER TABLE HEADER_BULK_COLOR_SIZE_NEED ADD CONSTRAINT HDR_BC_HDR_BC_SZ_ND_FK1 FOREIGN KEY (HDR_BC_RID) " +
//                      "REFERENCES HEADER_BULK_COLOR (HDR_BC_RID) ON UPDATE NO ACTION ON DELETE NO ACTION";
//                _dba.ExecuteNonQuery(sql);

//                sql = "ALTER TABLE HEADER_BULK_COLOR_SIZE_NEED ADD CONSTRAINT HEADER_HDR_BC_SZ_ND_FK1 FOREIGN KEY (HDR_RID) " +
//                      "REFERENCES HEADER (HDR_RID) ON UPDATE NO ACTION ON DELETE NO ACTION";
//                _dba.ExecuteNonQuery(sql);

//                sql = "ALTER TABLE HEADER_BULK_COLOR_SIZE_NEED ADD CONSTRAINT SZ_CV_GR_HDR_BC_SZ_ND_FK1 FOREIGN KEY (SIZE_CURVE_GROUP_RID) " +
//                     "REFERENCES SIZE_CURVE_GROUP (SIZE_CURVE_GROUP_RID) ON UPDATE NO ACTION ON DELETE NO ACTION";
//                _dba.ExecuteNonQuery(sql);

//                sql = "ALTER TABLE HEADER_BULK_COLOR_SIZE_NEED ADD CONSTRAINT HIER_ND_HDR_BC_SZ_ND_FK1 FOREIGN KEY (HN_RID) " +
//                    "REFERENCES HIERARCHY_NODE (HN_RID) ON UPDATE NO ACTION ON DELETE NO ACTION";
//                _dba.ExecuteNonQuery(sql);

//                sql = "ALTER TABLE HEADER_BULK_COLOR_SIZE_NEED ADD CONSTRAINT HIER_LVL_HDR_BC_SZ_ND_FK1 FOREIGN KEY (PH_RID,PHL_SEQUENCE) " +
//                    "REFERENCES PRODUCT_HIERARCHY_LEVELS (PH_RID,PHL_SEQUENCE) ON UPDATE NO ACTION ON DELETE NO ACTION";
//                _dba.ExecuteNonQuery(sql);

//                sql = "ALTER TABLE HEADER_BULK_COLOR_SIZE_NEED ADD CONSTRAINT SZ_CON_M_HDR_BC_SZ_ND_FK1 FOREIGN KEY (SIZE_CONSTRAINT_RID) " +
//                    "REFERENCES SIZE_CONSTRAINT_MODEL (SIZE_CONSTRAINT_RID) ON UPDATE NO ACTION ON DELETE NO ACTION";
//                _dba.ExecuteNonQuery(sql);

//                sql = "ALTER TABLE HEADER_BULK_COLOR_SIZE_NEED ADD CONSTRAINT SZ_ALT_M_HDR_BC_SZ_ND_FK1 FOREIGN KEY (SIZE_ALTERNATE_RID) " +
//                  "REFERENCES SIZE_ALTERNATE_MODEL (SIZE_ALTERNATE_RID) ON UPDATE NO ACTION ON DELETE NO ACTION";
//                _dba.ExecuteNonQuery(sql);
//                _dba.CommitData();
//            }
//            catch
//            {
//                throw;
//            }
//        }

//        private void ConvertBulkColorRuleLayer()
//        {
//            try
//            {   // does both BULK_COLOR_RULE_LAYER & BULK_COLOR_RULE 
//                string sql;
//                sql = "CREATE TABLE #bulkcolorrulelayer( " +
//                      "HDR_RID int, HDR_BC_RID int, COLOR_CODE_RID int, LAYER_ID int, METHOD_RID int not null)";
//                _dba.ExecuteNonQuery(sql);

//                sql = "INSERT INTO #bulkcolorrulelayer " +
//                      "SELECT bcrl.HDR_RID, bcolor.HDR_BC_RID, bcrl.COLOR_CODE_RID, bcrl.LAYER_ID, bcrl.METHOD_RID " +
//                      "FROM BULK_COLOR_RULE_LAYER bcrl, HEADER_BULK_COLOR bcolor " +
//                      "WHERE bcrl.HDR_RID = bcolor.HDR_RID AND bcrl.COLOR_CODE_RID = bcolor.COLOR_CODE_RID";
//                _dba.ExecuteNonQuery(sql);

//                sql = "if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[BULK_COLOR_RULE]') " +
//                      "and OBJECTPROPERTY(id, N'IsUserTable') = 1) " +
//                      "exec SP_MID_DROP_CONSTRAINTS 'BULK_COLOR_RULE', 'FOREIGN KEY'";
//                _dba.ExecuteNonQuery(sql);

//                sql = "if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[BULK_COLOR_RULE_LAYER]') " +
//                      "and OBJECTPROPERTY(id, N'IsUserTable') = 1) " +
//                      "exec SP_MID_DROP_CONSTRAINTS 'BULK_COLOR_RULE_LAYER', 'FOREIGN KEY'";
//                _dba.ExecuteNonQuery(sql);

//                sql = "if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[BULK_COLOR_RULE_LAYER]') " +
//                      "and OBJECTPROPERTY(id, N'IsUserTable') = 1) " +
//                      "drop table [dbo].[BULK_COLOR_RULE_LAYER]";
//                _dba.ExecuteNonQuery(sql);

//                sql = "CREATE TABLE BULK_COLOR_RULE_LAYER ( " +
//                           "HDR_RID int not null, " +
//                           "HDR_BC_RID int not null, " +
//                           "LAYER_ID int not null, " +
//                           "METHOD_RID  int not null)";
//                _dba.ExecuteNonQuery(sql);

//                // Begin TT#1211 - JSmith - Database upgrade procedure times out
//                //sql = "CREATE CLUSTERED INDEX BULK_COLOR_RULE_LAYER_IDX1 ON BULK_COLOR_RULE_LAYER (HDR_RID, HDR_BC_RID, LAYER_ID)";
//                //_dba.ExecuteNonQuery(sql);

//                //sql = "ALTER TABLE BULK_COLOR_RULE_LAYER ADD CONSTRAINT BULK_COLOR_RULE_LAYER_PK PRIMARY KEY (HDR_BC_RID, LAYER_ID)";
//                //_dba.ExecuteNonQuery(sql);

//                //// Add foreign key constraints to table  BULK_COLOR_RULE_LAYER 
//                //sql = "ALTER TABLE BULK_COLOR_RULE_LAYER ADD CONSTRAINT HEADER_BULK_COLOR_RULE_LAYER_FK1 FOREIGN KEY (HDR_RID) " +
//                //      "REFERENCES HEADER (HDR_RID) ON UPDATE NO ACTION ON DELETE NO ACTION";
//                //_dba.ExecuteNonQuery(sql);
                
//                //sql = "ALTER TABLE BULK_COLOR_RULE_LAYER ADD CONSTRAINT HDR_BC_BULK_COLOR_RULE_LAYER_FK1 FOREIGN KEY (HDR_BC_RID) " +
//                //      "REFERENCES HEADER_BULK_COLOR (HDR_BC_RID) ON UPDATE NO ACTION ON DELETE NO ACTION";
//                //_dba.ExecuteNonQuery(sql);

//                //sql = "ALTER TABLE BULK_COLOR_RULE_LAYER ADD CONSTRAINT MTHD_BLK_CLR_RULE_LAYER_FK  FOREIGN KEY (METHOD_RID) " +
//                //      "REFERENCES METHOD (METHOD_RID) ON UPDATE NO ACTION ON DELETE NO ACTION";
//                //_dba.ExecuteNonQuery(sql);
//                // End TT#1211

//                string insertIN = "INSERT INTO BULK_COLOR_RULE_LAYER " +
//                                  "(HDR_RID, HDR_BC_RID,LAYER_ID,METHOD_RID) " +
//                                  "SELECT HDR_RID, HDR_BC_RID,LAYER_ID,METHOD_RID  " +
//                                  "FROM #bulkcolorrulelayer";
//                _dba.ExecuteNonQuery(insertIN);

//                // Begin TT#1211 - JSmith - Database upgrade procedure times out
//                sql = "CREATE CLUSTERED INDEX BULK_COLOR_RULE_LAYER_IDX1 ON BULK_COLOR_RULE_LAYER (HDR_RID, HDR_BC_RID, LAYER_ID)";
//                _dba.ExecuteNonQuery(sql);

//                sql = "ALTER TABLE BULK_COLOR_RULE_LAYER ADD CONSTRAINT BULK_COLOR_RULE_LAYER_PK PRIMARY KEY (HDR_BC_RID, LAYER_ID)";
//                _dba.ExecuteNonQuery(sql);

//                // Add foreign key constraints to table  BULK_COLOR_RULE_LAYER 
//                sql = "ALTER TABLE BULK_COLOR_RULE_LAYER ADD CONSTRAINT HEADER_BULK_COLOR_RULE_LAYER_FK1 FOREIGN KEY (HDR_RID) " +
//                      "REFERENCES HEADER (HDR_RID) ON UPDATE NO ACTION ON DELETE NO ACTION";
//                _dba.ExecuteNonQuery(sql);

//                sql = "ALTER TABLE BULK_COLOR_RULE_LAYER ADD CONSTRAINT HDR_BC_BULK_COLOR_RULE_LAYER_FK1 FOREIGN KEY (HDR_BC_RID) " +
//                      "REFERENCES HEADER_BULK_COLOR (HDR_BC_RID) ON UPDATE NO ACTION ON DELETE NO ACTION";
//                _dba.ExecuteNonQuery(sql);

//                sql = "ALTER TABLE BULK_COLOR_RULE_LAYER ADD CONSTRAINT MTHD_BLK_CLR_RULE_LAYER_FK  FOREIGN KEY (METHOD_RID) " +
//                      "REFERENCES METHOD (METHOD_RID) ON UPDATE NO ACTION ON DELETE NO ACTION";
//                _dba.ExecuteNonQuery(sql);
//                // End TT#1211

//                sql = "CREATE TABLE #bulkcolorrule ( " +
//                      "HDR_RID int not null, HDR_BC_RID int not null, COLOR_CODE_RID int not null, " +
//                      "LAYER_ID int not null, ST_RID int not null, RULE_TYPE_ID int not null, UNITS int null)";
//                _dba.ExecuteNonQuery(sql);

//                insertIN = "INSERT INTO #bulkcolorrule " +
//                           "SELECT bcr.HDR_RID as HDR_RID, " + 
//                           "bcolor.HDR_BC_RID as HDR_BC_RID, " +
//                           "bcr.COLOR_CODE_RID as COLOR_CODE_RID, " +
//                           "bcr.LAYER_ID as LAYER_ID, " +
//                           "bcr.ST_RID as ST_RID, " +
//                           "bcr.RULE_TYPE_ID as RULE_TYPE_ID, " +
//                           "bcr.UNITS as UNITS  " +
//                           "FROM BULK_COLOR_RULE bcr, #bulkcolorrulelayer bcolor " +
//                           "WHERE bcr.HDR_RID = bcolor.HDR_RID AND " +
//                           "bcr.COLOR_CODE_RID = bcolor.COLOR_CODE_RID AND " +
//                           "bcr.LAYER_ID = bcolor.LAYER_ID";
//                _dba.ExecuteNonQuery(insertIN);

//                sql = "if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[BULK_COLOR_RULE]') " +
//                     "and OBJECTPROPERTY(id, N'IsUserTable') = 1) " +
//                     "drop table [dbo].[BULK_COLOR_RULE]";
//                _dba.ExecuteNonQuery(sql);

//                sql = "CREATE TABLE BULK_COLOR_RULE ( " +
//                          "HDR_RID int not null, " +
//                          "HDR_BC_RID int not null, " +
//                          "LAYER_ID int not null, " +
//                          "ST_RID  int not null, " +
//                          "RULE_TYPE_ID int not null, " +
//                          "UNITS int null)";
//                _dba.ExecuteNonQuery(sql);

//                // Begin TT#1211 - JSmith - Database upgrade procedure times out
//                //sql = "CREATE CLUSTERED INDEX BULK_COLOR_RULE_IDX1 ON BULK_COLOR_RULE (HDR_RID, HDR_BC_RID, LAYER_ID, ST_RID)";
//                //_dba.ExecuteNonQuery(sql);
                
//                //sql = "ALTER TABLE BULK_COLOR_RULE ADD CONSTRAINT BULK_COLOR_RULE_PK PRIMARY KEY (HDR_BC_RID, LAYER_ID, ST_RID)";
//                //_dba.ExecuteNonQuery(sql);
//                // End TT#1211

//                sql = "INSERT INTO BULK_COLOR_RULE " +
//                      "(HDR_RID, HDR_BC_RID,LAYER_ID,ST_RID,RULE_TYPE_ID,UNITS) " +
//                      "SELECT HDR_RID, HDR_BC_RID,LAYER_ID,ST_RID,RULE_TYPE_ID,UNITS FROM #bulkcolorrule";
//                _dba.ExecuteNonQuery(sql);

//                // Begin TT#1211 - JSmith - Database upgrade procedure times out
//                sql = "CREATE CLUSTERED INDEX BULK_COLOR_RULE_IDX1 ON BULK_COLOR_RULE (HDR_RID, HDR_BC_RID, LAYER_ID, ST_RID)";
//                _dba.ExecuteNonQuery(sql);

//                sql = "ALTER TABLE BULK_COLOR_RULE ADD CONSTRAINT BULK_COLOR_RULE_PK PRIMARY KEY (HDR_BC_RID, LAYER_ID, ST_RID)";
//                _dba.ExecuteNonQuery(sql);
//                // End TT#1211

//                sql = "drop table #bulkcolorrulelayer";
//                _dba.ExecuteNonQuery(sql);

//                sql = "drop table #bulkcolorrule";
//                _dba.ExecuteNonQuery(sql);

//                // Add foreign key constraints to table "BULK_COLOR_RULE".                                     
//                sql = "ALTER TABLE BULK_COLOR_RULE ADD CONSTRAINT HEADER_BULK_COLOR_RULE_FK1 FOREIGN KEY (HDR_RID) " +
//                      "REFERENCES HEADER (HDR_RID) ON UPDATE NO ACTION ON DELETE NO ACTION";
//                _dba.ExecuteNonQuery(sql);

//                sql = "ALTER TABLE BULK_COLOR_RULE ADD CONSTRAINT BLK_CLR_RL_LAY_BLK_CLR_RL_FK1 FOREIGN KEY (HDR_BC_RID,LAYER_ID) " +
//                      "REFERENCES BULK_COLOR_RULE_LAYER (HDR_BC_RID,LAYER_ID) ON UPDATE NO ACTION ON DELETE NO ACTION";
//                _dba.ExecuteNonQuery(sql);

//                sql = "ALTER TABLE BULK_COLOR_RULE ADD CONSTRAINT STORES_BULK_COLOR_RULE_FK1 FOREIGN KEY (ST_RID) " +
//                      "REFERENCES STORES (ST_RID) ON UPDATE NO ACTION ON DELETE NO ACTION";
//                _dba.ExecuteNonQuery(sql);
                
//                _dba.CommitData();

//            }
//            catch
//            {
//                throw;
//            }
//        }

//        private void ConvertBulkColorAllocation()
//        {
//            try
//            {
//                string sql;
//                sql = "CREATE TABLE #bulkcolorallocation ( " +
//                      "HDR_RID int not null, " + 
//                      "HDR_BC_RID int not null, " +
//                     // "HDR_RID int not null, " +
//                      "COLOR_CODE_RID int not null, " +
//                      "ST_RID int not null, " +
//                      "UNITS_ALLOCATED int null, " +
//                      "UNITS_SHIPPED int null, " +
//                      "UNITS_ALLOCATED_BY_AUTO int null, " +
//                      "UNITS_ALLOCATED_BY_RULE int null, " +
//                      "CHOSEN_RULE_TYPE_ID int null, " +
//                      "CHOSEN_RULE_LAYER_ID int null, " +
//                      "NEED_DAY smalldatetime null, " +
//                      "UNIT_NEED_BEFORE int null, " +
//                      "PERCENT_NEED_BEFORE float null, " +
//                      "MINIMUM int null, " +
//                      "MAXIMUM int null, " +
//                      "PRIMARY_MAX int null, " +
//                      "ALLOC_STORE_DET_AUDIT_FLAGS int null, " +
//                      "SHIPPING_STATUS_FLAGS int null, " +
//                      "CHOSEN_RULE_UNITS int null)";
//                _dba.ExecuteNonQuery(sql);

//                sql = "INSERT INTO #bulkcolorallocation  " +
//                      "SELECT bca.HDR_RID, bcolor.HDR_BC_RID, bca.COLOR_CODE_RID, bca.ST_RID, " +
//                      "bca.UNITS_ALLOCATED,	bca.UNITS_SHIPPED,	" +
//                      "bca.UNITS_ALLOCATED_BY_AUTO, bca.UNITS_ALLOCATED_BY_RULE, " +
//                      "bca.CHOSEN_RULE_TYPE_ID, bca.CHOSEN_RULE_LAYER_ID, " +
//                      "bca.NEED_DAY, bca.UNIT_NEED_BEFORE, bca.PERCENT_NEED_BEFORE, " +
//                      "bca.MINIMUM,	bca.MAXIMUM, bca.PRIMARY_MAX, bca.ALLOC_STORE_DET_AUDIT_FLAGS, " +
//                      "bca.SHIPPING_STATUS_FLAGS, bca.CHOSEN_RULE_UNITS " +
//                      "FROM BULK_COLOR_ALLOCATION bca, HEADER_BULK_COLOR bcolor " +
//                      "WHERE bcolor.HDR_RID = bca.HDR_RID AND " +
//                      "bcolor.COLOR_CODE_RID = bca.COLOR_CODE_RID";
//                _dba.ExecuteNonQuery(sql);


//                sql = "if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[BULK_COLOR_ALLOCATION]') " +
//                      "and OBJECTPROPERTY(id, N'IsUserTable') = 1) " +
//                      "drop table [dbo].[BULK_COLOR_ALLOCATION]";
//                _dba.ExecuteNonQuery(sql);

//                sql = "CREATE TABLE BULK_COLOR_ALLOCATION ( " +
//                      "HDR_RID int not null, " +
//                      "HDR_BC_RID int not null, " +
//                      "ST_RID int not null, " +
//                      "UNITS_ALLOCATED int null, " +
//                      "UNITS_SHIPPED int null, " +
//                      "UNITS_ALLOCATED_BY_AUTO int null, " +
//                      "UNITS_ALLOCATED_BY_RULE int null, " +
//                      "CHOSEN_RULE_TYPE_ID int null, " +
//                      "CHOSEN_RULE_LAYER_ID int null, " +
//                      "NEED_DAY smalldatetime null, " +
//                      "UNIT_NEED_BEFORE int null, " +
//                      "PERCENT_NEED_BEFORE float null, " +
//                      "MINIMUM int null, " +
//                      "MAXIMUM int null, " +
//                      "PRIMARY_MAX int null, " +
//                      "ALLOC_STORE_DET_AUDIT_FLAGS int null, " +
//                      "SHIPPING_STATUS_FLAGS int null, " +
//                      "CHOSEN_RULE_UNITS int null)";
//                _dba.ExecuteNonQuery(sql);

//                // Begin TT#1211 - JSmith - Database upgrade procedure times out
//                //sql = "CREATE CLUSTERED INDEX BULK_COLOR_ALLOCATION_IDX ON BULK_COLOR_ALLOCATION (HDR_RID, HDR_BC_RID, ST_RID)";
//                //_dba.ExecuteNonQuery(sql);

//                //sql = "ALTER TABLE BULK_COLOR_ALLOCATION ADD CONSTRAINT BULK_COLOR_ALLOCATION_PK PRIMARY KEY (HDR_BC_RID, ST_RID)";
//                //_dba.ExecuteNonQuery(sql);
//                // End TT#1211

//                string insertIN = "INSERT INTO BULK_COLOR_ALLOCATION " +
//                                  "(HDR_RID, HDR_BC_RID,ST_RID,UNITS_ALLOCATED,UNITS_SHIPPED,UNITS_ALLOCATED_BY_AUTO," +
//                                  "UNITS_ALLOCATED_BY_RULE,CHOSEN_RULE_TYPE_ID,CHOSEN_RULE_LAYER_ID," +
//                                  "NEED_DAY,UNIT_NEED_BEFORE,PERCENT_NEED_BEFORE,MINIMUM,MAXIMUM,PRIMARY_MAX," +
//                                  "ALLOC_STORE_DET_AUDIT_FLAGS,	SHIPPING_STATUS_FLAGS,CHOSEN_RULE_UNITS) " +
//                                  "SELECT HDR_RID, HDR_BC_RID,ST_RID,UNITS_ALLOCATED,UNITS_SHIPPED,UNITS_ALLOCATED_BY_AUTO," +
//                                  "UNITS_ALLOCATED_BY_RULE,CHOSEN_RULE_TYPE_ID,CHOSEN_RULE_LAYER_ID," +
//                                  "NEED_DAY,UNIT_NEED_BEFORE,PERCENT_NEED_BEFORE,MINIMUM,MAXIMUM,PRIMARY_MAX," +
//                                  "ALLOC_STORE_DET_AUDIT_FLAGS,SHIPPING_STATUS_FLAGS,CHOSEN_RULE_UNITS " +
//                                  "FROM #bulkcolorallocation";
//                _dba.ExecuteNonQuery(insertIN);

//                // Begin TT#1211 - JSmith - Database upgrade procedure times out
//                sql = "CREATE CLUSTERED INDEX BULK_COLOR_ALLOCATION_IDX ON BULK_COLOR_ALLOCATION (HDR_RID, HDR_BC_RID, ST_RID)";
//                _dba.ExecuteNonQuery(sql);

//                sql = "ALTER TABLE BULK_COLOR_ALLOCATION ADD CONSTRAINT BULK_COLOR_ALLOCATION_PK PRIMARY KEY (HDR_BC_RID, ST_RID)";
//                _dba.ExecuteNonQuery(sql);
//                // End TT#1211

//                sql = "drop table #bulkcolorallocation";
//                _dba.ExecuteNonQuery(sql);

//                // Add foreign key constraints to table "BULK_COLOR_ALLOCATION".                                     
//                sql = "ALTER TABLE BULK_COLOR_ALLOCATION ADD CONSTRAINT STORES_BC_ALOCTN_FK1 FOREIGN KEY (ST_RID) " +
//                      "REFERENCES STORES (ST_RID) ON UPDATE NO ACTION ON DELETE NO ACTION";
//                _dba.ExecuteNonQuery(sql);

//                sql = "ALTER TABLE BULK_COLOR_ALLOCATION ADD CONSTRAINT HDR_BC_BC_ALOCTN_FK1 FOREIGN KEY (HDR_BC_RID) " +
//                      "REFERENCES HEADER_BULK_COLOR (HDR_BC_RID) ON UPDATE NO ACTION ON DELETE NO ACTION";
//                _dba.ExecuteNonQuery(sql);

//                sql = "ALTER TABLE BULK_COLOR_ALLOCATION ADD CONSTRAINT HEADER_BC_ALOCTN_FK1 FOREIGN KEY (HDR_RID) " +
//                      "REFERENCES HEADER (HDR_RID) ON UPDATE NO ACTION ON DELETE NO ACTION";
//                _dba.ExecuteNonQuery(sql);
//                _dba.CommitData();

//            }
//            catch
//            {
//                throw;
//            }
//        }

//        private void ConvertBulkColorSize()
//        {
//            try
//            {   // does both HEADER_BULK_COLOR_SIZE & BULK_COLOR_SIZE_ALLOCATION
//                string sql;

//                sql = "SELECT bcsize.HDR_RID as HDR_RID, " +
//                        "bcolor.HDR_BC_RID as HDR_BC_RID, " +
//                        "bcsize.SEQ as SEQ, " +
//                        "bcsize.COLOR_CODE_RID as COLOR_CODE, " +
//                        "bcsize.SIZE_CODE_RID as SIZE_CODE_RID, " +
//                        "bcsize.UNITS as UNITS, " +
//                        "bcsize.MULTIPLE as MULTIPLE, " +
//                        "bcsize.MINIMUM as MINIMUM, " +
//                        "bcsize.MAXIMUM as MAXIMUM, " +
//                        "bcsize.RESERVE_UNITS as RESERVE_UNITS " +
//                        "FROM HEADER_BULK_COLOR_SIZE bcsize, HEADER_BULK_COLOR bcolor  " +
//                        "WHERE bcsize.HDR_RID = bcolor.HDR_RID AND " +
//                        "bcsize.COLOR_CODE_RID = bcolor.COLOR_CODE_RID " +
//                        "ORDER BY HDR_RID, HDR_BC_RID, SEQ, SIZE_CODE_RID";

//                DataTable dtBulkSize = _dba.ExecuteQuery(sql);

//                sql = "if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[COLOR_SIZE_ALLOCATION_BIN]') " +
//                "and OBJECTPROPERTY(id,N'IsUserTable') = 1) " +
//                "exec SP_MID_DROP_CONSTRAINTS 'COLOR_SIZE_ALLOCATION_BIN', 'FOREIGN KEY'";
//                _dba.ExecuteNonQuery(sql);

                
//                sql = "if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[BULK_COLOR_SIZE_ALLOCATION]') " +
//                      "and OBJECTPROPERTY(id, N'IsUserTable') = 1) " +
//                      "exec SP_MID_DROP_CONSTRAINTS 'BULK_COLOR_SIZE_ALLOCATION', 'FOREIGN KEY'";
//                _dba.ExecuteNonQuery(sql);

//                sql = "if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[HEADER_BULK_COLOR_SIZE]') " +
//                      "and OBJECTPROPERTY(id, N'IsUserTable') = 1) " +
//                      "drop table [dbo].[HEADER_BULK_COLOR_SIZE]";
//                _dba.ExecuteNonQuery(sql);

//                sql = "CREATE TABLE HEADER_BULK_COLOR_SIZE ( " +
//                      "HDR_RID int not null, " +
//                      "HDR_BC_RID int not null, " +
//                      "HDR_BCSZ_KEY int not null, " +
//                      "SIZE_CODE_RID int not null, " +
//                      "UNITS int not null, " +
//                      "MULTIPLE int not null, " +
//                      "MINIMUM int not null, " +
//                      "MAXIMUM int not null, " +
//                      "RESERVE_UNITS int null, " +
//                      "SEQ int null)";
//                _dba.ExecuteNonQuery(sql);

//                // Begin TT#1211 - JSmith - Database upgrade procedure times out
//                //sql = "CREATE CLUSTERED INDEX HEADER_BULK_COLOR_SIZE_IDX ON HEADER_BULK_COLOR_SIZE (HDR_RID, HDR_BC_RID, HDR_BCSZ_KEY)";
//                //_dba.ExecuteNonQuery(sql);

//                //sql = "ALTER TABLE HEADER_BULK_COLOR_SIZE ADD CONSTRAINT HEADER_BULK_COLOR_SIZE_PK PRIMARY KEY (HDR_BC_RID, HDR_BCSZ_KEY)";
//                //_dba.ExecuteNonQuery(sql);
//                // End TT#1211

//                int seq = 0, curBCRID = 0, lastSeq = 0;
//                for (int i = 0; i < dtBulkSize.Rows.Count; i++)
//                {
//                    DataRow row = dtBulkSize.Rows[i];

//                    seq = (int)row["SEQ"];
//                    if ((int)row["HDR_BC_RID"] != curBCRID)
//                    {
//                        curBCRID = (int)row["HDR_BC_RID"];
//                        lastSeq = seq;
//                    }
//                    else if (seq <= lastSeq)
//                    {
//                        lastSeq++;
//                        seq = lastSeq;
//                    }
//                    else
//                    {
//                        lastSeq = seq;
//                    }
//                    sql = "INSERT INTO HEADER_BULK_COLOR_SIZE " +
//                          "(HDR_RID, HDR_BC_RID, HDR_BCSZ_KEY, SIZE_CODE_RID, UNITS, MULTIPLE, MINIMUM, MAXIMUM, RESERVE_UNITS, SEQ) " +
//                          "VALUES (" +
//                          row["HDR_RID"] + "," +
//                          row["HDR_BC_RID"] + "," +
//                          seq.ToString() + "," +
//                          row["SIZE_CODE_RID"] + "," +
//                          row["UNITS"] + "," +
//                          row["MULTIPLE"] + "," +
//                          row["MINIMUM"] + "," +
//                          row["MAXIMUM"] + "," +
//                          row["RESERVE_UNITS"] + "," +
//                          seq.ToString() + ")";
//                    _dba.ExecuteNonQuery(sql);
//                }

//                // Begin TT#1211 - JSmith - Database upgrade procedure times out
//                sql = "CREATE CLUSTERED INDEX HEADER_BULK_COLOR_SIZE_IDX ON HEADER_BULK_COLOR_SIZE (HDR_RID, HDR_BC_RID, HDR_BCSZ_KEY)";
//                _dba.ExecuteNonQuery(sql);

//                sql = "ALTER TABLE HEADER_BULK_COLOR_SIZE ADD CONSTRAINT HEADER_BULK_COLOR_SIZE_PK PRIMARY KEY (HDR_BC_RID, HDR_BCSZ_KEY)";
//                _dba.ExecuteNonQuery(sql);
//                // End TT#1211

//                _dba.CommitData(); 


//                sql = "CREATE UNIQUE INDEX HEADER_BULK_COLOR_SIZE_AK1 ON HEADER_BULK_COLOR_SIZE (HDR_BC_RID,SIZE_CODE_RID)";
//                _dba.ExecuteNonQuery(sql);

//                sql = "ALTER TABLE HEADER_BULK_COLOR_SIZE ADD CONSTRAINT HEADER_BULK_COLOR_SIZE_AK1_UC1 UNIQUE (HDR_BC_RID,SIZE_CODE_RID)";
//                _dba.ExecuteNonQuery(sql);

//                sql = "CREATE TABLE #bulkcolorsizeallocation ( " +
//                       "HDR_RID int not null, " +
//                       "HDR_BC_RID int not null, " +
//                       "HDR_BCSZ_KEY int not null, " +
//                       "COLOR_CODE_RID int not null, " +
//                       "SIZE_CODE_RID int not null, " +
//                       "ST_RID int not null, " +
//                       "UNITS_ALLOCATED int null, " +
//                       "UNITS_SHIPPED int null, " +
//                       "UNITS_ALLOCATED_BY_AUTO int null, " +
//                       "MINIMUM int null, " +
//                       "MAXIMUM int null, " +
//                       "PRIMARY_MAX int null, " +
//                       "ALLOC_STORE_DET_AUDIT_FLAGS int null, " +
//                       "SHIPPING_STATUS_FLAGS int null) ";
//                _dba.ExecuteNonQuery(sql);

//                string insertIN = "INSERT INTO #bulkcolorsizeallocation " +
//                                  "(HDR_RID, HDR_BC_RID,HDR_BCSZ_KEY,COLOR_CODE_RID,SIZE_CODE_RID,ST_RID,UNITS_ALLOCATED," +
//                                  "UNITS_SHIPPED,UNITS_ALLOCATED_BY_AUTO,MINIMUM,MAXIMUM,PRIMARY_MAX," +
//                                  "ALLOC_STORE_DET_AUDIT_FLAGS,SHIPPING_STATUS_FLAGS) " +
//                                  "SELECT bcsa.HDR_RID, hbc.HDR_BC_RID, " +
//                                  "hbcs.HDR_BCSZ_KEY, " +
//                                  "bcsa.COLOR_CODE_RID, " +
//                                  "bcsa.SIZE_CODE_RID, " +
//                                  "bcsa.ST_RID, " +
//                                  "bcsa.UNITS_ALLOCATED, " +
//                                  "bcsa.UNITS_SHIPPED, " +
//                                  "bcsa.UNITS_ALLOCATED_BY_AUTO, " +
//                                  "bcsa.MINIMUM, " +
//                                  "bcsa.MAXIMUM, " +
//                                  "bcsa.PRIMARY_MAX, " +
//                                  "bcsa.ALLOC_STORE_DET_AUDIT_FLAGS, " +
//                                  "bcsa.SHIPPING_STATUS_FLAGS  " +
//                                  "FROM BULK_COLOR_SIZE_ALLOCATION bcsa, " +
//                                  "HEADER_BULK_COLOR_SIZE hbcs, " +
//                                  "HEADER_BULK_COLOR hbc " +
//                                  "WHERE hbcs.HDR_RID = bcsa.HDR_RID  " +
//                                  "  AND hbcs.HDR_RID = hbc.HDR_RID" +
//                                  "  AND bcsa.COLOR_CODE_RID = hbc.COLOR_CODE_RID" +
//                                  "  AND hbcs.HDR_BC_RID = hbc.HDR_BC_RID" +
//                                  "  AND hbcs.SIZE_CODE_RID  = bcsa.SIZE_CODE_RID";
//                _dba.ExecuteNonQuery(insertIN);

//                sql = "if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[BULK_COLOR_SIZE_ALLOCATION]') " +
//                     "and OBJECTPROPERTY(id, N'IsUserTable') = 1) " +
//                     "drop table [dbo].[BULK_COLOR_SIZE_ALLOCATION]";
//                _dba.ExecuteNonQuery(sql);

//                sql = "CREATE TABLE BULK_COLOR_SIZE_ALLOCATION ( " +
//                      "HDR_RID int not null, " +  
//                      "HDR_BC_RID int not null, " +
//                      "HDR_BCSZ_KEY int not null, " +
//                      "ST_RID int not null, " +
//                      "UNITS_ALLOCATED int null, " +
//                      "UNITS_SHIPPED int null, " +
//                      "UNITS_ALLOCATED_BY_AUTO int null, " +
//                      "MINIMUM int null, " +
//                      "MAXIMUM int null, " +
//                      "PRIMARY_MAX int null, " +
//                      "ALLOC_STORE_DET_AUDIT_FLAGS int null, " +
//                      "SHIPPING_STATUS_FLAGS int null) ";
//                _dba.ExecuteNonQuery(sql);

//                // Begin TT#1211 - JSmith - Database upgrade procedure times out
//                //sql = "CREATE CLUSTERED INDEX BULK_COLOR_SIZE_ALLOCATION_IDX1 ON BULK_COLOR_SIZE_ALLOCATION (HDR_RID, HDR_BC_RID, HDR_BCSZ_KEY, ST_RID)";
//                //_dba.ExecuteNonQuery(sql);

//                //sql = "ALTER TABLE BULK_COLOR_SIZE_ALLOCATION ADD CONSTRAINT BULK_COLOR_SIZE_ALLOCATION_PK PRIMARY KEY (HDR_BC_RID, HDR_BCSZ_KEY, ST_RID)";
//                //_dba.ExecuteNonQuery(sql);
//                // End TT#1211

//                sql = "INSERT INTO BULK_COLOR_SIZE_ALLOCATION " +
//                      "(HDR_RID, HDR_BC_RID,HDR_BCSZ_KEY,ST_RID,UNITS_ALLOCATED,UNITS_SHIPPED,UNITS_ALLOCATED_BY_AUTO," +
//                      "MINIMUM,MAXIMUM,PRIMARY_MAX,ALLOC_STORE_DET_AUDIT_FLAGS,SHIPPING_STATUS_FLAGS) " +
//                      "SELECT HDR_RID, HDR_BC_RID, HDR_BCSZ_KEY, ST_RID,UNITS_ALLOCATED,UNITS_SHIPPED,UNITS_ALLOCATED_BY_AUTO," +
//                      "MINIMUM,MAXIMUM,PRIMARY_MAX,ALLOC_STORE_DET_AUDIT_FLAGS,SHIPPING_STATUS_FLAGS " +
//                      "FROM #bulkcolorsizeallocation";
//                _dba.ExecuteNonQuery(sql);

//                // Begin TT#1211 - JSmith - Database upgrade procedure times out
//                sql = "CREATE CLUSTERED INDEX BULK_COLOR_SIZE_ALLOCATION_IDX1 ON BULK_COLOR_SIZE_ALLOCATION (HDR_RID, HDR_BC_RID, HDR_BCSZ_KEY, ST_RID)";
//                _dba.ExecuteNonQuery(sql);

//                sql = "ALTER TABLE BULK_COLOR_SIZE_ALLOCATION ADD CONSTRAINT BULK_COLOR_SIZE_ALLOCATION_PK PRIMARY KEY (HDR_BC_RID, HDR_BCSZ_KEY, ST_RID)";
//                _dba.ExecuteNonQuery(sql);
//                // End TT#1211

//                sql = "drop table #bulkcolorsizeallocation";
//                _dba.ExecuteNonQuery(sql);

//                // Add foreign key constraints to table HEADER_BULK_COLOR_SIZE                  
//                sql = "ALTER TABLE HEADER_BULK_COLOR_SIZE ADD CONSTRAINT SIZE_CODE_RCT_BULK_SIZE_FK1 FOREIGN KEY(SIZE_CODE_RID) " +
//                      " REFERENCES SIZE_CODE (SIZE_CODE_RID) ON UPDATE NO ACTION ON DELETE NO ACTION";
//                _dba.ExecuteNonQuery(sql);

//                sql = "ALTER TABLE HEADER_BULK_COLOR_SIZE ADD CONSTRAINT HDR_BLK_CLR_HDR_BLK_CLR_SZ_FK1 FOREIGN KEY(HDR_BC_RID) " +
//                     " REFERENCES HEADER_BULK_COLOR (HDR_BC_RID) ON UPDATE NO ACTION ON DELETE NO ACTION";
//                _dba.ExecuteNonQuery(sql);

//                sql = "ALTER TABLE HEADER_BULK_COLOR_SIZE ADD CONSTRAINT HEADER_HDR_BC_SZ FOREIGN KEY (HDR_RID) " +
//                      " REFERENCES HEADER (HDR_RID) ON UPDATE NO ACTION ON DELETE NO ACTION";
//                _dba.ExecuteNonQuery(sql);

//                // Add foreign key constraints to table BULK_COLOR_SIZE_ALLOCATION 
//                sql = "ALTER TABLE BULK_COLOR_SIZE_ALLOCATION ADD CONSTRAINT HDR_BLK_CL_SZ_BLK_CL_SZ_AL_FK1 FOREIGN KEY(HDR_BC_RID, HDR_BCSZ_KEY) " +
//                     " REFERENCES HEADER_BULK_COLOR_SIZE(HDR_BC_RID, HDR_BCSZ_KEY) ON UPDATE NO ACTION ON DELETE NO ACTION";
//                _dba.ExecuteNonQuery(sql);

//                sql = "ALTER TABLE BULK_COLOR_SIZE_ALLOCATION ADD CONSTRAINT STR_BULK_COLOR_SIZE_DIST_FK1 FOREIGN KEY(ST_RID) " +
//                     " REFERENCES STORES (ST_RID) ON UPDATE NO ACTION ON DELETE NO ACTION";
//                _dba.ExecuteNonQuery(sql);

//                sql = "ALTER TABLE BULK_COLOR_SIZE_ALLOCATION ADD CONSTRAINT HEADER_BLK_CL_SZ_AL__FK1 FOREIGN KEY(HDR_RID) " +
//                      " REFERENCES HEADER (HDR_RID) ON UPDATE NO ACTION ON DELETE NO ACTION";
//                _dba.ExecuteNonQuery(sql);

//                _dba.CommitData(); 

//            }
//            catch
//            {
//                throw;
//            }
//        }

//        private void ConvertColorAllocationBin()
//        {
//            try
//            {
//                string sql;
//                sql = "CREATE TABLE #colorallocationbin ( " +
//                      "HDR_RID int not null, " +
//                      "HDR_BC_RID int not null, " +
//                      "COLOR_CODE_RID int not null, " +
//                      "TYPE int not null, " +
//                      "SEQ int not null, " +
//                      "VERSION_NUMBER int null, " +
//                      "STATUS int null, " +
//                      "STORE_DATA image null, " +
//                      "DATA_OFFSET int null, " +
//                      "DATA_LENGTH int null)";
//                _dba.ExecuteNonQuery(sql);

//                sql = "INSERT INTO #colorallocationbin  " +
//                      "SELECT cab.HDR_RID, bcolor.HDR_BC_RID, cab.COLOR_CODE_RID, " +
//                      "cab.TYPE, cab.SEQ, cab.VERSION_NUMBER, cab.STATUS, " +
//                      "cab.STORE_DATA, cab.DATA_OFFSET, cab.DATA_LENGTH " +
//                      "FROM COLOR_ALLOCATION_BIN cab, HEADER_BULK_COLOR bcolor " +
//                      "WHERE bcolor.HDR_RID = cab.HDR_RID AND " +
//                      "bcolor.COLOR_CODE_RID = cab.COLOR_CODE_RID";
//                _dba.ExecuteNonQuery(sql);

//                sql = "UPDATE #colorallocationbin " +
//                      "SET VERSION_NUMBER = 1";
//                _dba.ExecuteNonQuery(sql);

//                sql = "if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[COLOR_ALLOCATION_BIN]') " +
//                      "and OBJECTPROPERTY(id, N'IsUserTable') = 1) " +
//                      "drop table [dbo].[COLOR_ALLOCATION_BIN]";
//                _dba.ExecuteNonQuery(sql);

//                sql = "CREATE TABLE COLOR_ALLOCATION_BIN ( " +
//                      "HDR_RID int not null, " +  
//                      "HDR_BC_RID int not null, " +
//                      "TYPE int not null, " +
//                      "SEQ int not null, " +
//                      "VERSION_NUMBER int null, " +
//                      "STATUS int null, " +
//                      "STORE_DATA image null, " +
//                      "DATA_OFFSET int null, " +
//                      "DATA_LENGTH int null)";
//                _dba.ExecuteNonQuery(sql);

//                // Begin TT#1211 - JSmith - Database upgrade procedure times out
//                //sql = "CREATE CLUSTERED INDEX COLOR_ALLOCATION_BIN_IDX1 ON COLOR_ALLOCATION_BIN (HDR_RID, HDR_BC_RID, TYPE, SEQ) ";
//                //_dba.ExecuteNonQuery(sql);

//                //sql = "ALTER TABLE COLOR_ALLOCATION_BIN ADD CONSTRAINT COLOR_ALLOCATION_BIN_PK PRIMARY KEY (HDR_BC_RID, TYPE, SEQ) ";
//                //_dba.ExecuteNonQuery(sql);
//                // End TT#1211

//                string insertIN = "INSERT INTO COLOR_ALLOCATION_BIN " +
//                                  "(HDR_RID, HDR_BC_RID, TYPE, SEQ, VERSION_NUMBER, STATUS, STORE_DATA, " +
//                                  "DATA_OFFSET, DATA_LENGTH) " +
//                                  "SELECT HDR_RID, HDR_BC_RID, TYPE, SEQ, VERSION_NUMBER, STATUS, STORE_DATA, " +
//                                  "DATA_OFFSET, DATA_LENGTH " +
//                                  "FROM #colorallocationbin";
//                _dba.ExecuteNonQuery(insertIN);

//                // Begin TT#1211 - JSmith - Database upgrade procedure times out
//                sql = "CREATE CLUSTERED INDEX COLOR_ALLOCATION_BIN_IDX1 ON COLOR_ALLOCATION_BIN (HDR_RID, HDR_BC_RID, TYPE, SEQ) ";
//                _dba.ExecuteNonQuery(sql);

//                sql = "ALTER TABLE COLOR_ALLOCATION_BIN ADD CONSTRAINT COLOR_ALLOCATION_BIN_PK PRIMARY KEY (HDR_BC_RID, TYPE, SEQ) ";
//                _dba.ExecuteNonQuery(sql);
//                // End TT#1211

//                sql = "drop table #colorallocationbin";
//                _dba.ExecuteNonQuery(sql);

//                // Add foreign key constraints to table "COLOR_ALLOCATION_BIN".                                     

//                sql = "ALTER TABLE COLOR_ALLOCATION_BIN ADD CONSTRAINT HEADER_BC_CLR_AL_BIN_FK1 FOREIGN KEY (HDR_BC_RID) " +
//                      "REFERENCES HEADER_BULK_COLOR (HDR_BC_RID) ON UPDATE NO ACTION ON DELETE NO ACTION";
//                _dba.ExecuteNonQuery(sql);

//                sql = "ALTER TABLE COLOR_ALLOCATION_BIN ADD CONSTRAINT HEADER_CLR_AL_BIN_FK1 FOREIGN KEY (HDR_RID) " +
//                      "REFERENCES HEADER (HDR_RID) ON UPDATE NO ACTION ON DELETE NO ACTION";
//                _dba.ExecuteNonQuery(sql);

//                _dba.CommitData(); 
//            }
//            catch
//            {
//                throw;
//            }
//        }

//        private void ConvertColorSizeAllocationBin()
//        {
//            try
//            {
//                string sql;
//                sql = "CREATE TABLE #colorsizeallocationbin ( " +
//                      "HDR_RID int not null, " +
//                      "HDR_BC_RID int not null, " +
//                      "HDR_BCSZ_KEY int not null, " +
//                      "COLOR_CODE_RID int not null, " +
//                      "SIZE_CODE_RID int not null, " +
//                      "TYPE int not null, " +
//                      "SEQ int not null, " +
//                      "VERSION_NUMBER int null, " +
//                      "STATUS int null, " +
//                      "STORE_DATA image null, " +
//                      "DATA_OFFSET int null, " +
//                      "DATA_LENGTH int null)";
//                _dba.ExecuteNonQuery(sql);

//                sql = "INSERT INTO #colorsizeallocationbin   " +
//                      "SELECT csab.HDR_RID, bcsize.HDR_BC_RID, bcsize.HDR_BCSZ_KEY, csab.COLOR_CODE_RID, " +
//                      "csab.SIZE_CODE_RID, csab.TYPE, csab.SEQ, csab.VERSION_NUMBER, csab.STATUS, " +
//                      "csab.STORE_DATA, csab.DATA_OFFSET, csab.DATA_LENGTH " +
//                      "FROM COLOR_SIZE_ALLOCATION_BIN csab, HEADER_BULK_COLOR_SIZE bcsize, " +
//                      "HEADER_BULK_COLOR bcolor " +
//                      "WHERE bcolor.HDR_RID = csab.HDR_RID AND " +
//                      "bcolor.COLOR_CODE_RID = csab.COLOR_CODE_RID AND " +
//                      "bcsize.HDR_BC_RID = bcolor.HDR_BC_RID AND " +
//                      "bcsize.SIZE_CODE_RID = csab.SIZE_CODE_RID";
//                _dba.ExecuteNonQuery(sql);

//                sql = "UPDATE #colorsizeallocationbin " +
//                      "SET VERSION_NUMBER = 1";
//                _dba.ExecuteNonQuery(sql);

//                sql = "if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[COLOR_SIZE_ALLOCATION_BIN]') " +
//                      "and OBJECTPROPERTY(id, N'IsUserTable') = 1) " +
//                      "drop table [dbo].[COLOR_SIZE_ALLOCATION_BIN]";
//                _dba.ExecuteNonQuery(sql);

//                sql = "CREATE TABLE COLOR_SIZE_ALLOCATION_BIN ( " +
//                      "HDR_RID int not null, " +
//                      "HDR_BC_RID int not null, " +
//                      "HDR_BCSZ_KEY int not null, " +
//                      "TYPE int not null, " +
//                      "SEQ int not null, " +
//                      "VERSION_NUMBER int null, " +
//                      "STATUS int null, " +
//                      "STORE_DATA image null, " +
//                      "DATA_OFFSET int null, " +
//                      "DATA_LENGTH int null)";
//                _dba.ExecuteNonQuery(sql);

//                // Begin TT#1211 - JSmith - Database upgrade procedure times out
//                //sql = "CREATE CLUSTERED INDEX COLOR_SIZE_ALLOCATION_BIN_IDX ON COLOR_SIZE_ALLOCATION_BIN (HDR_RID, HDR_BC_RID, HDR_BCSZ_KEY, TYPE, SEQ) ";
//                //_dba.ExecuteNonQuery(sql);

//                //sql = "ALTER TABLE COLOR_SIZE_ALLOCATION_BIN ADD CONSTRAINT COLOR_SIZE_ALLOCATION_BIN_PK PRIMARY KEY(HDR_BC_RID, HDR_BCSZ_KEY, TYPE, SEQ) ";
//                //_dba.ExecuteNonQuery(sql);
//                // End TT#1211

//                string insertIN = "INSERT INTO COLOR_SIZE_ALLOCATION_BIN " +
//                                  "(HDR_RID, HDR_BC_RID, HDR_BCSZ_KEY, TYPE, SEQ, VERSION_NUMBER, STATUS, STORE_DATA, " +
//                                  "DATA_OFFSET, DATA_LENGTH) " +
//                                  "SELECT HDR_RID, HDR_BC_RID, HDR_BCSZ_KEY, TYPE, SEQ, VERSION_NUMBER, STATUS, STORE_DATA, " +
//                                  "DATA_OFFSET, DATA_LENGTH " +
//                                  "FROM #colorsizeallocationbin";
//                _dba.ExecuteNonQuery(insertIN);

//                // Begin TT#1211 - JSmith - Database upgrade procedure times out
//                sql = "CREATE CLUSTERED INDEX COLOR_SIZE_ALLOCATION_BIN_IDX ON COLOR_SIZE_ALLOCATION_BIN (HDR_RID, HDR_BC_RID, HDR_BCSZ_KEY, TYPE, SEQ) ";
//                _dba.ExecuteNonQuery(sql);

//                sql = "ALTER TABLE COLOR_SIZE_ALLOCATION_BIN ADD CONSTRAINT COLOR_SIZE_ALLOCATION_BIN_PK PRIMARY KEY(HDR_BC_RID, HDR_BCSZ_KEY, TYPE, SEQ) ";
//                _dba.ExecuteNonQuery(sql);
//                // End TT#1211

//                sql = "drop table #colorsizeallocationbin";
//                _dba.ExecuteNonQuery(sql);

//                // Add foreign key constraints to table "COLOR_SIZE_ALLOCATION_BIN".                                     

//                sql = "ALTER TABLE COLOR_SIZE_ALLOCATION_BIN ADD CONSTRAINT HDR_BCS_CLR_SZ_AL_BIN_FK1 FOREIGN KEY (HDR_BC_RID, HDR_BCSZ_KEY) " +
//                      "REFERENCES HEADER_BULK_COLOR_SIZE (HDR_BC_RID, HDR_BCSZ_KEY) ON UPDATE NO ACTION ON DELETE NO ACTION";
//                _dba.ExecuteNonQuery(sql);

//                sql = "ALTER TABLE COLOR_SIZE_ALLOCATION_BIN ADD CONSTRAINT HEADER_BCS_CLR_SZ_AL_BIN_FK1 FOREIGN KEY (HDR_RID) " +
//                      "REFERENCES HEADER (HDR_RID) ON UPDATE NO ACTION ON DELETE NO ACTION";
//                _dba.ExecuteNonQuery(sql);

//                _dba.CommitData(); 

//            }
//            catch
//            {
//                throw;
//            }
//        }
//        private void AddPackColumn()
//        {
//            try
//            {
//                DataTable dtPack = _header.GetPacks();
//                dtPack.DefaultView.Sort = "HDR_RID,HDR_PACK_RID";

//                string sql = "IF .dbo.UDF_ColumnAlreadyExists('HEADER_PACK', 'SEQ') = 0 " +
//                             "ALTER TABLE HEADER_PACK ADD SEQ int null";
//                _dba.ExecuteNonQuery(sql);

//                int seq = 0, curHdrRID = 0, packRID;
//                for (int i = 0; i < dtPack.Rows.Count; i++)
//                {
//                    DataRowView drv = dtPack.DefaultView[i];
//                    if ((int)drv["HDR_RID"] != curHdrRID)
//                    {
//                        curHdrRID = (int)drv["HDR_RID"];
//                        seq = 0;
//                    }
//                    seq++;
//                    packRID = (int)drv["HDR_PACK_RID"];
//                    string updateSQL = "UPDATE HEADER_PACK SET SEQ = " + seq.ToString() +
//                        " WHERE HDR_PACK_RID = " + packRID.ToString();

//                    _dba.ExecuteNonQuery(updateSQL);
//                }

//                _dba.CommitData();  // Need to commit changes for some reason; next method locked up
//            }
//            catch
//            {
//                throw;
//            }
//        }

//        private void ConvertPackColor()
//        {
//            try
//            {
//                DataTable dtPackColor = _header.GetPackColors();
//                string sql;

//                sql = "if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[HEADER_PACK_COLOR_SIZE]') " +
//                             "and OBJECTPROPERTY(id,N'IsUserTable') = 1) " +
//                             "exec SP_MID_DROP_CONSTRAINTS 'HEADER_PACK_COLOR_SIZE', 'FOREIGN KEY'";
//                _dba.ExecuteNonQuery(sql);

//                sql = "if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[HEADER_PACK_COLOR]') " +
//                      "and OBJECTPROPERTY(id,N'IsUserTable') = 1) " +
//                      "exec SP_MID_DROP_CONSTRAINTS 'HEADER_PACK_COLOR', 'FOREIGN KEY'";
//                _dba.ExecuteNonQuery(sql);

//                sql = "if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[HEADER_PACK_COLOR]') " +
//                      "and OBJECTPROPERTY(id,N'IsUserTable') = 1) " +
//                      "DROP TABLE [dbo].[HEADER_PACK_COLOR]";
//                _dba.ExecuteNonQuery(sql);

//                sql = "CREATE TABLE HEADER_PACK_COLOR ( " +
//                           "HDR_PACK_RID int not null, " +
//                           "HDR_PC_RID int identity(100,1) not null, " +
//                           "COLOR_CODE_RID  int not null, " +
//                           "UNITS int not null, " +
//                           "SEQ  int null, " +
//                           "NAME  varchar(50) null, " +
//                           "DESCRIPTION  varchar(100) null, " +
//                           "LAST_PCSZ_KEY_USED int default 0)";
//                _dba.ExecuteNonQuery(sql);

//                // Begin TT#1211 - JSmith - Database upgrade procedure times out
//                //sql = "CREATE CLUSTERED INDEX HEADER_PACK_COLOR_IDX1 ON HEADER_PACK_COLOR  (HDR_PACK_RID, HDR_PC_RID) ";
//                //_dba.ExecuteNonQuery(sql);

//                //sql = "ALTER TABLE HEADER_PACK_COLOR ADD CONSTRAINT HEADER_PACK_COLOR_PK PRIMARY KEY (HDR_PC_RID)";
//                //_dba.ExecuteNonQuery(sql);
//                // End TT#1211

//                string insertIN = "INSERT INTO HEADER_PACK_COLOR " +
//                                  "(HDR_PACK_RID,COLOR_CODE_RID,UNITS,SEQ,LAST_PCSZ_KEY_USED)";

//                int seq = 0, curPackRID = 0;
//                int last_PCSZ_KEY_USED;
//                MIDDbParameter[] inParams = new MIDDbParameter[2];
//                int thisHdrPackRID;
//                int colorRID;

//                for (int i = 0; i < dtPackColor.Rows.Count; i++)
//                {
//                    DataRow row = dtPackColor.Rows[i];
//                    thisHdrPackRID = (int)row["HDR_PACK_RID"];
//                    if (thisHdrPackRID != curPackRID)
//                    {
//                        curPackRID = thisHdrPackRID;
//                        seq = 0;
//                    }
//                    seq++;
//                    row["SEQ"] = seq;

//                    colorRID = (int)row["COLOR_CODE_RID"];
//                    string SQLCommand = "select SIZE_CODE_RID from HEADER_PACK_COLOR_SIZE where HDR_PACK_RID = "
//                                        + curPackRID.ToString()
//                                        + " and COLOR_CODE_RID = "
//                                        + colorRID.ToString();
//                    //last_PCSZ_KEY_USED = (_dba.ExecuteQuery(SQLCommand, "LAST_PCSZ_KEY")).Rows.Count;
//                    last_PCSZ_KEY_USED = 0;


//                    string values = " VALUES ( "
//                                    + curPackRID.ToString() + ", "
//                                    + colorRID.ToString() + ", "
//                                    + row["UNITS"].ToString() + ", "
//                                    + row["SEQ"].ToString() + ", "
//                                    + last_PCSZ_KEY_USED.ToString() + " )";

//                    _dba.ExecuteNonQuery(insertIN + values);
//                }

//                // Begin TT#1211 - JSmith - Database upgrade procedure times out
//                sql = "CREATE CLUSTERED INDEX HEADER_PACK_COLOR_IDX1 ON HEADER_PACK_COLOR  (HDR_PACK_RID, HDR_PC_RID) ";
//                _dba.ExecuteNonQuery(sql);

//                sql = "ALTER TABLE HEADER_PACK_COLOR ADD CONSTRAINT HEADER_PACK_COLOR_PK PRIMARY KEY (HDR_PC_RID)";
//                _dba.ExecuteNonQuery(sql);
//                // End TT#1211

//                sql = "ALTER TABLE HEADER_PACK_COLOR ADD CONSTRAINT HP_COLOR_FK1 FOREIGN KEY (HDR_PACK_RID) " +
//                      "REFERENCES HEADER_PACK (HDR_PACK_RID) ON UPDATE NO ACTION ON DELETE NO ACTION";
//                _dba.ExecuteNonQuery(sql);

//                sql = "ALTER TABLE HEADER_PACK_COLOR ADD CONSTRAINT CCH_PACK_COLOR_FK1 FOREIGN KEY (COLOR_CODE_RID) " +
//                    "REFERENCES COLOR_CODE (COLOR_CODE_RID) ON UPDATE NO ACTION ON DELETE NO ACTION";
//                _dba.ExecuteNonQuery(sql);

//                _dba.CommitData();

//                for (int i = 0; i < dtPackColor.Rows.Count; i++)
//                {
//                    DataRow row = dtPackColor.Rows[i];
//                    thisHdrPackRID = (int)row["HDR_PACK_RID"];
//                    if (thisHdrPackRID != curPackRID)
//                    {
//                        curPackRID = thisHdrPackRID;
//                        seq = 0;
//                    }
//                    seq++;
//                    row["SEQ"] = seq;

//                    colorRID = (int)row["COLOR_CODE_RID"];

//                    string SQLCommand = "select SIZE_CODE_RID from HEADER_PACK_COLOR_SIZE (nolock) where HDR_PACK_RID = "
//                                        + curPackRID.ToString()
//                                        + " and COLOR_CODE_RID = "
//                                        + colorRID.ToString();
//                    last_PCSZ_KEY_USED = (_dba.ExecuteQuery(SQLCommand)).Rows.Count;

//                    SQLCommand = "update HEADER_PACK_COLOR with (rowlock) set LAST_PCSZ_KEY_USED = "
//                                        + last_PCSZ_KEY_USED.ToString() 
//                                        + " where HDR_PACK_RID = "
//                                        + curPackRID.ToString()
//                                        + " and COLOR_CODE_RID = "
//                                        + colorRID.ToString();

//                    _dba.ExecuteNonQuery(SQLCommand);
//                }

//                _dba.CommitData();
//            }
//            catch
//            {
//                throw;
//            }
//        }

//        private void ConvertPackColorSize()
//        {
//            try
//            {
//                string sql = "SELECT pcolor.HDR_PC_RID, " +
//                             "pcsize.HDR_PACK_RID, " +
//                             "pcsize.COLOR_CODE_RID, " +
//                             "pcsize.SIZE_CODE_RID, " +
//                             "pcsize.UNITS, " +
//                             "pcsize.SEQ " +
//                             "FROM HEADER_PACK_COLOR_SIZE pcsize, " +
//                             "HEADER_PACK_COLOR pcolor  " +
//                             "WHERE pcsize.HDR_PACK_RID = pcolor.HDR_PACK_RID  " +
//                             "AND pcsize.COLOR_CODE_RID = pcolor.COLOR_CODE_RID  " +
//                             "ORDER BY pcsize.HDR_PACK_RID, pcsize.COLOR_CODE_RID, pcsize.SEQ";
//                DataTable dtPackColorSize = _dba.ExecuteQuery(sql);

//                sql = "if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[HEADER_PACK_COLOR_SIZE]') " +
//                      "and OBJECTPROPERTY(id,N'IsUserTable') = 1) " +
//                      "DROP TABLE [dbo].[HEADER_PACK_COLOR_SIZE]";
//                _dba.ExecuteNonQuery(sql);

//                sql = "CREATE TABLE HEADER_PACK_COLOR_SIZE ( " +
//                           "HDR_PACK_RID int not null, " +
//                           "HDR_PC_RID int not null, " +
//                           "HDR_PCSZ_KEY  int not null, " +
//                           "SIZE_CODE_RID int not null, " +
//                           "SEQ  int not null, " +
//                           "UNITS int not null)";
//                _dba.ExecuteNonQuery(sql);

//                // Begin TT#1211 - JSmith - Database upgrade procedure times out
//                //sql = "CREATE CLUSTERED INDEX HEADER_PACK_COLOR_SIZE_IDX1 ON HEADER_PACK_COLOR_SIZE (HDR_PACK_RID, HDR_PC_RID, HDR_PCSZ_KEY) ";
//                //_dba.ExecuteNonQuery(sql);

//                //sql = "ALTER TABLE HEADER_PACK_COLOR_SIZE ADD CONSTRAINT HEADER_PACK_COLOR_SIZE_PK PRIMARY KEY (HDR_PC_RID, HDR_PCSZ_KEY)";
//                //_dba.ExecuteNonQuery(sql);
//                // End TT#1211

//                string insertIN = "INSERT INTO HEADER_PACK_COLOR_SIZE " +
//                                  "(HDR_PACK_RID,HDR_PC_RID,HDR_PCSZ_KEY,SIZE_CODE_RID,UNITS,SEQ)";

//                int seq = 0, curPackRID = 0, curColorRID = 0;
//                for (int i = 0; i < dtPackColorSize.Rows.Count; i++)
//                {
//                    DataRow row = dtPackColorSize.Rows[i];

//                    if ((int)row["HDR_PACK_RID"] != curPackRID)
//                    {
//                        curPackRID = (int)row["HDR_PACK_RID"];
//                        curColorRID = (int)row["COLOR_CODE_RID"];
//                        seq = 0;
//                    }
//                    else if ((int)row["COLOR_CODE_RID"] != curColorRID)
//                    {
//                        curColorRID = (int)row["COLOR_CODE_RID"];
//                        seq = 0;
//                    }
//                    seq++;
//                    string values = " VALUES ( "
//                                    + row["HDR_PACK_RID"].ToString() + ", "
//                                    + row["HDR_PC_RID"].ToString() + ", "
//                                    + seq.ToString() + ", "
//                                    + row["SIZE_CODE_RID"].ToString() + ", "
//                                    + row["UNITS"].ToString() + "," 
//                                    + seq.ToString() + " )";

//                    _dba.ExecuteNonQuery(insertIN + values);
//                }

//                // Begin TT#1211 - JSmith - Database upgrade procedure times out
//                sql = "CREATE CLUSTERED INDEX HEADER_PACK_COLOR_SIZE_IDX1 ON HEADER_PACK_COLOR_SIZE (HDR_PACK_RID, HDR_PC_RID, HDR_PCSZ_KEY) ";
//                _dba.ExecuteNonQuery(sql);

//                sql = "ALTER TABLE HEADER_PACK_COLOR_SIZE ADD CONSTRAINT HEADER_PACK_COLOR_SIZE_PK PRIMARY KEY (HDR_PC_RID, HDR_PCSZ_KEY)";
//                _dba.ExecuteNonQuery(sql);
//                // End TT#1211

//                sql = "ALTER TABLE HEADER_PACK_COLOR_SIZE ADD CONSTRAINT SIZE_CODE_RCT_PACK_SIZE_FK1 FOREIGN KEY (SIZE_CODE_RID) " +
//                      "REFERENCES SIZE_CODE (SIZE_CODE_RID) ON UPDATE NO ACTION ON DELETE NO ACTION";
//                _dba.ExecuteNonQuery(sql);

//                sql = "ALTER TABLE HEADER_PACK_COLOR_SIZE ADD CONSTRAINT HPC_PACK_COLOR_SIZE_FK1 FOREIGN KEY (HDR_PC_RID) " +
//                      "REFERENCES HEADER_PACK_COLOR (HDR_PC_RID) ON UPDATE NO ACTION ON DELETE NO ACTION";
//                _dba.ExecuteNonQuery(sql);
                
//                sql = "ALTER TABLE HEADER_PACK_COLOR_SIZE ADD CONSTRAINT HP_PACK_COLOR_SIZE_FK1 FOREIGN KEY (HDR_PACK_RID) " +
//                      "REFERENCES HEADER_PACK (HDR_PACK_RID) ON UPDATE NO ACTION ON DELETE NO ACTION";
//                _dba.ExecuteNonQuery(sql);
//            }
//            catch
//            {
//                throw;
//            }
//        }

//        private void ConvertPackAllocation()
//        {
//            // Converts both PackAllocatin and PackAllocationBIN
//            try
//            {
//                // Convert PackAllocation
//                string sql =
//                 "CREATE table #packallocation ( " +
//                 "HDR_RID int not null, " +
//                 "HDR_PACK_RID int not null, " +
//                 "ST_RID int not null, " +
//                 "PACKS_ALLOCATED int null, " +
//                 "PACKS_SHIPPED int null, " +
//                 "PACKS_ALLOCATED_BY_AUTO  int null, " +
//                 "PACKS_ALLOCATED_BY_RULE  int null, " +
//                 "CHOSEN_RULE_TYPE_ID int null, " +
//                 "CHOSEN_RULE_LAYER_ID int null, " +
//                 "NEED_DAY smalldatetime null, " +
//                 "UNIT_NEED_BEFORE int null, " +
//                 "PERCENT_NEED_BEFORE float null, " +
//                 "MINIMUM  int null, " +
//                 "MAXIMUM int null, " +
//                 "PRIMARY_MAX int null, " +
//                 "ALLOC_STORE_DET_AUDIT_FLAGS int null, " +
//                 "SHIPPING_STATUS_FLAGS int null, " +
//                 "CHOSEN_RULE_PACKS int null) ";
//                _dba.ExecuteNonQuery(sql);

//                sql = "INSERT INTO #packallocation  " +
//                      "SELECT hpack.HDR_RID, pa.HDR_PACK_RID, pa.ST_RID, " +
//                      "pa.PACKS_ALLOCATED,	pa.PACKS_SHIPPED,	" +
//                      "pa.PACKS_ALLOCATED_BY_AUTO, pa.PACKS_ALLOCATED_BY_RULE, " +
//                      "pa.CHOSEN_RULE_TYPE_ID, pa.CHOSEN_RULE_LAYER_ID, " +
//                      "pa.NEED_DAY, pa.UNIT_NEED_BEFORE, pa.PERCENT_NEED_BEFORE, " +
//                      "pa.MINIMUM,	pa.MAXIMUM, pa.PRIMARY_MAX, pa.ALLOC_STORE_DET_AUDIT_FLAGS, " +
//                      "pa.SHIPPING_STATUS_FLAGS, pa.CHOSEN_RULE_PACKS " +
//                      "FROM PACK_ALLOCATION pa, HEADER_PACK hpack " +
//                      "WHERE pa.HDR_PACK_RID = hpack.HDR_PACK_RID ";
//                _dba.ExecuteNonQuery(sql);

//                sql = "if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[PACK_ALLOCATION]') " +
//                      "and OBJECTPROPERTY(id,N'IsUserTable') = 1) " +
//                      "DROP TABLE [dbo].[PACK_ALLOCATION]";
//                _dba.ExecuteNonQuery(sql);

//                sql = "CREATE table PACK_ALLOCATION ( " +
//                                 "HDR_RID int not null, " +
//                                 "HDR_PACK_RID int not null, " +
//                                 "ST_RID int not null, " +
//                                 "PACKS_ALLOCATED int null, " +
//                                 "PACKS_SHIPPED int null, " +
//                                 "PACKS_ALLOCATED_BY_AUTO  int null, " +
//                                 "PACKS_ALLOCATED_BY_RULE  int null, " +
//                                 "CHOSEN_RULE_TYPE_ID int null, " +
//                                 "CHOSEN_RULE_LAYER_ID int null, " +
//                                 "NEED_DAY smalldatetime null, " +
//                                 "UNIT_NEED_BEFORE int null, " +
//                                 "PERCENT_NEED_BEFORE float null, " +
//                                 "MINIMUM  int null, " +
//                                 "MAXIMUM int null, " +
//                                 "PRIMARY_MAX int null, " +
//                                 "ALLOC_STORE_DET_AUDIT_FLAGS int null, " +
//                                 "SHIPPING_STATUS_FLAGS int null, " +
//                                 "CHOSEN_RULE_PACKS int null) ";
//                _dba.ExecuteNonQuery(sql);

//                // Begin TT#1211 - JSmith - Database upgrade procedure times out
//                //sql = "CREATE CLUSTERED INDEX PACK_ALLOCATION_IDX1 ON PACK_ALLOCATION (HDR_RID, HDR_PACK_RID, ST_RID) ";
//                //_dba.ExecuteNonQuery(sql);
//                // End TT#1211

//                string insertIN = "INSERT INTO PACK_ALLOCATION " +
//                                  "(HDR_RID, HDR_PACK_RID,ST_RID,PACKS_ALLOCATED,PACKS_SHIPPED,PACKS_ALLOCATED_BY_AUTO," +
//                                  "PACKS_ALLOCATED_BY_RULE,CHOSEN_RULE_TYPE_ID,CHOSEN_RULE_LAYER_ID," +
//                                  "NEED_DAY,UNIT_NEED_BEFORE,PERCENT_NEED_BEFORE,MINIMUM,MAXIMUM,PRIMARY_MAX," +
//                                  "ALLOC_STORE_DET_AUDIT_FLAGS,	SHIPPING_STATUS_FLAGS,CHOSEN_RULE_PACKS) " +
//                                  "SELECT HDR_RID, HDR_PACK_RID,ST_RID,PACKS_ALLOCATED,PACKS_SHIPPED,PACKS_ALLOCATED_BY_AUTO," +
//                                  "PACKS_ALLOCATED_BY_RULE,CHOSEN_RULE_TYPE_ID,CHOSEN_RULE_LAYER_ID," +
//                                  "NEED_DAY,UNIT_NEED_BEFORE,PERCENT_NEED_BEFORE,MINIMUM,MAXIMUM,PRIMARY_MAX," +
//                                  "ALLOC_STORE_DET_AUDIT_FLAGS,SHIPPING_STATUS_FLAGS,CHOSEN_RULE_PACKS " +
//                                  "FROM #packallocation";
//                _dba.ExecuteNonQuery(insertIN);

//                // Begin TT#1211 - JSmith - Database upgrade procedure times out
//                sql = "CREATE CLUSTERED INDEX PACK_ALLOCATION_IDX1 ON PACK_ALLOCATION (HDR_RID, HDR_PACK_RID, ST_RID) ";
//                _dba.ExecuteNonQuery(sql);
//                // End TT#1211

//                sql = "drop table #packallocation";
//                _dba.ExecuteNonQuery(sql);

//                sql = "ALTER TABLE PACK_ALLOCATION ADD CONSTRAINT PACK_ALLOCATION_PK PRIMARY KEY (HDR_PACK_RID, ST_RID)";
//                _dba.ExecuteNonQuery(sql);

//                sql = "ALTER TABLE PACK_ALLOCATION ADD CONSTRAINT STR_PACK_ALLOCATION_FK1 FOREIGN KEY(ST_RID) " +
//                     " REFERENCES STORES (ST_RID) ON UPDATE NO ACTION ON DELETE NO ACTION";
//                _dba.ExecuteNonQuery(sql);

//                sql = "ALTER TABLE PACK_ALLOCATION ADD CONSTRAINT HDR_PACK_ALLOCATION_FK1 FOREIGN KEY (HDR_RID) " +
//                      "REFERENCES HEADER (HDR_RID) ON UPDATE NO ACTION ON DELETE NO ACTION";
//                _dba.ExecuteNonQuery(sql);

//                sql = "ALTER TABLE PACK_ALLOCATION ADD CONSTRAINT HP_PACK_ALLOCATION_FK1 FOREIGN KEY (HDR_PACK_RID) " +
//                      "REFERENCES HEADER_PACK (HDR_PACK_RID) ON UPDATE NO ACTION ON DELETE NO ACTION";
//                _dba.ExecuteNonQuery(sql);

//                _dba.CommitData();

//                // Convert PackAllocationBIN

//                sql = "CREATE TABLE #packallocationbin ( " +
//                      "HDR_RID int not null, " +
//                      "HDR_PACK_RID int not null, " +
//                      "TYPE int not null, " +
//                      "SEQ int not null, " +
//                      "VERSION_NUMBER int null, " +
//                      "STATUS int null, " +
//                      "STORE_DATA image null, " +
//                      "DATA_OFFSET int null, " +
//                      "DATA_LENGTH int null)";
//                _dba.ExecuteNonQuery(sql);

//                sql = "INSERT INTO #packallocationbin  " +
//                      "SELECT hpack.HDR_RID, pab.HDR_PACK_RID, " +
//                      "pab.TYPE, pab.SEQ, pab.VERSION_NUMBER, pab.STATUS, " +
//                      "pab.STORE_DATA, pab.DATA_OFFSET, pab.DATA_LENGTH " +
//                      "FROM PACK_ALLOCATION_BIN pab, HEADER_PACK hpack " +
//                      "WHERE hpack.HDR_PACK_RID = pab.HDR_PACK_RID ";
//                _dba.ExecuteNonQuery(sql);

//                sql = "UPDATE #packallocationbin " +
//                      "SET VERSION_NUMBER = 1";
//                _dba.ExecuteNonQuery(sql);

//                sql = "if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[PACK_ALLOCATION_BIN]') " +
//                      "and OBJECTPROPERTY(id, N'IsUserTable') = 1) " +
//                      "drop table [dbo].[PACK_ALLOCATION_BIN]";
//                _dba.ExecuteNonQuery(sql);

//                sql = "CREATE TABLE PACK_ALLOCATION_BIN ( " +
//                      "HDR_RID int not null, " +
//                      "HDR_PACK_RID int not null, " +
//                      "TYPE int not null, " +
//                      "SEQ int not null, " +
//                      "VERSION_NUMBER int null, " +
//                      "STATUS int null, " +
//                      "STORE_DATA image null, " +
//                      "DATA_OFFSET int null, " +
//                      "DATA_LENGTH int null)";
//                _dba.ExecuteNonQuery(sql);

//                // Begin TT#1211 - JSmith - Database upgrade procedure times out
//                //sql = "CREATE CLUSTERED INDEX PACK_ALLOCATION_BIN_IDX1 ON PACK_ALLOCATION_BIN (HDR_RID, HDR_PACK_RID, TYPE, SEQ) ";
//                //_dba.ExecuteNonQuery(sql);

//                //sql = "ALTER TABLE PACK_ALLOCATION_BIN ADD CONSTRAINT PACK_ALLOCATION_BIN_PK PRIMARY KEY (HDR_PACK_RID, TYPE, SEQ) ";
//                //_dba.ExecuteNonQuery(sql);
//                // End TT#1211

//                insertIN = "INSERT INTO PACK_ALLOCATION_BIN " +
//                                  "(HDR_RID, HDR_PACK_RID, TYPE, SEQ, VERSION_NUMBER, STATUS, STORE_DATA, " +
//                                  "DATA_OFFSET, DATA_LENGTH) " +
//                                  "SELECT HDR_RID, HDR_PACK_RID, TYPE, SEQ, VERSION_NUMBER, STATUS, STORE_DATA, " +
//                                  "DATA_OFFSET, DATA_LENGTH " +
//                                  "FROM #packallocationbin";
//                _dba.ExecuteNonQuery(insertIN);

//                // Begin TT#1211 - JSmith - Database upgrade procedure times out
//                sql = "CREATE CLUSTERED INDEX PACK_ALLOCATION_BIN_IDX1 ON PACK_ALLOCATION_BIN (HDR_RID, HDR_PACK_RID, TYPE, SEQ) ";
//                _dba.ExecuteNonQuery(sql);

//                sql = "ALTER TABLE PACK_ALLOCATION_BIN ADD CONSTRAINT PACK_ALLOCATION_BIN_PK PRIMARY KEY (HDR_PACK_RID, TYPE, SEQ) ";
//                _dba.ExecuteNonQuery(sql);
//                // End TT#1211

//                sql = "drop table #packallocationbin";
//                _dba.ExecuteNonQuery(sql);

//                // Add foreign key constraints to table "PACK_ALLOCATION_BIN".                                     

//                sql = "ALTER TABLE PACK_ALLOCATION_BIN ADD CONSTRAINT HP_PACK_AL_BIN_FK1 FOREIGN KEY (HDR_PACK_RID) " +
//                      "REFERENCES HEADER_PACK (HDR_PACK_RID) ON UPDATE NO ACTION ON DELETE NO ACTION";
//                _dba.ExecuteNonQuery(sql);

//                sql = "ALTER TABLE PACK_ALLOCATION_BIN ADD CONSTRAINT HDR_PACK_AL_BIN_FK1 FOREIGN KEY (HDR_RID) " +
//                      "REFERENCES HEADER (HDR_RID) ON UPDATE NO ACTION ON DELETE NO ACTION";
//                _dba.ExecuteNonQuery(sql);

//                _dba.CommitData();

//            }
//            catch
//            {
//                throw;
//            }
//        }

//        private void ConvertMethodRule()
//        {
//            try
//            {
//                string sql = "CREATE TABLE #methodrule ( " +
//                             "METHOD_RID int, " +
//                             "STORE_FILTER_RID int, " +
//                             "HDR_RID  int, " +
//                             "STORE_ORDER int, " +
//                             "HEADER_COMPONENT int," +
//                             "HDR_PACK_RID int," +
//                             "INCLUDED_STORES int," +
//                             "INCLUDED_QUANTITY int," +
//                             "EXCLUDED_STORES int," +
//                             "EXCLUDED_QUANTITY int," +
//                             "SGL_RID int," +
//                             "IS_HEADER_MASTER char(1)," +
//                             "COLOR_CODE_RID int," +
//                             "HDR_BC_RID int) ";
//                _dba.ExecuteNonQuery(sql);

//                sql = "INSERT INTO #methodrule " +
//                         "SELECT mRule.METHOD_RID, " +
//                         "mRule.STORE_FILTER_RID, " +
//                         "mRule.HDR_RID, " +
//                         "mRule.STORE_ORDER, " +
//                         "mRule.HEADER_COMPONENT, " +
//                         "mRule.HDR_PACK_RID, " +
//                         "mRule.INCLUDED_STORES, " +
//                         "mRule.INCLUDED_QUANTITY, " +
//                         "mRule.EXCLUDED_STORES, " +
//                         "mRule.EXCLUDED_QUANTITY, " +
//                         "mRule.SGL_RID, " +
//                         "mRule.IS_HEADER_MASTER, " +
//                         "mRule.COLOR_CODE_RID, " +
//                         "hbc.HDR_BC_RID  " +
//                         "FROM METHOD_RULE mRule LEFT OUTER JOIN HEADER_BULK_COLOR hbc " +
//                         "	ON (mRule.HDR_RID = hbc.HDR_RID " +
//                         " AND mRule.COLOR_CODE_RID = hbc.COLOR_CODE_RID)";
//                _dba.ExecuteNonQuery(sql);

//                sql = "if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[METHOD_RULE]') " +
//                      "and OBJECTPROPERTY(id,N'IsUserTable') = 1) " +
//                      "DROP TABLE [dbo].[METHOD_RULE]";
//                _dba.ExecuteNonQuery(sql);

//                sql = "CREATE TABLE METHOD_RULE ( " +
//                            "METHOD_RID int not null, " +
//                            "STORE_FILTER_RID int null, " +
//                            "HDR_RID int null, " +
//                            "STORE_ORDER int null, " +
//                            "HEADER_COMPONENT int null, " +
//                            "HDR_PACK_RID int null, " +
//                            "HDR_BC_RID int null, " +
//                            "INCLUDED_STORES int null, " +
//                            "INCLUDED_QUANTITY int null, " +
//                            "EXCLUDED_STORES int null, " +
//                            "EXCLUDED_QUANTITY int null, " +
//                            "SGL_RID int null, " +
//                            "IS_HEADER_MASTER char(1) null)";
//                _dba.ExecuteNonQuery(sql);

//                sql = "ALTER TABLE METHOD_RULE ADD CONSTRAINT METHOD_RULE_PK PRIMARY KEY CLUSTERED (METHOD_RID)";
//                _dba.ExecuteNonQuery(sql);

//                sql = "INSERT INTO METHOD_RULE " +
//                      "(METHOD_RID, STORE_FILTER_RID, HDR_RID, STORE_ORDER, HEADER_COMPONENT, " +
//                      "HDR_PACK_RID, HDR_BC_RID, INCLUDED_STORES, INCLUDED_QUANTITY, " +
//                      "EXCLUDED_STORES, EXCLUDED_QUANTITY, SGL_RID, IS_HEADER_MASTER) " +
//                      "SELECT METHOD_RID, STORE_FILTER_RID, HDR_RID, STORE_ORDER, HEADER_COMPONENT, " +
//                      "HDR_PACK_RID, HDR_BC_RID, INCLUDED_STORES, INCLUDED_QUANTITY, " +
//                      "EXCLUDED_STORES, EXCLUDED_QUANTITY, SGL_RID, IS_HEADER_MASTER  " +
//                      "FROM #methodrule";
//                _dba.ExecuteNonQuery(sql);

//                sql = "DROP TABLE #methodrule";
//                _dba.ExecuteNonQuery(sql);

//                sql = "CREATE INDEX METHOD_RULE_HDR_RID_IDX on METHOD_RULE (HDR_RID)";
//                _dba.ExecuteNonQuery(sql);

//                // Add foreign key constraints to table METHOD_RULE                                         
//                sql = "ALTER TABLE METHOD_RULE ADD CONSTRAINT METHOD_METHOD_RULE_FK1 FOREIGN KEY (METHOD_RID) " +
//                      "REFERENCES METHOD (METHOD_RID)ON UPDATE NO ACTION ON DELETE NO ACTION";
//                _dba.ExecuteNonQuery(sql);

//                sql = "ALTER TABLE METHOD_RULE ADD CONSTRAINT STORE_FILTER_METHOD_RULE_FK1 FOREIGN KEY (STORE_FILTER_RID) " +
//                      "REFERENCES STORE_FILTER (STORE_FILTER_RID) ON UPDATE NO ACTION ON DELETE NO ACTION";
//                _dba.ExecuteNonQuery(sql);

//                sql = "ALTER TABLE METHOD_RULE ADD CONSTRAINT HEADER_PACK_METHOD_RULE_FK1 FOREIGN KEY (HDR_PACK_RID) " +
//                      "REFERENCES HEADER_PACK (HDR_PACK_RID) ON UPDATE NO ACTION ON DELETE NO ACTION";
//                _dba.ExecuteNonQuery(sql);

//                sql = "ALTER TABLE METHOD_RULE ADD CONSTRAINT STR_GRP_LVL_MTHD_RULE_FK1 FOREIGN KEY (SGL_RID) " +
//                      "REFERENCES STORE_GROUP_LEVEL (SGL_RID) ON UPDATE NO ACTION ON DELETE NO ACTION";
//                _dba.ExecuteNonQuery(sql);

//                sql = "ALTER TABLE METHOD_RULE ADD CONSTRAINT HDR_BULK_CLR_MTHD_RULE_FK1 FOREIGN KEY (HDR_BC_RID) " +
//                      "REFERENCES HEADER_BULK_COLOR (HDR_BC_RID) ON UPDATE NO ACTION ON DELETE NO ACTION";
//                _dba.ExecuteNonQuery(sql);

//                sql = "ALTER TABLE METHOD_RULE ADD CONSTRAINT HEADER_METHOD_RULE_FK1 FOREIGN KEY (HDR_RID) " +
//                      "REFERENCES HEADER (HDR_RID) ON UPDATE NO ACTION ON DELETE NO ACTION";
//                _dba.ExecuteNonQuery(sql);
//            }
//            catch
//            {
//                throw;
//            }
//        }

//        private void ConvertMasterHeader()
//        {
//            try
//            {
//                string sql = "CREATE TABLE #masterheader ( " +
//                             "SUBORD_HDR_RID int, " +
//                             "MASTER_HDR_RID int, " +
//                             "MASTER_COMPONENT int, " +
//                             "MASTER_PACK_RID int, " +
//                             "MASTER_BC_RID int, " +
//                             "SUBORD_COMPONENT int," +
//                             "SUBORD_PACK_RID int, " +
//                             "SUBORD_BC_RID int) ";
//                _dba.ExecuteNonQuery(sql);

//                sql = "INSERT INTO #masterheader " +
//                         "SELECT m.SUBORD_HDR_RID, " +
//                         "m.MASTER_HDR_RID, " +
//                         "m.MASTER_COMPONENT, " +
//                         "m.MASTER_PACK_RID, " +
//                         "hbc1.HDR_BC_RID, " +
//                         "m.SUBORD_COMPONENT, " +
//                         "m.SUBORD_PACK_RID, " +
//                         "hbc2.HDR_BC_RID " +
//                         "FROM MASTER_HEADER m " +
//                         "LEFT OUTER JOIN HEADER_BULK_COLOR hbc1  " +
//                         "  ON (m.MASTER_HDR_RID = hbc1.HDR_RID AND m.MASTER_COLOR_CODE_RID = hbc1.COLOR_CODE_RID) " +
//                         "LEFT OUTER JOIN HEADER_BULK_COLOR hbc2 " +
//                         "  ON (m.SUBORD_HDR_RID = hbc2.HDR_RID AND m.SUBORD_COLOR_CODE_RID = hbc2.COLOR_CODE_RID) ";
//                _dba.ExecuteNonQuery(sql);

//                sql = "if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[MASTER_HEADER]') " +
//                      "and OBJECTPROPERTY(id,N'IsUserTable') = 1) " +
//                      "DROP TABLE [dbo].[MASTER_HEADER]";
//                _dba.ExecuteNonQuery(sql);

//                sql = "CREATE TABLE MASTER_HEADER ( " +
//                            "SUBORD_HDR_RID int not null, " +
//                            "MASTER_HDR_RID int not null, " +
//                            "MASTER_COMPONENT int null, " +
//                            "MASTER_PACK_RID int null, " +
//                            "MASTER_BC_RID int null, " +
//                            "SUBORD_COMPONENT int null," +
//                            "SUBORD_PACK_RID int null, " +
//                            "SUBORD_BC_RID int null) ";
//                _dba.ExecuteNonQuery(sql);

//                sql = "INSERT INTO MASTER_HEADER " +
//                      "(SUBORD_HDR_RID, MASTER_HDR_RID, MASTER_COMPONENT, MASTER_PACK_RID, " +
//                      "MASTER_BC_RID, SUBORD_COMPONENT, SUBORD_PACK_RID, SUBORD_BC_RID) " +
//                      "SELECT SUBORD_HDR_RID, MASTER_HDR_RID, MASTER_COMPONENT, MASTER_PACK_RID, " +
//                      "MASTER_BC_RID, SUBORD_COMPONENT, SUBORD_PACK_RID, SUBORD_BC_RID  " +
//                      "FROM #masterheader";
//                _dba.ExecuteNonQuery(sql);

//                sql = "DROP TABLE #masterheader";
//                _dba.ExecuteNonQuery(sql);

//                sql = "CREATE INDEX MASTER_HEADER_RID_IDX ON MASTER_HEADER (MASTER_HDR_RID)";
//                _dba.ExecuteNonQuery(sql);

//                sql = "CREATE INDEX SUBORD_HEADER_RID_IDX ON MASTER_HEADER (SUBORD_HDR_RID)";
//                _dba.ExecuteNonQuery(sql);

//                // Add foreign key constraints to table METHOD_RULE                                         
//                sql = "ALTER TABLE MASTER_HEADER ADD CONSTRAINT HEADER_MASTER_HEADER_FK1 FOREIGN KEY (SUBORD_HDR_RID) " +
//                      "REFERENCES HEADER (HDR_RID) ON UPDATE NO ACTION ON DELETE NO ACTION";
//                _dba.ExecuteNonQuery(sql);

//                sql = "ALTER TABLE MASTER_HEADER ADD CONSTRAINT HEADER_MASTER_HEADER_FK2 FOREIGN KEY (MASTER_HDR_RID) " +
//                      "REFERENCES HEADER (HDR_RID) ON UPDATE NO ACTION ON DELETE NO ACTION";
//                _dba.ExecuteNonQuery(sql);

//                sql = "ALTER TABLE MASTER_HEADER ADD CONSTRAINT HEADER_PACK_MASTER_HEADER_FK1 FOREIGN KEY (MASTER_PACK_RID) " +
//                      "REFERENCES HEADER_PACK (HDR_PACK_RID) ON UPDATE NO ACTION ON DELETE NO ACTION";
//                _dba.ExecuteNonQuery(sql);

//                sql = "ALTER TABLE MASTER_HEADER ADD CONSTRAINT HEADER_PACK_MASTER_HEADER_FK2 FOREIGN KEY (SUBORD_PACK_RID) " +
//                      "REFERENCES HEADER_PACK (HDR_PACK_RID) ON UPDATE NO ACTION ON DELETE NO ACTION";
//                _dba.ExecuteNonQuery(sql);

//                sql = "ALTER TABLE MASTER_HEADER ADD CONSTRAINT HEADER_BULK_MASTER_HEADER_FK1 FOREIGN KEY (MASTER_BC_RID) " +
//                      "REFERENCES HEADER_BULK_COLOR (HDR_BC_RID) ON UPDATE NO ACTION ON DELETE NO ACTION";
//                _dba.ExecuteNonQuery(sql);

//                sql = "ALTER TABLE MASTER_HEADER ADD CONSTRAINT HEADER_BULK_MASTER_HEADER_FK2 FOREIGN KEY (SUBORD_BC_RID) " +
//                     "REFERENCES HEADER_BULK_COLOR (HDR_BC_RID) ON UPDATE NO ACTION ON DELETE NO ACTION";
//                _dba.ExecuteNonQuery(sql);
//            }
//            catch
//            {
//                throw;
//            }
//        }

//        private void ModifyStoredProcedures()
//        {
//            try
//            {
//                ModifyColorInsert();
//                ModifyHeaderInsert();
//                ModifyHeaderColorInsert();
//                ModifyHeaderColorDelete();
//                ModifyHeaderPackInsert();
//                ModifyHeaderPackColorInsert();
//                ModifyHeaderPackDelete();
//                ModifyHeaderPackColorDelete();
//                ModifyHeaderPackColorSizeDelete();
//                ModifyHeaderDelete();
//                ModifyUpdateAllocPack();
//                ModifyUpdateAllocBulkColor();
//                ModifyUpdateAllocBulkColorSize();
//                ModifyXMLColorRuleWrite();
//                ModifyUpdatePackAllocBin();
//                ModifyUpdateColorAllocBin();
//                ModifyUpdateColorSizeAllocBin();
//                _dba.CommitData();
//            }
//            catch
//            {
//                throw;
//            }
//        }

//        private void ModifyColorInsert()
//        {
//            // Verified --J.Ellis
//            try
//            {
//                string sql;
//                sql = "if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[SP_MID_COLOR_INSERT]') " +
//                      "and OBJECTPROPERTY(id, N'IsProcedure') = 1) " +
//                      "drop procedure [dbo].[SP_MID_COLOR_INSERT]";
//                _dba.ExecuteNonQuery(sql);

//                sql = "/* Create procedure/function SP_MID_COLOR_INSERT.              */" + Environment.NewLine +
//                      "CREATE PROCEDURE [dbo].[SP_MID_COLOR_INSERT] " + Environment.NewLine +
//                      "@COLOR_CODE_ID VARCHAR(50), " + Environment.NewLine +
//                      "@COLOR_CODE_NAME VARCHAR(250), " + Environment.NewLine +
//                      "@COLOR_CODE_GROUP VARCHAR(250), " + Environment.NewLine +
//                      "@VIRTUAL_IND CHAR, " + Environment.NewLine +
//                      "@COLOR_CODE_RID INT OUTPUT " + Environment.NewLine +
//                      "AS " + Environment.NewLine +
//                      "BEGIN " + Environment.NewLine +
//                      "	SET NOCOUNT ON " + Environment.NewLine +
//                      "	INSERT INTO COLOR_CODE(COLOR_CODE_ID, COLOR_CODE_NAME, COLOR_CODE_GROUP, VIRTUAL_IND)" + Environment.NewLine +
//                      " VALUES (@COLOR_CODE_ID, @COLOR_CODE_NAME, @COLOR_CODE_GROUP, @VIRTUAL_IND) " + Environment.NewLine +
//                      "	SELECT @COLOR_CODE_RID = @@IDENTITY " + Environment.NewLine +
//                      "END ";
//                _dba.ExecuteNonQuery(sql);
//            }
//            catch
//            {
//                throw;
//            }
//        }

//        private void ModifyHeaderInsert()
//        {
//            try
//            {
//                string sql;
//                sql = "if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[SP_MID_HEADER_INSERT]') " +
//                      "and OBJECTPROPERTY(id, N'IsProcedure') = 1) " +
//                      "drop procedure [dbo].[SP_MID_HEADER_INSERT]";
//                _dba.ExecuteNonQuery(sql);

//                sql = "/* Create procedure/function SP_MID_HEADER_INSERT.              */" + Environment.NewLine +
//                      "CREATE PROCEDURE [dbo].[SP_MID_HEADER_INSERT] " + Environment.NewLine +
//                      "( " + Environment.NewLine +
//                      "@HDR_ID VARCHAR(32), " + Environment.NewLine +
//                      "@HDR_DESC VARCHAR(250), " + Environment.NewLine +
//                      "@HDR_DAY DATETIME, " + Environment.NewLine +
//                      "@ORIG_DAY DATETIME, " + Environment.NewLine +
//                      "@UNIT_RETAIL FLOAT, " + Environment.NewLine +
//                      "@UNIT_COST FLOAT, " + Environment.NewLine +
//                      "@UNITS_RECEIVED INT, " + Environment.NewLine +
//                      "@STYLE_HNRID INT, " + Environment.NewLine +
//                      "@PLAN_HNRID INT, " + Environment.NewLine +
//                      "@ON_HAND_HNRID INT, " + Environment.NewLine +
//                      "@BULK_MULTIPLE INT, " + Environment.NewLine +
//                      "@ALLOCATION_MULTIPLE INT, " + Environment.NewLine +
//                      "@VENDOR VARCHAR(50), " + Environment.NewLine +
//                      "@PURCHASE_ORDER VARCHAR(50), " + Environment.NewLine +
//                      "@BEGIN_DAY DATETIME, " + Environment.NewLine +
//                      "@NEED_DAY DATETIME, " + Environment.NewLine +
//                      "@SHIP_TO_DAY DATETIME, " + Environment.NewLine +
//                      "@RELEASE_DATETIME DATETIME, " + Environment.NewLine +
//                      "@RELEASE_APPROVED_DATETIME DATETIME, " + Environment.NewLine +
//                      "@HDR_GROUP_RID INT, " + Environment.NewLine +
//                      "@SIZE_GROUP_RID INT, " + Environment.NewLine +
//                      "@WORKFLOW_RID INT, " + Environment.NewLine +
//                      "@METHOD_RID INT, " + Environment.NewLine +
//                      "@ALLOCATION_STATUS_FLAGS INT, " + Environment.NewLine +
//                      "@BALANCE_STATUS_FLAGS INT, " + Environment.NewLine +
//                      "@SHIPPING_STATUS_FLAGS INT, " + Environment.NewLine +
//                      "@ALLOCATION_TYPE_FLAGS INT, " + Environment.NewLine +
//                      "@INTRANSIT_STATUS_FLAGS INT, " + Environment.NewLine +
//                      "@PERCENT_NEED_LIMIT FLOAT, " + Environment.NewLine +
//                      "@PLAN_PERCENT_FACTOR FLOAT, " + Environment.NewLine +
//                      "@RESERVE_UNITS INT, " + Environment.NewLine +
//                      "@GRADE_WEEK_COUNT INT, " + Environment.NewLine +
//                      "@DIST_CENTER VARCHAR(50), " + Environment.NewLine +
//                      "@HEADER_NOTES VARCHAR(1000), " + Environment.NewLine +
//                      "@WORKFLOW_TRIGGER CHAR, " + Environment.NewLine +
//                      "@EARLIEST_SHIP_DAY DATETIME, " + Environment.NewLine +
//                      "@API_WORKFLOW_RID INT, " + Environment.NewLine +
//                      "@API_WORKFLOW_TRIGGER CHAR, " + Environment.NewLine +
//                      "@ALLOCATED_UNITS INT, " + Environment.NewLine +
//                      "@ORIG_ALLOCATED_UNITS INT, " + Environment.NewLine +
//                      "@RELEASE_COUNT INT, " + Environment.NewLine +
//                      "@RSV_ALLOCATED_UNITS INT, " + Environment.NewLine +
//                      "@DISPLAY_STATUS INT, " + Environment.NewLine +
//                      "@DISPLAY_TYPE INT, " + Environment.NewLine +
//                      "@DISPLAY_INTRANSIT INT, " + Environment.NewLine +
//                      "@DISPLAY_SHIP_STATUS INT, " + Environment.NewLine +
//                      "@VIRTUAL_IND CHAR, " + Environment.NewLine +
//                      "@ASRT_RID INT, " + Environment.NewLine +
//                      "@HDR_RID INT OUTPUT " + Environment.NewLine +
//                      " ) " + Environment.NewLine +
//                      "AS " + Environment.NewLine +
//                      "BEGIN " + Environment.NewLine +
//                      "	SET NOCOUNT ON " + Environment.NewLine +
//                      "	INSERT INTO HEADER(HDR_ID,HDR_DESC,HDR_DAY,ORIG_DAY,UNIT_RETAIL,UNIT_COST,UNITS_RECEIVED,STYLE_HNRID, " + Environment.NewLine +
//                      " PLAN_HNRID,ON_HAND_HNRID,BULK_MULTIPLE,ALLOCATION_MULTIPLE,VENDOR,PURCHASE_ORDER,BEGIN_DAY,NEED_DAY, " + Environment.NewLine +
//                      " SHIP_TO_DAY,RELEASE_DATETIME,RELEASE_APPROVED_DATETIME,HDR_GROUP_RID,SIZE_GROUP_RID,WORKFLOW_RID, " + Environment.NewLine +
//                      " METHOD_RID,ALLOCATION_STATUS_FLAGS,BALANCE_STATUS_FLAGS,SHIPPING_STATUS_FLAGS,ALLOCATION_TYPE_FLAGS, " + Environment.NewLine +
//                      " INTRANSIT_STATUS_FLAGS,PERCENT_NEED_LIMIT,PLAN_PERCENT_FACTOR,RESERVE_UNITS,GRADE_WEEK_COUNT, " + Environment.NewLine +
//                      " DIST_CENTER,HEADER_NOTES,WORKFLOW_TRIGGER, EARLIEST_SHIP_DAY, API_WORKFLOW_RID, API_WORKFLOW_TRIGGER, " + Environment.NewLine +
//                      " ALLOCATED_UNITS, ORIG_ALLOCATED_UNITS, RELEASE_COUNT, RSV_ALLOCATED_UNITS, DISPLAY_STATUS, DISPLAY_TYPE, " + Environment.NewLine +
//                      " DISPLAY_INTRANSIT, DISPLAY_SHIP_STATUS, VIRTUAL_IND, ASRT_RID) " + Environment.NewLine +
//                      " VALUES (@HDR_ID,@HDR_DESC,@HDR_DAY,@ORIG_DAY,@UNIT_RETAIL,@UNIT_COST,@UNITS_RECEIVED,@STYLE_HNRID, " + Environment.NewLine +
//                      " @PLAN_HNRID,@ON_HAND_HNRID,@BULK_MULTIPLE,@ALLOCATION_MULTIPLE,@VENDOR,@PURCHASE_ORDER,@BEGIN_DAY,@NEED_DAY, " + Environment.NewLine +
//                      " @SHIP_TO_DAY,@RELEASE_DATETIME,@RELEASE_APPROVED_DATETIME,@HDR_GROUP_RID,@SIZE_GROUP_RID,@WORKFLOW_RID, " + Environment.NewLine +
//                      " @METHOD_RID,@ALLOCATION_STATUS_FLAGS,@BALANCE_STATUS_FLAGS,@SHIPPING_STATUS_FLAGS,@ALLOCATION_TYPE_FLAGS, " + Environment.NewLine +
//                      " @INTRANSIT_STATUS_FLAGS,@PERCENT_NEED_LIMIT,@PLAN_PERCENT_FACTOR,@RESERVE_UNITS,@GRADE_WEEK_COUNT, " + Environment.NewLine +
//                      " @DIST_CENTER,@HEADER_NOTES,@WORKFLOW_TRIGGER,@EARLIEST_SHIP_DAY, @API_WORKFLOW_RID, @API_WORKFLOW_TRIGGER, " + Environment.NewLine +
//                      " @ALLOCATED_UNITS, @ORIG_ALLOCATED_UNITS, @RELEASE_COUNT, @RSV_ALLOCATED_UNITS, @DISPLAY_STATUS, @DISPLAY_TYPE, " + Environment.NewLine +
//                      " @DISPLAY_INTRANSIT, @DISPLAY_SHIP_STATUS, @VIRTUAL_IND, @ASRT_RID) " + Environment.NewLine +
//                      " SELECT @HDR_RID = @@IDENTITY " + Environment.NewLine +
//                      "END ";
//                _dba.ExecuteNonQuery(sql);
//            }
//            catch
//            {
//                throw;
//            }
//        }

//        private void ModifyHeaderColorInsert()
//        {
//            // Verified --J.Ellis
//            try
//            {   //this is a new stored procedure
//                string sql;
//                sql = "if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[SP_MID_HEADER_BULK_INSERT]') " +
//                      "and OBJECTPROPERTY(id, N'IsProcedure') = 1) " +
//                      "drop procedure [dbo].[SP_MID_HEADER_BULK_INSERT]";
//                _dba.ExecuteNonQuery(sql);

//                sql = "/* Create procedure/function SP_MID_HEADER_BULK_INSERT.              */" + Environment.NewLine +
//                      "CREATE PROCEDURE [dbo].[SP_MID_HEADER_BULK_INSERT] " + Environment.NewLine +
//                      "@HDR_RID INT, " + Environment.NewLine +
//                      "@COLOR_CODE_RID INT, " + Environment.NewLine +
//                      "@UNITS INT, " + Environment.NewLine +
//                      "@MULTIPLE INT, " + Environment.NewLine +
//                      "@MINIMUM INT, " + Environment.NewLine +
//                      "@MAXIMUM INT, " + Environment.NewLine +
//                      "@RESERVE_UNITS INT, " + Environment.NewLine +
//                      "@SEQ INT, " + Environment.NewLine +
//                      "@NAME VARCHAR(50), " + Environment.NewLine +
//                      "@DESCRIPTION VARCHAR(100), " + Environment.NewLine +
//                      "@ASRT_BC_RID INT, " + Environment.NewLine +
//                      "@LAST_BCSZ_KEY_USED INT, " + Environment.NewLine +  // Assortment: Color/Size change
//                      "@HDR_BC_RID INT OUTPUT " + Environment.NewLine +
//                      "AS " + Environment.NewLine +
//                      "BEGIN " + Environment.NewLine +
//                      "	SET NOCOUNT ON " + Environment.NewLine +
//                      "	INSERT INTO HEADER_BULK_COLOR(HDR_RID, COLOR_CODE_RID, UNITS, MULTIPLE, MINIMUM, MAXIMUM, " + Environment.NewLine +
//                      " RESERVE_UNITS, SEQ, NAME, DESCRIPTION, ASRT_BC_RID, LAST_BCSZ_KEY_USED) " + Environment.NewLine +    // Assortment: Color/Size change
//                      " VALUES(@HDR_RID, @COLOR_CODE_RID, @UNITS, @MULTIPLE, @MINIMUM, @MAXIMUM, " + Environment.NewLine +
//                      " @RESERVE_UNITS, @SEQ, @NAME, @DESCRIPTION, @ASRT_BC_RID, @LAST_BCSZ_KEY_USED) " + Environment.NewLine +  // Assortment: Color/Size Change
//                      " SELECT @HDR_BC_RID = @@IDENTITY " + Environment.NewLine +
//                      "END ";
//                _dba.ExecuteNonQuery(sql);
//            }
//            catch
//            {
//                throw;
//            }
//        }

//        private void ModifyHeaderColorDelete()
//        {
//            try
//            {   //this is a new stored procedure
//                string sql;
//                sql = "if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[SP_MID_HEADER_BULK_DELETE]') " +
//                      "and OBJECTPROPERTY(id, N'IsProcedure') = 1) " +
//                      "drop procedure [dbo].[SP_MID_HEADER_BULK_DELETE]";
//                _dba.ExecuteNonQuery(sql);

//                sql = "/* Create procedure/function SP_MID_HEADER_BULK_DELETE.              */" + Environment.NewLine +
//                      "CREATE PROCEDURE [dbo].[SP_MID_HEADER_BULK_DELETE] " + Environment.NewLine +
//                      "@HDR_BC_RID INT " + Environment.NewLine +
//                      "AS " + Environment.NewLine +
//                      "BEGIN " + Environment.NewLine +
//                      " update METHOD_RULE with (rowlock) set HDR_BC_RID = null where HDR_BC_RID = @HDR_BC_RID  " + Environment.NewLine +
//                      " update MASTER_HEADER with (rowlock) set MASTER_BC_RID = null where MASTER_BC_RID = @HDR_BC_RID " + Environment.NewLine +
//                      " update MASTER_HEADER with (rowlock) set SUBORD_BC_RID = null where SUBORD_BC_RID = @HDR_BC_RID " + Environment.NewLine +
//                      " delete BULK_COLOR_ALLOCATION with (rowlock) where HDR_BC_RID = @HDR_BC_RID " + Environment.NewLine +
//                      " delete COLOR_ALLOCATION_BIN with (rowlock) where HDR_BC_RID = @HDR_BC_RID " + Environment.NewLine +
//                      " delete BULK_COLOR_RULE with (rowlock) where HDR_BC_RID = @HDR_BC_RID " + Environment.NewLine +
//                      " delete BULK_COLOR_RULE_LAYER with (rowlock) where HDR_BC_RID = @HDR_BC_RID " + Environment.NewLine +
//                      " delete COLOR_SIZE_ALLOCATION_BIN with (rowlock) where HDR_BC_RID = @HDR_BC_RID " + Environment.NewLine +
//                      " delete BULK_COLOR_SIZE_ALLOCATION with (rowlock) where HDR_BC_RID = @HDR_BC_RID " + Environment.NewLine +
//                      " delete HEADER_BULK_COLOR_SIZE with (rowlock) where HDR_BC_RID = @HDR_BC_RID " + Environment.NewLine +
//                      " delete HEADER_BULK_COLOR_SIZE_NEED with (rowlock) where HDR_BC_RID = @HDR_BC_RID " + Environment.NewLine +
//                      " delete HEADER_BULK_COLOR with (rowlock) where HDR_BC_RID = @HDR_BC_RID " + Environment.NewLine +
//                      "END ";
//                _dba.ExecuteNonQuery(sql);
//                _dba.CommitData();

//                sql = "if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[SP_MID_HDRBULKCLR_DELETE]') " +
//                      "and OBJECTPROPERTY(id, N'IsProcedure') = 1) " +
//                      "drop procedure [dbo].[SP_MID_HDRBULKCLR_DELETE]";
//                _dba.ExecuteNonQuery(sql);

//                sql = "/* Create procedure/function SP_MID_HDRBULKCLR_DELETE.               */" + Environment.NewLine +
//                      "CREATE PROCEDURE [dbo].[SP_MID_HDRBULKCLR_DELETE] " + Environment.NewLine +
//                      "@HDR_BC_RID INT " + Environment.NewLine +
//                      "AS " + Environment.NewLine +
//                      "BEGIN " + Environment.NewLine +
//                      " delete COLOR_SIZE_ALLOCATION_BIN with (rowlock) where HDR_BC_RID = @HDR_BC_RID " + Environment.NewLine +
//                      " delete BULK_COLOR_SIZE_ALLOCATION with (rowlock) where HDR_BC_RID = @HDR_BC_RID " + Environment.NewLine +
//                      " delete HEADER_BULK_COLOR_SIZE with (rowlock) where HDR_BC_RID = @HDR_BC_RID " + Environment.NewLine +
//                      " delete HEADER_BULK_COLOR_SIZE_NEED with (rowlock) where HDR_BC_RID = @HDR_BC_RID " + Environment.NewLine +
//                      " delete COLOR_ALLOCATION_BIN with (rowlock) where HDR_BC_RID = @HDR_BC_RID " + Environment.NewLine +
//                      " delete BULK_COLOR_ALLOCATION with (rowlock) where HDR_BC_RID = @HDR_BC_RID " + Environment.NewLine +
//                      " delete BULK_COLOR_RULE with (rowlock) where HDR_BC_RID = @HDR_BC_RID " + Environment.NewLine +
//                      " delete BULK_COLOR_RULE_LAYER with (rowlock) where HDR_BC_RID = @HDR_BC_RID " + Environment.NewLine +
//                      " delete HEADER_BULK_COLOR with (rowlock) where HDR_BC_RID = @HDR_BC_RID " + Environment.NewLine +
//                      "END ";
//                _dba.ExecuteNonQuery(sql);

//                sql = "if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[SP_MID_HDRBULKCLRSZ_DELETE]') " +
//                      "and OBJECTPROPERTY(id, N'IsProcedure') = 1) " +
//                      "drop procedure [dbo].[SP_MID_HDRBULKCLRSZ_DELETE]";
//                _dba.ExecuteNonQuery(sql);

//                sql = "/* Create procedure/function SP_MID_HDRBULKCLRSZ_DELETE.                */" + Environment.NewLine +
//                      "CREATE PROCEDURE [dbo].[SP_MID_HDRBULKCLRSZ_DELETE] " + Environment.NewLine +
//                      "@HDR_BC_RID INT " + Environment.NewLine +
//                      "AS " + Environment.NewLine +
//                      "BEGIN " + Environment.NewLine +
//                      " delete COLOR_SIZE_ALLOCATION_BIN with (rowlock) where HDR_BC_RID = @HDR_BC_RID " + Environment.NewLine +
//                      " delete BULK_COLOR_SIZE_ALLOCATION with (rowlock) where HDR_BC_RID = @HDR_BC_RID " + Environment.NewLine +
//                      " delete HEADER_BULK_COLOR_SIZE with (rowlock) where HDR_BC_RID = @HDR_BC_RID " + Environment.NewLine +
//                      "END ";
//                _dba.ExecuteNonQuery(sql);
//            }
//            catch
//            {
//                throw;
//            }
//        }

//        private void ModifyHeaderPackInsert()
//        {
//            try
//            {
//                string sql;
//                sql = "if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[SP_MID_HEADER_PACK_INSERT]') " +
//                      "and OBJECTPROPERTY(id, N'IsProcedure') = 1) " +
//                      "drop procedure [dbo].[SP_MID_HEADER_PACK_INSERT]";
//                _dba.ExecuteNonQuery(sql);

//                sql = "/* Create procedure/function SP_MID_HEADER_PACK_INSERT.              */" + Environment.NewLine +
//                      "CREATE PROCEDURE [dbo].[SP_MID_HEADER_PACK_INSERT] " + Environment.NewLine +
//                      "@HDR_RID INT, " + Environment.NewLine +
//                      "@HDR_PACK_NAME VARCHAR(50), " + Environment.NewLine +
//                      "@PACKS INT, " + Environment.NewLine +
//                      "@MULTIPLE INT, " + Environment.NewLine +
//                      "@RESERVE_PACKS INT, " + Environment.NewLine +
//                      "@GENERIC_IND CHAR, " + Environment.NewLine +
//                      "@COPIED_PACK_RID INT, " + Environment.NewLine +
//                      "@SEQ INT,  " + Environment.NewLine +
//                      "@HDR_PACK_RID INT OUTPUT " + Environment.NewLine +
//                      "AS " + Environment.NewLine +
//                      "BEGIN " + Environment.NewLine +
//                      " SET NOCOUNT ON " + Environment.NewLine +
//                      " INSERT INTO HEADER_PACK(HDR_RID, HDR_PACK_NAME, PACKS, MULTIPLE, RESERVE_PACKS, GENERIC_IND, COPIED_PACK_RID, SEQ) " + Environment.NewLine +
//                      " VALUES (@HDR_RID, @HDR_PACK_NAME, @PACKS, @MULTIPLE, @RESERVE_PACKS, @GENERIC_IND, @COPIED_PACK_RID, @SEQ) " + Environment.NewLine +
//                      " SELECT @HDR_PACK_RID = @@IDENTITY " + Environment.NewLine +
//                      "END ";
//                _dba.ExecuteNonQuery(sql);
//            }
//            catch
//            {
//                throw;
//            }
//        }

//        private void ModifyHeaderPackColorInsert()
//        {
//            try
//            {
//                string sql;
//                sql = "if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[SP_MID_HEADER_PACKCOLOR_INSERT]') " +
//                      "and OBJECTPROPERTY(id, N'IsProcedure') = 1) " +
//                      "drop procedure [dbo].[SP_MID_HEADER_PACKCOLOR_INSERT]";
//                _dba.ExecuteNonQuery(sql);

//                sql = "/* Create procedure/function SP_MID_HEADER_PACKCOLOR_INSERT.              */" + Environment.NewLine +
//                      "CREATE PROCEDURE [dbo].[SP_MID_HEADER_PACKCOLOR_INSERT] " + Environment.NewLine +
//                      "@HDR_PACK_RID INT, " + Environment.NewLine +
//                      "@COLOR_CODE_RID INT, " + Environment.NewLine +
//                      "@UNITS INT, " + Environment.NewLine +
//                      "@SEQ INT, " + Environment.NewLine +
//                      "@NAME VARCHAR(50), " + Environment.NewLine +
//                      "@DESCRIPTION VARCHAR(100), " + Environment.NewLine +
//                      "@LAST_PCSZ_KEY_USED INT, " + Environment.NewLine +  // Assortment: Color/Size change
//                      "@HDR_PC_RID INT OUTPUT " + Environment.NewLine +
//                      "AS " + Environment.NewLine +
//                      "BEGIN " + Environment.NewLine +
//                      " SET NOCOUNT ON " + Environment.NewLine +
//                      " INSERT INTO HEADER_PACK_COLOR(HDR_PACK_RID, COLOR_CODE_RID, UNITS, SEQ, NAME, DESCRIPTION, LAST_PCSZ_KEY_USED) " + Environment.NewLine +  // Assortment: Color/Size Changes
//                      " VALUES (@HDR_PACK_RID, @COLOR_CODE_RID, @UNITS, @SEQ, @NAME, @DESCRIPTION, @LAST_PCSZ_KEY_USED) " + Environment.NewLine +                 // Assortment:  Color/Size changes
//                      " SELECT @HDR_PC_RID = @@IDENTITY " + Environment.NewLine +
//                      "END ";
//                _dba.ExecuteNonQuery(sql);
//            }
//            catch
//            {
//                throw;
//            }
//        }

//        private void ModifyHeaderPackDelete()
//        {
//            try
//            {
//                string sql;
//                sql = "if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[SP_MID_HDRPACK_DELETE]') " +
//                      "and OBJECTPROPERTY(id, N'IsProcedure') = 1) " +
//                      "drop procedure [dbo].[SP_MID_HDRPACK_DELETE]";
//                _dba.ExecuteNonQuery(sql);

//                sql = "/* Create procedure/function SP_MID_HDRPACK_DELETE.              */" + Environment.NewLine +
//                      "CREATE PROCEDURE [dbo].[SP_MID_HDRPACK_DELETE] " + Environment.NewLine +
//                      "@PACK_RID INT " + Environment.NewLine +
//                      "AS " + Environment.NewLine +
//                      "BEGIN " + Environment.NewLine +
//                      "	delete PACK_ALLOCATION with (rowlock) where HDR_PACK_RID = @PACK_RID " + Environment.NewLine +
//                      "	delete PACK_RULE with (rowlock) where HDR_PACK_RID = @PACK_RID " + Environment.NewLine +
//                      "	delete PACK_RULE_LAYER with (rowlock) where HDR_PACK_RID = @PACK_RID " + Environment.NewLine +
//                      "	delete HEADER_PACK_COLOR_SIZE  with (rowlock) where HDR_PC_RID IN " + Environment.NewLine +
//                      "      (SELECT HDR_PC_RID from HEADER_PACK_COLOR where HDR_PACK_RID = @PACK_RID) " + Environment.NewLine +
//                      "	delete HEADER_PACK_COLOR with (rowlock) where HDR_PACK_RID = @PACK_RID " + Environment.NewLine +
//                      " update METHOD_RULE with (rowlock) set HDR_PACK_RID = null where HDR_PACK_RID = @PACK_RID " + Environment.NewLine +
//                      " update MASTER_HEADER with (rowlock) set MASTER_PACK_RID = null where MASTER_PACK_RID = @PACK_RID " + Environment.NewLine +
//                      " update MASTER_HEADER with (rowlock) set SUBORD_PACK_RID = null where SUBORD_PACK_RID = @PACK_RID " + Environment.NewLine +
//                      "	delete HEADER_PACK with (rowlock) where HDR_PACK_RID = @PACK_RID " + Environment.NewLine +
//                      "END ";
//                _dba.ExecuteNonQuery(sql);
//            }
//            catch
//            {
//                throw;
//            }
//        }

//        private void ModifyHeaderPackColorDelete()
//        {
//            try
//            {
//                string sql;
//                sql = "if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[SP_MID_HDRPACKCOLOR_DELETE]') " +
//                      "and OBJECTPROPERTY(id, N'IsProcedure') = 1) " +
//                      "drop procedure [dbo].[SP_MID_HDRPACKCOLOR_DELETE]";
//                _dba.ExecuteNonQuery(sql);

//                sql = "/* Create procedure/function SP_MID_HDRPACKCOLOR_DELETE.         */ " + Environment.NewLine +
//                      "CREATE PROCEDURE [dbo].[SP_MID_HDRPACKCOLOR_DELETE] " + Environment.NewLine +
//                      "	@PACK_RID INT, " + Environment.NewLine +
//                      "	@COLOR_RID INT " + Environment.NewLine +
//                      "AS " + Environment.NewLine +
//                      "BEGIN " + Environment.NewLine +
//                      "	delete HEADER_PACK_COLOR_SIZE with (rowlock) where HDR_PC_RID IN " + Environment.NewLine +
//                      "      (SELECT HDR_PC_RID from HEADER_PACK_COLOR where HDR_PACK_RID = @PACK_RID AND COLOR_CODE_RID = @COLOR_RID) " + Environment.NewLine +
//                      "	delete HEADER_PACK_COLOR with (rowlock) where HDR_PACK_RID = @PACK_RID AND COLOR_CODE_RID = @COLOR_RID  " + Environment.NewLine +
//                      "END ";
//                _dba.ExecuteNonQuery(sql);
//            }
//            catch
//            {
//                throw;
//            }
//        }
//        private void ModifyHeaderPackColorSizeDelete()
//        {
//            try
//            {
//                string sql;
//                sql = "if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[SP_MID_HDRPACKCOLORSIZE_DELETE]') " +
//                      "and OBJECTPROPERTY(id, N'IsProcedure') = 1) " +
//                      "drop procedure [dbo].[SP_MID_HDRPACKCOLORSIZE_DELETE]";
//                _dba.ExecuteNonQuery(sql);

//                sql = "/* Create procedure/function SP_MID_HDRPACKCOLORSIZE_DELETE.     */ " + Environment.NewLine +
//                      "CREATE PROCEDURE [dbo].[SP_MID_HDRPACKCOLORSIZE_DELETE] " + Environment.NewLine +
//                      "	@HDR_PC_RID INT, " + Environment.NewLine +
//                      "	@SIZE_RID INT " + Environment.NewLine +
//                      "AS " + Environment.NewLine +
//                      "BEGIN " + Environment.NewLine +
//                      "	delete HEADER_PACK_COLOR_SIZE with (rowlock) where HDR_PC_RID = @HDR_PC_RID and SIZE_CODE_RID = @SIZE_RID " + Environment.NewLine +
//                      "END ";
//                _dba.ExecuteNonQuery(sql);
//            }
//            catch
//            {
//                throw;
//            }
//        }
//        private void ModifyHeaderDelete()
//        {
//            try
//            {
//                string sql;
//                sql = "if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[SP_MID_HEADER_DELETE]') " +
//                      "and OBJECTPROPERTY(id, N'IsProcedure') = 1) " +
//                      "drop procedure [dbo].[SP_MID_HEADER_DELETE]";
//                _dba.ExecuteNonQuery(sql);

//                sql = "/* Create procedure/function SP_MID_HEADER_DELETE.                 */ " + Environment.NewLine +
//                      "CREATE PROCEDURE [dbo].[SP_MID_HEADER_DELETE] " + Environment.NewLine +
//                      "	@HDR_RID INT  " + Environment.NewLine +
//                      "AS " + Environment.NewLine +
//                      "BEGIN " + Environment.NewLine +
//                      "/* - delete header packs and colors separately because cascade is inefficient */ " + Environment.NewLine +
//                      "declare @t table (HP int) " + Environment.NewLine +
//                      "declare @c table (HC int) " + Environment.NewLine +
//                      "declare @methodtable table (RID int) " + Environment.NewLine +
//                      "SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED " + Environment.NewLine +
//                      "insert into @t " + Environment.NewLine +
//                      "  select HDR_PACK_RID " + Environment.NewLine +
//                      "    from HEADER_PACK " + Environment.NewLine +
//                      "   where HDR_RID = @HDR_RID " + Environment.NewLine +
//                      "insert into @c " + Environment.NewLine +
//                      "  select HDR_BC_RID " + Environment.NewLine +
//                      "    from HEADER_BULK_COLOR " + Environment.NewLine +
//                      "   where HDR_RID = @HDR_RID " + Environment.NewLine +
//                      " " + Environment.NewLine +
//                      "SET TRANSACTION ISOLATION LEVEL READ COMMITTED " + Environment.NewLine +
//                      "declare @HP int " + Environment.NewLine +
//                      "declare @HC int " + Environment.NewLine +
//                      "select top 1 @HP = HP from @t " + Environment.NewLine +
//                      "while @@rowcount <> 0 " + Environment.NewLine +
//                      "begin " + Environment.NewLine +
//                      "	delete PACK_ALLOCATION_BIN with (rowlock) where HDR_PACK_RID = @HP " + Environment.NewLine +
//                      "	delete PACK_ALLOCATION with (rowlock) where HDR_PACK_RID = @HP " + Environment.NewLine +
//                      "	delete PACK_RULE with (rowlock) where HDR_PACK_RID = @HP " + Environment.NewLine +
//                      "	delete PACK_RULE_LAYER with (rowlock) where HDR_PACK_RID = @HP " + Environment.NewLine +
//                      "	delete HEADER_PACK_COLOR_SIZE  with (rowlock) where HDR_PC_RID IN " + Environment.NewLine +
//                      "       (SELECT HDR_PC_RID from HEADER_PACK_COLOR where HDR_PACK_RID = @HP) " + Environment.NewLine +
//                      "	delete HEADER_PACK_COLOR with (rowlock) where HDR_PACK_RID = @HP " + Environment.NewLine +
//                      "	delete HEADER_PACK with (rowlock) where HDR_PACK_RID = @HP " + Environment.NewLine +
//                      " update METHOD_RULE with (rowlock) set HDR_PACK_RID = null where HDR_PACK_RID = @HP " + Environment.NewLine +
//                      "	delete @t where HP = @HP " + Environment.NewLine +
//                      "	select top 1 @HP = HP from @t " + Environment.NewLine +
//                      "end " + Environment.NewLine +
//                      "select top 1 @HC = HC from @c " + Environment.NewLine +
//                      "while @@rowcount <> 0 " + Environment.NewLine +
//                      "begin " + Environment.NewLine +
//                      "	delete BULK_COLOR_RULE with (rowlock) where HDR_BC_RID = @HC " + Environment.NewLine +
//                      "	delete BULK_COLOR_RULE_LAYER with (rowlock) where HDR_BC_RID = @HC " + Environment.NewLine +
//                      "	delete BULK_COLOR_SIZE_ALLOCATION where HDR_BC_RID = @HC " + Environment.NewLine +
//                      "	delete BULK_COLOR_ALLOCATION where HDR_BC_RID = @HC " + Environment.NewLine +
//                      "	delete HEADER_BULK_COLOR_SIZE_NEED with (rowlock) where HDR_BC_RID = @HC " + Environment.NewLine +
//                      "	delete HEADER_BULK_COLOR_SIZE with (rowlock) where HDR_BC_RID = @HC " + Environment.NewLine +
//                      "	delete HEADER_BULK_COLOR with (rowlock) where HDR_BC_RID = @HC  " + Environment.NewLine +
//                      " delete COLOR_SIZE_ALLOCATION_BIN with (rowlock) where HDR_BC_RID = @HC  " + Environment.NewLine +
//                      " delete COLOR_ALLOCATION_BIN with (rowlock) where HDR_BC_RID = @HC  " + Environment.NewLine +
//                      "	delete @c where HC = @HC " + Environment.NewLine +
//                      "	select top 1 @HC = HC from @c " + Environment.NewLine +
//                      "end " + Environment.NewLine +
//                      "/* -- delete methods with header as key */ " + Environment.NewLine +
//                      "insert into @methodtable select METHOD_RID from METHOD_SIZE_BASIS_ALLOCATION with (nolock) where SIZE_BASIS_HDR_RID = @HDR_RID " + Environment.NewLine +
//                      "insert into @methodtable select METHOD_RID from METHOD_RULE with (nolock) where HDR_RID = @HDR_RID " + Environment.NewLine +
//                      "/* -- delete all methods */ " + Environment.NewLine +
//                      "declare @RID int " + Environment.NewLine +
//                      "select top 1 @RID = RID from @methodtable " + Environment.NewLine +
//                      "while @@rowcount <> 0 " + Environment.NewLine +
//                      "begin  " + Environment.NewLine +
//                      "   exec SP_MID_METHOD_DELETE @RID " + Environment.NewLine +
//                      "   delete @methodtable where RID = @RID " + Environment.NewLine +
//                      "   select top 1 @RID = RID from @methodtable " + Environment.NewLine +
//                      "end " + Environment.NewLine +
//                      "/* -- delete header and cascade other tables */ " + Environment.NewLine +
//                      "delete RECLASS_REJECTED_HEADER with (rowlock) where HDR_RID = @HDR_RID " + Environment.NewLine +
//                      "delete BULK_RULE with (rowlock) where HDR_RID = @HDR_RID " + Environment.NewLine +
//                      "delete BULK_RULE_LAYER with (rowlock) where HDR_RID = @HDR_RID " + Environment.NewLine +
//                      "delete BULK_ALLOCATION with (rowlock) where HDR_RID = @HDR_RID " + Environment.NewLine +
//                      "delete BULK_ALLOCATION_BIN with (rowlock) where HDR_RID = @HDR_RID " + Environment.NewLine +
//                      "delete HEADER_SIZE_NEED with (rowlock) where HDR_RID = @HDR_RID " + Environment.NewLine +
//                      "delete TOTAL_RULE with (rowlock) where HDR_RID = @HDR_RID " + Environment.NewLine +
//                      "delete TOTAL_RULE_LAYER with (rowlock) where HDR_RID = @HDR_RID  " + Environment.NewLine +
//                      "delete DETAIL_RULE with (rowlock) where HDR_RID = @HDR_RID  " + Environment.NewLine +
//                      "delete DETAIL_RULE_LAYER with (rowlock) where HDR_RID = @HDR_RID  " + Environment.NewLine +
//                      "delete DETAIL_ALLOCATION_BIN with (rowlock) where HDR_RID = @HDR_RID " + Environment.NewLine +
//                      "delete DETAIL_ALLOCATION with (rowlock) where HDR_RID = @HDR_RID " + Environment.NewLine +
//                      "delete TOTAL_ALLOCATION_BIN with (rowlock) where HDR_RID = @HDR_RID " + Environment.NewLine +
//                      "delete TOTAL_ALLOCATION with (rowlock) where HDR_RID = @HDR_RID " + Environment.NewLine +
//                      "delete HEADER_STORE_GRADE with (rowlock) where HDR_RID = @HDR_RID " + Environment.NewLine +
//                      "delete USER_ALLOCATION_HEADERS with (rowlock) where HDR_RID = @HDR_RID " + Environment.NewLine +
//                      "delete WORKFLOW_HISTORY with (rowlock) where HDR_RID = @HDR_RID " + Environment.NewLine +
//                      "delete FILTER_BASIS_ALLOCATION with (rowlock) where HDR_RID = @HDR_RID  " + Environment.NewLine +
//                      "delete MASTER_HEADER with (rowlock) where SUBORD_HDR_RID = @HDR_RID " + Environment.NewLine +
//                      "delete HEADER_CHAR_JOIN with (rowlock) where HDR_RID = @HDR_RID " + Environment.NewLine +
//                      "delete ASSORTMENT_PROPERTIES_STORE_GRADE with (rowlock) where HDR_RID = @HDR_RID " + Environment.NewLine +
//                      "delete ASSORTMENT_PROPERTIES_BASIS with (rowlock) where HDR_RID = @HDR_RID " + Environment.NewLine +
//                      "delete ASSORTMENT_PROPERTIES with (rowlock) where HDR_RID = @HDR_RID " + Environment.NewLine +
//                      "update METHOD_RULE with (rowlock) set HDR_RID = null where HDR_RID = @HDR_RID " + Environment.NewLine +
//                      "update METHOD_SIZE_BASIS_ALLOCATION with (rowlock) set SIZE_BASIS_HDR_RID = null where SIZE_BASIS_HDR_RID = @HDR_RID " + Environment.NewLine +
//                      "update METHOD_GENERAL_ALLOCATION with (rowlock) set GEN_ALLOC_HDR_RID = null where GEN_ALLOC_HDR_RID = @HDR_RID " + Environment.NewLine +
//                      "delete HEADER with (rowlock) where HDR_RID = @HDR_RID " + Environment.NewLine +
//                      "END ";
//                _dba.ExecuteNonQuery(sql);

//            }
//            catch
//            {
//                throw;
//            }
//        }

//        private void ModifyUpdateAllocPack()
//        {
//            // Verified--J.Ellis
//            try
//            {
//                string sql;
//                sql = "if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[SP_MID_UPDATEALLOCPACK]') " +
//                      "and OBJECTPROPERTY(id, N'IsProcedure') = 1) " +
//                      "drop procedure [dbo].[SP_MID_UPDATEALLOCPACK]";
//                _dba.ExecuteNonQuery(sql);

//                sql = "/* Create procedure/function SP_MID_UPDATEALLOCPACK. */ " + Environment.NewLine +
//                       "CREATE Procedure [dbo].[SP_MID_UPDATEALLOCPACK] ( " + Environment.NewLine +
//                       "@UpdtXML text, " + Environment.NewLine +
//                       "@ReturnCode int = -100 output, " + Environment.NewLine +
//                       "@debug int = 0 " + Environment.NewLine +
//                       ") " + Environment.NewLine +
//                       "as " + Environment.NewLine +
//                       "if @debug <> 0 " + Environment.NewLine +
//                       "   set nocount on " + Environment.NewLine +
//                       "declare @tree int, @HDR_RID int, @P_RID int " + Environment.NewLine +
//                       "declare @keys table (HDR_RID int, P_RID int) " + Environment.NewLine +
//                       "exec sp_xml_preparedocument @tree output, @UpdtXML " + Environment.NewLine +
//                       "insert @keys (HDR_RID, P_RID) " + Environment.NewLine +
//                       "select * " + Environment.NewLine +
//                       "from openxml (@tree, '/UpdateAllocation/Update', 1) " + Environment.NewLine +
//                       "with (HDR_RID int '@HDR_RID', P_RID int '@P_RID') " + Environment.NewLine +
//                       "select @HDR_RID=HDR_RID, @P_RID=P_RID from @keys " + Environment.NewLine +
//                       "delete from [dbo].[PACK_ALLOCATION] with (rowlock) " + Environment.NewLine +
//                       "where HDR_RID=@HDR_RID and HDR_PACK_RID = @P_RID " + Environment.NewLine +
//                       "INSERT into [dbo].[PACK_ALLOCATION] (HDR_RID, HDR_PACK_RID, ST_RID, PACKS_ALLOCATED, PACKS_SHIPPED, PACKS_ALLOCATED_BY_AUTO, " + Environment.NewLine +
//                       "PACKS_ALLOCATED_BY_RULE, CHOSEN_RULE_TYPE_ID, CHOSEN_RULE_LAYER_ID, NEED_DAY, " + Environment.NewLine +
//                       "UNIT_NEED_BEFORE, PERCENT_NEED_BEFORE, MINIMUM, MAXIMUM, PRIMARY_MAX, " + Environment.NewLine +
//                       "ALLOC_STORE_DET_AUDIT_FLAGS, SHIPPING_STATUS_FLAGS, CHOSEN_RULE_PACKS) " + Environment.NewLine +
//                       "SELECT @HDR_RID, @P_RID, [ST_RID], [PACKS_ALLOCATED], [PACKS_SHIPPED], [PACKS_ALLOCATED_BY_AUTO], " + Environment.NewLine +
//                       "[PACKS_ALLOCATED_BY_RULE], [CHOSEN_RULE_TYPE_ID], [CHOSEN_RULE_LAYER_ID], [NEED_DAY], " + Environment.NewLine +
//                       "[UNIT_NEED_BEFORE], [PERCENT_NEED_BEFORE], [MINIMUM], [MAXIMUM], [PRIMARY_MAX], " + Environment.NewLine +
//                       "[ALLOC_STORE_DET_AUDIT_FLAGS], [SHIPPING_STATUS_FLAGS], [CHOSEN_RULE_PACKS] " + Environment.NewLine +
//                       "FROM openxml (@tree, '/UpdateAllocation/Update/Str', 1) " + Environment.NewLine +
//                       "WITH ( " + Environment.NewLine +
//                       "[ST_RID] [int] '@S_RID' , " + Environment.NewLine +
//                       "--	[HDR_RID] [int] '../@HDR_RID' , " + Environment.NewLine +
//                       "--	[HDR_PACK_RID] [int] '../@P_RID' , " + Environment.NewLine +
//                       "[PACKS_ALLOCATED] [int] '@Qa' , " + Environment.NewLine +
//                       "[PACKS_SHIPPED] [int] '@Qs' , " + Environment.NewLine +
//                       "[PACKS_ALLOCATED_BY_AUTO] [int] '@Qa_a' , " + Environment.NewLine +
//                       "[PACKS_ALLOCATED_BY_RULE] [int] '@Qa_r' , " + Environment.NewLine +
//                       "[CHOSEN_RULE_TYPE_ID] [int] '@Cr_t' , " + Environment.NewLine +
//                       "[CHOSEN_RULE_LAYER_ID] [int] '@Cr_l' , " + Environment.NewLine +
//                       "[NEED_DAY] [smalldatetime] '@N_dy' , " + Environment.NewLine +
//                       "[UNIT_NEED_BEFORE] [int] '@U_nd' , " + Environment.NewLine +
//                       "[PERCENT_NEED_BEFORE] [float] '@P_nd' , " + Environment.NewLine +
//                       "[MINIMUM] [int] '@Mn' , " + Environment.NewLine +
//                       "[MAXIMUM] [int] '@Mx' , " + Environment.NewLine +
//                       "[PRIMARY_MAX] [int] '@P_Mx' , " + Environment.NewLine +
//                       "[ALLOC_STORE_DET_AUDIT_FLAGS] [int] '@Af' , " + Environment.NewLine +
//                       "[SHIPPING_STATUS_FLAGS] [int] '@Sf' , " + Environment.NewLine +
//                       "[CHOSEN_RULE_PACKS] [int] '@Cr_q' " + Environment.NewLine +
//                       ") " + Environment.NewLine +
//                       "set @ReturnCode = @@rowcount " + Environment.NewLine +
//                       "exec sp_xml_removedocument @tree " + Environment.NewLine +
//                       "return @ReturnCode ";
//                _dba.ExecuteNonQuery(sql);
//            }
//            catch
//            {
//                throw;
//            }

//        }

//        private void ModifyUpdateAllocBulkColor()
//        {
//            // Verified--J.Ellis
//            try
//            {
//                string sql;
//                sql = "if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[SP_MID_UPDATEALLOCBULKCOLOR]') " +
//                      "and OBJECTPROPERTY(id, N'IsProcedure') = 1) " +
//                      "drop procedure [dbo].[SP_MID_UPDATEALLOCBULKCOLOR]";
//                _dba.ExecuteNonQuery(sql);
                
//                sql = "/* Create procedure/function SP_MID_UPDATEALLOCBULKCOLOR.  */ " + Environment.NewLine +
//                      "CREATE Procedure [dbo].[SP_MID_UPDATEALLOCBULKCOLOR] (" + Environment.NewLine +
//                      "@UpdtXML text, " + Environment.NewLine +
//                      "@ReturnCode int = -100 output, " + Environment.NewLine +
//                      "@debug int = 0  " + Environment.NewLine +
//                      ") " + Environment.NewLine +
//                      "as  " + Environment.NewLine +
//                      "if @debug = 0 " + Environment.NewLine +
//                      "  set nocount on " + Environment.NewLine +
//                      "declare @tree int, @HDR_RID int , @HDR_BC_RID int " + Environment.NewLine +
//                      "declare @keys table (HDR_RID int, HDR_BC_RID int) " + Environment.NewLine +
//                      "exec sp_xml_preparedocument @tree output, @UpdtXML " + Environment.NewLine +
//                      "insert @keys (HDR_RID, HDR_BC_RID) " + Environment.NewLine +
//                      "select * " + Environment.NewLine +
//                      "from openxml (@tree, '/UpdateAllocation/Update', 1) " + Environment.NewLine +
//                      "with (HDR_RID int '@H_RID', HDR_BC_RID int '@HDR_BC_RID') " + Environment.NewLine +
//                      "if @debug <> 0 " + Environment.NewLine +
//                      "  select * from @keys " + Environment.NewLine +
//                      "select @HDR_RID=HDR_RID, @HDR_BC_RID = HDR_BC_RID from @keys " + Environment.NewLine +
//                      "delete from [dbo].[BULK_COLOR_ALLOCATION] with (rowlock) " + Environment.NewLine +
//                      "  where HDR_RID = @HDR_RID and HDR_BC_RID = @HDR_BC_RID " + Environment.NewLine +
//                      "INSERT into [dbo].[BULK_COLOR_ALLOCATION] (HDR_RID, HDR_BC_RID, ST_RID, UNITS_ALLOCATED, UNITS_SHIPPED, UNITS_ALLOCATED_BY_AUTO, " + Environment.NewLine +
//                      "UNITS_ALLOCATED_BY_RULE, CHOSEN_RULE_TYPE_ID, CHOSEN_RULE_LAYER_ID, NEED_DAY, UNIT_NEED_BEFORE, " + Environment.NewLine +
//                      "PERCENT_NEED_BEFORE, MINIMUM, MAXIMUM, PRIMARY_MAX, ALLOC_STORE_DET_AUDIT_FLAGS, " + Environment.NewLine +
//                      "SHIPPING_STATUS_FLAGS, CHOSEN_RULE_UNITS) " + Environment.NewLine +
//                      "SELECT @HDR_RID, @HDR_BC_RID, [ST_RID], [UNITS_ALLOCATED], [UNITS_SHIPPED], [UNITS_ALLOCATED_BY_AUTO], " + Environment.NewLine +
//                      "[UNITS_ALLOCATED_BY_RULE], [CHOSEN_RULE_TYPE_ID], [CHOSEN_RULE_LAYER_ID], [NEED_DAY], [UNIT_NEED_BEFORE], " + Environment.NewLine +
//                      "[PERCENT_NEED_BEFORE], [MINIMUM], [MAXIMUM], [PRIMARY_MAX], [ALLOC_STORE_DET_AUDIT_FLAGS], " + Environment.NewLine +
//                      "[SHIPPING_STATUS_FLAGS], [CHOSEN_RULE_UNITS] " + Environment.NewLine +
//                      "FROM openxml (@tree, '/UpdateAllocation/Update/Str', 1) " + Environment.NewLine +
//                      "WITH (	[ST_RID] [int] '@S_RID' , " + Environment.NewLine +
//                      "--	[HDR_RID] [int] '../@H_RID' , " + Environment.NewLine +
//                      "--	[HDR_BC_RID] [int] '../@HDR_BC_RID' , " + Environment.NewLine +
//                      "[UNITS_ALLOCATED] [int] '@Qa' , " + Environment.NewLine +
//                      "[UNITS_SHIPPED] [int] '@Qs' , " + Environment.NewLine +
//                      "[UNITS_ALLOCATED_BY_AUTO] [int] '@Qa_a' , " + Environment.NewLine +
//                      "[UNITS_ALLOCATED_BY_RULE] [int] '@Qa_r' , " + Environment.NewLine +
//                      "[CHOSEN_RULE_TYPE_ID] [int] '@Cr_t' , " + Environment.NewLine +
//                      "[CHOSEN_RULE_LAYER_ID] [int] '@Cr_l' , " + Environment.NewLine +
//                      "[NEED_DAY] [smalldatetime] '@N_dy' , " + Environment.NewLine +
//                      "[UNIT_NEED_BEFORE] [int] '@U_nd' , " + Environment.NewLine +
//                      "[PERCENT_NEED_BEFORE] [float] '@P_nd' , " + Environment.NewLine +
//                      "[MINIMUM] [int] '@Mn' , " + Environment.NewLine +
//                      "[MAXIMUM] [int] '@Mx' , " + Environment.NewLine +
//                      "[PRIMARY_MAX] [int] '@P_Mx' , " + Environment.NewLine +
//                      "[ALLOC_STORE_DET_AUDIT_FLAGS] [int] '@Af' , " + Environment.NewLine +
//                      "[SHIPPING_STATUS_FLAGS] [int] '@Sf' , " + Environment.NewLine +
//                      "[CHOSEN_RULE_UNITS] [int] '@Cr_q' " + Environment.NewLine +
//                      ") " + Environment.NewLine +
//                      "set @ReturnCode = @@rowcount " + Environment.NewLine +
//                      "exec sp_xml_removedocument @tree " + Environment.NewLine +
//                      "return @ReturnCode ";
//                _dba.ExecuteNonQuery(sql);
//            }
//            catch
//            {
//                throw;
//            }
//        }

//        private void ModifyUpdateAllocBulkColorSize()
//        {
//            // Verified --J.Ellis
//            try
//            {
//                string sql;
//                sql = "if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[SP_MID_UPDATEALLOCBULKCOLORSZ]') " +
//                      "and OBJECTPROPERTY(id, N'IsProcedure') = 1) " +
//                      "drop procedure [dbo].[SP_MID_UPDATEALLOCBULKCOLORSZ]";
//                _dba.ExecuteNonQuery(sql);

//                sql = "/* Create procedure/function SP_MID_UPDATEALLOCBULKCOLORSZ.   */ " + Environment.NewLine +
//                      "CREATE Procedure [dbo].[SP_MID_UPDATEALLOCBULKCOLORSZ] ( " + Environment.NewLine +
//                      "@UpdtXML text, " + Environment.NewLine +
//                      "@ReturnCode int = -100 output, " + Environment.NewLine +
//                      "@debug int = 0 " + Environment.NewLine +
//                      ") " + Environment.NewLine +
//                      "as " + Environment.NewLine +
//                      "if @debug = 0 " + Environment.NewLine +
//                      "   set nocount on " + Environment.NewLine +
//                      "declare @tree int, @HDR_RID int , @HDR_BC_RID int, @HDR_BCSZ_KEY int " + Environment.NewLine +
//                      "declare @keys table (HDR_RID int, HDR_BC_RID int, HDR_BCSZ_KEY int) " + Environment.NewLine +
//                      "exec sp_xml_preparedocument @tree output, @UpdtXML " + Environment.NewLine +
//                      "insert @keys (HDR_RID, HDR_BC_RID, HDR_BCSZ_KEY) " + Environment.NewLine +
//                      "select * " + Environment.NewLine +
//                      "from openxml (@tree, '/UpdateAllocation/Update', 1) " + Environment.NewLine +
//                      "with (HDR_RID int '@H_RID', HDR_BC_RID int '@HDR_BC_RID', HDR_BCSZ_KEY int '@HDR_BCSZ_KEY') " + Environment.NewLine +
//                      "if @debug <> 0 " + Environment.NewLine +
//                      "   select * from @keys " + Environment.NewLine +
//                      "select @HDR_RID=HDR_RID, @HDR_BC_RID = HDR_BC_RID, @HDR_BCSZ_KEY = HDR_BCSZ_KEY from @keys " + Environment.NewLine +
//                      "delete from [dbo].[BULK_COLOR_SIZE_ALLOCATION] with (rowlock) " + Environment.NewLine +
//                      "where HDR_RID = @HDR_RID and HDR_BC_RID = @HDR_BC_RID and HDR_BCSZ_KEY = @HDR_BCSZ_KEY " + Environment.NewLine +
//                      "INSERT into [dbo].[BULK_COLOR_SIZE_ALLOCATION] (HDR_RID, HDR_BC_RID, HDR_BCSZ_KEY, ST_RID, UNITS_ALLOCATED, UNITS_SHIPPED, " + Environment.NewLine +
//                      "UNITS_ALLOCATED_BY_AUTO, MINIMUM, MAXIMUM, PRIMARY_MAX, ALLOC_STORE_DET_AUDIT_FLAGS, " + Environment.NewLine +
//                      "SHIPPING_STATUS_FLAGS) " + Environment.NewLine +
//                      "SELECT @HDR_RID, @HDR_BC_RID, @HDR_BCSZ_KEY, [ST_RID], [UNITS_ALLOCATED], [UNITS_SHIPPED], " + Environment.NewLine +
//                      "[UNITS_ALLOCATED_BY_AUTO], [MINIMUM], [MAXIMUM], [PRIMARY_MAX], [ALLOC_STORE_DET_AUDIT_FLAGS], " + Environment.NewLine +
//                      "[SHIPPING_STATUS_FLAGS] " + Environment.NewLine +
//                      "FROM openxml (@tree, '/UpdateAllocation/Update/Str', 1) " + Environment.NewLine +
//                      "WITH (	[ST_RID] [int] '@S_RID' , " + Environment.NewLine +
//                      "--	[HDR_RID] [int] '../@H_RID' , " + Environment.NewLine +
//                      "--	[HDR_BC_RID] [int] '../@HDR_BC_RID' , " + Environment.NewLine +
//                      "--	[HDR_BCSZ_KEY] [int] '../@HDR_BCSZ_KEY' , " + Environment.NewLine +
//                      "[UNITS_ALLOCATED] [int] '@Qa' , " + Environment.NewLine +
//                      "[UNITS_SHIPPED] [int] '@Qs' , " + Environment.NewLine +
//                      "[UNITS_ALLOCATED_BY_AUTO] [int] '@Qa_a' , " + Environment.NewLine +
//                      "[MINIMUM] [int] '@Mn' , " + Environment.NewLine +
//                      "[MAXIMUM] [int] '@Mx' , " + Environment.NewLine +
//                      "[PRIMARY_MAX] [int] '@P_Mx' , " + Environment.NewLine +
//                      "[ALLOC_STORE_DET_AUDIT_FLAGS] [int] '@Af' , " + Environment.NewLine +
//                      "[SHIPPING_STATUS_FLAGS] [int] '@Sf' " + Environment.NewLine +
//                      ") " + Environment.NewLine +
//                      "set @ReturnCode = @@rowcount " + Environment.NewLine +
//                      "exec sp_xml_removedocument @tree  " + Environment.NewLine +
//                      "return @ReturnCode";
//                _dba.ExecuteNonQuery(sql);
//            }
//            catch
//            {
//                throw;
//            }
//        }

//        private void ModifyXMLColorRuleWrite()
//        {
//            try
//            {
//                string sql;
//                sql = "if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[SP_MID_XML_COLOR_RULE_WRITE]') " +
//                      "and OBJECTPROPERTY(id, N'IsProcedure') = 1) " +
//                      "drop procedure [dbo].[SP_MID_XML_COLOR_RULE_WRITE]";
//                _dba.ExecuteNonQuery(sql);

//                sql = "/* Create procedure/function SP_MID_XML_COLOR_RULE_WRITE.              */" + Environment.NewLine +
//                      "CREATE PROCEDURE [dbo].[SP_MID_XML_COLOR_RULE_WRITE] " + Environment.NewLine +
//                      "	@HDR_BC_RID INT, " + Environment.NewLine +
//                      "	@LAYER_ID INT, " + Environment.NewLine +
//                      "	@xmlDoc NTEXT " + Environment.NewLine +
//                      "AS " + Environment.NewLine +
//                      "SET NOCOUNT ON " + Environment.NewLine +
//                      "DECLARE @idoc int " + Environment.NewLine +
//                      "EXEC sp_xml_preparedocument @idoc OUTPUT, @xmlDoc " + Environment.NewLine +
//                      "/*-- Delete previous records */" + Environment.NewLine +
//                      "DELETE FROM BULK_COLOR_RULE WHERE HDR_BC_RID = @HDR_BC_RID AND LAYER_ID = @LAYER_ID " + Environment.NewLine +
//                      "/*-- Process records */" + Environment.NewLine +
//                      "INSERT BULK_COLOR_RULE( HDR_BC_RID, LAYER_ID, ST_RID, RULE_TYPE_ID, UNITS ) " + Environment.NewLine +
//                      "SELECT @HDR_BC_RID, @LAYER_ID, xmlSTR_RID, xmlRULE_TYPE, xmlUNITS " + Environment.NewLine +
//                      "  FROM OPENXML (@idoc, '/root/store',2) " + Environment.NewLine +
//                      "  WITH ( xmlSTR_RID        int    '@STR_RID', " + Environment.NewLine +
//                      "         xmlRULE_TYPE      int    '@RULE_TYPE', " + Environment.NewLine +
//                      "         xmlUNITS          int    '@UNITS') xmlvariables " + Environment.NewLine +
//                      "RETURN";
//                _dba.ExecuteNonQuery(sql);
//            }
//            catch
//            {
//                throw;
//            }
//        }

//        private void ModifyUpdatePackAllocBin()
//        {
//            // Verified --J.Ellis
//            try
//            {
//                string sql;
//                sql = "if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[SP_MID_UPDATE_PACKALLOCBIN]') " +
//                      "and OBJECTPROPERTY(id, N'IsProcedure') = 1) " +
//                      "drop procedure [dbo].[SP_MID_UPDATE_PACKALLOCBIN]";
//                _dba.ExecuteNonQuery(sql);

//                sql = "/* Create procedure/function SP_MID_UPDATE_PACKALLOCBIN.   */ " + Environment.NewLine +
//                       "CREATE PROCEDURE [dbo].[SP_MID_UPDATE_PACKALLOCBIN] " + Environment.NewLine +
//                       "@HDR_RID INT,  " + Environment.NewLine +
//                       "@HDR_PACK_RID INT, " + Environment.NewLine +
//                       "@TYPE INT, " + Environment.NewLine +
//                       "@SEQ INT, " + Environment.NewLine +
//                       "@VERSION INT, " + Environment.NewLine +
//                       "@STATUS INT, " + Environment.NewLine +
//                       "@STORE_DATA IMAGE, " + Environment.NewLine +
//                       "@DATA_OFFSET INT, " + Environment.NewLine +
//                       "@DATA_LENGTH INT, " + Environment.NewLine +
//                       "@ReturnCode int = -100 output " + Environment.NewLine +
//                       "AS " + Environment.NewLine +
//                       "BEGIN " + Environment.NewLine +
//                       "set nocount on " + Environment.NewLine +
//                       "delete from [dbo].PACK_ALLOCATION_BIN with (rowlock) " + Environment.NewLine +
//                       "where HDR_RID= @HDR_RID and HDR_PACK_RID = @HDR_PACK_RID and TYPE = @TYPE and SEQ = @SEQ " + Environment.NewLine +
//                       "insert into [dbo].PACK_ALLOCATION_BIN with (rowlock) " + Environment.NewLine +
//                       "(HDR_RID, HDR_PACK_RID,TYPE,SEQ,VERSION_NUMBER,STATUS,STORE_DATA,DATA_OFFSET,DATA_LENGTH) " + Environment.NewLine +
//                       "VALUES(@HDR_RID, @HDR_PACK_RID,@TYPE,@SEQ,@VERSION,@STATUS,@STORE_DATA,@DATA_OFFSET,@DATA_LENGTH) " + Environment.NewLine +
//                       "set @ReturnCode = @@rowcount " + Environment.NewLine +
//                       "return @ReturnCode " + Environment.NewLine +
//                       "end ";
//                _dba.ExecuteNonQuery(sql);
//            }
//            catch
//            {
//                throw;
//            }
//        }

//        private void ModifyUpdateColorAllocBin()
//        {
//            // Verified --J.Ellis
//            try
//            {
//                string sql;
//                sql = "if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[SP_MID_UPDATE_COLORALLOCBIN]') " +
//                      "and OBJECTPROPERTY(id, N'IsProcedure') = 1) " +
//                      "drop procedure [dbo].[SP_MID_UPDATE_COLORALLOCBIN]";
//                _dba.ExecuteNonQuery(sql);

//                sql = "/* Create procedure/function SP_MID_UPDATE_COLORALLOCBIN.              */" + Environment.NewLine +
//                      "CREATE Procedure [dbo].[SP_MID_UPDATE_COLORALLOCBIN] " + Environment.NewLine +
//                      "@HDR_RID INT, " + Environment.NewLine +
//                      "@HDR_BC_RID INT, " + Environment.NewLine +
//                      "@TYPE INT, " + Environment.NewLine +
//                      "@SEQ INT, " + Environment.NewLine +
//                      "@VERSION INT, " + Environment.NewLine +
//                      "@STATUS INT, " + Environment.NewLine +
//                      "@STORE_DATA IMAGE, " + Environment.NewLine +
//                      "@DATA_OFFSET INT, " + Environment.NewLine +
//                      "@DATA_LENGTH INT, " + Environment.NewLine +
//                      "@ReturnCode int = -100 output " + Environment.NewLine +
//                      "AS " + Environment.NewLine +
//                      "BEGIN " + Environment.NewLine +
//                      " set nocount on " + Environment.NewLine +
//                      " delete from [dbo].COLOR_ALLOCATION_BIN with (rowlock) " + Environment.NewLine +
//                      " where HDR_RID = @HDR_RID and HDR_BC_RID = @HDR_BC_RID and TYPE = @TYPE and SEQ = @SEQ " + Environment.NewLine +
//                      " insert into [dbo].COLOR_ALLOCATION_BIN with (rowlock) " + Environment.NewLine +
//                      " (HDR_RID, HDR_BC_RID,TYPE,SEQ,VERSION_NUMBER,STATUS,STORE_DATA,DATA_OFFSET,DATA_LENGTH) " + Environment.NewLine +
//                      " VALUES(@HDR_RID,@HDR_BC_RID,@TYPE,@SEQ,@VERSION,@STATUS,@STORE_DATA,@DATA_OFFSET,@DATA_LENGTH) " + Environment.NewLine +
//                      " set @ReturnCode = @@rowcount " + Environment.NewLine +
//                      " return @ReturnCode " + Environment.NewLine +
//                      "END";
//                _dba.ExecuteNonQuery(sql);
//            }
//            catch
//            {
//                throw;
//            }
//        }

//        private void ModifyUpdateColorSizeAllocBin()
//        {
//            // Verified --J.Ellis
//            try
//            {
//                string sql;
//                sql = "if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[SP_MID_UPDATE_COLOR_SIZEALLOCBIN]') " +
//                      "and OBJECTPROPERTY(id, N'IsProcedure') = 1) " +
//                      "drop procedure [dbo].[SP_MID_UPDATE_COLOR_SIZEALLOCBIN]";
//                _dba.ExecuteNonQuery(sql);

//                sql = "/* Create procedure/function SP_MID_UPDATE_COLOR_SIZEALLOCBIN.              */ " + Environment.NewLine +
//                      "CREATE Procedure [dbo].[SP_MID_UPDATE_COLOR_SIZEALLOCBIN] " + Environment.NewLine +
//                      "@HDR_RID INT, " + Environment.NewLine +
//                      "@HDR_BC_RID INT, " + Environment.NewLine +
//                      "@HDR_BCSZ_KEY INT, " + Environment.NewLine +
//                      "@TYPE INT, " + Environment.NewLine +
//                      "@SEQ INT, " + Environment.NewLine +
//                      "@VERSION INT, " + Environment.NewLine +
//                      "@STATUS INT, " + Environment.NewLine +
//                      "@STORE_DATA IMAGE, " + Environment.NewLine +
//                      "@DATA_OFFSET INT, " + Environment.NewLine +
//                      "@DATA_LENGTH INT, " + Environment.NewLine +
//                      "@ReturnCode int = -100 output " + Environment.NewLine +
//                      "AS " + Environment.NewLine +
//                      "BEGIN " + Environment.NewLine +
//                      " set nocount on " + Environment.NewLine +
//                      " delete from [dbo].COLOR_SIZE_ALLOCATION_BIN with (rowlock) " + Environment.NewLine +
//                      " where HDR_RID = @HDR_RID and HDR_BC_RID = @HDR_BC_RID and HDR_BCSZ_KEY = @HDR_BCSZ_KEY and TYPE = @TYPE and SEQ = @SEQ " + Environment.NewLine +
//                      " insert into [dbo].COLOR_SIZE_ALLOCATION_BIN with (rowlock) " + Environment.NewLine +
//                      " (HDR_RID, HDR_BC_RID,HDR_BCSZ_KEY,TYPE,SEQ,VERSION_NUMBER,STATUS,STORE_DATA,DATA_OFFSET,DATA_LENGTH) " + Environment.NewLine +
//                      " VALUES(@HDR_RID, @HDR_BC_RID,@HDR_BCSZ_KEY,@TYPE,@SEQ,@VERSION,@STATUS,@STORE_DATA,@DATA_OFFSET,@DATA_LENGTH) " + Environment.NewLine +
//                      " set @ReturnCode = @@rowcount " + Environment.NewLine +
//                      " return @ReturnCode " + Environment.NewLine +
//                      "END";
//                _dba.ExecuteNonQuery(sql);
//            }
//            catch
//            {
//                throw;
//            }
//        }

 
//        private void PopulateHeaderStatusFields()
//        {
//            DataTable dtHeaders;
//            string sql;
//            sql = "SELECT HDR_RID,HDR_ID, STYLE_HNRID, UNITS_RECEIVED, ALLOCATION_STATUS_FLAGS, BALANCE_STATUS_FLAGS, SHIPPING_STATUS_FLAGS, ALLOCATION_TYPE_FLAGS, INTRANSIT_STATUS_FLAGS from HEADER";
//            dtHeaders = _dba.ExecuteSQLQuery(sql, "Get_Headers");
//            int hdrCount = dtHeaders.Rows.Count;
//            int[]  _hdrRID = new int[hdrCount];
//            int[] _packCount = new int[hdrCount];
//            int[] _bulkColorCount = new int[hdrCount];
//            int[] _bulkSizeCount = new int[hdrCount];
//            //ushort[]_allocationStatusFlags = new ushort[hdrCount];  // TT#246 - MD - JEllis - AnF VSW Size In Store Minimums
//            uint[] _allocationStatusFlags = new uint[hdrCount];       // TT#246 - MD - JEllis - AnF VSW Size In Store Minimums
//            ushort[] _balanceStatusFlags= new ushort[hdrCount];
//            byte[] _shippingStatusFlags = new byte[hdrCount];
//            uint[] _allocationTypeFlags = new uint[hdrCount];
//            byte[] _intransitStatusFlags = new byte[hdrCount];
//            DataTable dtPacks;
//            DataTable dtPackColors;
//            DataTable dtPackSizes;
//            DataTable dtBulkColors;
//            DataTable dtBulkColorSizes;
//            int i = 0;
//            int totalHdrReceivedUnits;
//            int styleHnRID;

//            int totalPackUnits;
//            int totalBulkColorUnits;

//            int bulkColorUnits;
//            int bulkColorSizeUnits;

//            int packMultiple;
//            int packsReceived;
//            int packColorUnits;
//            int totalPackColorUnits;
//            int totalPackColorSizeUnits;

//            foreach (DataRow dr in dtHeaders.Rows)
//            {
//                _hdrRID[i] = Convert.ToInt32(dr["HDR_RID"], CultureInfo.CurrentUICulture);
//                styleHnRID = Convert.ToInt32(dr["STYLE_HNRID"], CultureInfo.CurrentUICulture);
//                totalHdrReceivedUnits = Convert.ToInt32(dr["UNITS_RECEIVED"], CultureInfo.CurrentUICulture);
//                //_allocationStatusFlags[i] = (ushort)Convert.ToInt32(dr["ALLOCATION_STATUS_FLAGS"], CultureInfo.CurrentUICulture); // TT#246 - MD - JEllis - AnF VSW Size In Store Minimums
//                _allocationStatusFlags[i] = Convert.ToUInt32(dr["ALLOCATION_STATUS_FLAGS"], CultureInfo.CurrentUICulture); // TT#246 - MD - JEllis - AnF VSW Size In Store Minimums
//                _balanceStatusFlags[i] = (ushort)Convert.ToInt32(dr["BALANCE_STATUS_FLAGS"], CultureInfo.CurrentUICulture);
//                _shippingStatusFlags[i] = Convert.ToByte(dr["SHIPPING_STATUS_FLAGS"], CultureInfo.CurrentUICulture);
//                _allocationTypeFlags[i] = Convert.ToUInt32(dr["ALLOCATION_TYPE_FLAGS"], CultureInfo.CurrentUICulture);
//                _intransitStatusFlags[i] = Convert.ToByte(dr["INTRANSIT_STATUS_FLAGS"], CultureInfo.CurrentUICulture);
                
//                sql = "select * from HEADER_PACK (nolock) where HDR_RID = "
//                       + _hdrRID[i].ToString() ;
//                dtPacks = _dba.ExecuteSQLQuery(sql, "Get_Packs");
//                _packCount[i] = dtPacks.Rows.Count;
//                totalPackUnits = 0;

//                // Assume receipts balance
//                _balanceStatusFlags[i] = MIDFlag.SetFlagValue(_balanceStatusFlags[i], (int)eBalanceStatusFlag.ColorReceiptsBalanceToBulk, true);
//                _balanceStatusFlags[i] = MIDFlag.SetFlagValue(_balanceStatusFlags[i], (int)eBalanceStatusFlag.PackBulkReceiptsBalanceToTotal, true);
//                _balanceStatusFlags[i] = MIDFlag.SetFlagValue(_balanceStatusFlags[i], (int)eBalanceStatusFlag.PackColorsBalanceToPack, true);
//                _balanceStatusFlags[i] = MIDFlag.SetFlagValue(_balanceStatusFlags[i], (int)eBalanceStatusFlag.PackSizesBalanceToPackColor, true);
//                _balanceStatusFlags[i] = MIDFlag.SetFlagValue(_balanceStatusFlags[i], (int)eBalanceStatusFlag.SizeReceiptsBalanceToColor, true);

//                if (_packCount[i] > 0)
//                {
//                    foreach (DataRow pdr in dtPacks.Rows)
//                    {
//                        packMultiple = Convert.ToInt32(pdr["MULTIPLE"], CultureInfo.CurrentUICulture);
//                        packsReceived = Convert.ToInt32(pdr["PACKS"], CultureInfo.CurrentUICulture);
//                        totalPackUnits += packMultiple * packsReceived;
//                        sql = "select * from HEADER_PACK_COLOR (nolock) where HDR_PACK_RID = "
//                               + pdr["HDR_PACK_RID"];
//                        dtPackColors = _dba.ExecuteSQLQuery(sql, "Get_Pack_Colors");
//                        if (dtPackColors.Rows.Count > 0)
//                        {
//                            totalPackColorUnits = 0;
//                            foreach (DataRow pcdr in dtPackColors.Rows)
//                            {
//                                packColorUnits = Convert.ToInt32(pcdr["UNITS"], CultureInfo.CurrentUICulture);
//                                totalPackColorUnits += packColorUnits;
//                                sql = "select * from HEADER_PACK_COLOR_SIZE (nolock) where HDR_PC_RID = "
//                                       + pcdr["HDR_PC_RID"];
//                                dtPackSizes = _dba.ExecuteSQLQuery(sql, "Get_Pack_Sizes");
//                                if (dtPackSizes.Rows.Count > 0)
//                                {
//                                    totalPackColorSizeUnits = 0;
//                                    foreach (DataRow psdr in dtPackSizes.Rows)
//                                    {
//                                        totalPackColorSizeUnits += Convert.ToInt32(psdr["UNITS"], CultureInfo.CurrentUICulture);
//                                    }
//                                    if (totalPackColorSizeUnits != packColorUnits)
//                                    {
//                                        _balanceStatusFlags[i] = MIDFlag.SetFlagValue(_balanceStatusFlags[i], (int)eBalanceStatusFlag.PackSizesBalanceToPackColor, false);
//                                    }
//                                }
//                            }
//                            if (totalPackColorUnits != packMultiple)
//                            {
//                                _balanceStatusFlags[i] = MIDFlag.SetFlagValue(_balanceStatusFlags[i], (int)eBalanceStatusFlag.PackColorsBalanceToPack, false);
//                            }
//                        }
//                    }
//                }
//                _bulkSizeCount[i] = 0;
//                sql = "select * from HEADER_BULK_COLOR (nolock) where HDR_RID = "
//                       + _hdrRID[i].ToString();
//                dtBulkColors = _dba.ExecuteSQLQuery(sql, "Get_COLORs");
//                _bulkColorCount [i] = dtBulkColors.Rows.Count;
//                totalBulkColorUnits = 0;

//                if (_bulkColorCount[i] > 0)
//                {
//                    if (MIDFlag.GetFlagValue(_allocationTypeFlags[i], (int)eAllocationTypeFlag.WorkUpBulkColorBuy) == false)
//                    {
//                        foreach (DataRow cdr in dtBulkColors.Rows)
//                        {
//                            bulkColorUnits = Convert.ToInt32(cdr["UNITS"], CultureInfo.CurrentUICulture);
//                            totalBulkColorUnits += bulkColorUnits;
//                            sql = "select * from HEADER_BULK_COLOR_SIZE (nolock) where HDR_BC_RID = "
//                                   + cdr["HDR_BC_RID"];
//                            dtBulkColorSizes = _dba.ExecuteSQLQuery(sql, "Get_BULK_ColorSize");
//                            _bulkSizeCount[i] += dtBulkColorSizes.Rows.Count;
//                            if (MIDFlag.GetFlagValue(_allocationTypeFlags[i], (int)eAllocationTypeFlag.WorkUpBulkSizeBuy) == false)
//                            {
//                                if (dtBulkColorSizes.Rows.Count > 0)
//                                {
//                                    bulkColorSizeUnits = 0;
//                                    foreach (DataRow sdr in dtBulkColorSizes.Rows)
//                                    {
//                                        bulkColorSizeUnits += Convert.ToInt32(sdr["UNITS"], CultureInfo.CurrentUICulture);
//                                    }
//                                    if(bulkColorSizeUnits != bulkColorUnits)
//                                    {
//                                        _balanceStatusFlags[i] = MIDFlag.SetFlagValue(_balanceStatusFlags[i], (int)eBalanceStatusFlag.SizeReceiptsBalanceToColor, false);
//                                    }
//                                }
//                            }
//                        }
//                    }
//                }


//                if (MIDFlag.GetFlagValue(_allocationTypeFlags[i], (int)eAllocationTypeFlag.WorkUpTotalBuy) == false)
//                {
//                    if (_packCount[i] > 0 || _bulkColorCount[i] > 0)
//                    {
//                        if (totalHdrReceivedUnits != totalPackUnits + totalBulkColorUnits)
//                        {
//                            _balanceStatusFlags[i] = MIDFlag.SetFlagValue(_balanceStatusFlags[i], (int)eBalanceStatusFlag.PackBulkReceiptsBalanceToTotal, false);
//                        }
//                    }
//                }


//                _allocationStatusFlags[i] = MIDFlag.SetFlagValue(_allocationStatusFlags[i], (int)eAllocationStatusFlag.ReceivedInBalance, true);
//                if (MIDFlag.GetFlagValue(_balanceStatusFlags[i], (int)eBalanceStatusFlag.ColorReceiptsBalanceToBulk) == false
//                    || MIDFlag.GetFlagValue(_balanceStatusFlags[i], (int)eBalanceStatusFlag.PackBulkReceiptsBalanceToTotal) == false
//                    || MIDFlag.GetFlagValue(_balanceStatusFlags[i], (int)eBalanceStatusFlag.PackColorsBalanceToPack) == false
//                    || MIDFlag.GetFlagValue(_balanceStatusFlags[i], (int)eBalanceStatusFlag.PackSizesBalanceToPackColor) == false
//                    || MIDFlag.GetFlagValue(_balanceStatusFlags[i], (int)eBalanceStatusFlag.SizeReceiptsBalanceToColor) == false
//                    || styleHnRID < 0 || Convert.IsDBNull(dr["HDR_ID"]) || Convert.ToString(dr["HDR_ID"]) == string.Empty)
//                {
//                    _allocationStatusFlags[i] = MIDFlag.SetFlagValue(_allocationStatusFlags[i], (int)eAllocationStatusFlag.ReceivedInBalance, false);
//                }
//                i++;

//            }

//            int _displayStatus;
//            int _displayIntransit;
//            int _displayShipping;
//            int _displayType;


//            for (i = 0; i<hdrCount; i++)
//            {

//                // Build Type:
//                if (MIDFlag.GetFlagValue(_allocationTypeFlags[i], (int)eAllocationTypeFlag.Receipt))
//                {
//                    _displayType = (int)eHeaderType.Receipt;
//                }
//                else if (MIDFlag.GetFlagValue(_allocationTypeFlags[i], (int)eAllocationTypeFlag.ASN))
//                {
//                    _displayType = (int)eHeaderType.ASN;
//                }
//                else if (MIDFlag.GetFlagValue(_allocationTypeFlags[i], (int)eAllocationTypeFlag.DropShip))
//                {
//                    _displayType = (int)eHeaderType.DropShip;
//                }
//                else if (MIDFlag.GetFlagValue(_allocationTypeFlags[i], (int)eAllocationTypeFlag.IsDummy))
//                {
//                    _displayType = (int)eHeaderType.Dummy;
//                }
//                else if (MIDFlag.GetFlagValue(_allocationTypeFlags[i], (int)eAllocationTypeFlag.InUse))
//                {
//                    _displayType = (int)eHeaderType.MultiHeader;
//                }
//                else if (MIDFlag.GetFlagValue(_allocationTypeFlags[i], (int)eAllocationTypeFlag.Reserve))
//                {
//                    _displayType = (int)eHeaderType.Reserve;
//                }
//                else if (MIDFlag.GetFlagValue(_allocationTypeFlags[i], (int)eAllocationTypeFlag.WorkUpTotalBuy))
//                {
//                    _displayType = (int)eHeaderType.WorkupTotalBuy;
//                }
//                else if (MIDFlag.GetFlagValue(_allocationTypeFlags[i], (int)eAllocationTypeFlag.PurchaseOrder))
//                {
//                    _displayType = (int)eHeaderType.PurchaseOrder;
//                }
//                else if (MIDFlag.GetFlagValue(_allocationTypeFlags[i], (int)eAllocationTypeFlag.Assortment))
//                {
//                    _displayType = (int)eHeaderType.Assortment;
//                }
//                else if (MIDFlag.GetFlagValue(_allocationTypeFlags[i], (int)eAllocationTypeFlag.Placeholder))
//                {
//                    _displayType = (int)eHeaderType.Placeholder;
//                }
//                else // set to "Receipt"
//                {
//                    _displayType = (int)eHeaderType.Receipt;
//                }

//                // Build Intransit Status
//                if (MIDFlag.GetFlagValue(_intransitStatusFlags[i], (int)eIntransitUpdateStatusFlag.StyleIntransitUpdated))
//                {
//                    if (_packCount[i] == 0 && _bulkColorCount[i] == 0)
//                    {
//                        _displayIntransit = (int)eHeaderIntransitStatus.IntransitBySKU;
//                    }
//                    else if (MIDFlag.GetFlagValue(_intransitStatusFlags[i], (int)eIntransitUpdateStatusFlag.BulkSizeIntransitUpdated))
//                    {
//                        _displayIntransit = (int)eHeaderIntransitStatus.IntransitByBulkSize;
//                    }
//                    else
//                    {
//                        _displayIntransit = (int)eHeaderIntransitStatus.IntransitByStyle;
//                    }
//                }
//                else
//                {
//                    _displayIntransit = (int)eHeaderIntransitStatus.NotIntransit;
//                }



//                // Build Shipping Status
//                if (MIDFlag.GetFlagValue(_shippingStatusFlags[i], (int)eShippingStatusFlag.ShippingComplete))
//                {
//                    _displayShipping = (int)eHeaderShipStatus.Shipped;
//                }
//                else if (MIDFlag.GetFlagValue(_shippingStatusFlags[i], (int)eShippingStatusFlag.ShippingOnHold))
//                {
//                    _displayShipping = (int)eHeaderShipStatus.OnHold;
//                }
//                else if (MIDFlag.GetFlagValue(_shippingStatusFlags[i], (int)eShippingStatusFlag.ShippingStarted))
//                {
//                    _displayShipping = (int)eHeaderShipStatus.Partial;
//                }
//                else
//                {
//                    _displayShipping = (int)eHeaderShipStatus.NotShipped;
//                }




//                // Build AllocationStatus (copied from AllocationProfile and then modified to fit this environment
//                if (MIDFlag.GetFlagValue(_allocationStatusFlags[i], (int)eAllocationStatusFlag.ReceivedInBalance) == false)
//                {
//                    _displayStatus = (int)eHeaderAllocationStatus.ReceivedOutOfBalance;
//                }
//                else
//                {
//                    MIDFlag.SetFlagValue(_allocationStatusFlags[i], (int)eAllocationStatusFlag.ReceivedInBalance, true);
//                    if (MIDFlag.GetFlagValue(_allocationTypeFlags[i], (int)eAllocationTypeFlag.InUse))
//                    {
//                    _displayStatus = (int)eHeaderAllocationStatus.InUseByMultiHeader;
//                    }
//                    else if (MIDFlag.GetFlagValue(_allocationStatusFlags[i], (int)eAllocationStatusFlag.Released))
//                    {
//                    _displayStatus = (int)eHeaderAllocationStatus.Released;
//                    }
//                    else if (MIDFlag.GetFlagValue(_allocationStatusFlags[i], (int)eAllocationStatusFlag.ReleaseApproved))
//                    {
//                    _displayStatus = (int)eHeaderAllocationStatus.ReleaseApproved;
//                    }
//                    else if (     // IF ALLOCATION STARTED
//                    MIDFlag.GetFlagValue(_allocationStatusFlags[i], (int)eAllocationStatusFlag.RulesDefinedAndProcessed)
//                    || MIDFlag.GetFlagValue(_allocationStatusFlags[i], (int)eAllocationStatusFlag.NeedAllocationPerformed)
//                    || MIDFlag.GetFlagValue(_allocationStatusFlags[i], (int)eAllocationStatusFlag.UnitsAllocated))
//                    {
//                        if (!MIDFlag.GetFlagValue(_allocationStatusFlags[i], (int)eAllocationStatusFlag.UnitsAllocated))
//                        {
//                            _displayStatus = (int)eHeaderAllocationStatus.AllocationStarted;
//                        }
//                        else if (MIDFlag.GetFlagValue(_balanceStatusFlags[i], (int)eBalanceStatusFlag.AtLeastOneSizeAllocated))
//                        {
//                            if (MIDFlag.GetFlagValue(_balanceStatusFlags[i], (int)eBalanceStatusFlag.BulkSizeAllocationInBalance))
//                            {
//                                if (!MIDFlag.GetFlagValue(_balanceStatusFlags[i], (int)eBalanceStatusFlag.BulkPlusPackAllocationInBalance))
//                                {
//                                    _displayStatus = (int)eHeaderAllocationStatus.AllocatedOutOfBalance;
//                                }
//                                else
//                                {
//                                    _displayStatus = (int)eHeaderAllocationStatus.AllInBalance;
//                                }
//                            }
//                            else if ((MIDFlag.GetFlagValue(_allocationStatusFlags[i], (int)eAllocationStatusFlag.BottomUpSizePerformed)
//                                      || (!MIDFlag.GetFlagValue(_balanceStatusFlags[i], (int)eBalanceStatusFlag.BulkColorAllocationInBalance)
//                                       && !MIDFlag.GetFlagValue(_balanceStatusFlags[i], (int)eBalanceStatusFlag.BulkColorAllocations_GT_ColorReceipts)))
//                                && !MIDFlag.GetFlagValue(_allocationStatusFlags[i], (int)eAllocationStatusFlag.NeedAllocationPerformed)
//                                && MIDFlag.GetFlagValue(_balanceStatusFlags[i], (int)eBalanceStatusFlag.PackAllocationInBalance))
//                            {
//                                if (!MIDFlag.GetFlagValue(_balanceStatusFlags[i], (int)eBalanceStatusFlag.BulkColorAllocationInBalance))
//                                {
//                                    if (MIDFlag.GetFlagValue(_balanceStatusFlags[i], (int)eBalanceStatusFlag.BulkColorAllocations_GT_ColorReceipts))
//                                    {
//                                        _displayStatus = (int)eHeaderAllocationStatus.SizesOutOfBalance;
//                                        // NOTE:  Decided that if everything out of balance, then "sizes out of balance" would be best status.
//                                    }
//                                    else if (!MIDFlag.GetFlagValue(_balanceStatusFlags[i], (int)eBalanceStatusFlag.BulkSizeAllocationInBalance))
//                                    {
//                                        if (MIDFlag.GetFlagValue(_balanceStatusFlags[i], (int)eBalanceStatusFlag.BulkSizeAllocations_GT_SizeReceipts))
//                                        {
//                                            _displayStatus = (int)eHeaderAllocationStatus.PartialSizeOutOfBalance;
//                                        }
//                                        else if (MIDFlag.GetFlagValue(_balanceStatusFlags[i], (int)eBalanceStatusFlag.StoreSizeAllocationsInBalanceToColor))
//                                        {
//                                            _displayStatus = (int)eHeaderAllocationStatus.PartialSizeInBalance;
//                                        }
//                                        else
//                                        {
//                                            _displayStatus = (int)eHeaderAllocationStatus.PartialSizeOutOfBalance;
//                                        }
//                                    }
//                                    else
//                                    {
//                                        _displayStatus = (int)eHeaderAllocationStatus.PartialSizeInBalance;
//                                    }
//                                }
//                                else
//                                {
//                                    _displayStatus = (int)eHeaderAllocationStatus.SizesOutOfBalance;
//                                }
//                            }
//                            else
//                            {
//                                _displayStatus = (int)eHeaderAllocationStatus.SizesOutOfBalance;
//                            }
//                        }
//                        else if (MIDFlag.GetFlagValue(_balanceStatusFlags[i], (int)eBalanceStatusFlag.BulkPlusPackAllocationInBalance))
//                        {
//                            if (_bulkColorCount[i] == 0)
//                            {
//                                _displayStatus = (int)eHeaderAllocationStatus.AllInBalance;
//                            }
//                            else if (MIDFlag.GetFlagValue(_allocationTypeFlags[i], (int)eAllocationTypeFlag.WorkUpBulkSizeBuy))
//                            {
//                                _displayStatus = (int)eHeaderAllocationStatus.SizesOutOfBalance;
//                            }
//                            else if (_bulkSizeCount[i] > 0)
//                            {
//                                _displayStatus = (int)eHeaderAllocationStatus.AllocatedInBalance;
//                            }
//                            else
//                            {
//                                _displayStatus = (int)eHeaderAllocationStatus.AllInBalance;
//                            }
//                        }
//                        else if (MIDFlag.GetFlagValue(_allocationStatusFlags[i], (int)eAllocationStatusFlag.NeedAllocationPerformed))
//                        {
//                            _displayStatus = (int)eHeaderAllocationStatus.AllocatedOutOfBalance;
//                        }
//                        else if (MIDFlag.GetFlagValue(_allocationStatusFlags[i], (int)eAllocationStatusFlag.RulesDefinedAndProcessed))
//                        {
//                            if (!MIDFlag.GetFlagValue(_balanceStatusFlags[i], (int)eBalanceStatusFlag.PackAllocationInBalance) ||
//                                !MIDFlag.GetFlagValue(_balanceStatusFlags[i], (int)eBalanceStatusFlag.BulkColorAllocationInBalance) ||
//                                !MIDFlag.GetFlagValue(_balanceStatusFlags[i], (int)eBalanceStatusFlag.BulkPlusPackAllocationInBalance) ||
//                                !MIDFlag.GetFlagValue(_balanceStatusFlags[i], (int)eBalanceStatusFlag.BulkSizeAllocationInBalance))
//                            {
//                                if (MIDFlag.GetFlagValue(_balanceStatusFlags[i], (int)eBalanceStatusFlag.AtLeastOneSizeAllocated))
//                                {
//                                    if ((MIDFlag.GetFlagValue(_allocationStatusFlags[i], (int)eAllocationStatusFlag.BottomUpSizePerformed)
//                                        || (!MIDFlag.GetFlagValue(_balanceStatusFlags[i], (int)eBalanceStatusFlag.BulkColorAllocationInBalance)
//                                            && !MIDFlag.GetFlagValue(_balanceStatusFlags[i], (int)eBalanceStatusFlag.BulkColorAllocations_GT_ColorReceipts)))
//                                    && MIDFlag.GetFlagValue(_balanceStatusFlags[i], (int)eBalanceStatusFlag.PackAllocationInBalance))
//                                    {
//                                        if (!MIDFlag.GetFlagValue(_balanceStatusFlags[i], (int)eBalanceStatusFlag.BulkColorAllocationInBalance))
//                                        {
//                                            if (MIDFlag.GetFlagValue(_balanceStatusFlags[i], (int)eBalanceStatusFlag.BulkColorAllocations_GT_ColorReceipts))
//                                            {
//                                                _displayStatus = (int)eHeaderAllocationStatus.SizesOutOfBalance;
//                                                // NOTE:  Decided that if everything out of balance, then "sizes out of balance" would be best status.
//                                            }
//                                            else if (!MIDFlag.GetFlagValue(_balanceStatusFlags[i], (int)eBalanceStatusFlag.BulkSizeAllocationInBalance))
//                                            {
//                                                if (MIDFlag.GetFlagValue(_balanceStatusFlags[i], (int)eBalanceStatusFlag.BulkSizeAllocations_GT_SizeReceipts))
//                                                {
//                                                    _displayStatus = (int)eHeaderAllocationStatus.PartialSizeOutOfBalance;
//                                                }
//                                                else if (MIDFlag.GetFlagValue(_balanceStatusFlags[i], (int)eBalanceStatusFlag.StoreSizeAllocationsInBalanceToColor))
//                                                {
//                                                    _displayStatus = (int)eHeaderAllocationStatus.PartialSizeInBalance;
//                                                }
//                                                else
//                                                {
//                                                    _displayStatus = (int)eHeaderAllocationStatus.PartialSizeOutOfBalance;
//                                                }
//                                            }
//                                            else
//                                            {
//                                                _displayStatus = (int)eHeaderAllocationStatus.PartialSizeInBalance;
//                                            }
//                                        }
//                                        else
//                                        {
//                                            _displayStatus = (int)eHeaderAllocationStatus.AllocatedOutOfBalance;
//                                        }
//                                    }
//                                    else
//                                    {
//                                        _displayStatus = (int)eHeaderAllocationStatus.AllocatedOutOfBalance;
//                                    }
//                                }
//                                else
//                                {
//                                    _displayStatus = (int)eHeaderAllocationStatus.AllocatedOutOfBalance;
//                                }
//                            }
//                            else
//                            {
//                                _displayStatus = (int)eHeaderAllocationStatus.AllInBalance;
//                            }
//                        }
//                        else if (MIDFlag.GetFlagValue(_allocationStatusFlags[i], (int)eAllocationStatusFlag.BottomUpSizePerformed)
//                               || (!MIDFlag.GetFlagValue(_balanceStatusFlags[i], (int)eBalanceStatusFlag.BulkColorAllocationInBalance)
//                               && !MIDFlag.GetFlagValue(_balanceStatusFlags[i], (int)eBalanceStatusFlag.BulkColorAllocations_GT_ColorReceipts)))
//                        {
//                            if (!MIDFlag.GetFlagValue(_balanceStatusFlags[i], (int)eBalanceStatusFlag.BulkColorAllocationInBalance))
//                            {
//                                if (MIDFlag.GetFlagValue(_balanceStatusFlags[i], (int)eBalanceStatusFlag.BulkColorAllocations_GT_ColorReceipts))
//                                {
//                                    _displayStatus = (int)eHeaderAllocationStatus.SizesOutOfBalance;
//                                    // NOTE:  Decided that if everything out of balance, then "sizes out of balance" would be best status.
//                                }
//                                else if (MIDFlag.GetFlagValue(_balanceStatusFlags[i], (int)eBalanceStatusFlag.AtLeastOneSizeAllocated))
//                                {
//                                    if (!MIDFlag.GetFlagValue(_balanceStatusFlags[i], (int)eBalanceStatusFlag.BulkSizeAllocationInBalance))
//                                    {
//                                        if (MIDFlag.GetFlagValue(_balanceStatusFlags[i], (int)eBalanceStatusFlag.BulkSizeAllocations_GT_SizeReceipts))
//                                        {
//                                            _displayStatus = (int)eHeaderAllocationStatus.PartialSizeOutOfBalance;
//                                        }
//                                        else if (MIDFlag.GetFlagValue(_balanceStatusFlags[i], (int)eBalanceStatusFlag.StoreSizeAllocationsInBalanceToColor))
//                                        {
//                                            _displayStatus = (int)eHeaderAllocationStatus.PartialSizeInBalance;
//                                        }
//                                        else
//                                        {
//                                            _displayStatus = (int)eHeaderAllocationStatus.PartialSizeOutOfBalance;
//                                        }
//                                    }
//                                    else
//                                    {
//                                        _displayStatus = (int)eHeaderAllocationStatus.PartialSizeInBalance;
//                                    }
//                                }  
//                                else
//                                {
//                                   _displayStatus = (int)eHeaderAllocationStatus.AllocatedOutOfBalance;
//                                }
//                            }
//                            else
//                            {
//                                _displayStatus = (int)eHeaderAllocationStatus.AllocatedOutOfBalance;
//                            }
//                        }
//                        else
//                        {
//                        _displayStatus = (int)eHeaderAllocationStatus.AllocatedOutOfBalance;
//                        }
//                    }
//                    else 
//                    {
//                        _displayStatus = (int)eHeaderAllocationStatus.ReceivedInBalance;
//                    }
//                }

                
//                sql = "UPDATE HEADER SET DISPLAY_STATUS = " + _displayStatus.ToString()
//                       + ", DISPLAY_INTRANSIT = " + _displayIntransit.ToString()
//                       + ", DISPLAY_SHIP_STATUS = " + _displayShipping.ToString()
//                       + ", DISPLAY_TYPE = " + _displayType.ToString()
//                       + ", ALLOCATION_STATUS_FLAGS = " + _allocationStatusFlags[i].ToString()
//                       + ", BALANCE_STATUS_FLAGS = " + _balanceStatusFlags[i].ToString()
//                       + " where HDR_RID = " + _hdrRID[i].ToString();
//                _dba.ExecuteNonQuery(sql);
//            }

//            _dba.CommitData();
//        }
//    } 

//    // begin MID Track 5761 Allocation Multiple not saved to database
//    class AllocationMultipleDefaultConversion : ICustomConversion
//    {
//        //=======
//        // FIELDS
//        //=======

//        private DatabaseAccess _dba;
//        private Header _header;

//        //=============
//        // CONSTRUCTORS
//        //=============

//        public AllocationMultipleDefaultConversion()
//        {
//        }

//        //=============
//        // METHODS
//        //=============
//        public void Execute(string aConnectionString, Queue aMessageQueue, Queue aProcessedQueue,
//            eDatabaseType aDatabaseType, int aNoDataTables, string aAllocationFileGroup,
//            string aForecastFileGroup, string aHistoryFileGroup, int aNoHistoryFileGroup,
//            string aDailyHistoryFileGroup, int aNoDailyHistoryFileGroup,
//            string aAuditFileGroup, string aWeekArchiveFileGroup, string aDayArchiveFileGroup) // TT#173 Provide database container for large data collections
//        {
//            try
//            {
//                ConvertDB(aConnectionString, aMessageQueue);
//            }
//            catch
//            {
//                throw;
//            }
//        }

//        private void ConvertDB(string aConnectionString, Queue aMessageQueue)
//        {
//            MIDConnectionString.ConnectionString = aConnectionString;
//            _dba = new DatabaseAccess();
//            _dba.OpenUpdateConnection();
//            _header = new Header();
//            try
//            {
//                AddHeaderColumns();
//                ModifyStoredProcedures();
//                PopulateAllocationMultipleDefault();
//                _dba.CommitData();
//            }
//            catch (Exception exc)
//            {
//                aMessageQueue.Enqueue("UNEXPECTED EXCEPTION: " + exc.ToString());
//                throw;
//            }
//            finally
//            {
//                _dba.CloseUpdateConnection();
//            }
//        }

//        private void AddHeaderColumns()
//        {
//            try
//            {
//                string sql = "IF .dbo.UDF_ColumnAlreadyExists('HEADER', 'ALLOCATION_MULTIPLE_DEFAULT') = 0 " +
//                             "ALTER TABLE HEADER ADD ALLOCATION_MULTIPLE_DEFAULT int null";
//                _dba.ExecuteNonQuery(sql);

//                _dba.CommitData();

//            }
//            catch
//            {
//                throw;
//            }
//        }

 
//        private void ModifyStoredProcedures()
//        {
//            try
//            {
//                ModifyHeaderInsert();

//                _dba.CommitData();
//            }
//            catch
//            {
//                throw;
//            }
//        }

//        private void ModifyHeaderInsert()
//        {
//            try
//            {
//                string sql;
//                sql = "if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[SP_MID_HEADER_INSERT]') " +
//                      "and OBJECTPROPERTY(id, N'IsProcedure') = 1) " +
//                      "drop procedure [dbo].[SP_MID_HEADER_INSERT]";
//                _dba.ExecuteNonQuery(sql);

//                sql = "/* Create procedure/function SP_MID_HEADER_INSERT.              */" + Environment.NewLine +
//                      "CREATE PROCEDURE [dbo].[SP_MID_HEADER_INSERT] " + Environment.NewLine +
//                      "( " + Environment.NewLine +
//                      "@HDR_ID VARCHAR(32), " + Environment.NewLine +
//                      "@HDR_DESC VARCHAR(250), " + Environment.NewLine +
//                      "@HDR_DAY DATETIME, " + Environment.NewLine +
//                      "@ORIG_DAY DATETIME, " + Environment.NewLine +
//                      "@UNIT_RETAIL FLOAT, " + Environment.NewLine +
//                      "@UNIT_COST FLOAT, " + Environment.NewLine +
//                      "@UNITS_RECEIVED INT, " + Environment.NewLine +
//                      "@STYLE_HNRID INT, " + Environment.NewLine +
//                      "@PLAN_HNRID INT, " + Environment.NewLine +
//                      "@ON_HAND_HNRID INT, " + Environment.NewLine +
//                      "@BULK_MULTIPLE INT, " + Environment.NewLine +
//                      "@ALLOCATION_MULTIPLE INT, " + Environment.NewLine +
//                      "@VENDOR VARCHAR(50), " + Environment.NewLine +
//                      "@PURCHASE_ORDER VARCHAR(50), " + Environment.NewLine +
//                      "@BEGIN_DAY DATETIME, " + Environment.NewLine +
//                      "@NEED_DAY DATETIME, " + Environment.NewLine +
//                      "@SHIP_TO_DAY DATETIME, " + Environment.NewLine +
//                      "@RELEASE_DATETIME DATETIME, " + Environment.NewLine +
//                      "@RELEASE_APPROVED_DATETIME DATETIME, " + Environment.NewLine +
//                      "@HDR_GROUP_RID INT, " + Environment.NewLine +
//                      "@SIZE_GROUP_RID INT, " + Environment.NewLine +
//                      "@WORKFLOW_RID INT, " + Environment.NewLine +
//                      "@METHOD_RID INT, " + Environment.NewLine +
//                      "@ALLOCATION_STATUS_FLAGS INT, " + Environment.NewLine +
//                      "@BALANCE_STATUS_FLAGS INT, " + Environment.NewLine +
//                      "@SHIPPING_STATUS_FLAGS INT, " + Environment.NewLine +
//                      "@ALLOCATION_TYPE_FLAGS INT, " + Environment.NewLine +
//                      "@INTRANSIT_STATUS_FLAGS INT, " + Environment.NewLine +
//                      "@PERCENT_NEED_LIMIT FLOAT, " + Environment.NewLine +
//                      "@PLAN_PERCENT_FACTOR FLOAT, " + Environment.NewLine +
//                      "@RESERVE_UNITS INT, " + Environment.NewLine +
//                      "@GRADE_WEEK_COUNT INT, " + Environment.NewLine +
//                      "@DIST_CENTER VARCHAR(50), " + Environment.NewLine +
//                      "@HEADER_NOTES VARCHAR(1000), " + Environment.NewLine +
//                      "@WORKFLOW_TRIGGER CHAR, " + Environment.NewLine +
//                      "@EARLIEST_SHIP_DAY DATETIME, " + Environment.NewLine +
//                      "@API_WORKFLOW_RID INT, " + Environment.NewLine +
//                      "@API_WORKFLOW_TRIGGER CHAR, " + Environment.NewLine +
//                      "@ALLOCATED_UNITS INT, " + Environment.NewLine +
//                      "@ORIG_ALLOCATED_UNITS INT, " + Environment.NewLine +
//                      "@RELEASE_COUNT INT, " + Environment.NewLine +
//                      "@RSV_ALLOCATED_UNITS INT, " + Environment.NewLine +
//                      "@DISPLAY_STATUS INT, " + Environment.NewLine +
//                      "@DISPLAY_TYPE INT, " + Environment.NewLine +
//                      "@DISPLAY_INTRANSIT INT, " + Environment.NewLine +
//                      "@DISPLAY_SHIP_STATUS INT, " + Environment.NewLine +
//                      "@ASRT_RID INT, " + Environment.NewLine +
//                      "@PLACEHOLDER_RID INT, " + Environment.NewLine +
//                      "@ASRT_TYPE INT, " + Environment.NewLine +
//                      "@ALLOCATION_MULTIPLE_DEFAULT INT, " + Environment.NewLine +
//                      "@HDR_RID INT OUTPUT " + Environment.NewLine +
//                      " ) " + Environment.NewLine +
//                      "AS " + Environment.NewLine +
//                      "BEGIN " + Environment.NewLine +
//                      "	SET NOCOUNT ON " + Environment.NewLine +
//                      "	INSERT INTO HEADER(HDR_ID,HDR_DESC,HDR_DAY,ORIG_DAY,UNIT_RETAIL,UNIT_COST,UNITS_RECEIVED,STYLE_HNRID, " + Environment.NewLine +
//                      " PLAN_HNRID,ON_HAND_HNRID,BULK_MULTIPLE,ALLOCATION_MULTIPLE,VENDOR,PURCHASE_ORDER,BEGIN_DAY,NEED_DAY, " + Environment.NewLine +
//                      " SHIP_TO_DAY,RELEASE_DATETIME,RELEASE_APPROVED_DATETIME,HDR_GROUP_RID,SIZE_GROUP_RID,WORKFLOW_RID, " + Environment.NewLine +
//                      " METHOD_RID,ALLOCATION_STATUS_FLAGS,BALANCE_STATUS_FLAGS,SHIPPING_STATUS_FLAGS,ALLOCATION_TYPE_FLAGS, " + Environment.NewLine +
//                      " INTRANSIT_STATUS_FLAGS,PERCENT_NEED_LIMIT,PLAN_PERCENT_FACTOR,RESERVE_UNITS,GRADE_WEEK_COUNT, " + Environment.NewLine +
//                      " DIST_CENTER,HEADER_NOTES,WORKFLOW_TRIGGER, EARLIEST_SHIP_DAY, API_WORKFLOW_RID, API_WORKFLOW_TRIGGER, " + Environment.NewLine +
//                      " ALLOCATED_UNITS, ORIG_ALLOCATED_UNITS, RELEASE_COUNT, RSV_ALLOCATED_UNITS, DISPLAY_STATUS, DISPLAY_TYPE, " + Environment.NewLine +
//                      " DISPLAY_INTRANSIT, DISPLAY_SHIP_STATUS, ASRT_RID, PLACEHOLDER_RID, ASRT_TYPE, ALLOCATION_MULTIPLE_DEFAULT) " + Environment.NewLine +
//                      " VALUES (@HDR_ID,@HDR_DESC,@HDR_DAY,@ORIG_DAY,@UNIT_RETAIL,@UNIT_COST,@UNITS_RECEIVED,@STYLE_HNRID, " + Environment.NewLine +
//                      " @PLAN_HNRID,@ON_HAND_HNRID,@BULK_MULTIPLE,@ALLOCATION_MULTIPLE,@VENDOR,@PURCHASE_ORDER,@BEGIN_DAY,@NEED_DAY, " + Environment.NewLine +
//                      " @SHIP_TO_DAY,@RELEASE_DATETIME,@RELEASE_APPROVED_DATETIME,@HDR_GROUP_RID,@SIZE_GROUP_RID,@WORKFLOW_RID, " + Environment.NewLine +
//                      " @METHOD_RID,@ALLOCATION_STATUS_FLAGS,@BALANCE_STATUS_FLAGS,@SHIPPING_STATUS_FLAGS,@ALLOCATION_TYPE_FLAGS, " + Environment.NewLine +
//                      " @INTRANSIT_STATUS_FLAGS,@PERCENT_NEED_LIMIT,@PLAN_PERCENT_FACTOR,@RESERVE_UNITS,@GRADE_WEEK_COUNT, " + Environment.NewLine +
//                      " @DIST_CENTER,@HEADER_NOTES,@WORKFLOW_TRIGGER,@EARLIEST_SHIP_DAY, @API_WORKFLOW_RID, @API_WORKFLOW_TRIGGER, " + Environment.NewLine +
//                      " @ALLOCATED_UNITS, @ORIG_ALLOCATED_UNITS, @RELEASE_COUNT, @RSV_ALLOCATED_UNITS, @DISPLAY_STATUS, @DISPLAY_TYPE, " + Environment.NewLine +
//                      " @DISPLAY_INTRANSIT, @DISPLAY_SHIP_STATUS, @ASRT_RID, @PLACEHOLDER_RID, @ASRT_TYPE, @ALLOCATION_MULTIPLE_DEFAULT) " + Environment.NewLine +
//                      " SELECT @HDR_RID = @@IDENTITY " + Environment.NewLine +
//                      "END ";
//                _dba.ExecuteNonQuery(sql);
//            }
//            catch
//            {
//                throw;
//            }
//        }
 
//        private void PopulateAllocationMultipleDefault()
//        {
//            DataTable dtHeaders;
//            string sql;
//            sql = "SELECT HDR_RID, HDR_ID, BULK_MULTIPLE from HEADER";
//            dtHeaders = _dba.ExecuteSQLQuery(sql, "Get_Headers");
            
//            int _hdrRID;
//            DataTable dtPacks;
//            DataTable dtBulkColors;
//            int allocationMultipleDefault;
//            int packMultiple;
//            int bulkMultiple;

//            foreach (DataRow dr in dtHeaders.Rows)
//            {
//                _hdrRID = Convert.ToInt32(dr["HDR_RID"], CultureInfo.CurrentUICulture);
//                allocationMultipleDefault = 0;
//                sql = "select * from HEADER_PACK (nolock) where HDR_RID = "
//                       + _hdrRID.ToString();
//                dtPacks = _dba.ExecuteSQLQuery(sql, "Get_Packs");

//                if (dtPacks.Rows.Count > 0)
//                {
//                    foreach (DataRow pdr in dtPacks.Rows)
//                    {
//                        packMultiple = Convert.ToInt32(pdr["MULTIPLE"], CultureInfo.CurrentUICulture);
//                        if (allocationMultipleDefault == 0)
//                        {
//                            allocationMultipleDefault = packMultiple;
//                        }
//                        else
//                        {
//                            if (allocationMultipleDefault != packMultiple)
//                            {
//                                int min = Math.Min(allocationMultipleDefault, packMultiple);
//                                allocationMultipleDefault = Math.Max(allocationMultipleDefault, packMultiple) % min;
//                                if (allocationMultipleDefault == 0)
//                                {
//                                    allocationMultipleDefault = min;
//                                }
//                                else
//                                {
//                                    allocationMultipleDefault = 1;
//                                }
//                            }
//                        }
//                    }
//                }

//                sql = "select * from HEADER_BULK_COLOR (nolock) where HDR_RID = "
//                       + _hdrRID.ToString();
//                dtBulkColors = _dba.ExecuteSQLQuery(sql, "Get_COLORs");
//                if (dtBulkColors.Rows.Count > 0)
//                {
//                    bulkMultiple = Convert.ToInt32(dr["BULK_MULTIPLE"], CultureInfo.CurrentUICulture);
//                    if (allocationMultipleDefault == 0)
//                    {
//                        allocationMultipleDefault = bulkMultiple;
//                    }
//                    else
//                    {
//                        if (allocationMultipleDefault != bulkMultiple)
//                        {
//                            int minb = Math.Min(allocationMultipleDefault, bulkMultiple);
//                            allocationMultipleDefault = Math.Max(allocationMultipleDefault, bulkMultiple) % minb;
//                            if (allocationMultipleDefault == 0)
//                            {
//                                allocationMultipleDefault = minb;
//                            }
//                            else
//                            {
//                                allocationMultipleDefault = 1;
//                            }
//                        }
//                    }
//                }
//                if (allocationMultipleDefault == 0)
//                {
//                    allocationMultipleDefault = 1;
//                }

//                sql = "UPDATE HEADER SET ALLOCATION_MULTIPLE_DEFAULT = " + allocationMultipleDefault.ToString()
//                      + " where HDR_RID = " + _hdrRID.ToString();
//                _dba.ExecuteNonQuery(sql);

//            }
//        }
//    } 
//    // end MID Track 5761 Allocation Multiple not saved to database


//    class OverrideModelsConversion : ICustomConversion
//    {
//        //=======
//        // FIELDS
//        //=======

//        private DatabaseAccess _dba;

//        //=============
//        // CONSTRUCTORS
//        //=============

//        public OverrideModelsConversion()
//        {
//            _dba = new DatabaseAccess();
//        }

//        //=============
//        // METHODS
//        //=============
//        //public void Execute(string aConnectionString, Queue aMessageQueue, Queue aProcessedQueue)
//        public void Execute(string aConnectionString, Queue aMessageQueue, Queue aProcessedQueue,
//            eDatabaseType aDatabaseType, int aNoDataTables, string aAllocationFileGroup,
//            string aForecastFileGroup, string aHistoryFileGroup, int aNoHistoryFileGroup,
//            string aDailyHistoryFileGroup, int aNoDailyHistoryFileGroup,
//            string aAuditFileGroup, string aWeekArchiveFileGroup, string aDayArchiveFileGroup) // TT#173 Provide database container for large data collections
//        {
//            try
//            {
//                MIDConnectionString.ConnectionString = aConnectionString;
//                ConvertOTSPlanMethods(aConnectionString, aMessageQueue);
//                ConvertMatrixMethods(aConnectionString, aMessageQueue);
//                ConvertSpreadMethods(aConnectionString, aMessageQueue);
//                ConvertExportMethods(aConnectionString, aMessageQueue);
//            }
//            catch
//            {
//                throw;
//            }
//        }

//        private void ConvertOTSPlanMethods(string aConnectionString, Queue aMessageQueue)
//        {
//            DataTable dt;
//            ModelsData modelsData = null;
//            int methodRID, hnRID, fvRID, modelRID, currMethodRID, lowLevelHnRID, lowLevelSeq, lowLevelOffet;
//            bool excludeInd;
//            eLowLevelsType lowLevelType;
//            DataTable methodDataTable;
//            DataRow methodDataRow;
//            try
//            {
//                modelRID = Include.NoRID;
//                modelsData = new ModelsData();
//                _dba.OpenUpdateConnection();
//                modelsData.OpenUpdateConnection();

//                currMethodRID = Include.NoRID;
//                dt = _dba.ExecuteQuery("select * from OTS_PLAN_LOW_LEVEL_EXCLUDE");

//                foreach (DataRow dr in dt.Rows)
//                {
//                    if (dr["METHOD_RID"] != System.DBNull.Value)
//                    {
//                        methodRID = Convert.ToInt32(dr["METHOD_RID"]);
//                    }
//                    else
//                    {
//                        methodRID = Include.NoRID;
//                    }
//                    if (dr["HN_RID"] != System.DBNull.Value)
//                    {
//                        lowLevelHnRID = Convert.ToInt32(dr["HN_RID"]);
//                    }
//                    else
//                    {
//                        lowLevelHnRID = Include.NoRID;
//                    }
//                    fvRID = Include.NoRID;
//                    excludeInd = true;

//                    // new method so create new model
//                    if (methodRID != Include.NoRID &&
//                        methodRID != currMethodRID)
//                    {
//                        methodDataTable = _dba.ExecuteQuery("select * from OTS_PLAN where METHOD_RID = " + methodRID);
//                        if (methodDataTable.Rows.Count == 1)
//                        {
//                            methodDataRow = methodDataTable.Rows[0];
//                            if (methodDataRow["PLAN_HN_RID"] != System.DBNull.Value)
//                            {
//                                hnRID = Convert.ToInt32(methodDataRow["PLAN_HN_RID"]);
//                            }
//                            else
//                            {
//                                hnRID = Include.NoRID;
//                            }
//                            if (methodDataRow["LOW_LEVEL_TYPE"] != System.DBNull.Value)
//                            {
//                                lowLevelType = (eLowLevelsType)Convert.ToInt32(methodDataRow["LOW_LEVEL_TYPE"]);
//                            }
//                            else
//                            {
//                                lowLevelType = eLowLevelsType.None;
//                            }
//                            if (methodDataRow["LOW_LEVEL_SEQ"] != System.DBNull.Value)
//                            {
//                                lowLevelSeq = Convert.ToInt32(methodDataRow["LOW_LEVEL_SEQ"]);
//                            }
//                            else
//                            {
//                                lowLevelSeq = Include.Undefined;
//                            }
//                            if (methodDataRow["LOW_LEVEL_OFFSET"] != System.DBNull.Value)
//                            {
//                                lowLevelOffet = Convert.ToInt32(methodDataRow["LOW_LEVEL_OFFSET"]);
//                            }
//                            else
//                            {
//                                lowLevelOffet = Include.Undefined;
//                            }
//                            modelRID = AddModel(modelsData, hnRID, lowLevelType, lowLevelSeq, lowLevelOffet, aMessageQueue);
//                            // update method with model number
//                            _dba.ExecuteNonQuery("update OTS_PLAN set OLL_RID = " + modelRID + " where METHOD_RID = " + methodRID);
//                        }
//                        currMethodRID = methodRID;
//                    }

//                    if (modelRID != Include.NoRID)
//                    {
//                        AddDetail(modelsData, modelRID, lowLevelHnRID, fvRID, excludeInd, aMessageQueue);
//                    }
//                }

//                _dba.ExecuteNonQuery("drop table OTS_PLAN_LOW_LEVEL_EXCLUDE");
//                _dba.CommitData();
//                modelsData.CommitData();
//            }
//            catch (Exception exc)
//            {
//                aMessageQueue.Enqueue("UNEXPECTED EXCEPTION: " + exc.ToString());
//                throw;
//            }
//            finally
//            {
//                if (_dba != null)
//                {
//                    _dba.CloseUpdateConnection();
//                }
//                if (modelsData != null &&
//                    modelsData.ConnectionIsOpen)
//                {
//                    modelsData.CloseUpdateConnection();
//                }
//            }
//        }

//        private void ConvertMatrixMethods(string aConnectionString, Queue aMessageQueue)
//        {
//            DataTable dt;
//            ModelsData modelsData = null;
//            int methodRID, hnRID, fvRID, modelRID, currMethodRID, lowLevelHnRID, lowLevelSeq, lowLevelOffet;
//            bool excludeInd;
//            eLowLevelsType lowLevelType;
//            DataTable methodDataTable;
//            DataRow methodDataRow;
//            try
//            {
//                modelRID = Include.NoRID;
//                modelsData = new ModelsData();
//                _dba.OpenUpdateConnection();
//                modelsData.OpenUpdateConnection();

//                currMethodRID = Include.NoRID;
//                dt = _dba.ExecuteQuery("select * from METHOD_MATRIX_VERSION_OVERRIDE");

//                foreach (DataRow dr in dt.Rows)
//                {
//                    if (dr["METHOD_RID"] != System.DBNull.Value)
//                    {
//                        methodRID = Convert.ToInt32(dr["METHOD_RID"]);
//                    }
//                    else
//                    {
//                        methodRID = Include.NoRID;
//                    }
//                    if (dr["HN_RID"] != System.DBNull.Value)
//                    {
//                        lowLevelHnRID = Convert.ToInt32(dr["HN_RID"]);
//                    }
//                    else
//                    {
//                        lowLevelHnRID = Include.NoRID;
//                    }
//                    if (dr["FV_RID"] != System.DBNull.Value)
//                    {
//                        fvRID = Convert.ToInt32(dr["FV_RID"]);
//                    }
//                    else
//                    {
//                        fvRID = Include.NoRID;
//                    }
//                    if (dr["EXCLUDE_IND"] != System.DBNull.Value)
//                    {
//                        excludeInd = Include.ConvertCharToBool(Convert.ToChar(dr["EXCLUDE_IND"]));
//                    }
//                    else
//                    {
//                        excludeInd = false;
//                    }

//                    // new method so create new model
//                    if (methodRID != Include.NoRID &&
//                        methodRID != currMethodRID)
//                    {
//                        methodDataTable = _dba.ExecuteQuery("select * from METHOD_MATRIX where METHOD_RID = " + methodRID);
//                        if (methodDataTable.Rows.Count == 1)
//                        {
//                            methodDataRow = methodDataTable.Rows[0];
//                            if (methodDataRow["HN_RID"] != System.DBNull.Value)
//                            {
//                                hnRID = Convert.ToInt32(methodDataRow["HN_RID"]);
//                            }
//                            else
//                            {
//                                hnRID = Include.NoRID;
//                            }
//                            if (methodDataRow["LOW_LEVEL_TYPE"] != System.DBNull.Value)
//                            {
//                                lowLevelType = (eLowLevelsType)Convert.ToInt32(methodDataRow["LOW_LEVEL_TYPE"]);
//                            }
//                            else
//                            {
//                                lowLevelType = eLowLevelsType.None;
//                            }
//                            if (methodDataRow["LOW_LEVEL_SEQUENCE"] != System.DBNull.Value)
//                            {
//                                lowLevelSeq = Convert.ToInt32(methodDataRow["LOW_LEVEL_SEQUENCE"]);
//                            }
//                            else
//                            {
//                                lowLevelSeq = Include.Undefined;
//                            }
//                            if (methodDataRow["LOW_LEVEL_OFFSET"] != System.DBNull.Value)
//                            {
//                                lowLevelOffet = Convert.ToInt32(methodDataRow["LOW_LEVEL_OFFSET"]);
//                            }
//                            else
//                            {
//                                lowLevelOffet = Include.Undefined;
//                            }
//                            modelRID = AddModel(modelsData, hnRID, lowLevelType, lowLevelSeq, lowLevelOffet, aMessageQueue);
//                            // update method with model number
//                            _dba.ExecuteNonQuery("update METHOD_MATRIX set OLL_RID = " + modelRID + " where METHOD_RID = " + methodRID);
//                        }
//                        currMethodRID = methodRID;
//                    }

//                    if (modelRID != Include.NoRID)
//                    {
//                        AddDetail(modelsData, modelRID, lowLevelHnRID, fvRID, excludeInd, aMessageQueue);
//                    }
//                }

//                _dba.ExecuteNonQuery("drop table METHOD_MATRIX_VERSION_OVERRIDE");
//                _dba.CommitData();
//                modelsData.CommitData();
//            }
//            catch (Exception exc)
//            {
//                aMessageQueue.Enqueue("UNEXPECTED EXCEPTION: " + exc.ToString());
//                throw;
//            }
//            finally
//            {
//                if (_dba != null)
//                {
//                    _dba.CloseUpdateConnection();
//                }
//                if (modelsData != null &&
//                    modelsData.ConnectionIsOpen)
//                {
//                    modelsData.CloseUpdateConnection();
//                }
//            }
//        }

//        private void ConvertSpreadMethods(string aConnectionString, Queue aMessageQueue)
//        {
//            DataTable dt;
//            ModelsData modelsData = null;
//            int methodRID, hnRID, fvRID, modelRID, currMethodRID, lowLevelHnRID, lowLevelSeq, lowLevelOffet;
//            bool excludeInd;
//            eBasisIncludeExclude includeExclude;
//            eLowLevelsType lowLevelType;
//            DataTable methodDataTable;
//            DataRow methodDataRow;
//            try
//            {
//                modelRID = Include.NoRID;
//                modelsData = new ModelsData();
//                _dba.OpenUpdateConnection();
//                modelsData.OpenUpdateConnection();

//                currMethodRID = Include.NoRID;
//                dt = _dba.ExecuteQuery("select * from METHOD_SPREAD_LOWER_LEVELS");

//                foreach (DataRow dr in dt.Rows)
//                {
//                    if (dr["METHOD_RID"] != System.DBNull.Value)
//                    {
//                        methodRID = Convert.ToInt32(dr["METHOD_RID"]);
//                    }
//                    else
//                    {
//                        methodRID = Include.NoRID;
//                    }
//                    if (dr["HN_RID"] != System.DBNull.Value)
//                    {
//                        lowLevelHnRID = Convert.ToInt32(dr["HN_RID"]);
//                    }
//                    else
//                    {
//                        lowLevelHnRID = Include.NoRID;
//                    }
//                    if (dr["FV_RID"] != System.DBNull.Value)
//                    {
//                        fvRID = Convert.ToInt32(dr["FV_RID"]);
//                    }
//                    else
//                    {
//                        fvRID = Include.NoRID;
//                    }
//                    if (dr["INCLUDE_EXCLUDE"] != System.DBNull.Value)
//                    {
//                        includeExclude = (eBasisIncludeExclude)Convert.ToInt32(Convert.ToChar(dr["INCLUDE_EXCLUDE"]));
//                        if (includeExclude == eBasisIncludeExclude.Include)
//                        {
//                            excludeInd = false;
//                        }
//                        else
//                        {
//                            excludeInd = true;
//                        }
//                    }
//                    else
//                    {
//                        excludeInd = false;
//                    }

//                    // new method so create new model
//                    if (methodRID != Include.NoRID &&
//                        methodRID != currMethodRID)
//                    {
//                        methodDataTable = _dba.ExecuteQuery("select * from METHOD_SPREAD_FORECAST where METHOD_RID = " + methodRID);
//                        if (methodDataTable.Rows.Count == 1)
//                        {
//                            methodDataRow = methodDataTable.Rows[0];
//                            if (methodDataRow["HN_RID"] != System.DBNull.Value)
//                            {
//                                hnRID = Convert.ToInt32(methodDataRow["HN_RID"]);
//                            }
//                            else
//                            {
//                                hnRID = Include.NoRID;
//                            }
//                            if (methodDataRow["TO_LEVEL_TYPE"] != System.DBNull.Value)
//                            {
//                                lowLevelType = (eLowLevelsType)Convert.ToInt32(methodDataRow["TO_LEVEL_TYPE"]);
//                            }
//                            else
//                            {
//                                lowLevelType = eLowLevelsType.None;
//                            }
//                            if (methodDataRow["TO_LEVEL_SEQ"] != System.DBNull.Value)
//                            {
//                                lowLevelSeq = Convert.ToInt32(methodDataRow["TO_LEVEL_SEQ"]);
//                            }
//                            else
//                            {
//                                lowLevelSeq = Include.Undefined;
//                            }
//                            if (methodDataRow["TO_LEVEL_OFFSET"] != System.DBNull.Value)
//                            {
//                                lowLevelOffet = Convert.ToInt32(methodDataRow["TO_LEVEL_OFFSET"]);
//                            }
//                            else
//                            {
//                                lowLevelOffet = Include.Undefined;
//                            }
//                            modelRID = AddModel(modelsData, hnRID, lowLevelType, lowLevelSeq, lowLevelOffet, aMessageQueue);
//                            // update method with model number
//                            _dba.ExecuteNonQuery("update METHOD_SPREAD_FORECAST set OLL_RID = " + modelRID + " where METHOD_RID = " + methodRID);
//                        }
//                        currMethodRID = methodRID;
//                    }

//                    if (modelRID != Include.NoRID)
//                    {
//                        AddDetail(modelsData, modelRID, lowLevelHnRID, fvRID, excludeInd, aMessageQueue);
//                    }
//                }

//                _dba.ExecuteNonQuery("drop table METHOD_SPREAD_LOWER_LEVELS");
//                _dba.CommitData();
//                modelsData.CommitData();
//            }
//            catch (Exception exc)
//            {
//                aMessageQueue.Enqueue("UNEXPECTED EXCEPTION: " + exc.ToString());
//                throw;
//            }
//            finally
//            {
//                if (_dba != null)
//                {
//                    _dba.CloseUpdateConnection();
//                }
//                if (modelsData != null &&
//                    modelsData.ConnectionIsOpen)
//                {
//                    modelsData.CloseUpdateConnection();
//                }
//            }
//        }

//        private void ConvertExportMethods(string aConnectionString, Queue aMessageQueue)
//        {
//            DataTable dt;
//            ModelsData modelsData = null;
//            int methodRID, hnRID, fvRID, modelRID, currMethodRID, lowLevelHnRID, lowLevelSeq, lowLevelOffet;
//            bool excludeInd;
//            eLowLevelsType lowLevelType;
//            DataTable methodDataTable;
//            DataRow methodDataRow;
//            try
//            {
//                modelRID = Include.NoRID;
//                modelsData = new ModelsData();
//                _dba.OpenUpdateConnection();
//                modelsData.OpenUpdateConnection();

//                currMethodRID = Include.NoRID;
//                dt = _dba.ExecuteQuery("select * from METHOD_EXPORT_VERSION_OVERRIDES");

//                foreach (DataRow dr in dt.Rows)
//                {
//                    if (dr["METHOD_RID"] != System.DBNull.Value)
//                    {
//                        methodRID = Convert.ToInt32(dr["METHOD_RID"]);
//                    }
//                    else
//                    {
//                        methodRID = Include.NoRID;
//                    }
//                    if (dr["HN_RID"] != System.DBNull.Value)
//                    {
//                        lowLevelHnRID = Convert.ToInt32(dr["HN_RID"]);
//                    }
//                    else
//                    {
//                        lowLevelHnRID = Include.NoRID;
//                    }
//                    if (dr["FV_RID"] != System.DBNull.Value)
//                    {
//                        fvRID = Convert.ToInt32(dr["FV_RID"]);
//                    }
//                    else
//                    {
//                        fvRID = Include.NoRID;
//                    }
//                    if (dr["EXCLUDE_IND"] != System.DBNull.Value)
//                    {
//                        excludeInd = Include.ConvertCharToBool(Convert.ToChar(dr["EXCLUDE_IND"]));
//                    }
//                    else
//                    {
//                        excludeInd = false;
//                    }

//                    // new method so create new model
//                    if (methodRID != Include.NoRID &&
//                        methodRID != currMethodRID)
//                    {
//                        methodDataTable = _dba.ExecuteQuery("select * from METHOD_EXPORT where METHOD_RID = " + methodRID);
//                        if (methodDataTable.Rows.Count == 1)
//                        {
//                            methodDataRow = methodDataTable.Rows[0];
//                            if (methodDataRow["HN_RID"] != System.DBNull.Value)
//                            {
//                                hnRID = Convert.ToInt32(methodDataRow["HN_RID"]);
//                            }
//                            else
//                            {
//                                hnRID = Include.NoRID;
//                            }
//                            if (methodDataRow["LOW_LEVELS_TYPE"] != System.DBNull.Value)
//                            {
//                                lowLevelType = (eLowLevelsType)Convert.ToInt32(methodDataRow["LOW_LEVELS_TYPE"]);
//                            }
//                            else
//                            {
//                                lowLevelType = eLowLevelsType.None;
//                            }
//                            if (methodDataRow["LOW_LEVEL_SEQUENCE"] != System.DBNull.Value)
//                            {
//                                lowLevelSeq = Convert.ToInt32(methodDataRow["LOW_LEVEL_SEQUENCE"]);
//                            }
//                            else
//                            {
//                                lowLevelSeq = Include.Undefined;
//                            }
//                            if (methodDataRow["LOW_LEVEL_OFFSET"] != System.DBNull.Value)
//                            {
//                                lowLevelOffet = Convert.ToInt32(methodDataRow["LOW_LEVEL_OFFSET"]);
//                            }
//                            else
//                            {
//                                lowLevelOffet = Include.Undefined;
//                            }
//                            modelRID = AddModel(modelsData, hnRID, lowLevelType, lowLevelSeq, lowLevelOffet, aMessageQueue);
//                            // update method with model number
//                            _dba.ExecuteNonQuery("update METHOD_EXPORT set OLL_RID = " + modelRID + " where METHOD_RID = " + methodRID);
//                        }
//                        currMethodRID = methodRID;
//                    }

//                    if (modelRID != Include.NoRID)
//                    {
//                        AddDetail(modelsData, modelRID, lowLevelHnRID, fvRID, excludeInd, aMessageQueue);
//                    }
//                }

//                _dba.ExecuteNonQuery("drop table METHOD_EXPORT_VERSION_OVERRIDES");
//                _dba.CommitData();
//                modelsData.CommitData();
//            }
//            catch (Exception exc)
//            {
//                aMessageQueue.Enqueue("UNEXPECTED EXCEPTION: " + exc.ToString());
//                throw;
//            }
//            finally
//            {
//                if (_dba != null)
//                {
//                    _dba.CloseUpdateConnection();
//                }
//                if (modelsData != null &&
//                    modelsData.ConnectionIsOpen)
//                {
//                    modelsData.CloseUpdateConnection();
//                }
//            }
//        }

//        private int AddModel(ModelsData aModelsData, int aHnRID, eLowLevelsType eLowLevelsType, 
//            int aLowLevelSeq, int aLowLevelOffet, Queue aMessageQueue)
//        {
//            eHighLevelsType highLevelsType;
//            int modelRID;
//            try
//            {
//                // map low level type to high level type
//                switch (eLowLevelsType)
//                {
//                    case eLowLevelsType.HierarchyLevel:
//                        highLevelsType = eHighLevelsType.HierarchyLevel;
//                        break;
//                    case eLowLevelsType.LevelOffset:
//                        highLevelsType = eHighLevelsType.LevelOffset;
//                        break;
//                    case eLowLevelsType.Characteristic:
//                        highLevelsType = eHighLevelsType.Characteristic;
//                        break;
//                    default:
//                        highLevelsType = eHighLevelsType.None;
//                        break;
//                }

//                // Begin TT#988 - JSmith - Add Active Only indicator to Override Low Level Model
//                //modelRID = aModelsData.OverrideLowLevelsModel_Add(null, aHnRID, aHnRID, Include.CustomUserRID,
//                //    aLowLevelSeq, aLowLevelOffet, highLevelsType, aLowLevelSeq, aLowLevelOffet, eLowLevelsType);
//                modelRID = aModelsData.OverrideLowLevelsModel_Add(null, aHnRID, aHnRID, Include.CustomUserRID,
//                    aLowLevelSeq, aLowLevelOffet, highLevelsType, aLowLevelSeq, aLowLevelOffet, eLowLevelsType, false);
//                // End TT#988
//                aModelsData.CommitData();
//                return modelRID;

//            }
//            catch (Exception exc)
//            {
//                aMessageQueue.Enqueue("UNEXPECTED EXCEPTION: " + exc.ToString());
//                throw;
//            }
//        }

//        private void AddDetail(ModelsData aModelsData, int aModelRID, int aHnRID, int aFvRID, bool aExcludeInd, Queue aMessageQueue)
//        {
//            try
//            {
//                aModelsData.OverrideLowLevelsDetail_Add(aModelRID, aHnRID, aFvRID, aExcludeInd);

//            }
//            catch (Exception exc)
//            {
//                aMessageQueue.Enqueue("UNEXPECTED EXCEPTION: " + exc.ToString());
//                throw;
//            }
//        }
//    }

//    class CleanUpDatabase : ICustomConversion
//    {
//        //=======
//        // FIELDS
//        //=======

//        private DatabaseAccess _dba;

//        //=============
//        // CONSTRUCTORS
//        //=============

//        public CleanUpDatabase()
//        {
//            _dba = new DatabaseAccess();
//        }

//        //=============
//        // METHODS
//        //=============
//        //public void Execute(string aConnectionString, Queue aMessageQueue, Queue aProcessedQueue)
//        public void Execute(string aConnectionString, Queue aMessageQueue, Queue aProcessedQueue,
//            eDatabaseType aDatabaseType, int aNoDataTables, string aAllocationFileGroup,
//            string aForecastFileGroup, string aHistoryFileGroup, int aNoHistoryFileGroup,
//            string aDailyHistoryFileGroup, int aNoDailyHistoryFileGroup,
//            string aAuditFileGroup, string aWeekArchiveFileGroup, string aDayArchiveFileGroup) // TT#173 Provide database container for large data collections
//        {
//            try
//            {
//                MIDConnectionString.ConnectionString = aConnectionString;
//                DropStoredProcedures(aConnectionString, aMessageQueue);
//            }
//            catch
//            {
//                throw;
//            }
//        }

//        private void DropStoredProcedures(string aConnectionString, Queue aMessageQueue)
//        {
//            DataTable dt;
//            string name;
//            try
//            {
//                _dba.OpenUpdateConnection();

//                dt = _dba.ExecuteQuery("select name from sys.procedures;");

//                foreach (DataRow dr in dt.Rows)
//                {
//                    if (dr["name"] != System.DBNull.Value)
//                    {
//                        name = Convert.ToString(dr["name"]);
//                        // Begin TT#439 - JSmith - Missing stored procedures in Rollup
//                        // do not delete any static stored procedures
//                        if (name.EndsWith("_ROLLUP"))
//                        {
//                            continue;
//                        }
//                        // End TT#439

//                        if (name.Contains("SP_MID_ST_HIS_DAY_WEEK_ROLLUP") ||
//                            name.Contains("SP_MID_ST_HIS_DAY_ROLLUP") ||
//                            name.Contains("SP_MID_ST_HIS_WK_ROLLUP") ||
//                            name.Contains("SP_MID_ST_FOR_WK_ROLLUP") ||
//                            name.Contains("SP_MID_HIS_ST_TO_CHN_ROLLUP") ||
//                            name.Contains("SP_MID_FOR_ST_TO_CHN_ROLLUP") ||
//                            name.Contains("SP_MID_ST_INTRANSIT_ROLLUP") ||
//                            name.Contains("SP_MID_CHN_HIS_DAY_WEEK_ROLLUP") ||
//                            name.Contains("SP_MID_CHN_HIS_WK_ROLLUP") ||
//                            name.Contains("SP_MID_CHN_FOR_WK_ROLLUP") ||
//                            name.Contains("SP_MID_BULK_CHN_FOR_WK_WRITE") ||
//                            name.Contains("SP_MID_BULK_CHN_HIS_WK_WRITE") ||
//                            name.Contains("SP_MID_BULK_ST_EXT_INT_WRITE") ||
//                            name.Contains("SP_MID_BULK_ST_FOR_WK_WRITE") ||
//                            name.Contains("SP_MID_BULK_ST_HIS_DAY_WRITE") ||
//                            name.Contains("SP_MID_BULK_ST_HIS_WK_WRITE"))
//                        {
//                            _dba.ExecuteNonQuery("drop procedure " + name);
//                            _dba.CommitData();
//                        }
//                    }
//                }
//            }
//            catch (Exception exc)
//            {
//                aMessageQueue.Enqueue("UNEXPECTED EXCEPTION: " + exc.ToString());
//                throw;
//            }
//            finally
//            {
//                if (_dba != null)
//                {
//                    _dba.CloseUpdateConnection();
//                }
//            }
//        }
//    }
//    //Begin Track #5005 - JScott - Need ability to organize methods, workflows, tasks, filters etc into subfolders

//    class MoveUserFiltersToUserFolder : ICustomConversion
//    {
//        //=======
//        // FIELDS
//        //=======

//        const int cFolderChildItemType = 1;
//        const int cFilterChildItemType = 2;
//        const int cSubFolderType = 3;
//        const int cFolderUserItemType = 14;
//        const int cUserMainFolderType = 17;

//        private DatabaseAccess _dba;
//        private int _mainUserFolderRID;

//        //=============
//        // CONSTRUCTORS
//        //=============

//        public MoveUserFiltersToUserFolder()
//        {
//            _dba = new DatabaseAccess();
//        }

//        //=============
//        // METHODS
//        //=============

//        public void Execute(string aConnectionString, Queue aMessageQueue, Queue aProcessedQueue,
//            eDatabaseType aDatabaseType, int aNoDataTables, string aAllocationFileGroup,
//            string aForecastFileGroup, string aHistoryFileGroup, int aNoHistoryFileGroup,
//            string aDailyHistoryFileGroup, int aNoDailyHistoryFileGroup,
//            string aAuditFileGroup, string aWeekArchiveFileGroup, string aDayArchiveFileGroup) // TT#173 Provide database container for large data collections
//        {
//            try
//            {
//                MIDConnectionString.ConnectionString = aConnectionString;
//                MoveStoreUserFilters(aConnectionString, aMessageQueue);
//            }
//            catch
//            {
//                throw;
//            }
//        }

//        private void MoveStoreUserFilters(string aConnectionString, Queue aMessageQueue)
//        {
//            string query;
//            DataTable dtFilter;
//            int parentRID;
//            int newParentRID;
//            int childRID;
//            int childType;
//            DataTable dtFolderJoin;
//            DataTable dtFolderShortcut;

//            try
//            {
//                _dba.OpenUpdateConnection();

//                // Move all User filters from Favorites to the new User folder

//                query = "SELECT * FROM STORE_FILTER SF, FOLDER_JOIN FJ WHERE SF.USER_RID <> 4 AND SF.STORE_FILTER_RID = FJ.CHILD_ITEM_RID AND CHILD_ITEM_TYPE = " + cFilterChildItemType;
//                dtFilter = _dba.ExecuteQuery(query);

//                foreach (DataRow dr in dtFilter.Rows)
//                {
//                    _mainUserFolderRID = CreateUserMainFolder(aMessageQueue, Convert.ToInt32(dr["USER_RID"]));

//                    parentRID = Convert.ToInt32(dr["PARENT_FOLDER_RID"]);
//                    childRID = Convert.ToInt32(dr["CHILD_ITEM_RID"]);
//                    childType = Convert.ToInt32(dr["CHILD_ITEM_TYPE"]);

//                    DeleteJoin(aMessageQueue, childRID, childType);
//                    newParentRID = MoveStoreUserFilter(aMessageQueue, parentRID);
//                    CreateJoin(aMessageQueue, newParentRID, childRID, childType);
//                    CreateShortcut(aMessageQueue, parentRID, childRID, childType);
//                }
//            }
//            catch (Exception exc)
//            {
//                aMessageQueue.Enqueue("UNEXPECTED EXCEPTION: " + exc.ToString());
//                throw;
//            }
//            finally
//            {
//                if (_dba != null)
//                {
//                    _dba.CloseUpdateConnection();
//                }
//            }
//        }

//        private int CreateUserMainFolder(Queue aMessageQueue, int aUserRID)
//        {
//            DataTable dtFolder;
//            int folderRID;
//            string query;

//            try
//            {
//                query = "SELECT * FROM FOLDER WHERE USER_RID = " + aUserRID + " AND FOLDER_TYPE = " + cUserMainFolderType;
//                dtFolder = _dba.ExecuteQuery(query);

//                if (dtFolder.Rows.Count == 0)
//                {
//                    folderRID = CreateFolder(aMessageQueue, aUserRID, "My Filters", cUserMainFolderType, cUserMainFolderType);
//                }
//                else
//                {
//                    folderRID = Convert.ToInt32(dtFolder.Rows[0]["FOLDER_RID"]);
//                }

//                return folderRID;
//            }
//            catch (Exception exc)
//            {
//                aMessageQueue.Enqueue("UNEXPECTED EXCEPTION: " + exc.ToString());
//                throw;
//            }
//        }

//        private int MoveStoreUserFilter(Queue aMessageQueue, int aParentFolderRID)
//        {
//            DataTable dtFolderJoin;
//            DataTable dtFolder;
//            int parentRID;
//            int childRID;
//            int childType;
//            int newParentRID;
//            int newChildRID;

//            try
//            {
//                dtFolderJoin = _dba.ExecuteQuery("SELECT * FROM FOLDER_JOIN WHERE CHILD_ITEM_RID = " + aParentFolderRID + " AND CHILD_ITEM_TYPE = " + cFolderChildItemType);

//                if (dtFolderJoin.Rows.Count > 0)
//                {
//                    parentRID = Convert.ToInt32(dtFolderJoin.Rows[0]["PARENT_FOLDER_RID"]);
//                    childRID = Convert.ToInt32(dtFolderJoin.Rows[0]["CHILD_ITEM_RID"]);
//                    childType = Convert.ToInt32(dtFolderJoin.Rows[0]["CHILD_ITEM_TYPE"]);

//                    newParentRID = MoveStoreUserFilter(aMessageQueue, parentRID);

//                    dtFolder = _dba.ExecuteQuery("SELECT * FROM FOLDER WHERE FOLDER_RID = " + childRID);
//                    newChildRID = CreateFolder(aMessageQueue, Convert.ToInt32(dtFolder.Rows[0]["USER_RID"]), Convert.ToString(dtFolder.Rows[0]["FOLDER_ID"]), cSubFolderType, cFolderUserItemType);
//                    CreateJoin(aMessageQueue, newParentRID, newChildRID, childType);

//                    return newChildRID;
//                }
//                else
//                {
//                    return _mainUserFolderRID;
//                }
//            }
//            catch (Exception exc)
//            {
//                aMessageQueue.Enqueue("UNEXPECTED EXCEPTION: " + exc.ToString());
//                throw;
//            }
//        }

//        private int CreateFolder(Queue aMessageQueue, int aUserRID, string aFolderName, int aFolderType, int aItemType)
//        {
//            MIDDbParameter[] inParams;
//            MIDDbParameter[] outParams;
//            int folderRID;
//            string query;

//            try
//            {
//                inParams = new MIDDbParameter[3];

//                inParams[0] = new MIDDbParameter("@USER_ID", aUserRID);
//                inParams[0].DbType = eDbType.Int;
//                inParams[0].Direction = eParameterDirection.Input;
//                inParams[1] = new MIDDbParameter("@FOLDER_ID", aFolderName);
//                inParams[1].DbType = eDbType.VarChar;
//                inParams[1].Direction = eParameterDirection.Input;
//                inParams[2] = new MIDDbParameter("@FOLDER_TYPE", aFolderType);
//                inParams[2].DbType = eDbType.Int;
//                inParams[2].Direction = eParameterDirection.Input;

//                outParams = new MIDDbParameter[1];

//                outParams[0] = new MIDDbParameter("@FOLDER_RID", DBNull.Value);
//                outParams[0].DbType = eDbType.Int;
//                outParams[0].Direction = eParameterDirection.Output;

//                folderRID = _dba.ExecuteStoredProcedure("SP_MID_FOLDER_INSERT", inParams, outParams);

//                query = "INSERT INTO USER_ITEM (USER_RID, ITEM_TYPE, ITEM_RID, OWNER_USER_RID) VALUES (@UserRID, @ItemType, @ItemRID, @OwnerRID)";

//                inParams = new MIDDbParameter[4];
//                inParams[0] = new MIDDbParameter("@UserRID", aUserRID);
//                inParams[0].DbType = eDbType.Int;
//                inParams[0].Direction = eParameterDirection.Input;
//                inParams[1] = new MIDDbParameter("@ItemType", aItemType);
//                inParams[1].DbType = eDbType.Int;
//                inParams[1].Direction = eParameterDirection.Input;
//                inParams[2] = new MIDDbParameter("@ItemRID", folderRID);
//                inParams[2].DbType = eDbType.Int;
//                inParams[2].Direction = eParameterDirection.Input;
//                inParams[3] = new MIDDbParameter("@OwnerRID", aUserRID);
//                inParams[3].DbType = eDbType.Int;
//                inParams[3].Direction = eParameterDirection.Input;

//                _dba.ExecuteNonQuery(query, inParams);

//                _dba.CommitData();

//                return folderRID;
//            }
//            catch (Exception exc)
//            {
//                aMessageQueue.Enqueue("UNEXPECTED EXCEPTION: " + exc.ToString());
//                throw;
//            }
//        }

//        private void DeleteJoin(Queue aMessageQueue, int aChildRID, int aChildType)
//        {
//            string query;

//            try
//            {
//                query = "DELETE FROM FOLDER_JOIN WHERE CHILD_ITEM_RID = " + aChildRID + " AND CHILD_ITEM_TYPE = " + aChildType;
//                _dba.ExecuteNonQuery(query);

//                _dba.CommitData();
//            }
//            catch (Exception exc)
//            {
//                aMessageQueue.Enqueue("UNEXPECTED EXCEPTION: " + exc.ToString());
//                throw;
//            }
//        }

//        private void CreateJoin(Queue aMessageQueue, int aParentRID, int aChildRID, int aChildType)
//        {
//            string query;

//            try
//            {
//                query = "INSERT INTO FOLDER_JOIN (PARENT_FOLDER_RID, CHILD_ITEM_RID, CHILD_ITEM_TYPE) VALUES (" + aParentRID + "," + aChildRID + "," + aChildType + ")";
//                _dba.ExecuteNonQuery(query);

//                _dba.CommitData();
//            }
//            catch (Exception exc)
//            {
//                aMessageQueue.Enqueue("UNEXPECTED EXCEPTION: " + exc.ToString());
//                throw;
//            }
//        }

//        private void CreateShortcut(Queue aMessageQueue, int aParentRID, int aChildRID, int aChildType)
//        {
//            string query;

//            try
//            {
//                query = "INSERT INTO FOLDER_SHORTCUT (PARENT_FOLDER_RID, CHILD_SHORTCUT_RID, CHILD_SHORTCUT_TYPE) VALUES (" + aParentRID + "," + aChildRID + "," + aChildType + ")";
//                _dba.ExecuteNonQuery(query);

//                _dba.CommitData();
//            }
//            catch (Exception exc)
//            {
//                aMessageQueue.Enqueue("UNEXPECTED EXCEPTION: " + exc.ToString());
//                throw;
//            }
//        }
//    }

//    class MoveFavoritesToShortcut : ICustomConversion
//    {
//        //=======
//        // FIELDS
//        //=======

//        const int cFavoritesStoresType = 0;
//        const int cFavoritesWorkflowsType = 2;
//        const int cFavoritesMethodsType = 3;
//        const int cFavoritesTaksListsType = 4;

//        const int cStoreGroupMainFavoritesType = 33;
//        const int cTaskListMainFavoritesType = 40;
//        const int cWorflowMethodMainFavoritesType = 51;

//        const int cStoreGroupType = 38;
//        const int cTaskListType = 46;
//        const int cWorflowType = 55;
//        const int cMethodType = 56;

//        private DatabaseAccess _dba;

//        //=============
//        // CONSTRUCTORS
//        //=============

//        public MoveFavoritesToShortcut()
//        {
//            _dba = new DatabaseAccess();
//        }

//        //=============
//        // METHODS
//        //=============

//        public void Execute(string aConnectionString, Queue aMessageQueue, Queue aProcessedQueue,
//            eDatabaseType aDatabaseType, int aNoDataTables, string aAllocationFileGroup,
//            string aForecastFileGroup, string aHistoryFileGroup, int aNoHistoryFileGroup,
//            string aDailyHistoryFileGroup, int aNoDailyHistoryFileGroup,
//            string aAuditFileGroup, string aWeekArchiveFileGroup, string aDayArchiveFileGroup) // TT#173 Provide database container for large data collections
//        {
//            try
//            {
//                MIDConnectionString.ConnectionString = aConnectionString;
//                MoveFavorites(aConnectionString, aMessageQueue);
//            }
//            catch
//            {
//                throw;
//            }
//        }

//        private void MoveFavorites(string aConnectionString, Queue aMessageQueue)
//        {
//            string query;
//            DataTable dtFavorites;
//            int favFolderType;
//            int favItemType;
//            int favFolderRID;
//            int parentRID;
//            int newParentRID;
//            int childRID;
//            int childType;
//            DataTable dtFolderJoin;
//            DataTable dtFolderShortcut;

//            try
//            {
//                _dba.OpenUpdateConnection();

//                // Move all User filters from Favorites to the new User folder

//                query = "SELECT * FROM FAVORITES";
//                dtFavorites = _dba.ExecuteQuery(query);

//                foreach (DataRow dr in dtFavorites.Rows)
//                {
//                    ConvertFavoritesTypeToProfileType(Convert.ToInt32(dr["FAV_TYPE"]), out favFolderType, out favItemType);
//                    favFolderRID = CreateFavoritesMainFolder(aMessageQueue, Convert.ToInt32(dr["USER_RID"]), favFolderType);
//                    CreateShortcut(aMessageQueue, favFolderRID, Convert.ToInt32(dr["FAV_ITEM_RID"]), favItemType);
//                }
//            }
//            catch (Exception exc)
//            {
//                aMessageQueue.Enqueue("UNEXPECTED EXCEPTION: " + exc.ToString());
//                throw;
//            }
//            finally
//            {
//                if (_dba != null)
//                {
//                    _dba.CloseUpdateConnection();
//                }
//            }
//        }

//        private void ConvertFavoritesTypeToProfileType(int aFavoritesType, out int aFavFolderType, out int aFavItemType)
//        {
//            switch (aFavoritesType)
//            {
//                case cFavoritesMethodsType:
//                    aFavFolderType = cWorflowMethodMainFavoritesType;
//                    aFavItemType = cMethodType;
//                    break;

//                case cFavoritesWorkflowsType:
//                    aFavFolderType = cWorflowMethodMainFavoritesType;
//                    aFavItemType = cWorflowType;
//                    break;

//                case cFavoritesStoresType:
//                    aFavFolderType = cStoreGroupMainFavoritesType;
//                    aFavItemType = cStoreGroupType;
//                    break;

//                default:
//                    aFavFolderType = cTaskListMainFavoritesType;
//                    aFavItemType = cTaskListType;
//                    break;
//            }
//        }

//        private int CreateFavoritesMainFolder(Queue aMessageQueue, int aUserRID, int aFavProfType)
//        {
//            DataTable dtFolder;
//            int folderRID;
//            string query;

//            try
//            {
//                query = "SELECT * FROM FOLDER WHERE USER_RID = " + aUserRID + " AND FOLDER_TYPE = " + aFavProfType;
//                dtFolder = _dba.ExecuteQuery(query);

//                if (dtFolder.Rows.Count == 0)
//                {
//                    folderRID = CreateFolder(aMessageQueue, aUserRID, "My Favorites", aFavProfType, aFavProfType);
//                }
//                else
//                {
//                    folderRID = Convert.ToInt32(dtFolder.Rows[0]["FOLDER_RID"]);
//                }

//                return folderRID;
//            }
//            catch (Exception exc)
//            {
//                aMessageQueue.Enqueue("UNEXPECTED EXCEPTION: " + exc.ToString());
//                throw;
//            }
//        }

//        private int CreateFolder(Queue aMessageQueue, int aUserRID, string aFolderName, int aFolderType, int aItemType)
//        {
//            MIDDbParameter[] inParams;
//            MIDDbParameter[] outParams;
//            int folderRID;
//            string query;

//            try
//            {
//                inParams = new MIDDbParameter[3];

//                inParams[0] = new MIDDbParameter("@USER_ID", aUserRID);
//                inParams[0].DbType = eDbType.Int;
//                inParams[0].Direction = eParameterDirection.Input;
//                inParams[1] = new MIDDbParameter("@FOLDER_ID", aFolderName);
//                inParams[1].DbType = eDbType.VarChar;
//                inParams[1].Direction = eParameterDirection.Input;
//                inParams[2] = new MIDDbParameter("@FOLDER_TYPE", aFolderType);
//                inParams[2].DbType = eDbType.Int;
//                inParams[2].Direction = eParameterDirection.Input;

//                outParams = new MIDDbParameter[1];

//                outParams[0] = new MIDDbParameter("@FOLDER_RID", DBNull.Value);
//                outParams[0].DbType = eDbType.Int;
//                outParams[0].Direction = eParameterDirection.Output;

//                folderRID = _dba.ExecuteStoredProcedure("SP_MID_FOLDER_INSERT", inParams, outParams);

//                query = "INSERT INTO USER_ITEM (USER_RID, ITEM_TYPE, ITEM_RID, OWNER_USER_RID) VALUES (@UserRID, @ItemType, @ItemRID, @OwnerRID)";

//                inParams = new MIDDbParameter[4];
//                inParams[0] = new MIDDbParameter("@UserRID", aUserRID);
//                inParams[0].DbType = eDbType.Int;
//                inParams[0].Direction = eParameterDirection.Input;
//                inParams[1] = new MIDDbParameter("@ItemType", aItemType);
//                inParams[1].DbType = eDbType.Int;
//                inParams[1].Direction = eParameterDirection.Input;
//                inParams[2] = new MIDDbParameter("@ItemRID", folderRID);
//                inParams[2].DbType = eDbType.Int;
//                inParams[2].Direction = eParameterDirection.Input;
//                inParams[3] = new MIDDbParameter("@OwnerRID", aUserRID);
//                inParams[3].DbType = eDbType.Int;
//                inParams[3].Direction = eParameterDirection.Input;

//                _dba.ExecuteNonQuery(query, inParams);

//                _dba.CommitData();

//                return folderRID;
//            }
//            catch (Exception exc)
//            {
//                aMessageQueue.Enqueue("UNEXPECTED EXCEPTION: " + exc.ToString());
//                throw;
//            }
//        }

//        private void CreateShortcut(Queue aMessageQueue, int aParentRID, int aChildRID, int aChildType)
//        {
//            string query;

//            try
//            {
//                query = "INSERT INTO FOLDER_SHORTCUT (PARENT_FOLDER_RID, CHILD_SHORTCUT_RID, CHILD_SHORTCUT_TYPE) VALUES (" + aParentRID + "," + aChildRID + "," + aChildType + ")";
//                _dba.ExecuteNonQuery(query);

//                _dba.CommitData();
//            }
//            catch (Exception exc)
//            {
//                aMessageQueue.Enqueue("UNEXPECTED EXCEPTION: " + exc.ToString());
//                throw;
//            }
//        }
//    }

//    class PurgeFolders : ICustomConversion
//    {
//        //=======
//        // FIELDS
//        //=======

//        const int cStoreGroupMainUserFolder = 34;
//        const int cStoreGroupMainGlobalFolder = 35;
//        const int cStoreGroup = 38;

//        private DatabaseAccess _dba;

//        //=============
//        // CONSTRUCTORS
//        //=============

//        public PurgeFolders()
//        {
//            _dba = new DatabaseAccess();
//        }

//        //=============
//        // METHODS
//        //=============

//        public void Execute(string aConnectionString, Queue aMessageQueue, Queue aProcessedQueue,
//            eDatabaseType aDatabaseType, int aNoDataTables, string aAllocationFileGroup,
//            string aForecastFileGroup, string aHistoryFileGroup, int aNoHistoryFileGroup,
//            string aDailyHistoryFileGroup, int aNoDailyHistoryFileGroup,
//            string aAuditFileGroup, string aWeekArchiveFileGroup, string aDayArchiveFileGroup) // TT#173 Provide database container for large data collections
//        {
//            try
//            {
//                MIDConnectionString.ConnectionString = aConnectionString;
//                PurgeUnusedFolders(aConnectionString, aMessageQueue);
//                CheckFolderUserItems(aConnectionString, aMessageQueue);
//            }
//            catch
//            {
//                throw;
//            }
//        }

//        private void PurgeUnusedFolders(string aConnectionString, Queue aMessageQueue)
//        {
//            string query;
//            int folderRID;
//            DataTable dtFolders;
//            DataTable dtFolderJoin;
//            DataTable dtFolderShortcut;

//            try
//            {
//                _dba.OpenUpdateConnection();

//                query = "SELECT * FROM FOLDER";
//                dtFolders = _dba.ExecuteQuery(query);

//                foreach (DataRow dr in dtFolders.Rows)
//                {
//                    folderRID = Convert.ToInt32(dr["FOLDER_RID"]);

//                    query = "SELECT * FROM FOLDER_JOIN WHERE PARENT_FOLDER_RID = " + folderRID;
//                    dtFolderJoin = _dba.ExecuteQuery(query);

//                    if (dtFolderJoin.Rows.Count == 0)
//                    {
//                        query = "SELECT * FROM FOLDER_SHORTCUT WHERE PARENT_FOLDER_RID = " + folderRID;
//                        dtFolderShortcut = _dba.ExecuteQuery(query);

//                        if (dtFolderShortcut.Rows.Count == 0)
//                        {
//                            query = "DELETE FROM FOLDER WHERE FOLDER_RID = " + folderRID;
//                            _dba.ExecuteNonQuery(query);
//                            _dba.CommitData();
//                        }
//                    }
//                }
//            }
//            catch (Exception exc)
//            {
//                aMessageQueue.Enqueue("UNEXPECTED EXCEPTION: " + exc.ToString());
//                throw;
//            }
//            finally
//            {
//                if (_dba != null)
//                {
//                    _dba.CloseUpdateConnection();
//                }
//            }
//        }

//        private void CheckFolderUserItems(string aConnectionString, Queue aMessageQueue)
//        {
//            string query;
//            int folderRID;
//            int userRID;
//            DataTable dtFolders;
//            DataTable dtUserItem;
//            DataTable dtFolderShortcut;

//            try
//            {
//                _dba.OpenUpdateConnection();

//                query = "SELECT * FROM FOLDER";
//                dtFolders = _dba.ExecuteQuery(query);

//                foreach (DataRow dr in dtFolders.Rows)
//                {
//                    folderRID = Convert.ToInt32(dr["FOLDER_RID"]);
//                    userRID = Convert.ToInt32(dr["USER_RID"]);

//                    query = "SELECT * FROM USER_ITEM WHERE ITEM_RID = " + folderRID + " AND " + 
//                        "ITEM_TYPE = " + Convert.ToInt32(dr["FOLDER_TYPE"]) + " AND " +
//                        "OWNER_USER_RID = " + userRID;
//                    dtUserItem = _dba.ExecuteQuery(query);

//                    if (dtUserItem.Rows.Count == 0)
//                    {
//                        query = "INSERT INTO USER_ITEM (USER_RID, ITEM_TYPE, ITEM_RID, OWNER_USER_RID) VALUES (" + userRID +
//                            ", " + Convert.ToInt32(dr["FOLDER_TYPE"]) + ", " + folderRID + ", " + userRID + ")";
//                        _dba.ExecuteNonQuery(query);
//                        _dba.CommitData();
//                    }
//                }
//            }
//            catch (Exception exc)
//            {
//                aMessageQueue.Enqueue("UNEXPECTED EXCEPTION: " + exc.ToString());
//                throw;
//            }
//            finally
//            {
//                if (_dba != null)
//                {
//                    _dba.CloseUpdateConnection();
//                }
//            }
//        }
//    }

//    class LinkUnassignedFilters : ICustomConversion
//    {
//        //=======
//        // FIELDS
//        //=======

//        const int cFilterMainUserFolder = 17;
//        const int cFilterMainGlobalFolder = 18;
//        const int cStoreFilter = 20;

//        private DatabaseAccess _dba;

//        //=============
//        // CONSTRUCTORS
//        //=============

//        public LinkUnassignedFilters()
//        {
//            _dba = new DatabaseAccess();
//        }

//        //=============
//        // METHODS
//        //=============

//        public void Execute(string aConnectionString, Queue aMessageQueue, Queue aProcessedQueue,
//            eDatabaseType aDatabaseType, int aNoDataTables, string aAllocationFileGroup,
//            string aForecastFileGroup, string aHistoryFileGroup, int aNoHistoryFileGroup,
//            string aDailyHistoryFileGroup, int aNoDailyHistoryFileGroup,
//            string aAuditFileGroup, string aWeekArchiveFileGroup, string aDayArchiveFileGroup) // TT#173 Provide database container for large data collections
//        {
//            try
//            {
//                MIDConnectionString.ConnectionString = aConnectionString;
//                LinkFilters(aConnectionString, aMessageQueue);
//            }
//            catch
//            {
//                throw;
//            }
//        }

//        private void LinkFilters(string aConnectionString, Queue aMessageQueue)
//        {
//            string query;
//            DataTable dtFilters;
//            DataTable dtFolderJoin;
//            int userRID;
//            int mainFolderRID;

//            try
//            {
//                _dba.OpenUpdateConnection();

//                query = "SELECT * FROM STORE_FILTER WHERE USER_RID <> 1 ORDER BY USER_RID";
//                dtFilters = _dba.ExecuteQuery(query);

//                foreach (DataRow dr in dtFilters.Rows)
//                {
//                    userRID = Convert.ToInt32(dr["USER_RID"]);

//                    query = "SELECT * FROM FOLDER_JOIN WHERE CHILD_ITEM_RID = " + dr["STORE_FILTER_RID"] + " AND CHILD_ITEM_TYPE = " + cStoreFilter;
//                    dtFolderJoin = _dba.ExecuteQuery(query);

//                    if (userRID == Include.GlobalUserRID)
//                    {
//                        mainFolderRID = CreateMainFolder(aMessageQueue, userRID, cFilterMainGlobalFolder);
//                    }
//                    else
//                    {
//                        mainFolderRID = CreateMainFolder(aMessageQueue, userRID, cFilterMainUserFolder);
//                    }

//                    if (dtFolderJoin.Rows.Count == 0)
//                    {
//                        CreateFolderJoin(aMessageQueue, mainFolderRID, Convert.ToInt32(dr["STORE_FILTER_RID"]), cStoreFilter);
//                    }
//                }
//            }
//            catch (Exception exc)
//            {
//                aMessageQueue.Enqueue("UNEXPECTED EXCEPTION: " + exc.ToString());
//                throw;
//            }
//            finally
//            {
//                if (_dba != null)
//                {
//                    _dba.CloseUpdateConnection();
//                }
//            }
//        }

//        private int CreateMainFolder(Queue aMessageQueue, int aUserRID, int aFolderType)
//        {
//            DataTable dtFolder;
//            int folderRID;
//            string query;

//            try
//            {
//                query = "SELECT * FROM FOLDER WHERE USER_RID = " + aUserRID + " AND FOLDER_TYPE = " + aFolderType;
//                dtFolder = _dba.ExecuteQuery(query);

//                if (dtFolder.Rows.Count == 0)
//                {
//                    folderRID = CreateFolder(aMessageQueue, aUserRID, "My Filters", aFolderType, aFolderType);
//                }
//                else
//                {
//                    folderRID = Convert.ToInt32(dtFolder.Rows[0]["FOLDER_RID"]);
//                }

//                return folderRID;
//            }
//            catch (Exception exc)
//            {
//                aMessageQueue.Enqueue("UNEXPECTED EXCEPTION: " + exc.ToString());
//                throw;
//            }
//        }

//        private int CreateFolder(Queue aMessageQueue, int aUserRID, string aFolderName, int aFolderType, int aItemType)
//        {
//            MIDDbParameter[] inParams;
//            MIDDbParameter[] outParams;
//            int folderRID;
//            string query;

//            try
//            {
//                inParams = new MIDDbParameter[3];

//                inParams[0] = new MIDDbParameter("@USER_ID", aUserRID);
//                inParams[0].DbType = eDbType.Int;
//                inParams[0].Direction = eParameterDirection.Input;
//                inParams[1] = new MIDDbParameter("@FOLDER_ID", aFolderName);
//                inParams[1].DbType = eDbType.VarChar;
//                inParams[1].Direction = eParameterDirection.Input;
//                inParams[2] = new MIDDbParameter("@FOLDER_TYPE", aFolderType);
//                inParams[2].DbType = eDbType.Int;
//                inParams[2].Direction = eParameterDirection.Input;

//                outParams = new MIDDbParameter[1];

//                outParams[0] = new MIDDbParameter("@FOLDER_RID", DBNull.Value);
//                outParams[0].DbType = eDbType.Int;
//                outParams[0].Direction = eParameterDirection.Output;

//                folderRID = _dba.ExecuteStoredProcedure("SP_MID_FOLDER_INSERT", inParams, outParams);

//                query = "INSERT INTO USER_ITEM (USER_RID, ITEM_TYPE, ITEM_RID, OWNER_USER_RID) VALUES (@UserRID, @ItemType, @ItemRID, @OwnerRID)";

//                inParams = new MIDDbParameter[4];
//                inParams[0] = new MIDDbParameter("@UserRID", aUserRID);
//                inParams[0].DbType = eDbType.Int;
//                inParams[0].Direction = eParameterDirection.Input;
//                inParams[1] = new MIDDbParameter("@ItemType", aItemType);
//                inParams[1].DbType = eDbType.Int;
//                inParams[1].Direction = eParameterDirection.Input;
//                inParams[2] = new MIDDbParameter("@ItemRID", folderRID);
//                inParams[2].DbType = eDbType.Int;
//                inParams[2].Direction = eParameterDirection.Input;
//                inParams[3] = new MIDDbParameter("@OwnerRID", aUserRID);
//                inParams[3].DbType = eDbType.Int;
//                inParams[3].Direction = eParameterDirection.Input;

//                _dba.ExecuteNonQuery(query, inParams);

//                _dba.CommitData();

//                return folderRID;
//            }
//            catch (Exception exc)
//            {
//                aMessageQueue.Enqueue("UNEXPECTED EXCEPTION: " + exc.ToString());
//                throw;
//            }
//        }

//        private void CreateFolderJoin(Queue aMessageQueue, int aParentRID, int aChildRID, int aChildType)
//        {
//            string query;

//            try
//            {
//                query = "INSERT INTO FOLDER_JOIN (PARENT_FOLDER_RID, CHILD_ITEM_RID, CHILD_ITEM_TYPE) VALUES (" + aParentRID + "," + aChildRID + "," + aChildType + ")";
//                _dba.ExecuteNonQuery(query);

//                _dba.CommitData();
//            }
//            catch (Exception exc)
//            {
//                aMessageQueue.Enqueue("UNEXPECTED EXCEPTION: " + exc.ToString());
//                throw;
//            }
//        }
//    }

//    class LinkUnassignedTaskLists : ICustomConversion
//    {
//        //=======
//        // FIELDS
//        //=======

//        const int cTaskListMainUserFolder = 42;
//        const int cTaskListMainGlobalFolder = 43;
//        const int cTaskListMainSystemFolder = 44;
//        const int cTaskList = 46;
//        const int cJobMainFolder = 47;
//        const int cJob = 48;
//        const int cSpecialRequestMainFolder = 49;
//        const int cSpecialRequest = 50;

//        private DatabaseAccess _dba;

//        //=============
//        // CONSTRUCTORS
//        //=============

//        public LinkUnassignedTaskLists()
//        {
//            _dba = new DatabaseAccess();
//        }

//        //=============
//        // METHODS
//        //=============

//        public void Execute(string aConnectionString, Queue aMessageQueue, Queue aProcessedQueue,
//            eDatabaseType aDatabaseType, int aNoDataTables, string aAllocationFileGroup,
//            string aForecastFileGroup, string aHistoryFileGroup, int aNoHistoryFileGroup,
//            string aDailyHistoryFileGroup, int aNoDailyHistoryFileGroup,
//            string aAuditFileGroup, string aWeekArchiveFileGroup, string aDayArchiveFileGroup) // TT#173 Provide database container for large data collections
//        {
//            try
//            {
//                MIDConnectionString.ConnectionString = aConnectionString;
//                LinkTaskLists(aConnectionString, aMessageQueue);
//                LinkJobs(aConnectionString, aMessageQueue);
//                LinkSpecialRequests(aConnectionString, aMessageQueue);
//            }
//            catch
//            {
//                throw;
//            }
//        }

//        private void LinkTaskLists(string aConnectionString, Queue aMessageQueue)
//        {
//            string query;
//            DataTable dtTaskLists;
//            DataTable dtFolderJoin;
//            int userRID;
//            int mainFolderRID;

//            try
//            {
//                _dba.OpenUpdateConnection();

//                query = "SELECT * FROM TASKLIST WHERE USER_RID <> 1 ORDER BY USER_RID";
//                dtTaskLists = _dba.ExecuteQuery(query);

//                foreach (DataRow dr in dtTaskLists.Rows)
//                {
//                    userRID = Convert.ToInt32(dr["USER_RID"]);

//                    query = "SELECT * FROM FOLDER_JOIN WHERE CHILD_ITEM_RID = " + dr["TASKLIST_RID"] + " AND CHILD_ITEM_TYPE = " + cTaskList;
//                    dtFolderJoin = _dba.ExecuteQuery(query);

//                    if (userRID == Include.GlobalUserRID)
//                    {
//                        mainFolderRID = CreateMainFolder(aMessageQueue, userRID, cTaskListMainGlobalFolder);
//                    }
//                    else if (userRID == Include.SystemUserRID)
//                    {
//                        mainFolderRID = CreateMainFolder(aMessageQueue, userRID, cTaskListMainSystemFolder);
//                    }
//                    else
//                    {
//                        mainFolderRID = CreateMainFolder(aMessageQueue, userRID, cTaskListMainUserFolder);
//                    }

//                    if (dtFolderJoin.Rows.Count == 0)
//                    {
//                        CreateFolderJoin(aMessageQueue, mainFolderRID, Convert.ToInt32(dr["TASKLIST_RID"]), cTaskList);
//                    }
//                }
//            }
//            catch (Exception exc)
//            {
//                aMessageQueue.Enqueue("UNEXPECTED EXCEPTION: " + exc.ToString());
//                throw;
//            }
//            finally
//            {
//                if (_dba != null)
//                {
//                    _dba.CloseUpdateConnection();
//                }
//            }
//        }

//        private void LinkJobs(string aConnectionString, Queue aMessageQueue)
//        {
//            string query;
//            DataTable dtJobs;
//            DataTable dtFolderJoin;
//            int mainFolderRID;

//            try
//            {
//                _dba.OpenUpdateConnection();

//                query = "SELECT * FROM JOB WHERE SYSTEM_GENERATED_IND = 0";
//                dtJobs = _dba.ExecuteQuery(query);

//                foreach (DataRow dr in dtJobs.Rows)
//                {
//                    query = "SELECT * FROM FOLDER_JOIN WHERE CHILD_ITEM_RID = " + dr["JOB_RID"] + " AND CHILD_ITEM_TYPE = " + cJob;
//                    dtFolderJoin = _dba.ExecuteQuery(query);

//                    mainFolderRID = GetMainFolder(aMessageQueue, Include.SystemUserRID, cJobMainFolder);

//                    if (dtFolderJoin.Rows.Count == 0)
//                    {
//                        CreateFolderJoin(aMessageQueue, mainFolderRID, Convert.ToInt32(dr["JOB_RID"]), cJob);
//                    }
//                }
//            }
//            catch (Exception exc)
//            {
//                aMessageQueue.Enqueue("UNEXPECTED EXCEPTION: " + exc.ToString());
//                throw;
//            }
//            finally
//            {
//                if (_dba != null)
//                {
//                    _dba.CloseUpdateConnection();
//                }
//            }
//        }

//        private void LinkSpecialRequests(string aConnectionString, Queue aMessageQueue)
//        {
//            string query;
//            DataTable dtSpecialRequests;
//            DataTable dtFolderJoin;
//            int mainFolderRID;

//            try
//            {
//                _dba.OpenUpdateConnection();

//                query = "SELECT * FROM SPECIAL_REQUEST_JOB";
//                dtSpecialRequests = _dba.ExecuteQuery(query);

//                foreach (DataRow dr in dtSpecialRequests.Rows)
//                {
//                    query = "SELECT * FROM FOLDER_JOIN WHERE CHILD_ITEM_RID = " + dr["SPECIAL_REQ_RID"] + " AND CHILD_ITEM_TYPE = " + cSpecialRequest;
//                    dtFolderJoin = _dba.ExecuteQuery(query);

//                    mainFolderRID = GetMainFolder(aMessageQueue, Include.SystemUserRID, cSpecialRequestMainFolder);

//                    if (dtFolderJoin.Rows.Count == 0)
//                    {
//                        CreateFolderJoin(aMessageQueue, mainFolderRID, Convert.ToInt32(dr["SPECIAL_REQ_RID"]), cSpecialRequest);
//                    }
//                }
//            }
//            catch (Exception exc)
//            {
//                aMessageQueue.Enqueue("UNEXPECTED EXCEPTION: " + exc.ToString());
//                throw;
//            }
//            finally
//            {
//                if (_dba != null)
//                {
//                    _dba.CloseUpdateConnection();
//                }
//            }
//        }

//        private int CreateMainFolder(Queue aMessageQueue, int aUserRID, int aFolderType)
//        {
//            DataTable dtFolder;
//            int folderRID;
//            string query;

//            try
//            {
//                query = "SELECT * FROM FOLDER WHERE USER_RID = " + aUserRID + " AND FOLDER_TYPE = " + aFolderType;
//                dtFolder = _dba.ExecuteQuery(query);

//                if (dtFolder.Rows.Count == 0)
//                {
//                    folderRID = CreateFolder(aMessageQueue, aUserRID, "My Task Lists", aFolderType, aFolderType);
//                }
//                else
//                {
//                    folderRID = Convert.ToInt32(dtFolder.Rows[0]["FOLDER_RID"]);
//                }

//                return folderRID;
//            }
//            catch (Exception exc)
//            {
//                aMessageQueue.Enqueue("UNEXPECTED EXCEPTION: " + exc.ToString());
//                throw;
//            }
//        }

//        private int GetMainFolder(Queue aMessageQueue, int aUserRID, int aFolderType)
//        {
//            DataTable dtFolder;
//            int folderRID;
//            string query;

//            try
//            {
//                query = "SELECT * FROM FOLDER WHERE USER_RID = " + aUserRID + " AND FOLDER_TYPE = " + aFolderType;
//                dtFolder = _dba.ExecuteQuery(query);

//                if (dtFolder.Rows.Count == 0)
//                {
//                    throw new Exception("Folder of type " + aFolderType + " does not exist");
//                }
//                else
//                {
//                    folderRID = Convert.ToInt32(dtFolder.Rows[0]["FOLDER_RID"]);
//                }

//                return folderRID;
//            }
//            catch (Exception exc)
//            {
//                aMessageQueue.Enqueue("UNEXPECTED EXCEPTION: " + exc.ToString());
//                throw;
//            }
//        }

//        private int CreateFolder(Queue aMessageQueue, int aUserRID, string aFolderName, int aFolderType, int aItemType)
//        {
//            MIDDbParameter[] inParams;
//            MIDDbParameter[] outParams;
//            int folderRID;
//            string query;

//            try
//            {
//                inParams = new MIDDbParameter[3];

//                inParams[0] = new MIDDbParameter("@USER_ID", aUserRID);
//                inParams[0].DbType = eDbType.Int;
//                inParams[0].Direction = eParameterDirection.Input;
//                inParams[1] = new MIDDbParameter("@FOLDER_ID", aFolderName);
//                inParams[1].DbType = eDbType.VarChar;
//                inParams[1].Direction = eParameterDirection.Input;
//                inParams[2] = new MIDDbParameter("@FOLDER_TYPE", aFolderType);
//                inParams[2].DbType = eDbType.Int;
//                inParams[2].Direction = eParameterDirection.Input;

//                outParams = new MIDDbParameter[1];

//                outParams[0] = new MIDDbParameter("@FOLDER_RID", DBNull.Value);
//                outParams[0].DbType = eDbType.Int;
//                outParams[0].Direction = eParameterDirection.Output;

//                folderRID = _dba.ExecuteStoredProcedure("SP_MID_FOLDER_INSERT", inParams, outParams);

//                query = "INSERT INTO USER_ITEM (USER_RID, ITEM_TYPE, ITEM_RID, OWNER_USER_RID) VALUES (@UserRID, @ItemType, @ItemRID, @OwnerRID)";

//                inParams = new MIDDbParameter[4];
//                inParams[0] = new MIDDbParameter("@UserRID", aUserRID);
//                inParams[0].DbType = eDbType.Int;
//                inParams[0].Direction = eParameterDirection.Input;
//                inParams[1] = new MIDDbParameter("@ItemType", aItemType);
//                inParams[1].DbType = eDbType.Int;
//                inParams[1].Direction = eParameterDirection.Input;
//                inParams[2] = new MIDDbParameter("@ItemRID", folderRID);
//                inParams[2].DbType = eDbType.Int;
//                inParams[2].Direction = eParameterDirection.Input;
//                inParams[3] = new MIDDbParameter("@OwnerRID", aUserRID);
//                inParams[3].DbType = eDbType.Int;
//                inParams[3].Direction = eParameterDirection.Input;

//                _dba.ExecuteNonQuery(query, inParams);

//                _dba.CommitData();

//                return folderRID;
//            }
//            catch (Exception exc)
//            {
//                aMessageQueue.Enqueue("UNEXPECTED EXCEPTION: " + exc.ToString());
//                throw;
//            }
//        }

//        private void CreateFolderJoin(Queue aMessageQueue, int aParentRID, int aChildRID, int aChildType)
//        {
//            string query;

//            try
//            {
//                query = "INSERT INTO FOLDER_JOIN (PARENT_FOLDER_RID, CHILD_ITEM_RID, CHILD_ITEM_TYPE) VALUES (" + aParentRID + "," + aChildRID + "," + aChildType + ")";
//                _dba.ExecuteNonQuery(query);

//                _dba.CommitData();
//            }
//            catch (Exception exc)
//            {
//                aMessageQueue.Enqueue("UNEXPECTED EXCEPTION: " + exc.ToString());
//                throw;
//            }
//        }
//    }

//    class LinkUnassignedStoreGroups : ICustomConversion
//    {
//        //=======
//        // FIELDS
//        //=======

//        const int cStoreGroupMainUserFolder = 34;
//        const int cStoreGroupMainGlobalFolder = 35;
//        const int cStoreGroup = 38;

//        private DatabaseAccess _dba;

//        //=============
//        // CONSTRUCTORS
//        //=============

//        public LinkUnassignedStoreGroups()
//        {
//            _dba = new DatabaseAccess();
//        }

//        //=============
//        // METHODS
//        //=============

//        public void Execute(string aConnectionString, Queue aMessageQueue, Queue aProcessedQueue,
//            eDatabaseType aDatabaseType, int aNoDataTables, string aAllocationFileGroup,
//            string aForecastFileGroup, string aHistoryFileGroup, int aNoHistoryFileGroup,
//            string aDailyHistoryFileGroup, int aNoDailyHistoryFileGroup,
//            string aAuditFileGroup, string aWeekArchiveFileGroup, string aDayArchiveFileGroup) // TT#173 Provide database container for large data collections
//        {
//            try
//            {
//                MIDConnectionString.ConnectionString = aConnectionString;
//                LinkStoreGroups(aConnectionString, aMessageQueue);
//            }
//            catch
//            {
//                throw;
//            }
//        }

//        private void LinkStoreGroups(string aConnectionString, Queue aMessageQueue)
//        {
//            string query;
//            DataTable dtStoreGroups;
//            DataTable dtFolderJoin;
//            int userRID;
//            int mainFolderRID;

//            try
//            {
//                _dba.OpenUpdateConnection();

//                query = "SELECT * FROM STORE_GROUP";
//                dtStoreGroups = _dba.ExecuteQuery(query);

//                foreach (DataRow dr in dtStoreGroups.Rows)
//                {
//                    userRID = Convert.ToInt32(dr["USER_RID"]);

//                    query = "SELECT * FROM FOLDER_JOIN WHERE CHILD_ITEM_RID = " + dr["SG_RID"] + " AND CHILD_ITEM_TYPE = " + cStoreGroup;
//                    dtFolderJoin = _dba.ExecuteQuery(query);

//                    if (userRID == Include.GlobalUserRID)
//                    {
//                        mainFolderRID = CreateMainFolder(aMessageQueue, userRID, cStoreGroupMainGlobalFolder);
//                    }
//                    else
//                    {
//                        mainFolderRID = CreateMainFolder(aMessageQueue, userRID, cStoreGroupMainUserFolder);
//                    }

//                    if (dtFolderJoin.Rows.Count == 0)
//                    {
//                        CreateFolderJoin(aMessageQueue, mainFolderRID, Convert.ToInt32(dr["SG_RID"]), cStoreGroup);
//                    }
//                }
//            }
//            catch (Exception exc)
//            {
//                aMessageQueue.Enqueue("UNEXPECTED EXCEPTION: " + exc.ToString());
//                throw;
//            }
//            finally
//            {
//                if (_dba != null)
//                {
//                    _dba.CloseUpdateConnection();
//                }
//            }
//        }

//        private int CreateMainFolder(Queue aMessageQueue, int aUserRID, int aFolderType)
//        {
//            DataTable dtFolder;
//            int folderRID;
//            string query;

//            try
//            {
//                query = "SELECT * FROM FOLDER WHERE USER_RID = " + aUserRID + " AND FOLDER_TYPE = " + aFolderType;
//                dtFolder = _dba.ExecuteQuery(query);

//                if (dtFolder.Rows.Count == 0)
//                {
//                    folderRID = CreateFolder(aMessageQueue, aUserRID, "My Attributes", aFolderType, aFolderType);
//                }
//                else
//                {
//                    folderRID = Convert.ToInt32(dtFolder.Rows[0]["FOLDER_RID"]);
//                }

//                return folderRID;
//            }
//            catch (Exception exc)
//            {
//                aMessageQueue.Enqueue("UNEXPECTED EXCEPTION: " + exc.ToString());
//                throw;
//            }
//        }

//        private int CreateFolder(Queue aMessageQueue, int aUserRID, string aFolderName, int aFolderType, int aItemType)
//        {
//            MIDDbParameter[] inParams;
//            MIDDbParameter[] outParams;
//            int folderRID;
//            string query;

//            try
//            {
//                inParams = new MIDDbParameter[3];

//                inParams[0] = new MIDDbParameter("@USER_ID", aUserRID);
//                inParams[0].DbType = eDbType.Int;
//                inParams[0].Direction = eParameterDirection.Input;
//                inParams[1] = new MIDDbParameter("@FOLDER_ID", aFolderName);
//                inParams[1].DbType = eDbType.VarChar;
//                inParams[1].Direction = eParameterDirection.Input;
//                inParams[2] = new MIDDbParameter("@FOLDER_TYPE", aFolderType);
//                inParams[2].DbType = eDbType.Int;
//                inParams[2].Direction = eParameterDirection.Input;

//                outParams = new MIDDbParameter[1];

//                outParams[0] = new MIDDbParameter("@FOLDER_RID", DBNull.Value);
//                outParams[0].DbType = eDbType.Int;
//                outParams[0].Direction = eParameterDirection.Output;

//                folderRID = _dba.ExecuteStoredProcedure("SP_MID_FOLDER_INSERT", inParams, outParams);

//                query = "INSERT INTO USER_ITEM (USER_RID, ITEM_TYPE, ITEM_RID, OWNER_USER_RID) VALUES (@UserRID, @ItemType, @ItemRID, @OwnerRID)";

//                inParams = new MIDDbParameter[4];
//                inParams[0] = new MIDDbParameter("@UserRID", aUserRID);
//                inParams[0].DbType = eDbType.Int;
//                inParams[0].Direction = eParameterDirection.Input;
//                inParams[1] = new MIDDbParameter("@ItemType", aItemType);
//                inParams[1].DbType = eDbType.Int;
//                inParams[1].Direction = eParameterDirection.Input;
//                inParams[2] = new MIDDbParameter("@ItemRID", folderRID);
//                inParams[2].DbType = eDbType.Int;
//                inParams[2].Direction = eParameterDirection.Input;
//                inParams[3] = new MIDDbParameter("@OwnerRID", aUserRID);
//                inParams[3].DbType = eDbType.Int;
//                inParams[3].Direction = eParameterDirection.Input;

//                _dba.ExecuteNonQuery(query, inParams);

//                _dba.CommitData();

//                return folderRID;
//            }
//            catch (Exception exc)
//            {
//                aMessageQueue.Enqueue("UNEXPECTED EXCEPTION: " + exc.ToString());
//                throw;
//            }
//        }

//        private void CreateFolderJoin(Queue aMessageQueue, int aParentRID, int aChildRID, int aChildType)
//        {
//            string query;

//            try
//            {
//                query = "INSERT INTO FOLDER_JOIN (PARENT_FOLDER_RID, CHILD_ITEM_RID, CHILD_ITEM_TYPE) VALUES (" + aParentRID + "," + aChildRID + "," + aChildType + ")";
//                _dba.ExecuteNonQuery(query);

//                _dba.CommitData();
//            }
//            catch (Exception exc)
//            {
//                aMessageQueue.Enqueue("UNEXPECTED EXCEPTION: " + exc.ToString());
//                throw;
//            }
//        }
//    }

//    class BuildWorkflowMethodFolders : ICustomConversion
//    {
//        //=======
//        // FIELDS
//        //=======

        

//        private DatabaseAccess _dba;

//        //=============
//        // CONSTRUCTORS
//        //=============

//        public BuildWorkflowMethodFolders()
//        {
//            _dba = new DatabaseAccess();
//        }

//        //=============
//        // METHODS
//        //=============

//        public void Execute(string aConnectionString, Queue aMessageQueue, Queue aProcessedQueue,
//            eDatabaseType aDatabaseType, int aNoDataTables, string aAllocationFileGroup,
//            string aForecastFileGroup, string aHistoryFileGroup, int aNoHistoryFileGroup,
//            string aDailyHistoryFileGroup, int aNoDailyHistoryFileGroup,
//            string aAuditFileGroup, string aWeekArchiveFileGroup, string aDayArchiveFileGroup) // TT#173 Provide database container for large data collections
//        {
//            try
//            {
//                MIDConnectionString.ConnectionString = aConnectionString;
//                BuildFolders(aConnectionString, aMessageQueue);
//            }
//            catch
//            {
//                throw;
//            }
//        }

//        private void BuildFolders(string aConnectionString, Queue aMessageQueue)
//        {
//            string query;
//            DataTable dtItems;
//            int globalForecastRID, globalAllocationRID;
//            DataTable dtFolder;
//            int globalRID, folderRID, userRID;

//            try
//            {
//                _dba.OpenUpdateConnection();

//                // Get global folder; add if necessary
//                query = "SELECT * FROM FOLDER WHERE USER_RID = " + Include.GlobalUserRID + " AND FOLDER_TYPE = " + (int)eProfileType.WorkflowMethodMainGlobalFolder;
//                dtFolder = _dba.ExecuteQuery(query);

//                if (dtFolder.Rows.Count == 0)
//                {
//                    globalRID = CreateFolder(aMessageQueue, Include.GlobalUserRID, "Global Workflow/Methods", (int)eProfileType.WorkflowMethodMainGlobalFolder);
//                }
//                else
//                {
//                    globalRID = Convert.ToInt32(dtFolder.Rows[0]["FOLDER_RID"]);
//                }

//                // Add OTS Forecast and Allocation group folders to global and all active users
//                globalForecastRID = GetForecastGroupFolder(aMessageQueue, globalRID, Include.GlobalUserRID);
//                globalAllocationRID = GetAllocationGroupFolder(aMessageQueue, globalRID, Include.GlobalUserRID);

//                query = "SELECT * FROM APPLICATION_USER where USER_ACTIVE_IND = 1";
//                dtItems = _dba.ExecuteQuery(query);

//                foreach (DataRow dr in dtItems.Rows)
//                {
//                    userRID = Convert.ToInt32(dr["USER_RID"]);
//                    if (userRID != Include.GlobalUserRID &&
//                        userRID != Include.SystemUserRID)
//                    {
//                        folderRID = CreateFolder(aMessageQueue, userRID, "My Workflow/Methods", (int)eProfileType.WorkflowMethodMainUserFolder);
//                        GetForecastGroupFolder(aMessageQueue, folderRID, userRID);
//                        GetAllocationGroupFolder(aMessageQueue, folderRID, userRID);
//                    }
//                }

                
//                // Attach all workflows and methods to the appropriate folders
//                query = "SELECT * FROM METHOD where METHOD_RID > 99";
//                dtItems = _dba.ExecuteQuery(query);

//                foreach (DataRow dr in dtItems.Rows)
//                {
//                    AddMethodToGroup(aMessageQueue, Convert.ToInt32(dr["USER_RID"]), Convert.ToInt32(dr["METHOD_RID"]), Convert.ToInt32(dr["METHOD_TYPE_ID"]));
//                }

//                query = "SELECT * FROM WORKFLOW where WORKFLOW_RID > 99";
//                dtItems = _dba.ExecuteQuery(query);

//                foreach (DataRow dr in dtItems.Rows)
//                {
//                    AddWorkflowToGroup(aMessageQueue, Convert.ToInt32(dr["WORKFLOW_USER_RID"]), Convert.ToInt32(dr["WORKFLOW_RID"]), Convert.ToInt32(dr["WORKFLOW_TYPE_ID"]));
//                }
//            }
//            catch (Exception exc)
//            {
//                aMessageQueue.Enqueue("UNEXPECTED EXCEPTION: " + exc.ToString());
//                throw;
//            }
//            finally
//            {
//                if (_dba != null)
//                {
//                    _dba.CloseUpdateConnection();
//                }
//            }
//        }

//        private void AddMethodToGroup(Queue aMessageQueue, int aUserRID, int aItemRID, int aItemType)
//        {
//            int folderRID;
//            int profileType;

//            try
//            {
//                if (aUserRID == Include.GlobalUserRID)
//                {
//                    folderRID = GetUserFolder(aMessageQueue, aUserRID, eProfileType.WorkflowMethodMainGlobalFolder);
//                }
//                else
//                {
//                    folderRID = GetUserFolder(aMessageQueue, aUserRID, eProfileType.WorkflowMethodMainUserFolder);
//                }
//                if (Enum.IsDefined(typeof(eAllocationMethodType), aItemType))
//                {
//                    folderRID = GetAllocationGroupFolder(aMessageQueue, folderRID, aUserRID);
//                    switch ((eMethodType)aItemType)
//                    {
//                        case eMethodType.AllocationOverride:
//                            profileType = (int)eProfileType.MethodAllocationOverride;
//                            break;
//                        case eMethodType.Velocity:
//                            profileType = (int)eProfileType.MethodVelocity;
//                            break;
//                        case eMethodType.Rule:
//                            profileType = (int)eProfileType.MethodRule;
//                            break;
//                        case eMethodType.GeneralAllocation:
//                            profileType = (int)eProfileType.MethodGeneralAllocation;
//                            break;
//                        case eMethodType.FillSizeHolesAllocation:
//                            profileType = (int)eProfileType.MethodFillSizeHolesAllocation;
//                            break;
//                        case eMethodType.BasisSizeAllocation:
//                            profileType = (int)eProfileType.MethodBasisSizeAllocation;
//                            break;
//                        case eMethodType.SizeNeedAllocation:
//                            profileType = (int)eProfileType.MethodSizeNeedAllocation;
//                            break;
//                        case eMethodType.SizeOverrideAllocation:
//                            profileType = 0;
//                            //aMessageQueue.Enqueue("UNEXPECTED Size override Method Type ");
//                            return;
//                        case eMethodType.GeneralAssortment:
//                            profileType = (int)eProfileType.MethodGeneralAssortment;
//                            break;
//                        default:
//                            profileType = 0;
//                            aMessageQueue.Enqueue("UNEXPECTED Method Type = " + aItemType);
//                            return;
//                    }

//                    CreateJoin(aMessageQueue, folderRID, aItemRID, profileType);
//                }
//                else if (Enum.IsDefined(typeof(eForecastMethodType), aItemType))
//                {
//                    switch ((eMethodType)aItemType)
//                    {
//                        case eMethodType.OTSPlan:
//                            profileType = (int)eProfileType.MethodOTSPlan;
//                            break;
//                        case eMethodType.ForecastBalance:
//                            profileType = (int)eProfileType.MethodForecastBalance;
//                            break;
//                        case eMethodType.ForecastSpread:
//                            profileType = (int)eProfileType.MethodForecastSpread;
//                            break;
//                        case eMethodType.CopyChainForecast:
//                            profileType = (int)eProfileType.MethodCopyChainForecast;
//                            break;
//                        case eMethodType.CopyStoreForecast:
//                            profileType = (int)eProfileType.MethodCopyStoreForecast;
//                            break;
//                        case eMethodType.ForecastModifySales:
//                            profileType = (int)eProfileType.MethodModifySales;
//                            break;
//                        case eMethodType.Export:
//                            profileType = (int)eProfileType.MethodExport;
//                            break;
//                        case eMethodType.GlobalUnlock:
//                            profileType = (int)eProfileType.MethodGlobalUnlock;
//                            break;
//                        case eMethodType.Rollup:
//                            profileType = (int)eProfileType.MethodRollup;
//                            break;
//                        default:
//                            profileType = 0;
//                            aMessageQueue.Enqueue("UNEXPECTED Method Type = " + aItemType);
//                            return;
//                    }
//                    folderRID = GetForecastGroupFolder(aMessageQueue, folderRID, aUserRID);
//                    CreateJoin(aMessageQueue, folderRID, aItemRID, profileType);
//                }
//            }
//            catch (Exception exc)
//            {
//                aMessageQueue.Enqueue("UNEXPECTED EXCEPTION: " + exc.ToString());
//                throw;
//            }
//        }

//        private void AddWorkflowToGroup(Queue aMessageQueue, int aUserRID, int aItemRID, int aItemType)
//        {
//            int folderRID;
//            eWorkflowType workflowType;

//            try
//            {
//                if (aUserRID == Include.GlobalUserRID)
//                {
//                    folderRID = GetUserFolder(aMessageQueue, aUserRID, eProfileType.WorkflowMethodMainGlobalFolder);
//                }
//                else
//                {
//                    folderRID = GetUserFolder(aMessageQueue, aUserRID, eProfileType.WorkflowMethodMainUserFolder);
//                }
//                workflowType = (eWorkflowType)aItemType;
//                if (workflowType == eWorkflowType.Allocation)
//                {
//                    folderRID = GetAllocationGroupFolder(aMessageQueue, folderRID, aUserRID);
//                    CreateJoin(aMessageQueue, folderRID, aItemRID, (int)eProfileType.Workflow);
//                }
//                else if (workflowType == eWorkflowType.Forecast)
//                {
//                    folderRID = GetForecastGroupFolder(aMessageQueue, folderRID, aUserRID);
//                    CreateJoin(aMessageQueue, folderRID, aItemRID, (int)eProfileType.Workflow);
//                }
//            }
//            catch (Exception exc)
//            {
//                aMessageQueue.Enqueue("UNEXPECTED EXCEPTION: " + exc.ToString());
//                throw;
//            }
//        }

//        private int GetUserFolder(Queue aMessageQueue, int aUserRID, eProfileType aFolderType)
//        {
//            DataTable dtFolder;
//            int folderRID;
//            string query;

//            try
//            {
//                query = "SELECT * FROM FOLDER WHERE USER_RID = " + aUserRID + " AND FOLDER_TYPE = " + (int)aFolderType;
//                dtFolder = _dba.ExecuteQuery(query);

//                if (dtFolder.Rows.Count == 0)
//                {
//                    folderRID = AddGroup(aMessageQueue, aUserRID, (int)eProfileType.WorkflowMethodMainUserFolder, "My Workflow/Methods");
//                    // Add OTS Forecast and Allocation group folders to user
//                    GetForecastGroupFolder(aMessageQueue, folderRID, aUserRID);
//                    GetAllocationGroupFolder(aMessageQueue, folderRID, aUserRID);
//                }
//                else
//                {
//                    folderRID = Convert.ToInt32(dtFolder.Rows[0]["FOLDER_RID"]);
//                }

//                return folderRID;
//            }
//            catch (Exception exc)
//            {
//                aMessageQueue.Enqueue("UNEXPECTED EXCEPTION: " + exc.ToString());
//                throw;
//            }
//        }

//        private int AddGroup(Queue aMessageQueue, int aUserRID, int aProfType, string aFolderName)
//        {
//            DataTable dtFolder;
//            int folderRID;
//            string query;

//            try
//            {
//                query = "SELECT * FROM FOLDER WHERE USER_RID = " + aUserRID + " AND FOLDER_TYPE = " + aProfType;
//                dtFolder = _dba.ExecuteQuery(query);

//                if (dtFolder.Rows.Count == 0)
//                {
//                    folderRID = CreateFolder(aMessageQueue, aUserRID, aFolderName, aProfType);
//                }
//                else
//                {
//                    folderRID = Convert.ToInt32(dtFolder.Rows[0]["FOLDER_RID"]);
//                }

//                return folderRID;
//            }
//            catch (Exception exc)
//            {
//                aMessageQueue.Enqueue("UNEXPECTED EXCEPTION: " + exc.ToString());
//                throw;
//            }
//        }

//        private int GetForecastGroupFolder(Queue aMessageQueue, int aParentFolderRID, int aUserRID)
//        {
//            DataTable dtFolder;
//            int folderRID;
//            string query;

//            try
//            {
//                query = "SELECT * FROM FOLDER WHERE USER_RID = " + aUserRID + " AND FOLDER_TYPE = " + (int)eProfileType.WorkflowMethodOTSForcastFolder;
//                dtFolder = _dba.ExecuteQuery(query);

//                if (dtFolder.Rows.Count == 0)
//                {
//                    folderRID = AddGroup(aMessageQueue, aUserRID, (int)eProfileType.WorkflowMethodOTSForcastFolder, MIDText.GetTextOnly((int)eWorkflowType.Forecast));
//                    CreateJoin(aMessageQueue, aParentFolderRID, folderRID, (int)eProfileType.WorkflowMethodOTSForcastFolder);
//                }
//                else
//                {
//                    folderRID = Convert.ToInt32(dtFolder.Rows[0]["FOLDER_RID"]);
//                }

//                return folderRID;
//            }
//            catch (Exception exc)
//            {
//                aMessageQueue.Enqueue("UNEXPECTED EXCEPTION: " + exc.ToString());
//                throw;
//            }
//        }

//        private int GetAllocationGroupFolder(Queue aMessageQueue, int aParentFolderRID, int aUserRID)
//        {
//            DataTable dtFolder;
//            int folderRID;
//            string query;

//            try
//            {
//                query = "SELECT * FROM FOLDER WHERE USER_RID = " + aUserRID + " AND FOLDER_TYPE = " + (int)eProfileType.WorkflowMethodAllocationFolder;
//                dtFolder = _dba.ExecuteQuery(query);

//                if (dtFolder.Rows.Count == 0)
//                {
//                    folderRID = AddGroup(aMessageQueue, aUserRID, (int)eProfileType.WorkflowMethodAllocationFolder, MIDText.GetTextOnly((int)eWorkflowType.Allocation));
//                    CreateJoin(aMessageQueue, aParentFolderRID, folderRID, (int)eProfileType.WorkflowMethodAllocationFolder);
//                }
//                else
//                {
//                    folderRID = Convert.ToInt32(dtFolder.Rows[0]["FOLDER_RID"]);
//                }

//                return folderRID;
//            }
//            catch (Exception exc)
//            {
//                aMessageQueue.Enqueue("UNEXPECTED EXCEPTION: " + exc.ToString());
//                throw;
//            }
//        }

//        private int CreateFolder(Queue aMessageQueue, int aUserRID, string aFolderName, int aFolderType)
//        {
//            MIDDbParameter[] inParams;
//            MIDDbParameter[] outParams;
//            int folderRID;

//            try
//            {
//                inParams = new MIDDbParameter[3];

//                inParams[0] = new MIDDbParameter("@USER_ID", aUserRID);
//                inParams[0].DbType = eDbType.Int;
//                inParams[0].Direction = eParameterDirection.Input;
//                inParams[1] = new MIDDbParameter("@FOLDER_ID", aFolderName);
//                inParams[1].DbType = eDbType.VarChar;
//                inParams[1].Direction = eParameterDirection.Input;
//                inParams[2] = new MIDDbParameter("@FOLDER_TYPE", aFolderType);
//                inParams[2].DbType = eDbType.Int;
//                inParams[2].Direction = eParameterDirection.Input;

//                outParams = new MIDDbParameter[1];

//                outParams[0] = new MIDDbParameter("@FOLDER_RID", DBNull.Value);
//                outParams[0].DbType = eDbType.Int;
//                outParams[0].Direction = eParameterDirection.Output;

//                folderRID = _dba.ExecuteStoredProcedure("SP_MID_FOLDER_INSERT", inParams, outParams);

//                AddUserItems(aMessageQueue, aUserRID, folderRID, aFolderType);

//                _dba.CommitData();

//                return folderRID;
//            }
//            catch (Exception exc)
//            {
//                aMessageQueue.Enqueue("UNEXPECTED EXCEPTION: " + exc.ToString());
//                throw;
//            }
//        }

//        private void CreateShortcut(Queue aMessageQueue, int aParentRID, int aChildRID, int aChildType)
//        {
//            string query;

//            try
//            {
//                query = "INSERT INTO FOLDER_SHORTCUT (PARENT_FOLDER_RID, CHILD_SHORTCUT_RID, CHILD_SHORTCUT_TYPE) VALUES (" + aParentRID + "," + aChildRID + "," + aChildType + ")";
//                _dba.ExecuteNonQuery(query);

//                _dba.CommitData();
//            }
//            catch (Exception exc)
//            {
//                aMessageQueue.Enqueue("UNEXPECTED EXCEPTION: " + exc.ToString());
//                throw;
//            }
//        }

//        private void CreateJoin(Queue aMessageQueue, int aParentRID, int aChildRID, int aChildType)
//        {
//            string query;

//            try
//            {
//                query = "INSERT INTO FOLDER_JOIN (PARENT_FOLDER_RID, CHILD_ITEM_RID, CHILD_ITEM_TYPE) VALUES (" + aParentRID + "," + aChildRID + "," + aChildType + ")";
//                _dba.ExecuteNonQuery(query);

//                _dba.CommitData();
//            }
//            catch (Exception exc)
//            {
//                aMessageQueue.Enqueue("UNEXPECTED EXCEPTION: " + exc.ToString());
//                throw;
//            }
//        }

//        private void AddUserItems(Queue aMessageQueue, int aUserRID, int aItemRID, int aItemType)
//        {
//            MIDDbParameter[] inParams;
//            string query;

//            try
//            {
//                query = "INSERT INTO USER_ITEM (USER_RID, ITEM_TYPE, ITEM_RID, OWNER_USER_RID) VALUES (@UserRID, @ItemType, @ItemRID, @OwnerRID)";

//                inParams = new MIDDbParameter[4];
//                inParams[0] = new MIDDbParameter("@UserRID", aUserRID);
//                inParams[0].DbType = eDbType.Int;
//                inParams[0].Direction = eParameterDirection.Input;
//                inParams[1] = new MIDDbParameter("@ItemType", aItemType);
//                inParams[1].DbType = eDbType.Int;
//                inParams[1].Direction = eParameterDirection.Input;
//                inParams[2] = new MIDDbParameter("@ItemRID", aItemRID);
//                inParams[2].DbType = eDbType.Int;
//                inParams[2].Direction = eParameterDirection.Input;
//                inParams[3] = new MIDDbParameter("@OwnerRID", aUserRID);
//                inParams[3].DbType = eDbType.Int;
//                inParams[3].Direction = eParameterDirection.Input;

//                _dba.ExecuteNonQuery(query, inParams);

//                _dba.CommitData();
//            }
//            catch (Exception exc)
//            {
//                aMessageQueue.Enqueue("UNEXPECTED EXCEPTION: " + exc.ToString());
//                throw;
//            }
//        }

//    }

//    class CleanUpJoinTables : ICustomConversion
//    {
//        //=======
//        // FIELDS
//        //=======

//        const int cFilterMainFavoritesFolder = 16;
//        const int cMerchandiseMainFavoritesFolder = 21;
//        const int cStoreGroupMainFavoritesFolder = 33;
//        const int cTaskListMainFavoritesFolder = 40;
//        const int cWorkflowMethodMainFavoritesFolder = 51;

//        const int cFilterSubFolder = 19;
//        const int cMerchandiseSubFolder = 25;
//        const int cStoreGroupSubFolder = 36;
//        const int cTaskListSubFolder = 45;
//        const int cWorkflowMethodSubFolder = 54;

//        Hashtable _favoriteFolderList;
//        Hashtable _subFolderList;

//        private DatabaseAccess _dba;

//        //=============
//        // CONSTRUCTORS
//        //=============

//        public CleanUpJoinTables()
//        {
//            _dba = new DatabaseAccess();
//        }

//        //=============
//        // METHODS
//        //=============

//        public void Execute(string aConnectionString, Queue aMessageQueue, Queue aProcessedQueue,
//            eDatabaseType aDatabaseType, int aNoDataTables, string aAllocationFileGroup,
//            string aForecastFileGroup, string aHistoryFileGroup, int aNoHistoryFileGroup,
//            string aDailyHistoryFileGroup, int aNoDailyHistoryFileGroup,
//            string aAuditFileGroup, string aWeekArchiveFileGroup, string aDayArchiveFileGroup) // TT#173 Provide database container for large data collections
//        {
//            try
//            {
//                MIDConnectionString.ConnectionString = aConnectionString;

//                _favoriteFolderList = new Hashtable();

//                _favoriteFolderList.Add(cFilterMainFavoritesFolder, null);
//                _favoriteFolderList.Add(cMerchandiseMainFavoritesFolder, null);
//                _favoriteFolderList.Add(cStoreGroupMainFavoritesFolder, null);
//                _favoriteFolderList.Add(cTaskListMainFavoritesFolder, null);
//                _favoriteFolderList.Add(cWorkflowMethodMainFavoritesFolder, null);

//                _subFolderList = new Hashtable();

//                _subFolderList.Add(cFilterSubFolder, null);
//                _subFolderList.Add(cMerchandiseSubFolder, null);
//                _subFolderList.Add(cStoreGroupSubFolder, null);
//                _subFolderList.Add(cTaskListSubFolder, null);
//                _subFolderList.Add(cWorkflowMethodSubFolder, null);

//                CleanUpFolderJoinTable(aConnectionString, aMessageQueue);
//                CleanUpFolderShortcutTable(aConnectionString, aMessageQueue);
//            }
//            catch
//            {
//                throw;
//            }
//        }

//        private void CleanUpFolderJoinTable(string aConnectionString, Queue aMessageQueue)
//        {
//            string query;
//            DataTable dtFolderJoin;

//            try
//            {
//                _dba.OpenUpdateConnection();

//                query = "SELECT * FROM FOLDER_JOIN";
//                dtFolderJoin = _dba.ExecuteQuery(query);

//                foreach (DataRow dr in dtFolderJoin.Rows)
//                {
//                    CheckFolderJoinRow(dr, aMessageQueue);
//                }
//            }
//            catch (Exception exc)
//            {
//                aMessageQueue.Enqueue("UNEXPECTED EXCEPTION: " + exc.ToString());
//                throw;
//            }
//            finally
//            {
//                if (_dba != null)
//                {
//                    _dba.CloseUpdateConnection();
//                }
//            }
//        }

//        private void CheckFolderJoinRow(DataRow aRow, Queue aMessageQueue)
//        {
//            string query;
//            int parentRID;
//            int childItemRID;
//            DataTable dtFolder;
//            DataRow folderRow;

//            try
//            {
//                parentRID = Convert.ToInt32(aRow["PARENT_FOLDER_RID"]);

//                if (parentRID == Include.NoRID)
//                {
//                    DeleteFolderJoinRow(aRow, aMessageQueue);
//                    return;
//                }

//                childItemRID = Convert.ToInt32(aRow["CHILD_ITEM_RID"]);

//                if (childItemRID == Include.NoRID)
//                {
//                    DeleteFolderJoinRow(aRow, aMessageQueue);
//                    return;
//                }

//                query = "SELECT * FROM FOLDER WHERE FOLDER_RID = " + Convert.ToInt32(aRow["PARENT_FOLDER_RID"]);
//                dtFolder = _dba.ExecuteQuery(query);

//                if (dtFolder.Rows.Count == 0)
//                {
//                    DeleteFolderJoinRow(aRow, aMessageQueue);
//                    return;
//                }
//            }
//            catch (Exception exc)
//            {
//                aMessageQueue.Enqueue("UNEXPECTED EXCEPTION: " + exc.ToString());
//                throw;
//            }
//        }

//        private void CleanUpFolderShortcutTable(string aConnectionString, Queue aMessageQueue)
//        {
//            string query;
//            DataTable dtFolderShortcut;

//            try
//            {
//                _dba.OpenUpdateConnection();

//                query = "SELECT * FROM FOLDER_SHORTCUT";
//                dtFolderShortcut = _dba.ExecuteQuery(query);

//                foreach (DataRow dr in dtFolderShortcut.Rows)
//                {
//                    CheckFolderShortcutRow(dr, aMessageQueue);
//                }
//            }
//            catch (Exception exc)
//            {
//                aMessageQueue.Enqueue("UNEXPECTED EXCEPTION: " + exc.ToString());
//                throw;
//            }
//            finally
//            {
//                if (_dba != null)
//                {
//                    _dba.CloseUpdateConnection();
//                }
//            }
//        }

//        private void CheckFolderShortcutRow(DataRow aRow, Queue aMessageQueue)
//        {
//            string query;
//            int parentRID;
//            int childShortcutRID;
//            DataTable dtFolder;
//            DataRow folderRow;

//            try
//            {
//                parentRID = Convert.ToInt32(aRow["PARENT_FOLDER_RID"]);

//                if (parentRID == Include.NoRID)
//                {
//                    DeleteFolderShortcutRow(aRow, aMessageQueue);
//                    return;
//                }

//                childShortcutRID = Convert.ToInt32(aRow["CHILD_SHORTCUT_RID"]);

//                if (childShortcutRID == Include.NoRID)
//                {
//                    DeleteFolderShortcutRow(aRow, aMessageQueue);
//                    return;
//                }

//                query = "SELECT * FROM FOLDER WHERE FOLDER_RID = " + Convert.ToInt32(aRow["PARENT_FOLDER_RID"]);
//                dtFolder = _dba.ExecuteQuery(query);

//                if (dtFolder.Rows.Count == 0)
//                {
//                    DeleteFolderShortcutRow(aRow, aMessageQueue);
//                    return;
//                }

//                folderRow = dtFolder.Rows[0];

//                if (!_favoriteFolderList.Contains(Convert.ToInt32(folderRow["FOLDER_TYPE"])) &&
//                    !_subFolderList.Contains(Convert.ToInt32(folderRow["FOLDER_TYPE"])))
//                {
//                    DeleteFolderShortcutRow(aRow, aMessageQueue);
//                    return;
//                }
//            }
//            catch (Exception exc)
//            {
//                aMessageQueue.Enqueue("UNEXPECTED EXCEPTION: " + exc.ToString());
//                throw;
//            }
//        }

//        private void DeleteFolderJoinRow(DataRow aRow, Queue aMessageQueue)
//        {
//            string query;

//            try
//            {
//                query = "DELETE FROM FOLDER_JOIN" +
//                    " WHERE PARENT_FOLDER_RID = " + Convert.ToInt32(aRow["PARENT_FOLDER_RID"]) +
//                    " AND CHILD_ITEM_RID = " + Convert.ToInt32(aRow["CHILD_ITEM_RID"]) +
//                    " AND CHILD_ITEM_TYPE = " + Convert.ToInt32(aRow["CHILD_ITEM_TYPE"]);
//                _dba.ExecuteNonQuery(query);

//                _dba.CommitData();
//            }
//            catch (Exception exc)
//            {
//                aMessageQueue.Enqueue("UNEXPECTED EXCEPTION: " + exc.ToString());
//                throw;
//            }
//        }

//        private void DeleteFolderShortcutRow(DataRow aRow, Queue aMessageQueue)
//        {
//            string query;

//            try
//            {
//                query = "DELETE FROM FOLDER_SHORTCUT" +
//                    " WHERE PARENT_FOLDER_RID = " + Convert.ToInt32(aRow["PARENT_FOLDER_RID"]) +
//                    " AND CHILD_SHORTCUT_RID = " + Convert.ToInt32(aRow["CHILD_SHORTCUT_RID"]) +
//                    " AND CHILD_SHORTCUT_TYPE = " + Convert.ToInt32(aRow["CHILD_SHORTCUT_TYPE"]);
//                _dba.ExecuteNonQuery(query);

//                _dba.CommitData();
//            }
//            catch (Exception exc)
//            {
//                aMessageQueue.Enqueue("UNEXPECTED EXCEPTION: " + exc.ToString());
//                throw;
//            }
//        }
//    }

//    class CleanUpUserItemTable : ICustomConversion
//    {
//        //=======
//        // FIELDS
//        //=======

//        private DatabaseAccess _dba;

//        //=============
//        // CONSTRUCTORS
//        //=============

//        public CleanUpUserItemTable()
//        {
//            _dba = new DatabaseAccess();
//        }

//        //=============
//        // METHODS
//        //=============

//        public void Execute(string aConnectionString, Queue aMessageQueue, Queue aProcessedQueue,
//            eDatabaseType aDatabaseType, int aNoDataTables, string aAllocationFileGroup,
//            string aForecastFileGroup, string aHistoryFileGroup, int aNoHistoryFileGroup,
//            string aDailyHistoryFileGroup, int aNoDailyHistoryFileGroup,
//            string aAuditFileGroup, string aWeekArchiveFileGroup, string aDayArchiveFileGroup) // TT#173 Provide database container for large data collections
//        {
//            try
//            {
//                MIDConnectionString.ConnectionString = aConnectionString;

//                CleanUpUserItemRows(aConnectionString, aMessageQueue);
//            }
//            catch
//            {
//                throw;
//            }
//        }

//        private void CleanUpUserItemRows(string aConnectionString, Queue aMessageQueue)
//        {
//            string query;
//            DataTable dtFolderJoin;

//            try
//            {
//                _dba.OpenUpdateConnection();

//                query = "SELECT * FROM USER_ITEM WHERE USER_RID <> OWNER_USER_RID";
//                dtFolderJoin = _dba.ExecuteQuery(query);

//                foreach (DataRow dr in dtFolderJoin.Rows)
//                {
//                    DeleteUserItemOwnerRow(dr, aMessageQueue);
//                }
//            }
//            catch (Exception exc)
//            {
//                aMessageQueue.Enqueue("UNEXPECTED EXCEPTION: " + exc.ToString());
//                throw;
//            }
//            finally
//            {
//                if (_dba != null)
//                {
//                    _dba.CloseUpdateConnection();
//                }
//            }
//        }

//        private void DeleteUserItemOwnerRow(DataRow aRow, Queue aMessageQueue)
//        {
//            string query;

//            try
//            {
//                query = "DELETE FROM USER_ITEM" +
//                    " WHERE USER_RID = " + Convert.ToInt32(aRow["OWNER_USER_RID"]) +
//                    " AND OWNER_USER_RID = " + Convert.ToInt32(aRow["OWNER_USER_RID"]) +
//                    " AND ITEM_RID = " + Convert.ToInt32(aRow["ITEM_RID"]) +
//                    " AND ITEM_TYPE = " + Convert.ToInt32(aRow["ITEM_TYPE"]);
//                _dba.ExecuteNonQuery(query);

//                _dba.CommitData();
//            }
//            catch (Exception exc)
//            {
//                aMessageQueue.Enqueue("UNEXPECTED EXCEPTION: " + exc.ToString());
//                throw;
//            }
//        }
//    }
//    //End Track #5005 - JScott - Need ability to organize methods, workflows, tasks, filters etc into subfolders
//    //Begin TT#188 - JScott - Rebrand application

//    class ConvertFiltersToVersion40 : ICustomConversion
//    {
//        //=======
//        // FIELDS
//        //=======

//        private DatabaseAccess _dba;


//        //=============
//        // CONSTRUCTORS
//        //=============

//        public ConvertFiltersToVersion40()
//        {
//            _dba = new DatabaseAccess();
//        }

//        //=============
//        // METHODS
//        //=============

//        public void Execute(string aConnectionString, Queue aMessageQueue, Queue aProcessedQueue,
//            eDatabaseType aDatabaseType, int aNoDataTables, string aAllocationFileGroup,
//            string aForecastFileGroup, string aHistoryFileGroup, int aNoHistoryFileGroup,
//            string aDailyHistoryFileGroup, int aNoDailyHistoryFileGroup,
//            string aAuditFileGroup, string aWeekArchiveFileGroup, string aDayArchiveFileGroup) // TT#173 Provide database container for large data collections
//        {
//            try
//            {
//                MIDConnectionString.ConnectionString = aConnectionString;

//                ConvertStoreFilters(aConnectionString, aMessageQueue);
//                ConvertProductSearchFilters(aConnectionString, aMessageQueue);
//            }
//            catch
//            {
//                throw;
//            }
//        }

//        private void ConvertStoreFilters(string aConnectionString, Queue aMessageQueue)
//        {
//            string query;
//            DataTable dtStoreFilterObject;
//            BinaryFormatter binaryFmtr;
//            byte[] byteArray;
//            MIDDbParameter[] inParams;

//            try
//            {
//                _dba.OpenUpdateConnection();

//                query = "SELECT * FROM STORE_FILTER_OBJECT";
//                dtStoreFilterObject = _dba.ExecuteQuery(query);

//                binaryFmtr = new BinaryFormatter();

//                foreach (DataRow row in dtStoreFilterObject.Rows)
//                {
//                    byteArray = ConvertByteArray(aMessageQueue, binaryFmtr, (byte[])row["STORE_FILTER_OBJECT"]);

//                    inParams = new MIDDbParameter[1];
//                    inParams[0] = new MIDDbParameter("@STORE_FILTER_OBJECT", byteArray);
//                    inParams[0].DbType = eDbType.Image;
//                    inParams[0].Direction = eParameterDirection.Input;

//                    _dba.ExecuteNonQuery("UPDATE STORE_FILTER_OBJECT SET STORE_FILTER_OBJECT = @STORE_FILTER_OBJECT" +
//                        " WHERE STORE_FILTER_RID = " + Convert.ToInt32(row["STORE_FILTER_RID"]) + " AND" +
//                        " STORE_FILTER_OBJECT_TYPE = " + Convert.ToInt32(row["STORE_FILTER_OBJECT_TYPE"]), inParams);

//                    _dba.CommitData();
//                }
//            }
//            catch (Exception exc)
//            {
//                aMessageQueue.Enqueue("UNEXPECTED EXCEPTION: " + exc.ToString());
//                throw;
//            }
//            finally
//            {
//                if (_dba != null)
//                {
//                    _dba.CloseUpdateConnection();
//                }
//            }
//        }

//        private void ConvertProductSearchFilters(string aConnectionString, Queue aMessageQueue)
//        {
//            string query;
//            DataTable dtProductSearchFilterObject;
//            BinaryFormatter binaryFmtr;
//            byte[] byteArray;
//            MIDDbParameter[] inParams;

//            try
//            {
//                _dba.OpenUpdateConnection();

//                query = "SELECT * FROM PRODUCT_SEARCH_OBJECT";
//                dtProductSearchFilterObject = _dba.ExecuteQuery(query);

//                binaryFmtr = new BinaryFormatter();

//                foreach (DataRow row in dtProductSearchFilterObject.Rows)
//                {
//                    byteArray = ConvertByteArray(aMessageQueue, binaryFmtr, (byte[])row["PRODUCT_SEARCH_OBJECT"]);

//                    inParams = new MIDDbParameter[1];
//                    inParams[0] = new MIDDbParameter("@PRODUCT_SEARCH_OBJECT", byteArray);
//                    inParams[0].DbType = eDbType.Image;
//                    inParams[0].Direction = eParameterDirection.Input;

//                    _dba.ExecuteNonQuery("UPDATE PRODUCT_SEARCH_OBJECT SET PRODUCT_SEARCH_OBJECT = @PRODUCT_SEARCH_OBJECT" +
//                        " WHERE USER_RID = " + Convert.ToInt32(row["USER_RID"]) + " AND" +
//                        " PRODUCT_SEARCH_OBJECT_TYPE = " + Convert.ToInt32(row["PRODUCT_SEARCH_OBJECT_TYPE"]), inParams);

//                    _dba.CommitData();
//                }
//            }
//            catch (Exception exc)
//            {
//                aMessageQueue.Enqueue("UNEXPECTED EXCEPTION: " + exc.ToString());
//                throw;
//            }
//            finally
//            {
//                if (_dba != null)
//                {
//                    _dba.CloseUpdateConnection();
//                }
//            }
//        }

//        private byte[] ConvertByteArray(Queue aMessageQueue, BinaryFormatter aBinaryFmtr, byte[] aInArray)
//        {
//            MemoryStream memStream;
//            ArrayList inQueueList;
//            ArrayList outQueueList;
//            Queue outQueue;
//            Type type;
//            Object operand;
//            Assembly assembly;
//            string assemblyName;
//            string typeName;
//            Type newType;

//            try
//            {
//                memStream = new MemoryStream(aInArray);
//                inQueueList = (ArrayList)aBinaryFmtr.Deserialize(memStream);
//                outQueueList = new ArrayList();

//                foreach (Queue inQueue in inQueueList)
//                {
//                    outQueue = new Queue();
//                    type = (Type)inQueue.Dequeue();

//                    if (type.Assembly.FullName.StartsWith("MID.MRS."))
//                    {
//                        switch (type.Name)
//                        {
//                            case "GenericQueryOrOperand":
//                                type = typeof(GenericQueryOrOperand);
//                                break;
//                            case "GenericQueryAndOperand":
//                                type = typeof(GenericQueryAndOperand);
//                                break;
//                            case "GenericQueryLeftParenOperand":
//                                type = typeof(GenericQueryLeftParenOperand);
//                                break;
//                            case "GenericQueryRightParenOperand":
//                                type = typeof(GenericQueryRightParenOperand);
//                                break;
//                            case "AttrQueryAttributeMainOperand":
//                                type = typeof(AttrQueryAttributeMainOperand);
//                                break;
//                            case "AttrQueryAttributeDetailOperand":
//                                type = typeof(AttrQueryAttributeDetailOperand);
//                                break;
//                            case "AttrQueryAttributeSeparatorOperand":
//                                type = typeof(AttrQueryAttributeSeparatorOperand);
//                                break;
//                            case "AttrQueryAttributeEndOperand":
//                                type = typeof(AttrQueryAttributeEndOperand);
//                                break;
//                            case "AttrQueryStoreMainOperand":
//                                type = typeof(AttrQueryStoreMainOperand);
//                                break;
//                            case "AttrQueryStoreDetailOperand":
//                                type = typeof(AttrQueryStoreDetailOperand);
//                                break;
//                            case "AttrQueryStoreSeparatorOperand":
//                                type = typeof(AttrQueryStoreSeparatorOperand);
//                                break;
//                            case "AttrQueryStoreEndOperand":
//                                type = typeof(AttrQueryStoreEndOperand);
//                                break;
//                            case "AttrQuerySpacerOperand":
//                                type = typeof(AttrQuerySpacerOperand);
//                                break;
//                            case "DataQueryPlanVariableOperand":
//                                type = typeof(DataQueryPlanVariableOperand);
//                                break;
//                            case "DataQueryTimeTotalVariableOperand":
//                                type = typeof(DataQueryTimeTotalVariableOperand);
//                                break;
//                            case "DataQueryPlanBeginOperand":
//                                type = typeof(DataQueryPlanBeginOperand);
//                                break;
//                            case "DataQueryPlanSeparatorOperand":
//                                type = typeof(DataQueryPlanSeparatorOperand);
//                                break;
//                            case "DataQueryPlanEndOperand":
//                                type = typeof(DataQueryPlanEndOperand);
//                                break;
//                            case "DataQueryNodeOperand":
//                                type = typeof(DataQueryNodeOperand);
//                                break;
//                            case "DataQueryVersionOperand":
//                                type = typeof(DataQueryVersionOperand);
//                                break;
//                            case "DataQueryDateRangeOperand":
//                                type = typeof(DataQueryDateRangeOperand);
//                                break;
//                            case "DataQueryCubeModifyerOperand":
//                                type = typeof(DataQueryCubeModifyerOperand);
//                                break;
//                            case "DataQueryStoreDetailOperand":
//                                type = typeof(DataQueryStoreDetailOperand);
//                                break;
//                            case "DataQueryStoreTotalOperand":
//                                type = typeof(DataQueryStoreTotalOperand);
//                                break;
//                            case "DataQueryStoreAverageOperand":
//                                type = typeof(DataQueryStoreAverageOperand);
//                                break;
//                            case "DataQueryChainDetailOperand":
//                                type = typeof(DataQueryChainDetailOperand);
//                                break;
//                            case "DataQueryTimeModifyerOperand":
//                                type = typeof(DataQueryTimeModifyerOperand);
//                                break;
//                            case "DataQueryAnyOperand":
//                                type = typeof(DataQueryAnyOperand);
//                                break;
//                            case "DataQueryAllOperand":
//                                type = typeof(DataQueryAllOperand);
//                                break;
//                            case "DataQueryJoinOperand":
//                                type = typeof(DataQueryJoinOperand);
//                                break;
//                            case "DataQueryAverageOperand":
//                                type = typeof(DataQueryAverageOperand);
//                                break;
//                            case "DataQueryTotalOperand":
//                                type = typeof(DataQueryTotalOperand);
//                                break;
//                            case "DataQueryCorrespondingOperand":
//                                type = typeof(DataQueryCorrespondingOperand);
//                                break;
//                            case "DataQueryEqualOperand":
//                                type = typeof(DataQueryEqualOperand);
//                                break;
//                            case "DataQueryLessOperand":
//                                type = typeof(DataQueryLessOperand);
//                                break;
//                            case "DataQueryGreaterOperand":
//                                type = typeof(DataQueryGreaterOperand);
//                                break;
//                            case "DataQueryLessEqualOperand":
//                                type = typeof(DataQueryLessEqualOperand);
//                                break;
//                            case "DataQueryGreaterEqualOperand":
//                                type = typeof(DataQueryGreaterEqualOperand);
//                                break;
//                            case "DataQueryNotOperand":
//                                type = typeof(DataQueryNotOperand);
//                                break;
//                            case "DataQueryPctChangeOperand":
//                                type = typeof(DataQueryPctChangeOperand);
//                                break;
//                            case "DataQueryPctOfOperand":
//                                type = typeof(DataQueryPctOfOperand);
//                                break;
//                            case "DataQueryLiteralOperand":
//                                type = typeof(DataQueryLiteralOperand);
//                                break;
//                            case "DataQueryGradeOperand":
//                                type = typeof(DataQueryGradeOperand);
//                                break;
//                            case "DataQueryStatusOperand":
//                                type = typeof(DataQueryStatusOperand);
//                                break;
//                            case "DataQuerySpacerOperand":
//                                type = typeof(DataQuerySpacerOperand);
//                                break;
//                            case "ProdCharQueryCharacteristicMainOperand":
//                                type = typeof(ProdCharQueryCharacteristicMainOperand);
//                                break;
//                            case "ProdCharQueryCharacteristicDetailOperand":
//                                type = typeof(ProdCharQueryCharacteristicDetailOperand);
//                                break;
//                            case "ProdCharQueryCharacteristicSeparatorOperand":
//                                type = typeof(ProdCharQueryCharacteristicSeparatorOperand);
//                                break;
//                            case "ProdCharQueryCharacteristicEndOperand":
//                                type = typeof(ProdCharQueryCharacteristicEndOperand);
//                                break;
//                            case "ProdCharQuerySpacerOperand":
//                                type = typeof(ProdCharQuerySpacerOperand);
//                                break;
//                        }
//                    } 

//                    outQueue.Enqueue(type);

//                    while (inQueue.Count > 0)
//                    {
//                        // Pull operand of incoming Queue

//                        operand = inQueue.Dequeue();

//                        // Determine if the operand is an MIDRetail enumerator, which requires special conversion  // TT#868 - AGallagher - Filters - Open a Filter and receive an Unhandled Exception 
//                        // Determine if the operand is an MID.MRS enumerator, which requires special conversion  // TT#868 - AGallagher - Filters - Open a Filter and receive an Unhandled Exception 

//                        type = operand.GetType();
//                        assembly = Assembly.GetAssembly(type);
//                        assemblyName = (assembly.FullName.Split(',')[0]).ToString(); // TT#1526 - GTaylor - Database upgrade error with new signed version of the software 

//                        //if (assemblyName.Contains("MIDRetail."))  // TT#868 - AGallagher - Filters - Open a Filter and receive an Unhandled Exception 
//                        if (assemblyName.Contains("MID.MRS."))  // TT#868 - AGallagher - Filters - Open a Filter and receive an Unhandled Exception 
//                        {
//                            if (type.IsEnum)
//                            {
//                                // TT#868 - AGallagher - Filters - Open a Filter and receive an Unhandled Exception 
//                                //assemblyName = assemblyName.Replace("MIDRetail.", "MIDRetail.");
//                                //typeName = type.FullName.Replace("MIDRetail.", "MIDRetail.");
//                                assemblyName = assemblyName.Replace("MID.MRS.", "MIDRetail.");
//                                typeName = type.FullName.Replace("MID.MRS.", "MIDRetail.");
//                                // TT#868 - AGallagher - Filters - Open a Filter and receive an Unhandled Exception 
//                                newType = Type.GetType(typeName + ", " + assemblyName);
//                                operand = Enum.ToObject(newType, (int)operand);
//                            }
//                            else
//                            {
//                                throw new Exception("Invalid type encountered in Filter Conversion");
//                            }
//                        }

//                        // Add operand to Queue

//                        outQueue.Enqueue(operand);
//                    }

//                    outQueueList.Add(outQueue);
//                }

//                memStream = new MemoryStream();
//                aBinaryFmtr.Serialize(memStream, outQueueList);

//                return memStream.ToArray();
//            }
//            catch (Exception exc)
//            {
//                aMessageQueue.Enqueue("UNEXPECTED EXCEPTION: " + exc.ToString());
//                throw;
//            }
//        }
//    }
//    //End TT#188 - JScott - Rebrand application

//    //Begin TT#110-MD - JSmith - In Use Tool

    class PopulateInUse //: ICustomConversion
    {
        //=======
        // FIELDS
        //=======

        private DatabaseAccess _dba;


        //=============
        // CONSTRUCTORS
        //=============

        public PopulateInUse()
        {
            _dba = new DatabaseAccess();
        }

        //=============
        // METHODS
        //=============

        public void Execute(string aConnectionString, Queue aMessageQueue, Queue aProcessedQueue) 
        {
            try
            {
                MIDConnectionString.ConnectionString = aConnectionString;

                //BEGIN TT#608-MD-VStuart-Deleting Size Curve Method referenced in Tasklist
                bool inUseTablesExist = CheckForInUseTables();
                if (inUseTablesExist)
                {
                    AddLabels(aConnectionString, aMessageQueue);
                    InsertValues(aConnectionString, aMessageQueue);
                }
            }
            catch (Exception err)
            {
                string message = err.ToString();
                //END  TT#608-MD-VStuart-Deleting Size Curve Method referenced in Tasklist
                throw;
            }
        }

        //BEGIN TT#608-MD-VStuart-Deleting Size Curve Method referenced in Tasklist
        private bool CheckForInUseTables()
        {
            try
            {
                int inUseTableExist = 0;
                string SQLCommand = @"select count(*) MyCount from dbo.sysobjects where id = object_id(N'[dbo].[DETAIL_INFO]') and OBJECTPROPERTY(id, N'IsUserTable') = 1";
                DataTable dt = _dba.ExecuteSQLQuery(SQLCommand, "MyInUseTableCount");
                if (dt != null && dt.Rows.Count > 0)
                {
                    inUseTableExist = (int)dt.Rows[0]["MyCount"];
                }

                if (inUseTableExist > 0)
                {
                    TruncateInUseTables();
                    return true;
                }
                return false;
            }
            catch (Exception err)
            {
                string message = err.ToString();
                throw;
            }
        }
        //END  TT#608-MD-VStuart-Deleting Size Curve Method referenced in Tasklist

        //BEGIN TT#608-MD-VStuart-Deleting Size Curve Method referenced in Tasklist
        private void TruncateInUseTables()
        {
            try
            {
                _dba.OpenUpdateConnection();
                string  sql = @" TRUNCATE TABLE DETAIL_INFO ";
                        sql += @" TRUNCATE TABLE APPLICATION_LABELS ";
                _dba.ExecuteNonQuery(sql);
                _dba.CommitData();
            }
            catch (Exception exc)
            {
                string message = exc.ToString();
                throw;
            }
            finally
            {
                if (_dba != null)
                {
                    _dba.CloseUpdateConnection();
                }
            }
        }
        //END  TT#608-MD-VStuart-Deleting Size Curve Method referenced in Tasklist


        private void AddLabels(string aConnectionString, Queue aMessageQueue)
        {
            string sql;
            try
            {
                _dba.OpenUpdateConnection();

                //--=============================================================
                //-- This populates the headings data for APPLICATION_LABELS table.
                //--=============================================================
                //--============================= Store Filter
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (20, 1, '2000014')"); // Filter
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (20, 2, '2000001')"); // Type
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (20, 3, '2000016')"); // Name
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (20, 4, '2000008')"); // Description
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (20, 5, '2000004')"); // User
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (20, 6, '2000005')"); // Reference
                //--============================= Hierarchy Node
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (27, 1, '2000012')"); // Node // Node
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (27, 2, '2000001')"); // Type
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (27, 3, '2000016')"); // Name
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (27, 4, '2000008')"); // Description
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (27, 5, '2000004')"); // User
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (27, 6, '2000005')"); // Reference
                //--============================= Attribute
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (38, 1, '2000002')"); // Attribute
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (38, 2, '2000001')"); // Type
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (38, 3, '2000016')"); // Name
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (38, 4, '2000004')"); // User
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (38, 5, '2000005')"); // Reference
                //--============================= Attribute Set
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (39, 1, '2000003')"); // Attribute Set
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (39, 2, '2000002')"); // Attribute
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (39, 3, '2000001')"); // Type
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (39, 4, '2000016')"); // Name
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (39, 5, '2000004')"); // User
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (39, 6, '2000005')"); // Reference
                //--============================= Tasklist
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (46, 1, '2000009')"); // Tasklist
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (46, 2, '2000001')"); // Type
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (46, 3, '2000010')"); // Job
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (46, 4, '2000004')"); // User
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (46, 5, '2000005')"); // Reference
                //--============================= Job
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (48, 1, '2000010')"); // Job
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (48, 2, '2000001')"); // Type
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (48, 3, '2000010')"); // Job
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (48, 4, '2000004')"); // User
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (48, 5, '2000005')"); // Reference
                //--============================= Workflow
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (55, 1, '2000007')"); // Workflow
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (55, 2, '2000001')"); // Type
                //BEGIN TT#4455-VSuart-Unable to delete workflow even though nothing on In Use-MID
                //_dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (55, 3, '2000009')"); // Tasklist
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (55, 3, '2000023')"); // InUse_By
                //END TT#4455-VSuart-Unable to delete workflow even though nothing on In Use-MID
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (55, 4, '2000004')"); // User
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (55, 5, '2000005')"); // Reference
                //--============================= Override Low Level Model
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (57, 1, '2000011')"); // Model
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (57, 2, '2000001')"); // Type
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (57, 3, '2000016')"); // Name
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (57, 4, '2000008')"); // Description
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (57, 5, '2000004')"); // User
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (57, 6, '2000005')"); // Reference
                //--============================= Method OTS Plan
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (83, 1, '2000006')"); // Method // Method
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (83, 2, '2000001')"); // Type
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (83, 3, '2000013')"); // Workflow/Tasklist
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (83, 4, '2000008')"); // Description
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (83, 5, '2000004')"); // User
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (83, 6, '2000005')"); // Reference
                //--============================= Method Forecast Balance
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (84, 1, '2000006')"); // Method
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (84, 2, '2000001')"); // Type
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (84, 3, '2000013')"); // Workflow/Tasklist
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (84, 4, '2000008')"); // Description
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (84, 5, '2000004')"); // User
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (84, 6, '2000005')"); // Reference
                //--============================= Method Modify Sales
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (85, 1, '2000006')"); // Method
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (85, 2, '2000001')"); // Type
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (85, 3, '2000013')"); // Workflow/Tasklist
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (85, 4, '2000008')"); // Description
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (85, 5, '2000004')"); // User
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (85, 6, '2000005')"); // Reference
                //--============================= Method Forecast Spread
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (86, 1, '2000006')"); // Method
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (86, 2, '2000001')"); // Type
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (86, 3, '2000013')"); // Workflow/Tasklist
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (86, 4, '2000008')"); // Description
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (86, 5, '2000004')"); // User
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (86, 6, '2000005')"); // Reference
                //--============================= Method Copy Chain Forecast
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (87, 1, '2000006')"); // Method
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (87, 2, '2000001')"); // Type
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (87, 3, '2000013')"); // Workflow/Tasklist
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (87, 4, '2000008')"); // Description
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (87, 5, '2000004')"); // User
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (87, 6, '2000005')"); // Reference
                //--============================= Method Copy Store Forecast
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (88, 1, '2000006')"); // Method
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (88, 2, '2000001')"); // Type
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (88, 3, '2000013')"); // Workflow/Tasklist
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (88, 4, '2000008')"); // Description
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (88, 5, '2000004')"); // User
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (88, 6, '2000005')"); // Reference
                //--============================= Method Export
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (89, 1, '2000006')"); // Method
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (89, 2, '2000001')"); // Type
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (89, 3, '2000013')"); // Workflow/Tasklist
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (89, 4, '2000008')"); // Description
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (89, 5, '2000004')"); // User
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (89, 6, '2000005')"); // Reference
                //--============================= Method Global Unlock
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (90, 1, '2000006')"); // Method
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (90, 2, '2000001')"); // Type
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (90, 3, '2000013')"); // Workflow/Tasklist
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (90, 4, '2000008')"); // Description
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (90, 5, '2000004')"); // User
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (90, 6, '2000005')"); // Reference
                //--============================= Method Rollup
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (91, 1, '2000006')"); // Method
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (91, 2, '2000001')"); // Type
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (91, 3, '2000013')"); // Workflow/Tasklist
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (91, 4, '2000008')"); // Description
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (91, 5, '2000004')"); // User
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (91, 6, '2000005')"); // Reference
                //--============================= Method General Allocation
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (92, 1, '2000006')"); // Method
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (92, 2, '2000001')"); // Type
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (92, 3, '2000007')"); // Workflow
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (92, 4, '2000008')"); // Description
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (92, 5, '2000004')"); // User
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (92, 6, '2000005')"); // Reference
                //--============================= Method Allocation Override
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (93, 1, '2000006')"); // Method
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (93, 2, '2000001')"); // Type
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (93, 3, '2000007')"); // Workflow
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (93, 4, '2000008')"); // Description
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (93, 5, '2000004')"); // User
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (93, 6, '2000005')"); // Reference
                //--============================= Method Rule
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (94, 1, '2000006')"); // Method
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (94, 2, '2000001')"); // Type
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (94, 3, '2000007')"); // Workflow
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (94, 4, '2000008')"); // Description
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (94, 5, '2000004')"); // User
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (94, 6, '2000005')"); // Reference
                //--============================= Method Velocity
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (95, 1, '2000006')"); // Method
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (95, 2, '2000001')"); // Type
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (95, 3, '2000007')"); // Workflow
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (95, 4, '2000008')"); // Description
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (95, 5, '2000004')"); // User
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (95, 6, '2000005')"); // Reference
                //--============================= Method Size Need Allocation
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (96, 1, '2000006')"); // Method
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (96, 2, '2000001')"); // Type
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (96, 3, '2000007')"); // Workflow
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (96, 4, '2000008')"); // Description
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (96, 5, '2000004')"); // User
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (96, 6, '2000005')"); // Reference
                //--============================= Method Fill Size Holes
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (97, 1, '2000006')"); // Method
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (97, 2, '2000001')"); // Type
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (97, 3, '2000007')"); // Workflow
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (97, 4, '2000008')"); // Description
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (97, 5, '2000004')"); // User
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (97, 6, '2000005')"); // Reference
                //--============================= Method Basis Size Allocation
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (98, 1, '2000006')"); // Method
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (98, 2, '2000001')"); // Type
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (98, 3, '2000007')"); // Workflow
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (98, 4, '2000008')"); // Description
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (98, 5, '2000004')"); // User
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (98, 6, '2000005')"); // Reference
                //--============================= Method Size Curve
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (119, 1, '2000006')"); // Method
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (119, 2, '2000001')"); // Type
                //BEGIN TT#608-MD-VStuart-Deleting Size Curve Method referenced in Tasklist
                //_dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (119, 3, '2000007')"); // Workflow
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (119, 3, '2000016')"); // Name
                //END  TT#608-MD-VStuart-Deleting Size Curve Method referenced in Tasklist
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (119, 4, '2000008')"); // Description
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (119, 5, '2000004')"); // User
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (119, 6, '2000005')"); // Reference
                //--============================= Method Build Packs
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (122, 1, '2000006')"); // Method
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (122, 2, '2000001')"); // Type
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (122, 3, '2000007')"); // Workflow
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (122, 4, '2000008')"); // Description
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (122, 5, '2000004')"); // User
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (122, 6, '2000005')"); // Reference
                //--============================= Method Global Lock
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (130, 1, '2000006')"); // Method
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (130, 2, '2000001')"); // Type
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (130, 3, '2000013')"); // Workflow/Tasklist
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (130, 4, '2000008')"); // Description
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (130, 5, '2000004')"); // User
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (130, 6, '2000005')"); // Reference
                //BEGIN TT#3509-VStuart-Cannot delete OTS Plan Version-ANFUser
                //--============================= OTS Plan Version
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (143, 1, '2000016')"); // Name
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (143, 2, '2000001')"); // Type
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (143, 3, '2000023')"); // InUse_By
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (143, 4, '2000008')"); // Description
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (143, 5, '2000004')"); // User
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (143, 6, '2000005')"); // Reference
                //END  TT#3509-VStuart-Cannot delete OTS Plan Version-ANFUser
                //--============================= Eligibility Model
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (164, 1, '2000011')"); // Model
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (164, 2, '2000001')"); // Type
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (164, 3, '2000017')"); // Hierarchy
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (164, 4, '2000012')"); // Node
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (164, 5, '2000004')"); // User
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (164, 6, '2000005')"); // Reference
                //--============================= Stock Modifier Model
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (165, 1, '2000011')"); // Model
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (165, 2, '2000001')"); // Type
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (165, 3, '2000017')"); // Hierarchy
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (165, 4, '2000012')"); // Node
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (165, 5, '2000004')"); // User
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (165, 6, '2000005')"); // Reference
                //--============================= Sales Modifier Model
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (166, 1, '2000011')"); // Model
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (166, 2, '2000001')"); // Type
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (166, 3, '2000017')"); // Hierarchy
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (166, 4, '2000012')"); // Node
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (166, 5, '2000004')"); // User
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (166, 6, '2000005')"); // Reference
                //--=============================  Size Group
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (202, 1, '2000019')"); // Size Group
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (202, 2, '2000001')"); // Type
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (202, 3, '2000016')"); // Name
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (202, 4, '2000008')"); // Description
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (202, 5, '2000004')"); // User
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (202, 6, '2000005')"); // Reference
                //--=============================  Size Curve
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (221, 1, '2000020')"); // Size Curve Group
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (221, 2, '2000001')"); // Type
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (221, 3, '2000016')"); // Name
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (221, 4, '2000008')"); // Description
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (221, 5, '2000004')"); // User
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (221, 6, '2000005')"); // Reference
                //--============================= Size Constraints Model
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (241, 1, '2000011')"); // Model
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (241, 2, '2000001')"); // Type
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (241, 3, '2000016')"); // Name
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (241, 4, '2000008')"); // Description
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (241, 5, '2000004')"); // User
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (241, 6, '2000005')"); // Reference
                //--============================= Size Alternates Model
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (243, 1, '2000011')"); // Model
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (243, 2, '2000001')"); // Type
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (243, 3, '2000016')"); // Name
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (243, 4, '2000008')"); // Description
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (243, 5, '2000004')"); // User
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (243, 6, '2000005')"); // Reference
                //--============================= FWOS Modifier Model
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (255, 1, '2000011')"); // Model
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (255, 2, '2000001')"); // Type
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (255, 3, '2000017')"); // Hierarchy
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (255, 4, '2000012')"); // Node
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (255, 5, '2000004')"); // User
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (255, 6, '2000005')"); // Reference
                //--============================= FWOS Max Model
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (256, 1, '2000011')"); // Model
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (256, 2, '2000001')"); // Type
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (256, 3, '2000017')"); // Hierarchy
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (256, 4, '2000012')"); // Node
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (256, 5, '2000004')"); // User
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (256, 6, '2000005')"); // Reference
                //BEGIN TT#729-MD-VStuart-In Use 4 Size Curve Criteria with Curve Name in Node Properties
                //--============================= Size Curve Criteria 
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (284, 1, '2000022')"); // Curve
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (284, 2, '2000001')"); // Type
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (284, 3, '2000016')"); // Name
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (284, 4, '2000008')"); // Description
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (284, 5, '2000004')"); // User
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (284, 6, '2000005')"); // Reference
                //END   TT#729-MD-VStuart-In Use 4 Size Curve Criteria with Curve Name in Node Properties
                //--============================= Store Characteristics
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (302, 1, '2000000')"); // Characteristics
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (302, 2, '2000001')"); // Type
                //_dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (302, 3, '2000002')"); // Attribute
                //_dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (302, 4, '2000003')"); // Attribute Set
                //_dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (302, 5, '2000004')"); // User
                //_dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (302, 6, '2000005')"); // Reference
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (302, 3, '2000016')"); // Name
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (302, 4, '2000004')"); // User
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (302, 5, '2000005')"); // Reference
                //BEGIN TT#643-MD-VStuart-Need Queries for Store Characteristic Values
                //--============================= Store CharacteristicValues
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (305, 1, '2000000')"); // Characteristics
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (305, 2, '2000001')"); // Type
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (305, 3, '2000002')"); // Attribute
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (305, 4, '2000003')"); // Attribute Set
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (305, 5, '2000021')"); // Store
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (305, 6, '2000004')"); // User
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (305, 7, '2000005')"); // Reference
                //END   TT#643-MD-VStuart-Need Queries for Store Characteristic Values
				// Begin TT#1362-MD - stodd - Header filter InUse is not returning any filters being InUse even though they are
                //--============================= Header Filter
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (314, 1, '2000014')"); // Filter
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (314, 2, '2000001')"); // Type
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (314, 3, '2000016')"); // Name
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (314, 4, '2000004')"); // User
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (314, 5, '2000005')"); // Reference
				// End TT#1362-MD - stodd - Header filter InUse is not returning any filters being InUse even though they are
				//--============================= Assortment Header Filter
                // Begin TT#1367-MD - stodd - add assortment inUse SQL
                //--============================= Header Filter
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (319, 1, '2000014')"); // Filter
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (319, 2, '2000001')"); // Type
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (319, 3, '2000016')"); // Name
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (319, 4, '2000004')"); // User
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (319, 5, '2000005')"); // Reference
                // End TT#1367-MD - stodd - add assortment inUse SQL
                //--=============================

                //BEGIN TT#4672-VStuart-In Use not checking for views-MID
                //Begin TT#1532-MD -jsobek -Add In Use for Header Characteristics
                //_dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (233, 1, '2000000')"); // Characteristics
                //_dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (233, 2, '2000014')"); // Filter
                //_dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (233, 3, '2000004')"); // User
                //_dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (233, 4, '2000005')"); // Reference

                //--============================= Store HeaderCharGroup
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (233, 1, '2000001')"); // Type
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (233, 2, '2000000')"); // Characteristics
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (233, 3, '2000016')"); // Name
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (233, 4, '2000004')"); // User
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (233, 5, '2000005')"); // Reference

                //--============================= Store HeaderChar
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (234, 1, '2000000')"); // Characteristics
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (234, 2, '2000014')"); // Filter
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (234, 3, '2000004')"); // User
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (234, 4, '2000005')"); // Reference
                //End TT#1532-MD -jsobek -Add In Use for Header Characteristics
                //END TT#4672-VStuart-In Use not checking for views-MID

                //BEGIN TT#4697-VStuart-Investigate Product Characteristic In Use querys-MID
                //Begin TT#1531-MD -jsobek -Add In Use for Product Characteristics
                //_dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (31, 1, '2000000')"); // Characteristics
                //_dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (31, 2, '2000014')"); // Filter
                //_dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (31, 3, '2000004')"); // User
                //_dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (31, 4, '2000005')"); // Reference

                //_dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (32, 1, '2000000')"); // Characteristics
                //_dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (32, 2, '2000014')"); // Filter
                //_dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (32, 3, '2000004')"); // User
                //_dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (32, 4, '2000005')"); // Reference
                //End TT#1531-MD -jsobek -Add In Use for Product Characteristics

                //--============================= Product Characteristic
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (31, 1, '2000001')"); // Type
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (31, 2, '2000024')"); // ProdCharName
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (31, 3, '2000023')"); // InUse_By
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (31, 4, '2000004')"); // User
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (31, 5, '2000005')"); // Reference

                //--============================= Product Characteristic Value
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (32, 1, '2000001')"); // Type
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (32, 2, '2000025')"); // ProdCharValue
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (32, 3, '2000023')"); // InUse_By
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (32, 4, '2000004')"); // User
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (32, 5, '2000005')"); // Reference
                //--=============================
                //END TT#4697-VStuart-Investigate Product Characteristic In Use querys-MID

                // Begin TT#1966-MD - JSmith - DC Fulfillment
                //--============================= Method DC Carton Rounding
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (320, 1, '2000006')"); // Method
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (320, 2, '2000001')"); // Type
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (320, 3, '2000007')"); // Workflow
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (320, 4, '2000008')"); // Description
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (320, 5, '2000004')"); // User
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (320, 6, '2000005')"); // Reference
                //--============================= Method Create Master Headers
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (331, 1, '2000006')"); // Method
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (331, 2, '2000001')"); // Type
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (331, 3, '2000007')"); // Workflow
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (331, 4, '2000008')"); // Description
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (331, 5, '2000004')"); // User
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (331, 6, '2000005')"); // Reference
                //--============================= Method DC Fulfillment
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (334, 1, '2000006')"); // Method
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (334, 2, '2000001')"); // Type
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (334, 3, '2000007')"); // Workflow
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (334, 4, '2000008')"); // Description
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (334, 5, '2000004')"); // User
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (334, 6, '2000005')"); // Reference
                // End TT#1966-MD - JSmith - DC Fulfillment
				// Begin TT#2131-MD - JSmith - Halo Integration
                //--============================= Method Planning Extract
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (339, 1, '2000006')"); // Method
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (339, 2, '2000001')"); // Type
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (339, 3, '2000013')"); // Workflow/Tasklist
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (339, 4, '2000008')"); // Description
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (339, 5, '2000004')"); // User
                _dba.ExecuteNonQuery("INSERT INTO APPLICATION_LABELS	(APPLICATION_LABEL_TYPE, SEQUENCE, [APPLICATION_LABEL_HEADING]) VALUES (339, 6, '2000005')"); // Reference
                // End TT#2131-MD - JSmith - Halo Integration

                _dba.CommitData();
            }
            catch (Exception exc)
            {
                aMessageQueue.Enqueue("UNEXPECTED EXCEPTION: " + exc.ToString());
                throw;
            }
            finally
            {
                if (_dba != null)
                {
                    _dba.CloseUpdateConnection();
                }
            }
        }

        private void InsertValues(string aConnectionString, Queue aMessageQueue)
        {
            string sql = null;
            int cEncryptKey = 5;
            try
            {
                _dba.OpenUpdateConnection();


                sql = @" --=========================================================== ";
                sql += @" -- This Inserts the DETAIL_INFO Data ";
                sql += @" --=========================================================== ";
                sql += @" --============================================== ";
                sql += @" -- 'Store Filter Query - Method Copy Forecast' ";
                sql += @" -- Enum 20.1 ";
                sql += @" --============================================== ";
                //Begin TT#1170-MD -jsobek -Remove Binary database objects and normalize the Filter definitions
                //sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                //sql += @" VALUES	(20, 1, 'In Use', ";
                //sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                //sql += @" SELECT @severity as Severity, ";
                //sql += @"     f.STORE_FILTER_NAME  as Header1, ";
                //sql += @" 	CASE ";
                //sql += @" 	  When m.METHOD_TYPE_ID = 802129 ";
                //sql += @" 	  Then ''Copy Chain Forecast Method'' ";
                //sql += @" 	  Else ''Copy Store Forecast Method'' ";
                //sql += @" 	End as Header2, ";
                //sql += @" 	m.METHOD_NAME as Heading3, ";
                //sql += @" 	m.METHOD_DESCRIPTION as Heading4, ";
                //sql += @" 	au.USER_NAME as Header5, ";
                //sql += @" 	@severity AS Header6, ";
                //sql += @" 	'' '' AS Heading7, ";
                //sql += @" 	'' '' AS Heading8, ";
                //sql += @" 	'' '' AS Heading9 ";
                //sql += @" from METHOD_COPY_FORECAST mcf  with (nolock) ";
                //sql += @" 	join STORE_FILTER f with (nolock) on f.STORE_FILTER_RID = mcf.STORE_FILTER_RID ";
                //sql += @" 	join METHOD m with (nolock) on m.METHOD_RID = mcf.METHOD_RID ";
                //sql += @" 	join APPLICATION_USER au with (nolock) on au.USER_RID = m.USER_RID ";
                //sql += @" where f.STORE_FILTER_RID = @inUseRID')) ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(20, 1, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT @severity as Severity, ";
                sql += @"     f.FILTER_NAME  as Header1, ";
                sql += @" 	CASE ";
                sql += @" 	  When m.METHOD_TYPE_ID = 802129 ";
                sql += @" 	  Then ''Copy Chain Forecast Method'' ";
                sql += @" 	  Else ''Copy Store Forecast Method'' ";
                sql += @" 	End as Header2, ";
                sql += @" 	m.METHOD_NAME as Heading3, ";
                sql += @" 	m.METHOD_DESCRIPTION as Heading4, ";
                sql += @" 	au.USER_NAME as Header5, ";
                sql += @" 	@severity AS Header6, ";
                sql += @" 	'' '' AS Heading7, ";
                sql += @" 	'' '' AS Heading8, ";
                sql += @" 	'' '' AS Heading9 ";
                sql += @" from METHOD_COPY_FORECAST mcf  with (nolock) ";
                sql += @" 	join FILTER f with (nolock) on f.FILTER_RID = mcf.STORE_FILTER_RID ";	// TT#1353-MD -Store Filters In Use - Database Exception - 
                sql += @" 	join METHOD m with (nolock) on m.METHOD_RID = mcf.METHOD_RID ";
                sql += @" 	join APPLICATION_USER au with (nolock) on au.USER_RID = m.USER_RID ";
                sql += @" where f.FILTER_RID = @inUseRID')) ";
                //End TT#1170-MD -jsobek -Remove Binary database objects and normalize the Filter definitions
                _dba.ExecuteNonQuery(sql);

                sql = @" --============================================== ";
                sql += @" -- 'Store Filter Query - Method Export' ";
                sql += @" -- Enum 20.2 ";
                sql += @" --============================================== ";
                //Begin TT#1170-MD -jsobek -Remove Binary database objects and normalize the Filter definitions
                //sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                //sql += @" VALUES	(20, 2, 'In Use', ";
                //sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                //sql += @" SELECT @severity as Severity, ";
                //sql += @"     f.STORE_FILTER_NAME  as Header1, ";
                //sql += @" 	''Method Export'' as Header2, ";
                //sql += @" 	m.METHOD_NAME as Heading3, ";
                //sql += @" 	m.METHOD_DESCRIPTION as Heading4, ";
                //sql += @" 	au.USER_NAME as Header5, ";
                //sql += @" 	@severity AS Header6, ";
                //sql += @" 	'' '' AS Heading7, ";
                //sql += @" 	'' '' AS Heading8, ";
                //sql += @" 	'' '' AS Heading9 ";
                //sql += @" from METHOD_EXPORT me with (nolock) ";
                //sql += @" 	join STORE_FILTER f with (nolock) on f.STORE_FILTER_RID = me.STORE_FILTER_RID ";
                //sql += @" 	join METHOD m with (nolock) on m.METHOD_RID = me.METHOD_RID ";
                //sql += @" 	join APPLICATION_USER au with (nolock) on au.USER_RID = m.USER_RID ";
                //sql += @" where f.STORE_FILTER_RID = @inUseRID')) ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(20, 2, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT @severity as Severity, ";
                sql += @"     f.FILTER_NAME  as Header1, ";
                sql += @" 	''Method Export'' as Header2, ";
                sql += @" 	m.METHOD_NAME as Heading3, ";
                sql += @" 	m.METHOD_DESCRIPTION as Heading4, ";
                sql += @" 	au.USER_NAME as Header5, ";
                sql += @" 	@severity AS Header6, ";
                sql += @" 	'' '' AS Heading7, ";
                sql += @" 	'' '' AS Heading8, ";
                sql += @" 	'' '' AS Heading9 ";
                sql += @" from METHOD_EXPORT me with (nolock) ";
                sql += @" 	join FILTER f with (nolock) on f.FILTER_RID = me.STORE_FILTER_RID ";	// TT#1353-MD -Store Filters In Use - Database Exception - 
                sql += @" 	join METHOD m with (nolock) on m.METHOD_RID = me.METHOD_RID ";
                sql += @" 	join APPLICATION_USER au with (nolock) on au.USER_RID = m.USER_RID ";
                sql += @" where f.FILTER_RID = @inUseRID')) ";
                //End TT#1170-MD -jsobek -Remove Binary database objects and normalize the Filter definitions
                _dba.ExecuteNonQuery(sql);

                sql = @" --============================================== ";
                sql += @" -- 'Store Filter Query - Method Fill Sizes' ";
                sql += @" -- Enum 20.3 ";
                sql += @" --============================================== ";
                //Begin TT#1170-MD -jsobek -Remove Binary database objects and normalize the Filter definitions
                //sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                //sql += @" VALUES	(20, 3, 'In Use', ";
                //sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                //sql += @" SELECT @severity as Severity, ";
                //sql += @" f.STORE_FILTER_NAME  as Header1, ";
                //sql += @" ''Method Fill Sizes'' as Header2, ";
                //sql += @" 	m.METHOD_NAME as Heading3, ";
                //sql += @" 	m.METHOD_DESCRIPTION as Heading4, ";
                //sql += @" 	au.USER_NAME as Header5, ";
                //sql += @" 	@severity AS Header6, ";
                //sql += @" 	'' '' AS Heading7, ";
                //sql += @" 	'' '' AS Heading8, ";
                //sql += @" 	'' '' AS Heading9 ";
                //sql += @" from METHOD_FILL_SIZE_HOLES mfsh with (nolock) ";
                //sql += @" 	join STORE_FILTER f with (nolock) on f.STORE_FILTER_RID = mfsh.STORE_FILTER_RID ";
                //sql += @" 	join METHOD m with (nolock) on m.METHOD_RID = mfsh.METHOD_RID ";
                //sql += @" 	join APPLICATION_USER au with (nolock) on au.USER_RID = m.USER_RID ";
                //sql += @" where f.STORE_FILTER_RID = @inUseRID')) ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(20, 3, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT @severity as Severity, ";
                sql += @" f.FILTER_NAME  as Header1, ";
                sql += @" ''Method Fill Sizes'' as Header2, ";
                sql += @" 	m.METHOD_NAME as Heading3, ";
                sql += @" 	m.METHOD_DESCRIPTION as Heading4, ";
                sql += @" 	au.USER_NAME as Header5, ";
                sql += @" 	@severity AS Header6, ";
                sql += @" 	'' '' AS Heading7, ";
                sql += @" 	'' '' AS Heading8, ";
                sql += @" 	'' '' AS Heading9 ";
                sql += @" from METHOD_FILL_SIZE_HOLES mfsh with (nolock) ";
                sql += @" 	join FILTER f with (nolock) on f.FILTER_RID = mfsh.STORE_FILTER_RID ";	// TT#1353-MD -Store Filters In Use - Database Exception - 
                sql += @" 	join METHOD m with (nolock) on m.METHOD_RID = mfsh.METHOD_RID ";
                sql += @" 	join APPLICATION_USER au with (nolock) on au.USER_RID = m.USER_RID ";
                sql += @" where f.FILTER_RID = @inUseRID')) ";
                //End TT#1170-MD -jsobek -Remove Binary database objects and normalize the Filter definitions
                _dba.ExecuteNonQuery(sql);

                sql = @" --============================================== ";
                sql += @" -- 'Store Filter Query - Method Global Lock' ";
                sql += @" -- Enum 20.4 ";
                sql += @" --============================================== ";
                //Begin TT#1170-MD -jsobek -Remove Binary database objects and normalize the Filter definitions
                //sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                //sql += @" VALUES	(20, 4, 'In Use', ";
                //sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                //sql += @" SELECT @severity as Severity, ";
                //sql += @"     f.STORE_FILTER_NAME  as Header1, ";
                //sql += @" 	''Method Global Lock'' as Header2, ";
                //sql += @" 	m.METHOD_NAME as Heading3, ";
                //sql += @" 	m.METHOD_DESCRIPTION as Heading4, ";
                //sql += @" 	au.USER_NAME as Header5, ";
                //sql += @" 	@severity AS Header6, ";
                //sql += @" 	'' '' AS Heading7, ";
                //sql += @" 	'' '' AS Heading8, ";
                //sql += @" 	'' '' AS Heading9 ";
                //sql += @" from METHOD_GLOBAL_LOCK mgl with (nolock) ";
                //sql += @" 	join STORE_FILTER f with (nolock) on f.STORE_FILTER_RID = mgl.STORE_FILTER_RID ";
                //sql += @" 	join METHOD m with (nolock) on m.METHOD_RID = mgl.METHOD_RID ";
                //sql += @" 	join APPLICATION_USER au with (nolock) on au.USER_RID = m.USER_RID ";
                //sql += @" where f.STORE_FILTER_RID = @inUseRID')) ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(20, 4, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT @severity as Severity, ";
                sql += @"     f.FILTER_NAME  as Header1, ";
                sql += @" 	''Method Global Lock'' as Header2, ";
                sql += @" 	m.METHOD_NAME as Heading3, ";
                sql += @" 	m.METHOD_DESCRIPTION as Heading4, ";
                sql += @" 	au.USER_NAME as Header5, ";
                sql += @" 	@severity AS Header6, ";
                sql += @" 	'' '' AS Heading7, ";
                sql += @" 	'' '' AS Heading8, ";
                sql += @" 	'' '' AS Heading9 ";
                sql += @" from METHOD_GLOBAL_LOCK mgl with (nolock) ";
                sql += @" 	join FILTER f with (nolock) on f.FILTER_RID = mgl.STORE_FILTER_RID ";	// TT#1353-MD -Store Filters In Use - Database Exception - 
                sql += @" 	join METHOD m with (nolock) on m.METHOD_RID = mgl.METHOD_RID ";
                sql += @" 	join APPLICATION_USER au with (nolock) on au.USER_RID = m.USER_RID ";
                sql += @" where f.FILTER_RID = @inUseRID')) ";
                //End TT#1170-MD -jsobek -Remove Binary database objects and normalize the Filter definitions
                _dba.ExecuteNonQuery(sql);

                sql = @" --============================================== ";
                sql += @" -- 'Store Filter Query - Method Global Unlock' ";
                sql += @" -- Enum 20.5 ";
                sql += @" --============================================== ";
                //Begin TT#1170-MD -jsobek -Remove Binary database objects and normalize the Filter definitions
                //sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                //sql += @" VALUES	(20, 5, 'In Use', ";
                //sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                //sql += @" SELECT @severity as Severity, ";
                //sql += @"     f.STORE_FILTER_NAME  as Header1, ";
                //sql += @" 	''Method Global Unlock'' as Header2, ";
                //sql += @" 	m.METHOD_NAME as Heading3, ";
                //sql += @" 	m.METHOD_DESCRIPTION as Heading4, ";
                //sql += @" 	au.USER_NAME as Header5, ";
                //sql += @" 	@severity AS Header6, ";
                //sql += @" 	'' '' AS Heading7, ";
                //sql += @" 	'' '' AS Heading8, ";
                //sql += @" 	'' '' AS Heading9 ";
                //sql += @" from METHOD_GLOBAL_UNLOCK mgu with (nolock) ";
                //sql += @" 	join STORE_FILTER f with (nolock) on f.STORE_FILTER_RID = mgu.STORE_FILTER_RID ";
                //sql += @" 	join METHOD m with (nolock) on m.METHOD_RID = mgu.METHOD_RID ";
                //sql += @" 	join APPLICATION_USER au with (nolock) on au.USER_RID = m.USER_RID ";
                //sql += @" where f.STORE_FILTER_RID = @inUseRID')) ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(20, 5, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT @severity as Severity, ";
                sql += @"     f.FILTER_NAME  as Header1, ";
                sql += @" 	''Method Global Unlock'' as Header2, ";
                sql += @" 	m.METHOD_NAME as Heading3, ";
                sql += @" 	m.METHOD_DESCRIPTION as Heading4, ";
                sql += @" 	au.USER_NAME as Header5, ";
                sql += @" 	@severity AS Header6, ";
                sql += @" 	'' '' AS Heading7, ";
                sql += @" 	'' '' AS Heading8, ";
                sql += @" 	'' '' AS Heading9 ";
                sql += @" from METHOD_GLOBAL_UNLOCK mgu with (nolock) ";
                sql += @" 	join FILTER f with (nolock) on f.FILTER_RID = mgu.STORE_FILTER_RID ";	// TT#1353-MD -Store Filters In Use - Database Exception - 
                sql += @" 	join METHOD m with (nolock) on m.METHOD_RID = mgu.METHOD_RID ";
                sql += @" 	join APPLICATION_USER au with (nolock) on au.USER_RID = m.USER_RID ";
                sql += @" where f.FILTER_RID = @inUseRID')) ";
                //End TT#1170-MD -jsobek -Remove Binary database objects and normalize the Filter definitions
                _dba.ExecuteNonQuery(sql);

                sql = @" --============================================== ";
                sql += @" -- 'Store Filter Query - Method Matrix Balance' ";
                sql += @" -- Enum 20.6 ";
                sql += @" --============================================== ";
                //Begin TT#1170-MD -jsobek -Remove Binary database objects and normalize the Filter definitions
                //sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                //sql += @" VALUES	(20, 6, 'In Use', ";
                //sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                //sql += @" SELECT @severity as Severity, ";
                //sql += @"     f.STORE_FILTER_NAME  as Header1, ";
                //sql += @" 	''Method Matrix Balance'' as Header2, ";
                //sql += @" 	m.METHOD_NAME as Heading3, ";
                //sql += @" 	m.METHOD_DESCRIPTION as Heading4, ";
                //sql += @" 	au.USER_NAME as Header5, ";
                //sql += @" 	@severity AS Header6, ";
                //sql += @" 	'' '' AS Heading7, ";
                //sql += @" 	'' '' AS Heading8, ";
                //sql += @" 	'' '' AS Heading9 ";
                //sql += @" from METHOD_MATRIX mm  with (nolock) ";
                //sql += @" 	join STORE_FILTER f with (nolock) on f.STORE_FILTER_RID = mm.FILTER_RID ";
                //sql += @" 	join METHOD m with (nolock) on m.METHOD_RID = mm.METHOD_RID ";
                //sql += @" 	join APPLICATION_USER au with (nolock) on au.USER_RID = m.USER_RID ";
                //sql += @" where f.STORE_FILTER_RID = @inUseRID')) ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(20, 6, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT @severity as Severity, ";
                sql += @"     f.FILTER_NAME  as Header1, ";
                sql += @" 	''Method Matrix Balance'' as Header2, ";
                sql += @" 	m.METHOD_NAME as Heading3, ";
                sql += @" 	m.METHOD_DESCRIPTION as Heading4, ";
                sql += @" 	au.USER_NAME as Header5, ";
                sql += @" 	@severity AS Header6, ";
                sql += @" 	'' '' AS Heading7, ";
                sql += @" 	'' '' AS Heading8, ";
                sql += @" 	'' '' AS Heading9 ";
                sql += @" from METHOD_MATRIX mm  with (nolock) ";
                sql += @" 	join FILTER f with (nolock) on f.FILTER_RID = mm.FILTER_RID ";
                sql += @" 	join METHOD m with (nolock) on m.METHOD_RID = mm.METHOD_RID ";
                sql += @" 	join APPLICATION_USER au with (nolock) on au.USER_RID = m.USER_RID ";
                sql += @" where f.FILTER_RID = @inUseRID')) ";
                //End TT#1170-MD -jsobek -Remove Binary database objects and normalize the Filter definitions
                _dba.ExecuteNonQuery(sql);

                sql = @" --============================================== ";
                sql += @" -- 'Store Filter Query - Method Modify Sales' ";
                sql += @" -- Enum 20.7 ";
                sql += @" --============================================== ";
                //Begin TT#1170-MD -jsobek -Remove Binary database objects and normalize the Filter definitions
                //sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                //sql += @" VALUES	(20, 7, 'In Use', ";
                //sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                //sql += @" SELECT @severity as Severity, ";
                //sql += @"     f.STORE_FILTER_NAME  as Header1, ";
                //sql += @" 	''Method Modify Sales'' as Header2, ";
                //sql += @" 	m.METHOD_NAME as Heading3, ";
                //sql += @" 	m.METHOD_DESCRIPTION as Heading4, ";
                //sql += @" 	au.USER_NAME as Header5, ";
                //sql += @" 	@severity AS Header6, ";
                //sql += @" 	'' '' AS Heading7, ";
                //sql += @" 	'' '' AS Heading8, ";
                //sql += @" 	'' '' AS Heading9 ";
                //sql += @" from METHOD_MOD_SALES ms with (nolock) ";
                //sql += @" 	join STORE_FILTER f with (nolock) on f.STORE_FILTER_RID = ms.STORE_FILTER_RID ";
                //sql += @" 	join METHOD m with (nolock) on m.METHOD_RID = ms.METHOD_RID ";
                //sql += @" 	join APPLICATION_USER au with (nolock) on au.USER_RID = m.USER_RID ";
                //sql += @" where f.STORE_FILTER_RID = @inUseRID')) ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(20, 7, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT @severity as Severity, ";
                sql += @"     f.FILTER_NAME  as Header1, ";
                sql += @" 	''Method Modify Sales'' as Header2, ";
                sql += @" 	m.METHOD_NAME as Heading3, ";
                sql += @" 	m.METHOD_DESCRIPTION as Heading4, ";
                sql += @" 	au.USER_NAME as Header5, ";
                sql += @" 	@severity AS Header6, ";
                sql += @" 	'' '' AS Heading7, ";
                sql += @" 	'' '' AS Heading8, ";
                sql += @" 	'' '' AS Heading9 ";
                sql += @" from METHOD_MOD_SALES ms with (nolock) ";
                sql += @" 	join FILTER f with (nolock) on f.FILTER_RID = ms.STORE_FILTER_RID ";	// TT#1353-MD -Store Filters In Use - Database Exception - 
                sql += @" 	join METHOD m with (nolock) on m.METHOD_RID = ms.METHOD_RID ";
                sql += @" 	join APPLICATION_USER au with (nolock) on au.USER_RID = m.USER_RID ";
                sql += @" where f.FILTER_RID = @inUseRID')) ";
                //End TT#1170-MD -jsobek -Remove Binary database objects and normalize the Filter definitions
                _dba.ExecuteNonQuery(sql);

                sql = @" --=================================================== ";
                sql += @" -- 'Store Filter Query - Method Allocation Override' ";
                sql += @" -- Enum 20.8 ";
                sql += @" --=================================================== ";
                //Begin TT#1170-MD -jsobek -Remove Binary database objects and normalize the Filter definitions
                //sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                //sql += @" VALUES	(20, 8, 'In Use', ";
                //sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                //sql += @" SELECT @severity as Severity, ";
                //sql += @"     f.STORE_FILTER_NAME  as Header1, ";
                //sql += @" 	''Method Allocation Override'' as Header2, ";
                //sql += @" 	m.METHOD_NAME as Heading3, ";
                //sql += @" 	m.METHOD_DESCRIPTION as Heading4, ";
                //sql += @" 	au.USER_NAME as Header5, ";
                //sql += @" 	@severity AS Header6, ";
                //sql += @" 	'' '' AS Heading7, ";
                //sql += @" 	'' '' AS Heading8, ";
                //sql += @" 	'' '' AS Heading9 ";
                //sql += @" from METHOD_OVERRIDE mo  with (nolock) ";
                //sql += @" 	join STORE_FILTER f with (nolock) on f.STORE_FILTER_RID = mo.STORE_FILTER_RID ";
                //sql += @" 	join METHOD m with (nolock) on m.METHOD_RID = mo.METHOD_RID ";
                //sql += @" 	join APPLICATION_USER au with (nolock) on au.USER_RID = m.USER_RID ";
                //sql += @" where f.STORE_FILTER_RID = @inUseRID')) ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(20, 8, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT @severity as Severity, ";
                sql += @"     f.FILTER_NAME  as Header1, ";
                sql += @" 	''Method Allocation Override'' as Header2, ";
                sql += @" 	m.METHOD_NAME as Heading3, ";
                sql += @" 	m.METHOD_DESCRIPTION as Heading4, ";
                sql += @" 	au.USER_NAME as Header5, ";
                sql += @" 	@severity AS Header6, ";
                sql += @" 	'' '' AS Heading7, ";
                sql += @" 	'' '' AS Heading8, ";
                sql += @" 	'' '' AS Heading9 ";
                sql += @" from METHOD_OVERRIDE mo  with (nolock) ";
                sql += @" 	join FILTER f with (nolock) on f.FILTER_RID = mo.STORE_FILTER_RID ";	// TT#1353-MD -Store Filters In Use - Database Exception - 
                sql += @" 	join METHOD m with (nolock) on m.METHOD_RID = mo.METHOD_RID ";
                sql += @" 	join APPLICATION_USER au with (nolock) on au.USER_RID = m.USER_RID ";
                sql += @" where f.FILTER_RID = @inUseRID')) ";
                //End TT#1170-MD -jsobek -Remove Binary database objects and normalize the Filter definitions
                _dba.ExecuteNonQuery(sql);

                sql = @" --============================================== ";
                sql += @" -- 'Store Filter Query - Method Rule' ";
                sql += @" -- Enum 20.9 ";
                sql += @" --============================================== ";
                //Begin TT#1170-MD -jsobek -Remove Binary database objects and normalize the Filter definitions
                //sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                //sql += @" VALUES	(20, 9, 'In Use', ";
                //sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                //sql += @" SELECT @severity as Severity, ";
                //sql += @"     f.STORE_FILTER_NAME  as Header1, ";
                //sql += @" 	''Method Rule'' as Header2, ";
                //sql += @" 	m.METHOD_NAME as Heading3, ";
                //sql += @" 	m.METHOD_DESCRIPTION as Heading4, ";
                //sql += @" 	au.USER_NAME as Header5, ";
                //sql += @" 	@severity AS Header6, ";
                //sql += @" 	'' '' AS Heading7, ";
                //sql += @" 	'' '' AS Heading8, ";
                //sql += @" 	'' '' AS Heading9 ";
                //sql += @" from METHOD_RULE mr  with (nolock) ";
                //sql += @" 	join STORE_FILTER f with (nolock) on f.STORE_FILTER_RID = mr.STORE_FILTER_RID ";
                //sql += @" 	join METHOD m with (nolock) on m.METHOD_RID = mr.METHOD_RID ";
                //sql += @" 	join APPLICATION_USER au with (nolock) on au.USER_RID = m.USER_RID ";
                //sql += @" where f.STORE_FILTER_RID = @inUseRID')) ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(20, 9, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT @severity as Severity, ";
                sql += @"     f.FILTER_NAME  as Header1, ";
                sql += @" 	''Method Rule'' as Header2, ";
                sql += @" 	m.METHOD_NAME as Heading3, ";
                sql += @" 	m.METHOD_DESCRIPTION as Heading4, ";
                sql += @" 	au.USER_NAME as Header5, ";
                sql += @" 	@severity AS Header6, ";
                sql += @" 	'' '' AS Heading7, ";
                sql += @" 	'' '' AS Heading8, ";
                sql += @" 	'' '' AS Heading9 ";
                sql += @" from METHOD_RULE mr  with (nolock) ";
                sql += @" 	join FILTER f with (nolock) on f.FILTER_RID = mr.STORE_FILTER_RID ";	// TT#1353-MD -Store Filters In Use - Database Exception - 
                sql += @" 	join METHOD m with (nolock) on m.METHOD_RID = mr.METHOD_RID ";
                sql += @" 	join APPLICATION_USER au with (nolock) on au.USER_RID = m.USER_RID ";
                sql += @" where f.FILTER_RID = @inUseRID')) ";
                //End TT#1170-MD -jsobek -Remove Binary database objects and normalize the Filter definitions
                _dba.ExecuteNonQuery(sql);

                sql = @" --============================================== ";
                sql += @" -- 'Store Filter Query - Method Size Basis' ";
                sql += @" -- Enum 20.10 ";
                sql += @" --============================================== ";
                //Begin TT#1170-MD -jsobek -Remove Binary database objects and normalize the Filter definitions
                //sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                //sql += @" VALUES	(20, 10, 'In Use', ";
                //sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                //sql += @" SELECT @severity as Severity, ";
                //sql += @"     f.STORE_FILTER_NAME  as Header1, ";
                //sql += @" 	''Method Size Basis'' as Header2, ";
                //sql += @" 	m.METHOD_NAME as Heading3, ";
                //sql += @" 	m.METHOD_DESCRIPTION as Heading4, ";
                //sql += @" 	au.USER_NAME as Header5, ";
                //sql += @" 	@severity AS Header6, ";
                //sql += @" 	'' '' AS Heading7, ";
                //sql += @" 	'' '' AS Heading8, ";
                //sql += @" 	'' '' AS Heading9 ";
                //sql += @" from METHOD_SIZE_BASIS_ALLOCATION msba with (nolock) ";
                //sql += @" 	join STORE_FILTER f with (nolock) on f.STORE_FILTER_RID = msba.STORE_FILTER_RID ";
                //sql += @" 	join METHOD m with (nolock) on m.METHOD_RID = msba.METHOD_RID ";
                //sql += @" 	join APPLICATION_USER au with (nolock) on au.USER_RID = m.USER_RID ";
                //sql += @" where f.STORE_FILTER_RID = @inUseRID')) ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(20, 10, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT @severity as Severity, ";
                sql += @"     f.FILTER_NAME  as Header1, ";
                sql += @" 	''Method Size Basis'' as Header2, ";
                sql += @" 	m.METHOD_NAME as Heading3, ";
                sql += @" 	m.METHOD_DESCRIPTION as Heading4, ";
                sql += @" 	au.USER_NAME as Header5, ";
                sql += @" 	@severity AS Header6, ";
                sql += @" 	'' '' AS Heading7, ";
                sql += @" 	'' '' AS Heading8, ";
                sql += @" 	'' '' AS Heading9 ";
                sql += @" from METHOD_SIZE_BASIS_ALLOCATION msba with (nolock) ";
                sql += @" 	join FILTER f with (nolock) on f.FILTER_RID = msba.STORE_FILTER_RID ";	// TT#1353-MD -Store Filters In Use - Database Exception - 
                sql += @" 	join METHOD m with (nolock) on m.METHOD_RID = msba.METHOD_RID ";
                sql += @" 	join APPLICATION_USER au with (nolock) on au.USER_RID = m.USER_RID ";
                sql += @" where f.FILTER_RID = @inUseRID')) ";
                //End TT#1170-MD -jsobek -Remove Binary database objects and normalize the Filter definitions
                _dba.ExecuteNonQuery(sql);

                sql = @" --============================================== ";
                sql += @" -- 'Store Filter Query - Allocation Selection' ";
                sql += @" -- Enum 20.11 ";
                sql += @" --============================================== ";
                //Begin TT#1170-MD -jsobek -Remove Binary database objects and normalize the Filter definitions
                //sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                //sql += @" VALUES	(20, 11, 'Reference', ";
                //sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                //sql += @" SELECT @severity as Severity, ";
                //sql += @"     f.STORE_FILTER_NAME  as Header1, ";
                //sql += @" 	''Allocation Selection'' as Header2, ";
                //sql += @" 	au.USER_FULLNAME as Heading3, ";
                //sql += @" 	au.USER_DESCRIPTION as Heading4, ";
                //sql += @" 	au.USER_NAME as Header5, ";
                //sql += @" 	@severity AS Header6, ";
                //sql += @" 	'' '' AS Heading7, ";
                //sql += @" 	'' '' AS Heading8, ";
                //sql += @" 	'' '' AS Heading9 ";
                //sql += @" from USER_ALLOCATION ua with (nolock) ";
                //sql += @" 	join STORE_FILTER f with (nolock) on f.STORE_FILTER_RID = ua.FILTER_RID ";
                //sql += @" 	join APPLICATION_USER au with (nolock) on au.USER_RID = ua.USER_RID ";
                //sql += @" where f.STORE_FILTER_RID = @inUseRID')) ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(20, 11, 'Reference', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT @severity as Severity, ";
                sql += @"     f.FILTER_NAME  as Header1, ";
                sql += @" 	''Allocation Selection'' as Header2, ";
                sql += @" 	au.USER_FULLNAME as Heading3, ";
                sql += @" 	au.USER_DESCRIPTION as Heading4, ";
                sql += @" 	au.USER_NAME as Header5, ";
                sql += @" 	@severity AS Header6, ";
                sql += @" 	'' '' AS Heading7, ";
                sql += @" 	'' '' AS Heading8, ";
                sql += @" 	'' '' AS Heading9 ";
                sql += @" from USER_ALLOCATION ua with (nolock) ";
                sql += @" 	join FILTER f with (nolock) on f.FILTER_RID = ua.FILTER_RID ";
                sql += @" 	join APPLICATION_USER au with (nolock) on au.USER_RID = ua.USER_RID ";
                sql += @" where f.FILTER_RID = @inUseRID')) ";
                //End TT#1170-MD -jsobek -Remove Binary database objects and normalize the Filter definitions
                _dba.ExecuteNonQuery(sql);

                sql = @" --============================================== ";
                sql += @" -- 'Store Filter Query - OTS Forecast Selection' ";
                sql += @" -- Enum 20.12 ";
                sql += @" --============================================== ";
                //Begin TT#1170-MD -jsobek -Remove Binary database objects and normalize the Filter definitions
                //sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                //sql += @" VALUES	(20, 12, 'Reference', ";
                //sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                //sql += @" SELECT @severity as Severity, ";
                //sql += @"     f.STORE_FILTER_NAME  as Header1, ";
                //sql += @" 	''OTS Forecast Selection'' as Header2, ";
                //sql += @" 	au.USER_FULLNAME as Heading3, ";
                //sql += @" 	au.USER_DESCRIPTION as Heading4, ";
                //sql += @" 	au.USER_NAME as Header5, ";
                //sql += @" 	@severity AS Header6, ";
                //sql += @" 	'' '' AS Heading7, ";
                //sql += @" 	'' '' AS Heading8, ";
                //sql += @" 	'' '' AS Heading9 ";
                //sql += @" from USER_PLAN up with (nolock) ";
                //sql += @" 	join STORE_FILTER f with (nolock) on f.STORE_FILTER_RID = up.FILTER_RID ";
                //sql += @" 	join APPLICATION_USER au with (nolock) on au.USER_RID = up.USER_RID ";
                //sql += @" where f.STORE_FILTER_RID = @inUseRID')) ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(20, 12, 'Reference', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT @severity as Severity, ";
                sql += @"     f.FILTER_NAME  as Header1, ";
                sql += @" 	''OTS Forecast Selection'' as Header2, ";
                sql += @" 	au.USER_FULLNAME as Heading3, ";
                sql += @" 	au.USER_DESCRIPTION as Heading4, ";
                sql += @" 	au.USER_NAME as Header5, ";
                sql += @" 	@severity AS Header6, ";
                sql += @" 	'' '' AS Heading7, ";
                sql += @" 	'' '' AS Heading8, ";
                sql += @" 	'' '' AS Heading9 ";
                sql += @" from USER_PLAN up with (nolock) ";
                sql += @" 	join FILTER f with (nolock) on f.FILTER_RID = up.FILTER_RID ";
                sql += @" 	join APPLICATION_USER au with (nolock) on au.USER_RID = up.USER_RID ";
                sql += @" where f.FILTER_RID = @inUseRID')) ";
                //End TT#1170-MD -jsobek -Remove Binary database objects and normalize the Filter definitions
                _dba.ExecuteNonQuery(sql);

                sql = @" --============================================== ";
                sql += @" -- 'Store Filter Query - Forecast or Allocation Workflow' ";
                sql += @" -- Enum 20.13 ";
                sql += @" --============================================== ";
                //Begin TT#1170-MD -jsobek -Remove Binary database objects and normalize the Filter definitions
                //sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                //sql += @" VALUES	(20, 13, 'In Use', ";
                //sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                //sql += @" SELECT @severity as Severity, ";
                //sql += @"     f.STORE_FILTER_NAME  as Header1, ";
                //sql += @" 	CASE ";
                //sql += @" 	  When w.WORKFLOW_TYPE_ID = 800825 ";
                //sql += @" 	  Then ''Forecast Workflow'' ";
                //sql += @" 	  Else ''Allocation Workflow'' ";
                //sql += @" 	End as Header2, ";
                //sql += @" 	w.WORKFLOW_NAME as Heading3, ";
                //sql += @" 	w.WORKFLOW_DESCRIPTION as Heading4, ";
                //sql += @" 	au.USER_NAME as Header5, ";
                //sql += @" 	@severity AS Header6, ";
                //sql += @" 	'' '' AS Heading7, ";
                //sql += @" 	'' '' AS Heading8, ";
                //sql += @" 	'' '' AS Heading9 ";
                //sql += @" from WORKFLOW w with (nolock) ";
                //sql += @" 	join STORE_FILTER f with (nolock) on f.STORE_FILTER_RID = w.STORE_FILTER_RID ";
                //sql += @" 	join APPLICATION_USER au with (nolock) on au.USER_RID = w.WORKFLOW_USER_RID ";
                //sql += @" where f.STORE_FILTER_RID = @inUseRID')) ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(20, 13, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT @severity as Severity, ";
                sql += @"     f.FILTER_NAME  as Header1, ";
                sql += @" 	CASE ";
                sql += @" 	  When w.WORKFLOW_TYPE_ID = 800825 ";
                sql += @" 	  Then ''Forecast Workflow'' ";
                sql += @" 	  Else ''Allocation Workflow'' ";
                sql += @" 	End as Header2, ";
                sql += @" 	w.WORKFLOW_NAME as Heading3, ";
                sql += @" 	w.WORKFLOW_DESCRIPTION as Heading4, ";
                sql += @" 	au.USER_NAME as Header5, ";
                sql += @" 	@severity AS Header6, ";
                sql += @" 	'' '' AS Heading7, ";
                sql += @" 	'' '' AS Heading8, ";
                sql += @" 	'' '' AS Heading9 ";
                sql += @" from WORKFLOW w with (nolock) ";
                sql += @" 	join FILTER f with (nolock) on f.FILTER_RID = w.STORE_FILTER_RID ";	// TT#1353-MD -Store Filters In Use - Database Exception - 
                sql += @" 	join APPLICATION_USER au with (nolock) on au.USER_RID = w.WORKFLOW_USER_RID ";
                sql += @" where f.FILTER_RID = @inUseRID')) ";
                //End TT#1170-MD -jsobek -Remove Binary database objects and normalize the Filter definitions
                _dba.ExecuteNonQuery(sql);

                // Begin TT#2131-MD - JSmith - Halo Integration
                sql = @" --============================================== ";
                sql += @" -- 'Store Filter Query - METHOD_PLANNING_EXTRACT' ";
                sql += @" -- Enum 20.14 ";
                sql += @" --============================================== ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(20, 14, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT @severity as Severity, ";
                sql += @"     f.FILTER_NAME  as Header1, ";
                sql += @" 	''Method Planning Extract'' as Header2, ";
                sql += @" 	m.METHOD_NAME as Heading3, ";
                sql += @" 	m.METHOD_DESCRIPTION as Heading4, ";
                sql += @" 	au.USER_NAME as Header5, ";
                sql += @" 	@severity AS Header6, ";
                sql += @" 	'' '' AS Heading7, ";
                sql += @" 	'' '' AS Heading8, ";
                sql += @" 	'' '' AS Heading9 ";
                sql += @" from METHOD_PLANNING_EXTRACT mpe with (nolock) ";
                sql += @" 	join FILTER f with (nolock) on f.FILTER_RID = mpe.STORE_FILTER_RID ";	
                sql += @" 	join METHOD m with (nolock) on m.METHOD_RID = mpe.METHOD_RID ";
                sql += @" 	join APPLICATION_USER au with (nolock) on au.USER_RID = m.USER_RID ";
                sql += @" where f.FILTER_RID = @inUseRID')) ";
                _dba.ExecuteNonQuery(sql);
                // End TT#2131-MD - JSmith - Halo Integration

                // Begin TT#1362-MD - stodd - Header filter InUse is not returning any filters being InUse even though they are
                sql = @" --============================================== ";
                sql += @" -- 'Header Filter Query - Allocation Tasklist' ";
                sql += @" -- Enum 314.01 ";
                sql += @" --============================================== ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(314, 01, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT @severity as Severity, ";
                sql += @"     f.FILTER_NAME  as Header1, ";
                sql += @" 	  ''Allocation Tasklist'' as Header2, ";
                sql += @" 	t.TASKLIST_NAME as Heading3, ";
                sql += @" 	au.USER_NAME as Header4, ";
                sql += @" 	@severity AS Header5, ";
                sql += @" 	'' '' AS Heading6, ";
                sql += @" 	'' '' AS Heading7, ";
                sql += @" 	'' '' AS Heading8, ";
                sql += @" 	'' '' AS Heading9 ";
                sql += @" from TASK_ALLOCATE ta with (nolock) ";
                sql += @" 	join FILTER f with (nolock) on f.FILTER_RID = ta.FILTER_RID ";
                sql += @" 	join TASKLIST t with (nolock) on t.TASKLIST_RID = ta.TASKLIST_RID ";
                sql += @" 	join APPLICATION_USER au with (nolock) on au.USER_RID = t.USER_RID ";
                sql += @" where f.FILTER_RID = @inUseRID')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" --============================================== ";
                sql += @" -- 'Header Filter Query - Allocation Workspace View' ";
                sql += @" -- Enum 314.02 ";
                sql += @" --============================================== ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(314, 02, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT @severity as Severity, ";
                sql += @"     f.FILTER_NAME  as Header1, ";
                sql += @" 	  ''Allocation View'' as Header2, ";
                sql += @" 	gv.VIEW_ID as Heading3, ";
                sql += @" 	au.USER_NAME as Header4, ";
                sql += @" 	@severity AS Header5, ";
                sql += @" 	'' '' AS Heading6, ";
                sql += @" 	'' '' AS Heading7, ";
                sql += @" 	'' '' AS Heading8, ";
                sql += @" 	'' '' AS Heading9 ";
                sql += @" from GRID_VIEW gv with (nolock) ";
                sql += @" 	join FILTER f with (nolock) on f.FILTER_RID = gv.WORKSPACE_FILTER_RID ";
                sql += @" 	join APPLICATION_USER au with (nolock) on au.USER_RID =  gv.USER_RID ";
                sql += @" where f.FILTER_RID = @inUseRID')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" --============================================== ";
                sql += @" -- 'Header Filter Query - Allocation Workspace User Filter' ";
                sql += @" -- Enum 314.03 ";
                sql += @" --============================================== ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(314, 03, 'Reference', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT @severity as Severity, ";
                sql += @"     f.FILTER_NAME  as Header1, ";
                sql += @" 	  ''Allocation Workspace'' as Header2, ";
                sql += @" 	''<current>'' as Heading3, ";
                sql += @" 	au.USER_NAME as Header4, ";
                sql += @" 	@severity AS Header5, ";
                sql += @" 	'' '' AS Heading6, ";
                sql += @" 	'' '' AS Heading7, ";
                sql += @" 	'' '' AS Heading8, ";
                sql += @" 	'' '' AS Heading9 ";
                sql += @" from USER_CURRENT_WORKSPACE_FILTER u with (nolock) ";
                sql += @" 	join FILTER f with (nolock) on f.FILTER_RID = u.FILTER_RID ";
                sql += @" 	join APPLICATION_USER au with (nolock) on au.USER_RID =  u.USER_RID ";
                sql += @" where f.FILTER_RID = @inUseRID')) ";
                _dba.ExecuteNonQuery(sql);

				// End TT#1362-MD - stodd - Header filter InUse is not returning any filters being InUse even though they are

                // Begin TT#1966-MD - JSmith - DC Fulfillment
                sql = @" --============================================== ";
                sql += @" -- 'Header Filter Query - METHOD_CREATE_MASTER_HEADERS_MERCHANDISE' ";
                sql += @" -- Enum 314.04 ";
                sql += @" --============================================== ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(314, 04, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'declare @type varchar(100); ";
                
                sql += @" SELECT @type = TEXT_VALUE from APPLICATION_TEXT with (nolock) where TEXT_CODE = 200092; ";

                sql += @"INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT distinct @severity as Severity, ";
                sql += @" f.FILTER_NAME as Header1, ";
                sql += @" @type as Header2, ";
                sql += @" m.METHOD_NAME as Heading3, ";
                sql += @" au.USER_NAME as Header4, ";
                sql += @" @severity AS Header5, ";
                sql += @" '' '' AS Heading6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @" from METHOD_CREATE_MASTER_HEADERS_MERCHANDISE t with (nolock) ";
                sql += @" join METHOD m with (nolock) on m.METHOD_RID = t.METHOD_RID ";
                sql += @" join FILTER f with (nolock) on f.FILTER_RID = t.FILTER_RID ";
                sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = m.USER_RID ";
                sql += @" where t.FILTER_RID = @inUseRID')) ";
                _dba.ExecuteNonQuery(sql);
                // End TT#1966-MD - JSmith - DC Fulfillment

				// Begin TT#1367-MD - stodd - add assortment inUse SQL
                sql = @" --============================================== ";
                sql += @" -- 'Header Filter Query - Assortment Workspace View' ";
                sql += @" -- Enum 319.01 ";
                sql += @" --============================================== ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(319, 01, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT @severity as Severity, ";
                sql += @"     f.FILTER_NAME  as Header1, ";
                sql += @" 	  ''Assortment View'' as Header2, ";
                sql += @" 	gv.VIEW_ID as Heading3, ";
                sql += @" 	au.USER_NAME as Header4, ";
                sql += @" 	@severity AS Header5, ";
                sql += @" 	'' '' AS Heading6, ";
                sql += @" 	'' '' AS Heading7, ";
                sql += @" 	'' '' AS Heading8, ";
                sql += @" 	'' '' AS Heading9 ";
                sql += @" from GRID_VIEW gv with (nolock) ";
                sql += @" 	join FILTER f with (nolock) on f.FILTER_RID = gv.WORKSPACE_FILTER_RID ";
                sql += @" 	join APPLICATION_USER au with (nolock) on au.USER_RID =  gv.USER_RID ";
                sql += @" where f.FILTER_RID = @inUseRID')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" --============================================== ";
                sql += @" -- 'Header Filter Query - Assortment Workspace User Filter' ";
                sql += @" -- Enum 319.02 ";
                sql += @" --============================================== ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(319, 02, 'Reference', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT @severity as Severity, ";
                sql += @"     f.FILTER_NAME  as Header1, ";
                sql += @" 	  ''Assortment Workspace'' as Header2, ";
                sql += @" 	''<current>'' as Heading3, ";
                sql += @" 	au.USER_NAME as Header4, ";
                sql += @" 	@severity AS Header5, ";
                sql += @" 	'' '' AS Heading6, ";
                sql += @" 	'' '' AS Heading7, ";
                sql += @" 	'' '' AS Heading8, ";
                sql += @" 	'' '' AS Heading9 ";
                sql += @" from USER_CURRENT_WORKSPACE_FILTER u with (nolock) ";
                sql += @" 	join FILTER f with (nolock) on f.FILTER_RID = u.FILTER_RID ";
                sql += @" 	join APPLICATION_USER au with (nolock) on au.USER_RID =  u.USER_RID ";
                sql += @" where f.FILTER_RID = @inUseRID')) ";
                _dba.ExecuteNonQuery(sql);
				// End TT#1367-MD - stodd - add assortment inUse SQL

                //Begin TT#1313-MD -jsobek -Header Filters
                //sql = @" /********************************************** ";
                //sql += @" AL_WRKSP_FILTER	- HN_RID ";
                //sql += @" Enum: 27.1 ";
                //sql += @" ***********************************************/ ";
                //sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                //sql += @" VALUES	(27, 1, 'Reference', ";
                //sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'declare @nodeID varchar(200), @type varchar(100); ";

                //sql += @" set @nodeID = dbo.UDF_MID_GET_NODE_DISPLAY (@inUseRID); ";

                //sql += @" SELECT @type = ''Allocation Workspace Filter''; ";

                //sql += @"INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                //sql += @" SELECT @severity as Severity, ";
                //sql += @" @nodeID as Header1, ";
                //sql += @" @type as Header2, ";
                //sql += @" '' '' as Heading3, ";
                //sql += @" '' '' as Heading4, ";
                //sql += @" au.USER_NAME as Header5, ";
                //sql += @" @severity AS Header6, ";
                //sql += @" '' '' AS Heading7, ";
                //sql += @" '' '' AS Heading8, ";
                //sql += @" '' '' AS Heading9 ";
                //sql += @" from AL_WRKSP_FILTER t with (nolock) ";
                //sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = t.USER_RID ";
                //sql += @" where t.HN_RID = @inUseRID')) ";
                //_dba.ExecuteNonQuery(sql);

                //sql = @" /********************************************** ";
                //sql += @" ASRT_WRKSP_FILTER - HN_RID ";
                //sql += @" Enum: 27.2 ";
                //sql += @" ***********************************************/ ";
                //sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                //sql += @" VALUES	(27, 2, 'Reference', ";
                //sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'declare @nodeID varchar(200), @type varchar(100); ";

                //sql += @" set @nodeID = dbo.UDF_MID_GET_NODE_DISPLAY (@inUseRID); ";

                //sql += @" SELECT @type = ''Assortment Workspace Filter''; ";

                //sql += @"INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                //sql += @" SELECT @severity as Severity, ";
                //sql += @" @nodeID as Header1, ";
                //sql += @" @type as Header2, ";
                //sql += @" '' '' as Heading3, ";
                //sql += @" '' '' as Heading4, ";
                //sql += @" au.USER_NAME as Header5, ";
                //sql += @" @severity AS Header6, ";
                //sql += @" '' '' AS Heading7, ";
                //sql += @" '' '' AS Heading8, ";
                //sql += @" '' '' AS Heading9 ";
                //sql += @" from ASRT_WRKSP_FILTER t with (nolock) ";
                //sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = t.USER_RID ";
                //sql += @" where t.HN_RID = @inUseRID')) ";

                // ***********************************************************************************************
                // If In Use is being altered for Hierarchy Nodes, you also need to review stored procedure
                // MID_PRODUCT_HIERARCHY_IN_USE_FROM_OWNER.  This stored procedure mimics the In Use queries 
                // for Purge looking for items not owned by a user that would keep the user from being deleted. 
                // ***********************************************************************************************

                sql = @" /********************************************** ";
                sql += @" FILTER - HN_RID ";
                sql += @" Enum: 27.2 ";
                sql += @" ***********************************************/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(27, 2, 'Reference', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'declare @nodeID varchar(200), @type varchar(100); ";

                sql += @" set @nodeID = dbo.UDF_MID_GET_NODE_DISPLAY (@inUseRID); ";

                sql += @" SELECT @type = ''Assortment Workspace Filter''; ";

                sql += @"INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT @severity as Severity, ";
                sql += @" @nodeID as Header1, ";
                sql += @" @type as Header2, ";
                sql += @" f.FILTER_NAME as Heading3, ";
                sql += @" '' '' as Heading4, ";
                sql += @" au.USER_NAME as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @" from FILTER_CONDITION fc with (nolock) ";
                sql += @" join FILTER f with (nolock) on f.FILTER_RID = fc.FILTER_RID AND f.FILTER_TYPE=2";
                sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = f.USER_RID ";
                sql += @" where fc.HEADER_HN_RID = @inUseRID')) ";
                //End TT#1313-MD -jsobek -Header Filters
                _dba.ExecuteNonQuery(sql);

                sql = @" /********************************************** ";
                sql += @" ASSORTMENT_PROPERTIES - ANCHOR_HN_RID ";
                sql += @" Enum: 27.3 ";
                sql += @" ***********************************************/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(27, 3, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'declare @nodeID varchar(200), @type varchar(100); ";

                sql += @" set @nodeID = dbo.UDF_MID_GET_NODE_DISPLAY (@inUseRID); ";

                sql += @" SELECT @type = TEXT_VALUE from APPLICATION_TEXT with (nolock) where TEXT_CODE = 900317; ";

                sql += @"INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT @severity as Severity, ";
                sql += @" @nodeID as Header1, ";
                sql += @" @type as Header2, ";
                sql += @" h.HDR_ID as Heading3, ";
                sql += @" h.HDR_DESC as Heading4, ";
                sql += @" au.USER_NAME as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @" from ASSORTMENT_PROPERTIES t with (nolock) ";
                sql += @" join HEADER h with (nolock) on h.HDR_RID = t.HDR_RID ";
                sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = t.USER_RID ";
                sql += @" where t.ANCHOR_HN_RID = @inUseRID')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /********************************************** ";
                sql += @" ASSORTMENT_PROPERTIES_BASIS - HN_RID ";
                sql += @" Enum: 27.4 ";
                sql += @" ***********************************************/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(27, 4, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'declare @nodeID varchar(200), @type varchar(100); ";
                sql += @" set @nodeID = dbo.UDF_MID_GET_NODE_DISPLAY (@inUseRID); ";

                sql += @" SELECT @type = TEXT_VALUE from APPLICATION_TEXT with (nolock) where TEXT_CODE = 900317; ";

                sql += @"INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT @severity as Severity, ";
                sql += @" @nodeID as Header1, ";
                sql += @" @type as Header2, ";
                sql += @" h.HDR_ID as Heading3, ";
                sql += @" h.HDR_DESC as Heading4, ";
                sql += @" au.USER_NAME as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @" from ASSORTMENT_PROPERTIES_BASIS t with (nolock) ";
                sql += @" join ASSORTMENT_PROPERTIES ap with (nolock) on ap.HDR_RID = t.HDR_RID ";
                sql += @" join HEADER h with (nolock) on h.HDR_RID = t.HDR_RID ";
                sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = ap.USER_RID ";
                sql += @" where t.HN_RID = @inUseRID')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /********************************************** ";
                sql += @" BULK_STORE_EXTERNAL_INTRANSIT - HN_RID ";
                sql += @" Enum: 27.5 ";
                sql += @" ***********************************************/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(27, 5, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'declare @nodeID varchar(200), @type varchar(100); ";

                sql += @" set @nodeID = dbo.UDF_MID_GET_NODE_DISPLAY (@inUseRID); ";

                sql += @" SELECT @type = ''External Intransit''; ";

                sql += @"INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT top 1 @severity as Severity, ";
                sql += @" @nodeID as Header1, ";
                sql += @" @type as Header2, ";
                sql += @" '' '' as Heading3, ";
                sql += @" '' '' as Heading4, ";
                sql += @" '' '' as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9  from BULK_STORE_EXTERNAL_INTRANSIT t with (nolock) ";
                sql += @" where t.HN_RID = @inUseRID')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /********************************************** ";
                sql += @" CHAIN_FORECAST_WEEK	- HN_RID ";
                sql += @" Enum: 27.6 ";
                sql += @" ***********************************************/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(27, 6, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'declare @nodeID varchar(200), @type varchar(100); ";

                sql += @" set @nodeID = dbo.UDF_MID_GET_NODE_DISPLAY (@inUseRID); ";

                sql += @" SELECT @type = ''Chain Forecast''; ";

                sql += @"INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT distinct * from ";
                sql += @" (SELECT top 1 @severity as Severity, ";
                sql += @" @nodeID as Header1, ";
                sql += @" @type as Header2, ";
                sql += @" '' '' as Heading3, ";
                sql += @" '' '' as Heading4, ";
                sql += @" '' '' as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @" from CHAIN_FORECAST_WEEK_LOCK t with (nolock) ";
                sql += @" where t.HN_RID = @inUseRID ";
                sql += @" union ";
                sql += @" SELECT top 1 @severity as Severity, ";
                sql += @" @nodeID as Header1, ";
                sql += @" @type as Header2, ";
                sql += @" '' '' as Heading3, ";
                sql += @" '' '' as Heading4, ";
                sql += @" '' '' as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @" from VW_CHAIN_FORECAST_WEEK t with (nolock) ";
                sql += @" where t.HN_RID = @inUseRID) x')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /********************************************** ";
                sql += @" CHAIN_HISTORY_WEEK - HN_RID ";
                sql += @" Enum: 27.7 ";
                sql += @" ***********************************************/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(27, 7, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'declare @nodeID varchar(200), @type varchar(100); ";
                sql += @" set @nodeID = dbo.UDF_MID_GET_NODE_DISPLAY (@inUseRID); ";

                sql += @" SELECT @type = ''Chain Weekly History''; ";

                sql += @"INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT top 1 @severity as Severity, ";
                sql += @" @nodeID as Header1, ";
                sql += @" @type as Header2, ";
                sql += @" '' '' as Heading3, ";
                sql += @" '' '' as Heading4, ";
                sql += @" '' '' as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @" from CHAIN_HISTORY_WEEK t with (nolock) ";
                sql += @" where t.HN_RID = @inUseRID')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /********************************************** ";
                sql += @" CHAIN_SET_PERCENT_SET - HN_RID ";
                sql += @" Enum: 27.8 ";
                sql += @" ***********************************************/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(27, 8, 'Reference', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'declare @nodeID varchar(200), @type varchar(100); ";

                sql += @" set @nodeID = dbo.UDF_MID_GET_NODE_DISPLAY (@inUseRID); ";

                sql += @" SELECT @type = ''Chain Set Percentages''; ";

                sql += @"INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT top 1 @severity as Severity, ";
                sql += @" @nodeID as Header1, ";
                sql += @" @type as Header2, ";
                sql += @" '' '' as Heading3, ";
                sql += @" '' '' as Heading4, ";
                sql += @" '' '' as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @" from CHAIN_SET_PERCENT_SET t with (nolock) ";
                sql += @" where t.HN_RID = @inUseRID')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /********************************************** ";
                sql += @" COMPUTATION_ITEM - HN_RID ";
                sql += @" Enum: 27.9 ";
                sql += @" ***********************************************/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(27, 9, 'Reference', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'declare @nodeID varchar(200), @type varchar(100); ";

                sql += @" set @nodeID = dbo.UDF_MID_GET_NODE_DISPLAY (@inUseRID); ";

                sql += @" SELECT @type = ''Computation Items''; ";

                sql += @"INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT top 1 @severity as Severity, ";
                sql += @" @nodeID as Header1, ";
                sql += @" @type as Header2, ";
                sql += @" '' '' as Heading3, ";
                sql += @" '' '' as Heading4, ";
                sql += @" '' '' as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @" from COMPUTATION_ITEM t with (nolock) ";
                sql += @" where t.HN_RID = @inUseRID')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /********************************************** ";
                sql += @" DAILY_PERCENTAGES - HN_RID ";
                sql += @" Enum: 27.10 ";
                sql += @" ***********************************************/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(27, 10, 'Reference', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'declare @nodeID varchar(200), @type varchar(100); ";

                sql += @" set @nodeID = dbo.UDF_MID_GET_NODE_DISPLAY (@inUseRID); ";

                sql += @" SELECT @type = TEXT_VALUE from APPLICATION_TEXT with (nolock) where TEXT_CODE = 900053; ";

                sql += @"INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT distinct * from ";
                sql += @" (SELECT top 1 @severity as Severity, ";
                sql += @" @nodeID as Header1, ";
                sql += @" @type as Header2, ";
                sql += @" '' '' as Heading3, ";
                sql += @" '' '' as Heading4, ";
                sql += @" '' '' as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @" from DAILY_PERCENTAGES t with (nolock) ";
                sql += @" where t.HN_RID = @inUseRID ";
                sql += @" union ";
                sql += @" SELECT top 1 @severity as Severity, ";
                sql += @" @nodeID as Header1, ";
                sql += @" @type as Header2, ";
                sql += @" '' '' as Heading3, ";
                sql += @" '' '' as Heading4, ";
                sql += @" '' '' as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @" from DAILY_PERCENTAGES_DEFAULTS t with (nolock) ";
                sql += @" where t.HN_RID = @inUseRID) x')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /********************************************** ";
                sql += @" OTS_PLAN_METHOD - HN_RID ";
                sql += @" Enum: 27.11 ";
                sql += @" ***********************************************/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(27, 11, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'declare @nodeID varchar(200), @type varchar(100); ";

                sql += @" set @nodeID = dbo.UDF_MID_GET_NODE_DISPLAY (@inUseRID); ";

                sql += @" SELECT @type = TEXT_VALUE from APPLICATION_TEXT with (nolock) where TEXT_CODE = 200017; ";

                sql += @"INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT distinct * from ";
                sql += @" (SELECT @severity as Severity, ";
                sql += @" @nodeID as Header1, ";
                sql += @" @type as Header2, ";
                sql += @" m.METHOD_NAME as Heading3, ";
                sql += @" m.METHOD_DESCRIPTION as Heading4, ";
                sql += @" au.USER_NAME as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @" from DEFAULT_OTS_PLAN_METHOD t with (nolock) ";
                sql += @" join METHOD m with (nolock) on m.METHOD_RID = t.METHOD_RID ";
                sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = m.USER_RID ";
                sql += @" where t.HN_RID = @inUseRID ";
                sql += @" union ";
                sql += @" SELECT @severity as Severity, ";
                sql += @" @nodeID as Header1, ";
                sql += @" @type as Header2, ";
                sql += @" m.METHOD_NAME as Heading3, ";
                sql += @" m.METHOD_DESCRIPTION as Heading4, ";
                sql += @" au.USER_NAME as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @" from GROUP_LEVEL_BASIS t with (nolock) ";
                sql += @" join METHOD m with (nolock) on m.METHOD_RID = t.METHOD_RID ";
                sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = m.USER_RID ";
                sql += @" where t.HN_RID = @inUseRID ";
                sql += @" union ";
                sql += @" SELECT @severity as Severity, ";
                sql += @" @nodeID as Header1, ";
                sql += @" @type as Header2, ";
                sql += @" m.METHOD_NAME as Heading3, ";
                sql += @" m.METHOD_DESCRIPTION as Heading4, ";
                sql += @" au.USER_NAME as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @" from GROUP_LEVEL_FUNCTION t with (nolock) ";
                sql += @" join METHOD m with (nolock) on m.METHOD_RID = t.METHOD_RID ";
                sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = m.USER_RID ";
                sql += @" where t.SEASON_HN_RID = @inUseRID ";
                sql += @" union ";
                sql += @" SELECT @severity as Severity, ";
                sql += @" @nodeID as Header1, ";
                sql += @" @type as Header2, ";
                sql += @" m.METHOD_NAME as Heading3, ";
                sql += @" m.METHOD_DESCRIPTION as Heading4, ";
                sql += @" au.USER_NAME as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @" from GROUP_LEVEL_NODE_FUNCTION t with (nolock) ";
                sql += @" join METHOD m with (nolock) on m.METHOD_RID = t.METHOD_RID ";
                sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = m.USER_RID ";
                sql += @" where t.HN_RID = @inUseRID ";
                sql += @" union ";
                sql += @" SELECT @severity as Severity, ";
                sql += @" @nodeID as Header1, ";
                sql += @" @type as Header2, ";
                sql += @" m.METHOD_NAME as Heading3, ";
                sql += @" m.METHOD_DESCRIPTION as Heading4, ";
                sql += @" au.USER_NAME as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @" from OTS_PLAN t with (nolock) ";
                sql += @" join METHOD m with (nolock) on m.METHOD_RID = t.METHOD_RID ";
                sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = m.USER_RID ";
                sql += @" where t.PLAN_HN_RID = @inUseRID) x')) ";
                _dba.ExecuteNonQuery(sql);

                //Begin TT#1313-MD -jsobek -Header Filters
                //sql = @" /********************************************** ";
                //sql += @" GRID_VIEW_FILTER - HN_RID ";
                //sql += @" Enum: 27.12 ";
                //sql += @" ***********************************************/ ";
                //sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                //sql += @" VALUES	(27, 12, 'Reference', ";
                //sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'declare @nodeID varchar(200), @type varchar(100); ";

                //sql += @" set @nodeID = dbo.UDF_MID_GET_NODE_DISPLAY (@inUseRID); ";

                //sql += @" SELECT @type = ''Grid View Filter''; ";

                //sql += @"INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                //sql += @" SELECT @severity as Severity, ";
                //sql += @" @nodeID as Header1, ";
                //sql += @" @type as Header2, ";
                //sql += @" gv.VIEW_ID as Heading3, ";
                //sql += @" '' '' as Heading4, ";
                //sql += @" au.USER_NAME as Header5, ";
                //sql += @" @severity AS Header6, ";
                //sql += @" '' '' AS Heading7, ";
                //sql += @" '' '' AS Heading8, ";
                //sql += @" '' '' AS Heading9 ";
                //sql += @" from GRID_VIEW_FILTER t with (nolock) ";
                //sql += @" join GRID_VIEW gv with (nolock) on gv.VIEW_RID = t.VIEW_RID ";
                //sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = gv.USER_RID ";
                //sql += @" where t.HN_RID = @inUseRID')) ";

                sql = @" /********************************************** ";
                sql += @" FILTER - HN_RID ";
                sql += @" Enum: 27.12 ";
                sql += @" ***********************************************/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(27, 12, 'Reference', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'declare @nodeID varchar(200), @type varchar(100); ";

                sql += @" set @nodeID = dbo.UDF_MID_GET_NODE_DISPLAY (@inUseRID); ";

                sql += @" SELECT @type = ''Header Filters''; ";

                sql += @"INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT @severity as Severity, ";
                sql += @" @nodeID as Header1, ";
                sql += @" @type as Header2, ";
                sql += @" f.FILTER_NAME as Heading3, ";
                sql += @" '' '' as Heading4, ";
                sql += @" au.USER_NAME as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @" from FILTER_CONDITION fc with (nolock) ";
                sql += @" join FILTER f with (nolock) on f.FILTER_RID = fc.FILTER_RID AND f.FILTER_TYPE=1";
                sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = f.USER_RID ";
                sql += @" where fc.HEADER_HN_RID = @inUseRID')) ";
                //End TT#1313-MD -jsobek -Header Filters
                _dba.ExecuteNonQuery(sql);

                sql = @" /********************************************** ";
                sql += @" HEADER - Reference ";
                sql += @" Enum: 27.13 ";
                sql += @" ***********************************************/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(27, 13, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'declare @nodeID varchar(200), @type varchar(100); ";
                sql += @" set @nodeID = dbo.UDF_MID_GET_NODE_DISPLAY (@inUseRID); ";

                sql += @" SELECT @type = TEXT_VALUE from APPLICATION_TEXT with (nolock) where TEXT_CODE = 900166; ";

                sql += @"INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT top 1 @severity as Severity, ";
                sql += @" @nodeID as Header1, ";
                sql += @" @type as Header2, ";
                sql += @" '' '' as Heading3, ";
                sql += @" '' '' as Heading4, ";
                sql += @" '' '' as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @" from HEADER t with (nolock) ";
                sql += @" where t.GRADE_INVENTORY_HNRID = @inUseRID ";
                sql += @"    or t.ON_HAND_HNRID = @inUseRID ";
                sql += @"    or t.PLAN_HNRID = @inUseRID')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /********************************************** ";
                sql += @" HEADER - In Use ";
                sql += @" Enum: 27.14 ";
                sql += @" ***********************************************/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(27, 14, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'declare @nodeID varchar(200), @type varchar(100) ";
                sql += @" declare @HN_TYPE int, @HOME_PH_RID int, @parentRID int, @grandParentRID int, @COLOR_CODE_RID int, @SIZE_CODE_RID int ";
                sql += @" set @nodeID = dbo.UDF_MID_GET_NODE_DISPLAY (@inUseRID) ";

                sql += @" SELECT @type = TEXT_VALUE from APPLICATION_TEXT with (nolock) where TEXT_CODE = 900166; ";
                sql += @" SELECT @HN_TYPE = HN_TYPE, @HOME_PH_RID = HOME_PH_RID from dbo.HIERARCHY_NODE where HN_RID = @inUseRID ";

                sql += @" if @HN_TYPE = 800203 ";
                sql += @" begin ";
                sql += @"    set @parentRID = dbo.UDF_MID_GET_PARENT (@inUseRID) ";
                sql += @"    SELECT @COLOR_CODE_RID = COLOR_CODE_RID from dbo.COLOR_NODE where HN_RID = @inUseRID ";
                sql += @"    INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @"    SELECT distinct * from ";
                sql += @"    (SELECT top 1 @severity as Severity, ";
                sql += @"    @nodeID as Header1, ";
                sql += @"    @type as Header2, ";
                sql += @"    '' '' as Heading3, ";
                sql += @"    '' '' as Heading4, ";
                sql += @"    '' '' as Header5, ";
                sql += @"    @severity AS Header6, ";
                sql += @"    '' '' AS Heading7, ";
                sql += @"    '' '' AS Heading8, ";
                sql += @"    '' '' AS Heading9 ";
                sql += @"    from HEADER_BULK_COLOR t with (nolock) ";
                sql += @"    join HEADER h with (nolock) on h.HDR_RID = t.HDR_RID ";
                sql += @"    where h.STYLE_HNRID = @parentRID ";
                sql += @"      and t.COLOR_CODE_RID = @COLOR_CODE_RID ";
                sql += @"    union ";
                sql += @"    SELECT top 1 @severity as Severity, ";
                sql += @"    @nodeID as Header1, ";
                sql += @"    @type as Header2, ";
                sql += @"    '' '' as Heading3, ";
                sql += @"    '' '' as Heading4, ";
                sql += @"    '' '' as Header5, ";
                sql += @"    @severity AS Header6, ";
                sql += @"    '' '' AS Heading7, ";
                sql += @"    '' '' AS Heading8, ";
                sql += @"    '' '' AS Heading9 ";
                sql += @"    from HEADER_PACK_COLOR t with (nolock) ";
                sql += @"    join HEADER_PACK hp with (nolock) on hp.HDR_PACK_RID = t.HDR_PACK_RID ";
                sql += @"    join HEADER h with (nolock) on h.HDR_RID = hp.HDR_RID ";
                sql += @"    where h.STYLE_HNRID = @parentRID ";
                sql += @"      and t.COLOR_CODE_RID = @COLOR_CODE_RID) x ";
                sql += @" end ";
                sql += @" else if @HN_TYPE = 800204 ";
                sql += @" begin ";
                sql += @"    set @parentRID = dbo.UDF_MID_GET_PARENT (@inUseRID) ";
                sql += @"    set @grandParentRID = dbo.UDF_MID_GET_PARENT (@parentRID) ";
                sql += @"    SELECT @COLOR_CODE_RID = COLOR_CODE_RID from dbo.COLOR_NODE where HN_RID = @parentRID ";
                sql += @"    SELECT @SIZE_CODE_RID = SIZE_CODE_RID from dbo.SIZE_NODE where HN_RID = @inUseRID ";
                sql += @"    INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @"    SELECT distinct * from ";
                sql += @"    (SELECT top 1 @severity as Severity, ";
                sql += @"    @nodeID as Header1, ";
                sql += @"    @type as Header2, ";
                sql += @"    '' '' as Heading3, ";
                sql += @"    '' '' as Heading4, ";
                sql += @"    '' '' as Header5, ";
                sql += @"    @severity AS Header6, ";
                sql += @"    '' '' AS Heading7, ";
                sql += @"    '' '' AS Heading8, ";
                sql += @"    '' '' AS Heading9 ";
                sql += @"    from HEADER_BULK_COLOR_SIZE t with (nolock) ";
                sql += @"    join HEADER_BULK_COLOR hbc with (nolock) on hbc.HDR_BC_RID = t.HDR_BC_RID ";
                sql += @"    join HEADER h with (nolock) on h.HDR_RID = t.HDR_RID ";
                sql += @"    where h.STYLE_HNRID = @grandParentRID ";
                sql += @"      and hbc.COLOR_CODE_RID = @COLOR_CODE_RID ";
                sql += @"      and t.SIZE_CODE_RID = @SIZE_CODE_RID ";
                sql += @"    union ";
                sql += @"    SELECT top 1 @severity as Severity, ";
                sql += @"    @nodeID as Header1, ";
                sql += @"    @type as Header2, ";
                sql += @"    '' '' as Heading3, ";
                sql += @"    '' '' as Heading4, ";
                sql += @"    '' '' as Header5, ";
                sql += @"    @severity AS Header6, ";
                sql += @"    '' '' AS Heading7, ";
                sql += @"    '' '' AS Heading8, ";
                sql += @"    '' '' AS Heading9 ";
                sql += @"    from HEADER_PACK_COLOR_SIZE t with (nolock) ";
                sql += @"    join HEADER_PACK_COLOR hpc with (nolock) on hpc.HDR_PACK_RID = t.HDR_PACK_RID ";
                sql += @"    join HEADER_PACK hp with (nolock) on hp.HDR_PACK_RID = t.HDR_PACK_RID ";
                sql += @"    join HEADER h with (nolock) on h.HDR_RID = hp.HDR_RID ";
                sql += @"    where h.STYLE_HNRID = @grandParentRID ";
                sql += @"      and hpc.COLOR_CODE_RID = @COLOR_CODE_RID ";
                sql += @"      and t.SIZE_CODE_RID = @SIZE_CODE_RID) x ";
                sql += @" end ";
                sql += @" else ";
                sql += @" begin ";
                sql += @"    INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @"    SELECT top 1 @severity as Severity, ";
                sql += @"    @nodeID as Header1, ";
                sql += @"    @type as Header2, ";
                sql += @"    '' ''  as Heading3, ";
                sql += @"    '' '' as Heading4, ";
                sql += @"    '' '' as Header5, ";
                sql += @"    @severity AS Header6, ";
                sql += @"    '' '' AS Heading7, ";
                sql += @"    '' '' AS Heading8, ";
                sql += @"    '' '' AS Heading9 ";
                sql += @"    from HEADER t with (nolock) ";
                sql += @"    where t.STYLE_HNRID = @inUseRID ";
                sql += @" end')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /********************************************** ";
                sql += @" METHOD COPY CHAIN - HN_RID ";
                sql += @" Enum: 27.15 ";
                sql += @" ***********************************************/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(27, 15, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'declare @nodeID varchar(200), @type varchar(100); ";

                sql += @" set @nodeID = dbo.UDF_MID_GET_NODE_DISPLAY (@inUseRID); ";

                sql += @" SELECT @type = TEXT_VALUE from APPLICATION_TEXT with (nolock) where TEXT_CODE = 200058; ";

                sql += @"INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT distinct * from ";
                sql += @" (SELECT distinct @severity as Severity, ";
                sql += @" @nodeID as Header1, ";
                sql += @" @type as Header2, ";
                sql += @" m.METHOD_NAME as Heading3, ";
                sql += @" m.METHOD_DESCRIPTION as Heading4, ";
                sql += @" au.USER_NAME as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @" from METHOD_COPY_BASIS_DETAIL t with (nolock) ";
                sql += @" join METHOD_COPY_FORECAST cf with (nolock) on cf.METHOD_RID = t.METHOD_RID ";
                sql += @" join METHOD m with (nolock) on m.METHOD_RID = t.METHOD_RID ";
                sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = m.USER_RID ";
                sql += @" where cf.HN_RID = @inUseRID ";
                sql += @"   and  cf.PLAN_TYPE = 0 ";
                sql += @" union ";
                sql += @" SELECT distinct @severity as Severity, ";
                sql += @" @nodeID as Header1, ";
                sql += @" @type as Header2, ";
                sql += @" m.METHOD_NAME as Heading3, ";
                sql += @" m.METHOD_DESCRIPTION as Heading4, ";
                sql += @" au.USER_NAME as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @" from METHOD_COPY_BASIS_DETAIL t with (nolock) ";
                sql += @" join METHOD_COPY_FORECAST cf with (nolock) on cf.METHOD_RID = t.METHOD_RID ";
                sql += @" join METHOD m with (nolock) on m.METHOD_RID = t.METHOD_RID ";
                sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = m.USER_RID ";
                sql += @" where t.HN_RID = @inUseRID ";
                sql += @"   and  cf.PLAN_TYPE = 0) x')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /********************************************** ";
                sql += @" METHOD COPY STORE - HN_RID ";
                sql += @" Enum: 27.16 ";
                sql += @" ***********************************************/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(27, 16, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'declare @nodeID varchar(200), @type varchar(100); ";

                sql += @" set @nodeID = dbo.UDF_MID_GET_NODE_DISPLAY (@inUseRID); ";

                sql += @" SELECT @type = TEXT_VALUE from APPLICATION_TEXT with (nolock) where TEXT_CODE = 200059; ";

                sql += @"INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT distinct * from ";
                sql += @" (SELECT distinct @severity as Severity, ";
                sql += @" @nodeID as Header1, ";
                sql += @" @type as Header2, ";
                sql += @" m.METHOD_NAME as Heading3, ";
                sql += @" m.METHOD_DESCRIPTION as Heading4, ";
                sql += @" au.USER_NAME as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @" from METHOD_COPY_BASIS_DETAIL t with (nolock) ";
                sql += @" join METHOD_COPY_FORECAST cf with (nolock) on cf.METHOD_RID = t.METHOD_RID ";
                sql += @" join METHOD m with (nolock) on m.METHOD_RID = t.METHOD_RID ";
                sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = m.USER_RID ";
                sql += @" where cf.HN_RID = @inUseRID ";
                sql += @"   and  cf.PLAN_TYPE = 1 ";
                sql += @" union ";
                sql += @" SELECT distinct @severity as Severity, ";
                sql += @" @nodeID as Header1, ";
                sql += @" @type as Header2, ";
                sql += @" m.METHOD_NAME as Heading3, ";
                sql += @" m.METHOD_DESCRIPTION as Heading4, ";
                sql += @" au.USER_NAME as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @" from METHOD_COPY_BASIS_DETAIL t with (nolock) ";
                sql += @" join METHOD_COPY_FORECAST cf with (nolock) on cf.METHOD_RID = t.METHOD_RID ";
                sql += @" join METHOD m with (nolock) on m.METHOD_RID = t.METHOD_RID ";
                sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = m.USER_RID ";
                sql += @" where t.HN_RID = @inUseRID ";
                sql += @"   and  cf.PLAN_TYPE = 1) x')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /********************************************** ";
                sql += @" METHOD_EXPORT - HN_RID ";
                sql += @" Enum: 27.17 ";
                sql += @" ***********************************************/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(27, 17, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'declare @nodeID varchar(200), @type varchar(100); ";

                sql += @" set @nodeID = dbo.UDF_MID_GET_NODE_DISPLAY (@inUseRID); ";

                sql += @" SELECT @type = TEXT_VALUE from APPLICATION_TEXT with (nolock) where TEXT_CODE = 200067; ";

                sql += @"INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT distinct @severity as Severity, ";
                sql += @" @nodeID as Header1, ";
                sql += @" @type as Header2, ";
                sql += @" m.METHOD_NAME as Heading3, ";
                sql += @" m.METHOD_DESCRIPTION as Heading4, ";
                sql += @" au.USER_NAME as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @" from METHOD_EXPORT t with (nolock) ";
                sql += @" join METHOD m with (nolock) on m.METHOD_RID = t.METHOD_RID ";
                sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = m.USER_RID ";
                sql += @" where t.HN_RID = @inUseRID')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /********************************************** ";
                sql += @" METHOD_FILL_SIZE_HOLES - GENCONSTRAINT_HN_RID ";
                sql += @" Enum: 27.18 ";
                sql += @" ***********************************************/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(27, 18, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'declare @nodeID varchar(200), @type varchar(100); ";

                sql += @" set @nodeID = dbo.UDF_MID_GET_NODE_DISPLAY (@inUseRID); ";

                sql += @" SELECT @type = TEXT_VALUE from APPLICATION_TEXT with (nolock) where TEXT_CODE = 200018; ";

                sql += @"INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT distinct @severity as Severity, ";
                sql += @" @nodeID as Header1, ";
                sql += @" @type as Header2, ";
                sql += @" m.METHOD_NAME as Heading3, ";
                sql += @" m.METHOD_DESCRIPTION as Heading4, ";
                sql += @" au.USER_NAME as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @" from METHOD_FILL_SIZE_HOLES t with (nolock) ";
                sql += @" join METHOD m with (nolock) on m.METHOD_RID = t.METHOD_RID ";
                sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = m.USER_RID ";
                sql += @" where t.GENCONSTRAINT_HN_RID = @inUseRID ";
                sql += @"    or t.GENCURVE_HN_RID = @inUseRID ";
                sql += @"    or t.IB_MERCH_HN_RID = @inUseRID ";
                sql += @"    or t.MERCH_HN_RID = @inUseRID')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /********************************************** ";
                sql += @" METHOD_GENERAL_ALLOCATION - MERCH_HN_RID ";
                sql += @" Enum: 27.19 ";
                sql += @" ***********************************************/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(27, 19, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'declare @nodeID varchar(200), @type varchar(100); ";

                sql += @" set @nodeID = dbo.UDF_MID_GET_NODE_DISPLAY (@inUseRID); ";

                sql += @" SELECT @type = TEXT_VALUE from APPLICATION_TEXT with (nolock) where TEXT_CODE = 200015; ";

                sql += @"INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT distinct @severity as Severity, ";
                sql += @" @nodeID as Header1, ";
                sql += @" @type as Header2, ";
                sql += @" m.METHOD_NAME as Heading3, ";
                sql += @" m.METHOD_DESCRIPTION as Heading4, ";
                sql += @" au.USER_NAME as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @" from METHOD_GENERAL_ALLOCATION t with (nolock) ";
                sql += @" join METHOD m with (nolock) on m.METHOD_RID = t.METHOD_RID ";
                sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = m.USER_RID ";
                sql += @" where t.MERCH_HN_RID = @inUseRID')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /********************************************** ";
                sql += @" METHOD_GLOBAL_LOCK - HN_RID ";
                sql += @" Enum: 27.20 ";
                sql += @" ***********************************************/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(27, 20, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'declare @nodeID varchar(200), @type varchar(100); ";

                sql += @" set @nodeID = dbo.UDF_MID_GET_NODE_DISPLAY (@inUseRID); ";

                sql += @" SELECT @type = TEXT_VALUE from APPLICATION_TEXT with (nolock) where TEXT_CODE = 200085; ";

                sql += @"INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT distinct @severity as Severity, ";
                sql += @" @nodeID as Header1, ";
                sql += @" @type as Header2, ";
                sql += @" m.METHOD_NAME as Heading3, ";
                sql += @" m.METHOD_DESCRIPTION as Heading4, ";
                sql += @" au.USER_NAME as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @" from METHOD_GLOBAL_LOCK t with (nolock) ";
                sql += @" join METHOD m with (nolock) on m.METHOD_RID = t.METHOD_RID ";
                sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = m.USER_RID ";
                sql += @" where t.HN_RID = @inUseRID')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /********************************************** ";
                sql += @" METHOD_GLOBAL_UNLOCK - HN_RID ";
                sql += @" Enum: 27.21 ";
                sql += @" ***********************************************/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(27, 21, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'declare @nodeID varchar(200), @type varchar(100); ";

                sql += @" set @nodeID = dbo.UDF_MID_GET_NODE_DISPLAY (@inUseRID); ";

                sql += @" SELECT @type = TEXT_VALUE from APPLICATION_TEXT with (nolock) where TEXT_CODE = 200077; ";

                sql += @"INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT distinct @severity as Severity, ";
                sql += @" @nodeID as Header1, ";
                sql += @" @type as Header2, ";
                sql += @" m.METHOD_NAME as Heading3, ";
                sql += @" m.METHOD_DESCRIPTION as Heading4, ";
                sql += @" au.USER_NAME as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @" from METHOD_GLOBAL_UNLOCK t with (nolock) ";
                sql += @" join METHOD m with (nolock) on m.METHOD_RID = t.METHOD_RID ";
                sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = m.USER_RID ";
                sql += @" where t.HN_RID = @inUseRID')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /********************************************** ";
                sql += @" METHOD_MATRIX - HN_RID ";
                sql += @" Enum: 27.22 ";
                sql += @" ***********************************************/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(27, 22, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'declare @nodeID varchar(200), @type varchar(100); ";

                sql += @" set @nodeID = dbo.UDF_MID_GET_NODE_DISPLAY (@inUseRID); ";

                sql += @" SELECT @type = TEXT_VALUE from APPLICATION_TEXT with (nolock) where TEXT_CODE = 200054; ";

                sql += @"INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT distinct @severity as Severity, ";
                sql += @" @nodeID as Header1, ";
                sql += @" @type as Header2, ";
                sql += @" m.METHOD_NAME as Heading3, ";
                sql += @" m.METHOD_DESCRIPTION as Heading4, ";
                sql += @" au.USER_NAME as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @" from METHOD_MATRIX t with (nolock) ";
                sql += @" join METHOD m with (nolock) on m.METHOD_RID = t.METHOD_RID ";
                sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = m.USER_RID ";
                sql += @" where t.HN_RID = @inUseRID')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /********************************************** ";
                sql += @" METHOD_MOD_SALES - HN_RID ";
                sql += @" Enum: 27.23 ";
                sql += @" ***********************************************/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(27, 23, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'declare @nodeID varchar(200), @type varchar(100); ";

                sql += @" set @nodeID = dbo.UDF_MID_GET_NODE_DISPLAY (@inUseRID); ";

                sql += @" SELECT @type = TEXT_VALUE from APPLICATION_TEXT with (nolock) where TEXT_CODE = 200068; ";

                sql += @"INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT distinct @severity as Severity, ";
                sql += @" @nodeID as Header1, ";
                sql += @" @type as Header2, ";
                sql += @" m.METHOD_NAME as Heading3, ";
                sql += @" m.METHOD_DESCRIPTION as Heading4, ";
                sql += @" au.USER_NAME as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @" from METHOD_MOD_SALES t with (nolock) ";
                sql += @" join METHOD m with (nolock) on m.METHOD_RID = t.METHOD_RID ";
                sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = m.USER_RID ";
                sql += @" where t.HN_RID = @inUseRID')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /********************************************** ";
                sql += @" METHOD_OVERRIDE - IB_MERCH_HN_RID ";
                sql += @" Enum: 27.24 ";
                sql += @" ***********************************************/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(27, 24, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'declare @nodeID varchar(200), @type varchar(100); ";

                sql += @" set @nodeID = dbo.UDF_MID_GET_NODE_DISPLAY (@inUseRID); ";

                sql += @" SELECT @type = TEXT_VALUE from APPLICATION_TEXT with (nolock) where TEXT_CODE = 200019; ";

                sql += @"INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT distinct @severity as Severity, ";
                sql += @" @nodeID as Header1, ";
                sql += @" @type as Header2, ";
                sql += @" m.METHOD_NAME as Heading3, ";
                sql += @" m.METHOD_DESCRIPTION as Heading4, ";
                sql += @" au.USER_NAME as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @" from METHOD_OVERRIDE t with (nolock) ";
                sql += @" join METHOD m with (nolock) on m.METHOD_RID = t.METHOD_RID ";
                sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = m.USER_RID ";
                sql += @" where t.IB_MERCH_HN_RID = @inUseRID ";
                sql += @"    or t.MERCH_HN_RID = @inUseRID ";
                sql += @"    or t.ON_HAND_HN_RID = @inUseRID')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /********************************************** ";
                sql += @" METHOD_ROLLUP - HN_RID ";
                sql += @" Enum: 27.25 ";
                sql += @" ***********************************************/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(27, 25, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'declare @nodeID varchar(200), @type varchar(100); ";

                sql += @" set @nodeID = dbo.UDF_MID_GET_NODE_DISPLAY (@inUseRID); ";

                sql += @" SELECT @type = TEXT_VALUE from APPLICATION_TEXT with (nolock) where TEXT_CODE = 200079; ";

                sql += @"INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT distinct @severity as Severity, ";
                sql += @" @nodeID as Header1, ";
                sql += @" @type as Header2, ";
                sql += @" m.METHOD_NAME as Heading3, ";
                sql += @" m.METHOD_DESCRIPTION as Heading4, ";
                sql += @" au.USER_NAME as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @" from METHOD_ROLLUP t with (nolock) ";
                sql += @" join METHOD m with (nolock) on m.METHOD_RID = t.METHOD_RID ";
                sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = m.USER_RID ";
                sql += @" where t.HN_RID = @inUseRID')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /********************************************** ";
                sql += @" METHOD_SIZE_BASIS_ALLOCATION - GENCONSTRAINT_HN_RID ";
                sql += @" Enum: 27.26 ";
                sql += @" ***********************************************/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(27, 26, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'declare @nodeID varchar(200), @type varchar(100); ";

                sql += @" set @nodeID = dbo.UDF_MID_GET_NODE_DISPLAY (@inUseRID); ";

                sql += @" SELECT @type = TEXT_VALUE from APPLICATION_TEXT with (nolock) where TEXT_CODE = 200042; ";

                sql += @"INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT distinct @severity as Severity, ";
                sql += @" @nodeID as Header1, ";
                sql += @" @type as Header2, ";
                sql += @" m.METHOD_NAME as Heading3, ";
                sql += @" m.METHOD_DESCRIPTION as Heading4, ";
                sql += @" au.USER_NAME as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @" from METHOD_SIZE_BASIS_ALLOCATION t with (nolock) ";
                sql += @" join METHOD m with (nolock) on m.METHOD_RID = t.METHOD_RID ";
                sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = m.USER_RID ";
                sql += @" where t.GENCONSTRAINT_HN_RID = @inUseRID ";
                sql += @"    or t.GENCURVE_HN_RID = @inUseRID')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /********************************************** ";
                sql += @" METHOD_SIZE_CURVE_MRCH_BAS_DET - HN_RID ";
                sql += @" Enum: 27.27 ";
                sql += @" ***********************************************/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(27, 27, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'declare @nodeID varchar(200), @type varchar(100); ";

                sql += @" set @nodeID = dbo.UDF_MID_GET_NODE_DISPLAY (@inUseRID); ";

                sql += @" SELECT @type = TEXT_VALUE from APPLICATION_TEXT with (nolock) where TEXT_CODE = 200082; ";

                sql += @"INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT distinct @severity as Severity, ";
                sql += @" @nodeID as Header1, ";
                sql += @" @type as Header2, ";
                sql += @" m.METHOD_NAME as Heading3, ";
                sql += @" m.METHOD_DESCRIPTION as Heading4, ";
                sql += @" au.USER_NAME as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @" from METHOD_SIZE_CURVE_MRCH_BAS_DET t with (nolock) ";
                sql += @" join METHOD m with (nolock) on m.METHOD_RID = t.METHOD_RID ";
                sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = m.USER_RID ";
                sql += @" where t.HN_RID = @inUseRID')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /********************************************** ";
                sql += @" METHOD_SIZE_NEED - GENCONSTRAINT_HN_RID ";
                sql += @" Enum: 27.28 ";
                sql += @" ***********************************************/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(27, 28, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'declare @nodeID varchar(200), @type varchar(100); ";

                sql += @" set @nodeID = dbo.UDF_MID_GET_NODE_DISPLAY (@inUseRID); ";

                sql += @" SELECT @type = TEXT_VALUE from APPLICATION_TEXT with (nolock) where TEXT_CODE = 200045; ";

                sql += @"INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT distinct @severity as Severity, ";
                sql += @" @nodeID as Header1, ";
                sql += @" @type as Header2, ";
                sql += @" m.METHOD_NAME as Heading3, ";
                sql += @" m.METHOD_DESCRIPTION as Heading4, ";
                sql += @" au.USER_NAME as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @" from METHOD_SIZE_NEED t with (nolock) ";
                sql += @" join METHOD m with (nolock) on m.METHOD_RID = t.METHOD_RID ";
                sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = m.USER_RID ";
                sql += @" where t.GENCONSTRAINT_HN_RID = @inUseRID ";
                sql += @"    or t.GENCURVE_HN_RID = @inUseRID ";
                sql += @"    or t.IB_MERCH_HN_RID = @inUseRID ";
                sql += @"    or t.MERCH_HN_RID = @inUseRID')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /********************************************** ";
                sql += @" METHOD_SPREAD_FORECAST - HN_RID ";
                sql += @" Enum: 27.29 ";
                sql += @" ***********************************************/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(27, 29, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'declare @nodeID varchar(200), @type varchar(100); ";

                sql += @" set @nodeID = dbo.UDF_MID_GET_NODE_DISPLAY (@inUseRID); ";

                sql += @" SELECT @type = TEXT_VALUE from APPLICATION_TEXT with (nolock) where TEXT_CODE = 200060; ";

                sql += @"INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT distinct @severity as Severity, ";
                sql += @" @nodeID as Header1, ";
                sql += @" @type as Header2, ";
                sql += @" m.METHOD_NAME as Heading3, ";
                sql += @" m.METHOD_DESCRIPTION as Heading4, ";
                sql += @" au.USER_NAME as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @" from METHOD_SPREAD_FORECAST t with (nolock) ";
                sql += @" join METHOD m with (nolock) on m.METHOD_RID = t.METHOD_RID ";
                sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = m.USER_RID ";
                sql += @" where t.HN_RID = @inUseRID')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /********************************************** ";
                sql += @" METHOD_VELOCITY - MERCH_HN_RID ";
                sql += @" Enum: 27.30 ";
                sql += @" ***********************************************/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(27, 30, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'declare @nodeID varchar(200), @type varchar(100); ";

                sql += @" set @nodeID = dbo.UDF_MID_GET_NODE_DISPLAY (@inUseRID); ";

                sql += @" SELECT @type = TEXT_VALUE from APPLICATION_TEXT with (nolock) where TEXT_CODE = 200020; ";

                sql += @"INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT distinct * from ";
                sql += @" (SELECT distinct @severity as Severity, ";
                sql += @" @nodeID as Header1, ";
                sql += @" @type as Header2, ";
                sql += @" m.METHOD_NAME as Heading3, ";
                sql += @" m.METHOD_DESCRIPTION as Heading4, ";
                sql += @" au.USER_NAME as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @" from METHOD_VELOCITY t with (nolock) ";
                sql += @" join METHOD m with (nolock) on m.METHOD_RID = t.METHOD_RID ";
                sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = m.USER_RID ";
                sql += @" where t.MERCH_HN_RID = @inUseRID ";
                sql += @"    or t.OTS_PLAN_HN_RID = @inUseRID ";
                sql += @" union ";
                sql += @" SELECT distinct @severity as Severity, ";
                sql += @" @nodeID as Header1, ";
                sql += @" @type as Header2, ";
                sql += @" m.METHOD_NAME as Heading3, ";
                sql += @" m.METHOD_DESCRIPTION as Heading4, ";
                sql += @" au.USER_NAME as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @" from METHOD_VELOCITY_BASIS t with (nolock) ";
                sql += @" join METHOD m with (nolock) on m.METHOD_RID = t.METHOD_RID ";
                sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = m.USER_RID ";
                sql += @" where t.BASIS_HN_RID = @inUseRID) x')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /********************************************** ";
                sql += @" OVERRIDE LL MODEL - HN_RID ";
                sql += @" Enum: 27.31 ";
                sql += @" ***********************************************/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(27, 31, 'Reference', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'declare @nodeID varchar(200), @type varchar(100); ";

                sql += @" set @nodeID = dbo.UDF_MID_GET_NODE_DISPLAY (@inUseRID); ";

                sql += @" SELECT @type = ''Override Low Level Model''; ";

                sql += @"INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT distinct * from ";
                sql += @" (SELECT @severity as Severity, ";
                sql += @" @nodeID as Header1, ";
                sql += @" @type as Header2, ";
                sql += @" h.NAME as Heading3, ";
                sql += @" '' '' as Heading4, ";
                sql += @" '' '' as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @" from OVERRIDE_LL_MODEL_DETAIL t with (nolock) ";
                sql += @" join OVERRIDE_LL_MODEL_HEADER h with (nolock) on h.OLL_RID = t.OLL_RID ";
                sql += @" where t.HN_RID = @inUseRID ";
                sql += @" union ";
                sql += @" SELECT @severity as Severity, ";
                sql += @" @nodeID as Header1, ";
                sql += @" @type as Header2, ";
                sql += @" t.NAME as Heading3, ";
                sql += @" '' '' as Heading4, ";
                sql += @" '' '' as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @" from OVERRIDE_LL_MODEL_HEADER t with (nolock) ";
                // Begin TT#4111 - agallagher - Low Level Model Error
                //sql += @" where t.HN_RID = @inUseRID ";
                //sql += @"    or t.HIGH_LEVEL_HN_RID = @inUseRID) x')) ";
                sql += @" where t.HN_RID = @inUseRID) x')) ";
                // End TT#4111 - agallagher - Low Level Model Error
                _dba.ExecuteNonQuery(sql);

                sql = @" /********************************************** ";
                sql += @" SECURITY - HN_RID ";
                sql += @" Enum: 27.32 ";
                sql += @" ***********************************************/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(27, 32, 'Reference', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'declare @nodeID varchar(200), @type varchar(100); ";

                sql += @" set @nodeID = dbo.UDF_MID_GET_NODE_DISPLAY (@inUseRID); ";

                sql += @" SELECT @type = TEXT_VALUE from APPLICATION_TEXT with (nolock) where TEXT_CODE = 900061; ";

                sql += @"INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT distinct * from ";
                sql += @" (SELECT distinct @severity as Severity, ";
                sql += @" @nodeID as Header1, ";
                sql += @" @type as Header2, ";
                sql += @" '' '' as Heading3, ";
                //BEGIN TT#4464-VSuart-In Use Security Query has user ID in wrong column-MID
                //sql += @" ug.GROUP_NAME as Heading4, ";
                //sql += @" '' '' as Header5, ";
                sql += @" '' '' as Heading4, ";
                sql += @" ug.GROUP_NAME as Header5, ";
                //END TT#4464-VSuart-In Use Security Query has user ID in wrong column-MID
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @" from SECURITY_GROUP_HIERARCHY_NODE t with (nolock) ";
                sql += @" join USER_GROUP ug with (nolock) on ug.GROUP_RID = ug.GROUP_RID ";
                sql += @" where t.HN_RID = @inUseRID ";
                sql += @" union ";
                sql += @" SELECT distinct @severity as Severity, ";
                sql += @" @nodeID as Header1, ";
                sql += @" @type as Header2, ";
                sql += @" '' '' as Heading3, ";
                //BEGIN TT#4464-VSuart-In Use Security Query has user ID in wrong column-MID
                //sql += @" au.USER_NAME as Heading4, ";
                //sql += @" '' '' as Header5, ";
                sql += @" '' '' as Heading4, ";
                sql += @" au.USER_NAME as Header5, ";
                //END TT#4464-VSuart-In Use Security Query has user ID in wrong column-MID
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @" from SECURITY_USER_HIERARCHY_NODE t with (nolock) ";
                sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = t.USER_RID ";
                sql += @" where t.HN_RID = @inUseRID) x')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /********************************************** ";
                sql += @" STORE_COMMITTED - HN_RID ";
                sql += @" Enum: 27.33 ";
                sql += @" ***********************************************/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(27, 33, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'declare @nodeID varchar(200), @type varchar(100); ";
                sql += @" set @nodeID = dbo.UDF_MID_GET_NODE_DISPLAY (@inUseRID); ";
                sql += @" SELECT @type = ''Store Committed''; ";
                sql += @"INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT top 1 @severity as Severity, ";
                sql += @"     @nodeID as Header1, ";
                sql += @" 	@type as Header2, ";
                sql += @" 	'' '' as Heading3, ";
                sql += @" 	'' '' as Heading4, ";
                sql += @" 	'' '' as Header5, ";
                sql += @" 	@severity AS Header6, ";
                sql += @" 	'' '' AS Heading7, ";
                sql += @" 	'' '' AS Heading8, ";
                sql += @" 	'' '' AS Heading9 ";
                sql += @" from STORE_COMMITTED t with (nolock) ";
                sql += @" where t.HN_RID = @inUseRID')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /********************************************** ";
                sql += @" STORE INTRANSIT	HN_RID ";
                sql += @" Enum: 27.34 ";
                sql += @" ***********************************************/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(27, 34, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'declare @nodeID varchar(200), @type varchar(100); ";

                sql += @" set @nodeID = dbo.UDF_MID_GET_NODE_DISPLAY (@inUseRID); ";

                sql += @" SELECT @type = TEXT_VALUE from APPLICATION_TEXT with (nolock) where TEXT_CODE = 900192; ";

                sql += @"INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT distinct * from ";
                sql += @" (SELECT distinct @severity as Severity, ";
                sql += @" @nodeID as Header1, ";
                sql += @" @type as Header2, ";
                sql += @" '' '' as Heading3, ";
                sql += @" '' '' as Heading4, ";
                sql += @" '' '' as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @" from STORE_EXTERNAL_INTRANSIT t with (nolock) ";
                sql += @" where t.HN_RID = @inUseRID ";
                sql += @" union ";
                sql += @" SELECT distinct @severity as Severity, ";
                sql += @" @nodeID as Header1, ";
                sql += @" @type as Header2, ";
                sql += @" '' '' as Heading3, ";
                sql += @" '' '' as Heading4, ";
                sql += @" '' '' as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @" from STORE_INTRANSIT t with (nolock) ";
                sql += @" where t.HN_RID = @inUseRID) x')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /********************************************** ";
                sql += @" STORE_FORECAST_WEEK - HN_RID ";
                sql += @" Enum: 27.35 ";
                sql += @" ***********************************************/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(27, 35, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'declare @nodeID varchar(200), @type varchar(100); ";

                sql += @" set @nodeID = dbo.UDF_MID_GET_NODE_DISPLAY (@inUseRID); ";

                sql += @" SELECT @type = ''Store Forecast''; ";

                sql += @"INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT distinct * from ";
                sql += @" (SELECT top 1 @severity as Severity, ";
                sql += @" @nodeID as Header1, ";
                sql += @" @type as Header2, ";
                sql += @" '' '' as Heading3, ";
                sql += @" '' '' as Heading4, ";
                sql += @" '' '' as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @" from STORE_FORECAST_WEEK_LOCK t with (nolock) ";
                sql += @" where t.HN_RID = @inUseRID ";
                sql += @" union ";
                sql += @" SELECT top 1 @severity as Severity, ";
                sql += @" @nodeID as Header1, ";
                sql += @" @type as Header2, ";
                sql += @" '' '' as Heading3, ";
                sql += @" '' '' as Heading4, ";
                sql += @" '' '' as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @" from VW_STORE_FORECAST_WEEK t with (nolock) ";
                sql += @" where t.HN_RID = @inUseRID) x')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /********************************************** ";
                sql += @" STORE_HISTORY_DAY - HN_RID ";
                sql += @" Enum: 27.36 ";
                sql += @" ***********************************************/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(27, 36, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'declare @nodeID varchar(200), @type varchar(100); ";

                sql += @" set @nodeID = dbo.UDF_MID_GET_NODE_DISPLAY (@inUseRID); ";

                sql += @" SELECT @type = ''Store Daily History''; ";

                sql += @"INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT distinct * from ";
                sql += @" (SELECT top 1 @severity as Severity, ";
                sql += @" @nodeID as Header1, ";
                sql += @" @type as Header2, ";
                sql += @" '' '' as Heading3, ";
                sql += @" '' '' as Heading4, ";
                sql += @" '' '' as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @" from VW_STORE_HISTORY_DAY t with (nolock) ";
                // Begin TT#739-MD - jsobek -Delete Stores
                sql += @" where t.HN_RID = @inUseRID ) x')) ";
                //sql += @" union ";
                //sql += @" SELECT top 1 @severity as Severity, ";
                //sql += @" @nodeID as Header1, ";
                //sql += @" @type as Header2, ";
                //sql += @" '' '' as Heading3, ";
                //sql += @" '' '' as Heading4, ";
                //sql += @" '' '' as Header5, ";
                //sql += @" @severity AS Header6, ";
                //sql += @" '' '' AS Heading7, ";
                //sql += @" '' '' AS Heading8, ";
                //sql += @" '' '' AS Heading9 ";
                //sql += @" from STORE_DAY_HISTORY_BIN t with (nolock) ";
                //sql += @" where t.HN_RID = @inUseRID) x')) ";
                // End TT#739-MD - jsobek -Delete Stores 
                _dba.ExecuteNonQuery(sql);

                sql = @" /********************************************** ";
                sql += @" STORE_HISTORY_WEEK - HN_RID ";
                sql += @" Enum: 27.37 ";
                sql += @" ***********************************************/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(27, 37, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'declare @nodeID varchar(200), @type varchar(100); ";
                sql += @" set @nodeID = dbo.UDF_MID_GET_NODE_DISPLAY (@inUseRID); ";

                sql += @" SELECT @type = ''Store Weekly History''; ";

                sql += @"INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT distinct * from ";
                sql += @" (SELECT top 1 @severity as Severity, ";
                sql += @" @nodeID as Header1, ";
                sql += @" @type as Header2, ";
                sql += @" '' '' as Heading3, ";
                sql += @" '' '' as Heading4, ";
                sql += @" '' '' as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @" from VW_STORE_HISTORY_WEEK t with (nolock) ";
                // Begin TT#739-MD - jsobek -Delete Stores 
                sql += @" where t.HN_RID = @inUseRID ) x')) ";
             
                //sql += @" union ";
                //sql += @" SELECT top 1 @severity as Severity, ";
                //sql += @" @nodeID as Header1, ";
                //sql += @" @type as Header2, ";
                //sql += @" '' '' as Heading3, ";
                //sql += @" '' '' as Heading4, ";
                //sql += @" '' '' as Header5, ";
                //sql += @" @severity AS Header6, ";
                //sql += @" '' '' AS Heading7, ";
                //sql += @" '' '' AS Heading8, ";
                //sql += @" '' '' AS Heading9 ";
                //sql += @" from STORE_WEEK_HISTORY_BIN t with (nolock) ";
                //sql += @" where t.HN_RID = @inUseRID) x')) ";
                // End TT#739-MD - jsobek -Delete Stores 
                _dba.ExecuteNonQuery(sql);

                sql = @" /********************************************** ";
                sql += @" TASK_ALLOCATE - HN_RID ";
                sql += @" Enum: 27.38 ";
                sql += @" ***********************************************/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(27, 38, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'declare @nodeID varchar(200), @type varchar(100); ";

                sql += @" set @nodeID = dbo.UDF_MID_GET_NODE_DISPLAY (@inUseRID); ";

                sql += @" SELECT @type = TEXT_VALUE + '' Tasklist'' ";
                sql += @" from APPLICATION_TEXT with (nolock) ";
                sql += @" where TEXT_CODE = 900276; ";

                sql += @"INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT distinct @severity as Severity, ";
                sql += @" @nodeID as Header1, ";
                sql += @" @type as Header2, ";
                sql += @" tl.TASKLIST_NAME as Heading3, ";
                sql += @" '' '' as Heading4, ";
                sql += @" au.USER_NAME as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @" from TASK_ALLOCATE t with (nolock) ";
                sql += @" join TASKLIST tl with (nolock) on tl.TASKLIST_RID = t.TASKLIST_RID ";
                sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = tl.USER_RID ";
                sql += @" where t.HN_RID = @inUseRID')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /********************************************** ";
                sql += @" TASK_FORECAST - HN_RID ";
                sql += @" Enum: 27.39 ";
                sql += @" ***********************************************/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(27, 39, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'declare @nodeID varchar(200), @type varchar(100); ";

                sql += @" set @nodeID = dbo.UDF_MID_GET_NODE_DISPLAY (@inUseRID); ";

                sql += @" SELECT @type = TEXT_VALUE + '' Tasklist'' from APPLICATION_TEXT with (nolock) where TEXT_CODE = 800410; ";

                sql += @"INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT distinct * from ";
                sql += @" (SELECT distinct @severity as Severity, ";
                sql += @" @nodeID as Header1, ";
                sql += @" @type as Header2, ";
                sql += @" tl.TASKLIST_NAME as Heading3, ";
                sql += @" '' '' as Heading4, ";
                sql += @" au.USER_NAME as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @" from TASK_FORECAST t with (nolock) ";
                sql += @" join TASKLIST tl with (nolock) on tl.TASKLIST_RID = t.TASKLIST_RID ";
                sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = tl.USER_RID ";
                sql += @" where t.HN_RID = @inUseRID ";
                sql += @" union ";
                sql += @" SELECT distinct @severity as Severity, ";
                sql += @" @nodeID as Header1, ";
                sql += @" @type as Header2, ";
                sql += @" tl.TASKLIST_NAME as Heading3, ";
                sql += @" '' '' as Heading4, ";
                sql += @" au.USER_NAME as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @" from TASK_FORECAST_BALANCE t with (nolock) ";
                sql += @" join TASKLIST tl with (nolock) on tl.TASKLIST_RID = t.TASKLIST_RID ";
                sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = tl.USER_RID ";
                sql += @" where t.HN_RID = @inUseRID) x')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /********************************************** ";
                sql += @" TASK_ROLLUP - HN_RID ";
                sql += @" Enum: 27.40 ";
                sql += @" ***********************************************/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(27, 40, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'declare @nodeID varchar(200), @type varchar(100); ";

                sql += @" set @nodeID = dbo.UDF_MID_GET_NODE_DISPLAY (@inUseRID); ";

                sql += @" SELECT @type = TEXT_VALUE + '' Tasklist'' from APPLICATION_TEXT with (nolock) where TEXT_CODE = 800411; ";

                sql += @"INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT distinct @severity as Severity, ";
                sql += @" @nodeID as Header1, ";
                sql += @" @type as Header2, ";
                sql += @" tl.TASKLIST_NAME as Heading3, ";
                sql += @" '' '' as Heading4, ";
                sql += @" au.USER_NAME as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @" from TASK_ROLLUP t with (nolock) ";
                sql += @" join TASKLIST tl with (nolock) on tl.TASKLIST_RID = t.TASKLIST_RID ";
                sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = tl.USER_RID ";
                sql += @" where t.HN_RID = @inUseRID')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /********************************************** ";
                sql += @" TASK_SIZE_CURVE_GENERATE - HN_RID ";
                sql += @" Enum: 27.41 ";
                sql += @" ***********************************************/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(27, 41, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'declare @nodeID varchar(200), @type varchar(100); ";

                sql += @" set @nodeID = dbo.UDF_MID_GET_NODE_DISPLAY (@inUseRID); ";

                sql += @" SELECT @type = TEXT_VALUE + '' Tasklist'' from APPLICATION_TEXT with (nolock) where TEXT_CODE = 800434; ";

                sql += @"INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT distinct @severity as Severity, ";
                sql += @" @nodeID as Header1, ";
                sql += @" @type as Header2, ";
                sql += @" tl.TASKLIST_NAME as Heading3, ";
                sql += @" '' '' as Heading4, ";
                sql += @" au.USER_NAME as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @" from TASK_SIZE_CURVE_GENERATE t with (nolock) ";
                sql += @" join TASKLIST tl with (nolock) on tl.TASKLIST_RID = t.TASKLIST_RID ";
                sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = tl.USER_RID ";
                sql += @" where t.HN_RID = @inUseRID')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /********************************************** ";
                sql += @" TASK_SIZE_DAY_TO_WEEK_SUMMARY - HN_RID ";
                sql += @" Enum: 27.42 ";
                sql += @" ***********************************************/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(27, 42, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'declare @nodeID varchar(200), @type varchar(100); ";

                sql += @" set @nodeID = dbo.UDF_MID_GET_NODE_DISPLAY (@inUseRID); ";

                sql += @" SELECT @type = TEXT_VALUE + '' Tasklist'' from APPLICATION_TEXT with (nolock) where TEXT_CODE = 800435; ";

                sql += @"INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT distinct @severity as Severity, ";
                sql += @" @nodeID as Header1, ";
                sql += @" @type as Header2, ";
                sql += @" tl.TASKLIST_NAME as Heading3, ";
                sql += @" '' '' as Heading4, ";
                sql += @" au.USER_NAME as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @" from TASK_SIZE_DAY_TO_WEEK_SUMMARY  t with (nolock) ";
                sql += @" join TASKLIST tl with (nolock) on tl.TASKLIST_RID = t.TASKLIST_RID ";
                sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = tl.USER_RID ";
                sql += @" where t.HN_RID = @inUseRID')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /********************************************** ";
                sql += @" USER_ALLOCATION - HN_RID ";
                sql += @" Enum: 27.43 ";
                sql += @" ***********************************************/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(27, 43, 'Reference', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'declare @nodeID varchar(200), @type varchar(100); ";
                sql += @" set @nodeID = dbo.UDF_MID_GET_NODE_DISPLAY (@inUseRID); ";

                sql += @" SELECT @type = ''Allocation Selection Criteria''; ";

                sql += @"INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT distinct * from ";
                sql += @" (SELECT @severity as Severity, ";
                sql += @" @nodeID as Header1, ";
                sql += @" @type as Header2, ";
                sql += @" '' '' as Heading3, ";
                sql += @" '' '' as Heading4, ";
                sql += @" au.USER_NAME as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @" from USER_ALLOCATION_BASIS t with (nolock) ";
                sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = t.USER_RID ";
                sql += @" where t.BASIS_HN_RID = @inUseRID ";
                sql += @" union ";
                sql += @" SELECT @severity as Severity, ";
                sql += @" @nodeID as Header1, ";
                sql += @" @type as Header2, ";
                sql += @" '' '' as Heading3, ";
                sql += @" '' '' as Heading4, ";
                sql += @" au.USER_NAME as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @" from USER_ALLOCATION t with (nolock) ";
                sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = t.USER_RID ";
                sql += @" where t.HN_RID = @inUseRID) x')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /********************************************** ";
                sql += @" USER_ASSORTMENT_BASIS - HN_RID ";
                sql += @" Enum: 27.44 ";
                sql += @" ***********************************************/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(27, 44, 'Reference', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'declare @nodeID varchar(200), @type varchar(100); ";
                sql += @" set @nodeID = dbo.UDF_MID_GET_NODE_DISPLAY (@inUseRID); ";

                sql += @" SELECT @type = ''Assortment Selection Criteria''; ";

                sql += @"INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT @severity as Severity, ";
                sql += @" @nodeID as Header1, ";
                sql += @" @type as Header2, ";
                sql += @" '' '' as Heading3, ";
                sql += @" '' '' as Heading4, ";
                sql += @" au.USER_NAME as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @" from USER_ASSORTMENT_BASIS t with (nolock) ";
                sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = t.USER_RID ";
                sql += @" where t.HN_RID = @inUseRID')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /********************************************** ";
                sql += @" USER_PLAN - CHAIN_HN_RID ";
                sql += @" Enum: 27.45 ";
                sql += @" ***********************************************/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(27, 45, 'Reference', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'declare @nodeID varchar(200), @type varchar(100); ";

                sql += @" set @nodeID = dbo.UDF_MID_GET_NODE_DISPLAY (@inUseRID); ";

                sql += @" SELECT @type = ''OTS Forecast Selection Criteria''; ";

                sql += @"INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT distinct * from ";
                sql += @" (SELECT @severity as Severity, ";
                sql += @" @nodeID as Header1, ";
                sql += @" @type as Header2, ";
                sql += @" '' '' as Heading3, ";
                sql += @" '' '' as Heading4, ";
                sql += @" au.USER_NAME as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @" from USER_PLAN_BASIS_DETAILS t with (nolock) ";
                sql += @" join USER_PLAN up with (nolock) on up.USER_RID = t.USER_RID ";
                sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = t.USER_RID ";
                sql += @" where t.HN_RID = @inUseRID ";
                sql += @" union ";
                sql += @" SELECT @severity as Severity, ";
                sql += @" @nodeID as Header1, ";
                sql += @" @type as Header2, ";
                sql += @" '' '' as Heading3, ";
                sql += @" '' '' as Heading4, ";
                sql += @" au.USER_NAME as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @" from USER_PLAN t with (nolock) ";
                sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = t.USER_RID ";
                sql += @" where t.CHAIN_HN_RID = @inUseRID ";
                sql += @"    or t.STORE_HN_RID = @inUseRID) x')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /********************************************** ";
                sql += @" VSW - HN_RID ";
                sql += @" Enum: 27.46 ";
                sql += @" ***********************************************/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(27, 46, 'Reference', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'declare @nodeID varchar(200), @type varchar(100); ";

                sql += @" set @nodeID = dbo.UDF_MID_GET_NODE_DISPLAY (@inUseRID); ";

                sql += @" SELECT @type = ''Virtual Store Warehouse''; ";

                sql += @"INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT distinct * from ";
                sql += @" (SELECT distinct @severity as Severity, ";
                sql += @" @nodeID as Header1, ";
                sql += @" @type as Header2, ";
                sql += @" '' '' as Heading3, ";
                sql += @" '' '' as Heading4, ";
                sql += @" '' '' as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @" from STORE_IMO t with (nolock) ";
                sql += @" where t.HN_RID = @inUseRID ";
                sql += @" union ";
                sql += @" SELECT distinct @severity as Severity, ";
                sql += @" @nodeID as Header1, ";
                sql += @" @type as Header2, ";
                sql += @" '' '' as Heading3, ";
                sql += @" '' '' as Heading4, ";
                sql += @" '' '' as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @" from STORE_IMO_REV t with (nolock) ";
                sql += @" where t.HN_RID = @inUseRID ";
                sql += @" union ";
                sql += @" SELECT distinct @severity as Severity, ";
                sql += @" @nodeID as Header1, ";
                sql += @" @type as Header2, ";
                sql += @" '' '' as Heading3, ";
                sql += @" '' '' as Heading4, ";
                sql += @" '' '' as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @" from VSW_REVERSE_ON_HAND t with (nolock) ";
                sql += @" where t.HN_RID = @inUseRID) x')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /********************************************** ";
                sql += @" IN_USE_FILTER_XREF - PROFILE_TYPE_RID ";
                sql += @" Enum: 27.47 ";
                sql += @" ***********************************************/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(27, 47, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'declare @nodeID varchar(200), @type varchar(100); ";

                sql += @" set @nodeID = dbo.UDF_MID_GET_NODE_DISPLAY (@inUseRID); ";

                sql += @" SELECT @type = TEXT_VALUE from APPLICATION_TEXT with (nolock) where TEXT_CODE = 900181; ";

                //Begin TT#1170-MD -jsobek -Remove Binary database objects and normalize the Filter definitions
                //sql += @"INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                //sql += @" SELECT @severity as Severity, ";
                //sql += @" @nodeID as Header1, ";
                //sql += @" @type as Header2, ";
                //sql += @" sf.STORE_FILTER_NAME as Heading3, ";
                //sql += @" '' '' as Heading4, ";
                //sql += @" au.USER_NAME as Header5, ";
                //sql += @" @severity AS Header6, ";
                //sql += @" '' '' AS Heading7, ";
                //sql += @" '' '' AS Heading8, ";
                //sql += @" '' '' AS Heading9 ";
                //sql += @" from IN_USE_FILTER_XREF t with (nolock) ";
                //sql += @" join STORE_FILTER sf with (nolock) on sf.STORE_FILTER_RID = t.FILTER_RID ";
                //sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = sf.USER_RID ";
                //sql += @" where t.PROFILE_TYPE_RID = @inUseRID ";
                //sql += @"   and t.PROFILE_TYPE = 27')) ";
                sql += @"INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT @severity as Severity, ";
                sql += @" @nodeID as Header1, ";
                sql += @" @type as Header2, ";
                sql += @" f.FILTER_NAME as Heading3, ";
                sql += @" '' '' as Heading4, ";
                sql += @" au.USER_NAME as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @" from FILTER_CONDITION fc with (nolock) ";
                sql += @" join FILTER f with (nolock) on f.FILTER_RID = fc.FILTER_RID ";
                sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = f.USER_RID ";
                sql += @" where fc.VAR1_HN_RID = @inUseRID OR fc.VAR2_HN_RID = @inUseRID OR fc.HEADER_HN_RID = @inUseRID";
                sql += @"   ')) ";
                //End TT#1170-MD -jsobek -Remove Binary database objects and normalize the Filter definitions
                _dba.ExecuteNonQuery(sql);

                sql = @" /********************************************** ";
                sql += @" HEADER SIZE NEED - In Use ";
                sql += @" Enum: 27.48 ";
                sql += @" ***********************************************/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(27, 48, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'declare @nodeID varchar(200), @type varchar(100) ";
                sql += @" declare @HN_TYPE int, @HOME_PH_RID int, @parentRID int, @grandParentRID int, @COLOR_CODE_RID int, @SIZE_CODE_RID int ";
                sql += @" set @nodeID = dbo.UDF_MID_GET_NODE_DISPLAY (@inUseRID) ";

                sql += @" SELECT @type = ''Header Size Need''; ";
                sql += @" SELECT @HN_TYPE = HN_TYPE, @HOME_PH_RID = HOME_PH_RID from dbo.HIERARCHY_NODE where HN_RID = @inUseRID ";

                sql += @" INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT top 1 @severity as Severity, ";
                sql += @" @nodeID as Header1, ";
                sql += @" @type as Header2, ";
                sql += @" '' ''  as Heading3, ";
                sql += @" '' '' as Heading4, ";
                sql += @" '' '' as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @" from HEADER_SIZE_NEED t with (nolock) ";
                sql += @" where t.HN_RID = @inUseRID ";
                sql += @"    or t.IB_MERCH_HN_RID = @inUseRID ";
                sql += @" union ";
                sql += @" SELECT top 1 @severity as Severity, ";
                sql += @" @nodeID as Header1, ";
                sql += @" @type as Header2, ";
                sql += @" '' ''  as Heading3, ";
                sql += @" '' '' as Heading4, ";
                sql += @" '' '' as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @" from HEADER_BULK_COLOR_SIZE_NEED t with (nolock) ";
                sql += @" where t.HN_RID = @inUseRID ";
                sql += @"    or t.IB_MERCH_HN_RID = @inUseRID')) ";
                _dba.ExecuteNonQuery(sql);

                // Begin TT#4111 - agallagher - Low Level Model Error
                sql = @" /********************************************** ";
                sql += @" OVERRIDE LL MODEL - HN_RID ";
                sql += @" Enum: 27.49 ";
                sql += @" ***********************************************/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(27, 49, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'declare @nodeID varchar(200), @type varchar(100); ";

                sql += @" set @nodeID = dbo.UDF_MID_GET_NODE_DISPLAY (@inUseRID); ";

                sql += @" SELECT @type = ''Override Low Level Model''; ";

                sql += @"INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT distinct * from ";
                sql += @" (SELECT @severity as Severity, ";
                sql += @" @nodeID as Header1, ";
                sql += @" @type as Header2, ";
                sql += @" t.NAME as Heading3, ";
                sql += @" '' '' as Heading4, ";
                sql += @" '' '' as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @" from OVERRIDE_LL_MODEL_HEADER t with (nolock) ";
                sql += @" where t.HIGH_LEVEL_HN_RID = @inUseRID) x')) ";
                _dba.ExecuteNonQuery(sql);
                // End TT#4111 - agallagher - Low Level Model Error

                // Begin TT#1966-MD - JSmith - DC Fulfillment
                sql = @" /********************************************** ";
                sql += @" METHOD_CREATE_MASTER_HEADERS_MERCHANDISE - HN_RID ";
                sql += @" Enum: 27.50 ";
                sql += @" ***********************************************/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(27, 50, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'declare @nodeID varchar(200), @type varchar(100); ";

                sql += @" set @nodeID = dbo.UDF_MID_GET_NODE_DISPLAY (@inUseRID); ";

                sql += @" SELECT @type = TEXT_VALUE from APPLICATION_TEXT with (nolock) where TEXT_CODE = 200092; ";

                sql += @"INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT distinct @severity as Severity, ";
                sql += @" @nodeID as Header1, ";
                sql += @" @type as Header2, ";
                sql += @" m.METHOD_NAME as Heading3, ";
                sql += @" m.METHOD_DESCRIPTION as Heading4, ";
                sql += @" au.USER_NAME as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @" from METHOD_CREATE_MASTER_HEADERS_MERCHANDISE t with (nolock) ";
                sql += @" join METHOD m with (nolock) on m.METHOD_RID = t.METHOD_RID ";
                sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = m.USER_RID ";
                sql += @" where t.HN_RID = @inUseRID')) ";
                _dba.ExecuteNonQuery(sql);
                // End TT#1966-MD - JSmith - DC Fulfillment

                // Begin TT#2131-MD - JSmith - Halo Integration
                sql = @" /********************************************** ";
                sql += @" METHOD_PLANNING_EXTRACT - HN_RID ";
                sql += @" Enum: 27.51 ";
                sql += @" ***********************************************/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(27, 51, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'declare @nodeID varchar(200), @type varchar(100); ";

                sql += @" set @nodeID = dbo.UDF_MID_GET_NODE_DISPLAY (@inUseRID); ";

                sql += @" SELECT @type = TEXT_VALUE from APPLICATION_TEXT with (nolock) where TEXT_CODE = 200094; ";

                sql += @"INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT distinct @severity as Severity, ";
                sql += @" @nodeID as Header1, ";
                sql += @" @type as Header2, ";
                sql += @" m.METHOD_NAME as Heading3, ";
                sql += @" m.METHOD_DESCRIPTION as Heading4, ";
                sql += @" au.USER_NAME as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @" from METHOD_PLANNING_EXTRACT t with (nolock) ";
                sql += @" join METHOD m with (nolock) on m.METHOD_RID = t.METHOD_RID ";
                sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = m.USER_RID ";
                sql += @" where t.HN_RID = @inUseRID')) ";
                _dba.ExecuteNonQuery(sql);
                // End TT#2131-MD - JSmith - Halo Integration

                sql = @" --============================================== ";
                sql += @" -- 'Header Query' ";
                sql += @" -- Enum 38.1 ";
                sql += @" --============================================== ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(38, 1, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT @severity as Severity, ";
                sql += @" 	 STORE_GROUP.SG_ID AS [Heading1] ";
                sql += @" 	 ,''Header'' AS [Heading2] ";
                sql += @" 	 ,HEADER.HDR_ID AS [Heading3] ";
                sql += @" 	 ,''System'' AS [Heading4] ";
                sql += @" 	 ,@severity AS [Heading5] ";
                sql += @" 	 , '' '' AS [Heading6] ";
                sql += @" 	 , '' '' AS [Heading7] ";
                sql += @" 	 , '' '' AS [Heading8] ";
                sql += @" 	 , '' '' AS [Heading9] ";
                sql += @"  FROM	STORE_GROUP with (nolock) INNER JOIN ";
                sql += @" 	HEADER with (nolock) ON HEADER.GRADE_SG_RID = STORE_GROUP.SG_RID ";
                sql += @"  WHERE STORE_GROUP.IS_ACTIVE=1 AND STORE_GROUP.SG_RID = @inUseRID ";
                sql += @"  ORDER BY [Heading3]')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" --============================================== ";
                sql += @" -- 'Assortment Query - ASSORTMENT_PROPERTIES' ";
                sql += @" -- Enum 38.2 ";
                sql += @" --============================================== ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(38, 2, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT @severity as Severity, ";
                sql += @" 	 STORE_GROUP.SG_ID AS [Heading1] ";
                sql += @" 	 ,''Assortment'' AS [Heading2] ";
                sql += @" 	 ,HEADER.HDR_ID AS [Heading3] ";
                sql += @" 	 ,APPLICATION_USER.USER_NAME AS [Heading4] ";
                sql += @" 	 ,@severity AS [Heading5] ";
                sql += @" 	 , '' '' AS [Heading6] ";
                sql += @" 	 , '' '' AS [Heading7] ";
                sql += @" 	 , '' '' AS [Heading8] ";
                sql += @" 	 , '' '' AS [Heading9] ";
                sql += @"  FROM	STORE_GROUP with (nolock) INNER JOIN ";
                sql += @" 	 ASSORTMENT_PROPERTIES with (nolock) ON ASSORTMENT_PROPERTIES.SG_RID = STORE_GROUP.SG_RID INNER JOIN ";
                sql += @" 	 HEADER ON HEADER.HDR_RID = ASSORTMENT_PROPERTIES.HDR_RID INNER JOIN ";
                sql += @" 	 APPLICATION_USER with (nolock) ON ASSORTMENT_PROPERTIES.USER_RID = APPLICATION_USER.USER_RID ";
                sql += @"  WHERE STORE_GROUP.IS_ACTIVE=1 AND ASSORTMENT_PROPERTIES.SG_RID = @inUseRID ";
                sql += @"  ORDER BY [Heading3]')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" --============================================== ";
                sql += @" -- 'Chain Set % - Merchandise Node Query ";
                sql += @" --  CHAIN_SET_PERCENT_USER' ";
                sql += @" -- Enum 38.3 ";
                sql += @" --============================================== ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(38, 3, 'Reference', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT @severity as Severity, ";
                sql += @" 	STORE_GROUP.SG_ID AS [Heading1] ";
                sql += @" 	, ''Chain Set % - Merchandise Node'' AS [Heading2] ";
                sql += @" 	, ''<Any Node>'' AS [Heading3] ";
                sql += @" 	, APPLICATION_USER.USER_NAME AS [Heading4] ";
                sql += @" 	, @severity AS [Heading5] ";
                sql += @" 	, '' '' AS [Heading6] ";
                sql += @" 	, '' '' AS [Heading7] ";
                sql += @" 	, '' '' AS [Heading8] ";
                sql += @" 	, '' '' AS [Heading9] ";
                sql += @"  FROM	STORE_GROUP with (nolock) INNER JOIN ";
                sql += @" 	 CHAIN_SET_PERCENT_USER with (nolock) ON CHAIN_SET_PERCENT_USER.SG_RID = STORE_GROUP.SG_RID INNER JOIN ";
                sql += @" 	 APPLICATION_USER with (nolock) ON CHAIN_SET_PERCENT_USER.USER_RID = APPLICATION_USER.USER_RID ";
                sql += @"  WHERE STORE_GROUP.IS_ACTIVE=1 AND CHAIN_SET_PERCENT_USER.SG_RID = @inUseRID ";
                sql += @"  ORDER BY [Heading3]')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" --============================================== ";
                sql += @" -- 'Daily Percentages - Merchandise Node Query ";
                sql += @" --  DAILY_PERCENTAGES_USER' ";
                sql += @" -- Enum 38.4 ";
                sql += @" --============================================== ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(38, 4, 'Reference', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT @severity as Severity, ";
                sql += @" 	STORE_GROUP.SG_ID AS [Heading1] ";
                sql += @" 	,''Daily Percentages - Merchandise Node'' AS [Heading2] ";
                sql += @" 	,''<Any Node>'' AS [Heading3] ";
                sql += @" 	,APPLICATION_USER.USER_NAME AS [Heading4] ";
                sql += @" 	,@severity AS [Heading5] ";
                sql += @" 	, '' '' AS [Heading6] ";
                sql += @" 	, '' '' AS [Heading7] ";
                sql += @" 	, '' '' AS [Heading8] ";
                sql += @" 	, '' '' AS [Heading9] ";
                sql += @"  FROM	STORE_GROUP with (nolock) INNER JOIN ";
                sql += @" 	DAILY_PERCENTAGES_USER with (nolock) ON DAILY_PERCENTAGES_USER.SG_RID = STORE_GROUP.SG_RID INNER JOIN ";
                sql += @" 	APPLICATION_USER with (nolock) ON DAILY_PERCENTAGES_USER.USER_RID = APPLICATION_USER.USER_RID ";
                sql += @"  WHERE STORE_GROUP.IS_ACTIVE=1 AND DAILY_PERCENTAGES_USER.SG_RID = @inUseRID ";
                sql += @"  ORDER BY [Heading3]')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" --============================================== ";
                sql += @" -- 'HEADER Query' ";
                sql += @" -- HIERARCHY_NODE ";
                sql += @" -- Enum 38.5 ";
                sql += @" --============================================== ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(38, 5, 'Reference', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT @severity as Severity ";
                sql += @" ,sg.SG_ID AS [Heading1] ";
                sql += @" ,''Stock Min/Max - Merchandise Node'' AS [Heading2] ";
                sql += @" ,(dbo.UDF_MID_GET_NODE_DISPLAY(hsg.HN_RID)) AS [Heading3] ";
                sql += @" , ''System'' AS [Heading4] ";
                sql += @" , @severity AS [Heading5] ";
                sql += @" , '''' AS [Heading6] ";
                sql += @" , '''' AS [Heading7] ";
                sql += @" , '''' AS [Heading8] ";
                sql += @" , '''' AS [Heading9] ";
                sql += @" FROM STORE_GROUP AS sg with (nolock) INNER JOIN ";
                sql += @" HIERARCHY_NODE AS hsg with (nolock) ON sg.SG_RID = hsg.STOCK_MIN_MAX_SG_RID ";
                sql += @" WHERE sg.IS_ACTIVE=1 AND hsg.STOCK_MIN_MAX_SG_RID = @inUseRID ";
                sql += @" ORDER BY [Heading3]')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" --============================================== ";
                sql += @" -- 'METHOD Query' ";
                sql += @" -- Enum 38.6 ";
                sql += @" --============================================== ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(38, 6, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT @severity as Severity, ";
                sql += @" 	STORE_GROUP.SG_ID AS [Heading1] ";
                sql += @" 	,(SELECT TEXT_VALUE + '' Method'' from APPLICATION_TEXT at where at.TEXT_CODE = METHOD.METHOD_TYPE_ID) AS [Heading2] ";
                sql += @" 	,METHOD.METHOD_NAME AS [Heading3] ";
                sql += @" 	,APPLICATION_USER.USER_NAME AS [Heading4] ";
                sql += @" 	,@severity AS [Heading5] ";
                sql += @" 	, '' '' AS [Heading6] ";
                sql += @" 	, '' '' AS [Heading7] ";
                sql += @" 	, '' '' AS [Heading8] ";
                sql += @" 	, '' '' AS [Heading9] ";
                sql += @"  FROM	STORE_GROUP with (nolock) INNER JOIN ";
                sql += @" 	 METHOD ON METHOD.SG_RID = STORE_GROUP.SG_RID INNER JOIN ";
                sql += @" 	 APPLICATION_USER with (nolock) ON METHOD.USER_RID = APPLICATION_USER.USER_RID ";
                sql += @"  WHERE STORE_GROUP.IS_ACTIVE=1 AND METHOD.SG_RID = @inUseRID ";
                sql += @"  ORDER BY [Heading2], [Heading3]')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" --============================================== ";
                sql += @" -- 'Allocation Override Method Query' ";
                sql += @" --  METHOD_OVERRIDE ";
                sql += @" -- Enum 38.7 ";
                sql += @" --============================================== ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(38, 7, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT @severity as Severity, ";
                sql += @" 	STORE_GROUP.SG_ID AS [Heading1] ";
                //BEGIN TT#542-MD-VStuart-Modifing In Use Type Fields for Methods to use Application Text
                //sql += @" 	,''Allocation Override Method'' AS [Heading2] ";
                sql += @" 	,(SELECT TEXT_VALUE + '' Method'' from APPLICATION_TEXT at where at.TEXT_CODE = METHOD.METHOD_TYPE_ID) AS [Heading2] ";
                //END   TT#542-MD-VStuart-Modifing In Use Type Fields for Methods to use Application Text
                sql += @" 	,METHOD.METHOD_NAME AS [Heading3] ";
                sql += @" 	,APPLICATION_USER.USER_NAME AS [Heading4] ";
                sql += @" 	,@severity AS [Heading5] ";
                sql += @" 	, '' '' AS [Heading6] ";
                sql += @" 	, '' '' AS [Heading7] ";
                sql += @" 	, '' '' AS [Heading8] ";
                sql += @" 	, '' '' AS [Heading9] ";
                sql += @"  FROM	STORE_GROUP with (nolock), ";
                sql += @" 	 METHOD_OVERRIDE with (nolock)  INNER JOIN ";
                sql += @" 	 METHOD with (nolock) ON METHOD.METHOD_RID = METHOD_OVERRIDE.METHOD_RID INNER JOIN ";
                sql += @" 	 APPLICATION_USER with (nolock) ON METHOD.USER_RID = APPLICATION_USER.USER_RID ";
                sql += @"  WHERE STORE_GROUP.IS_ACTIVE=1 AND STORE_GROUP.SG_RID = @inUseRID ";
                sql += @"  and (METHOD_OVERRIDE.SG_RID = @inUseRID ";
                sql += @"  or METHOD_OVERRIDE.IMO_SG_RID = @inUseRID ";
                sql += @"  or METHOD_OVERRIDE.STORE_GRADES_SG_RID = @inUseRID) ";
                sql += @"  ORDER BY [Heading3]')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" --============================================== ";
                sql += @" -- 'Size Curve Method Query' - METHOD_SIZE_CURVE ";
                sql += @" -- Enum 38.8 ";
                sql += @" --============================================== ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(38, 8, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT @severity as Severity, ";
                sql += @" 	STORE_GROUP.SG_ID AS [Heading1] ";
                //BEGIN TT#542-MD-VStuart-Modifing In Use Type Fields for Methods to use Application Text
                //sql += @" 	,''Size Curve Method'' AS [Heading2] ";
                sql += @" 	,(SELECT TEXT_VALUE + '' Method'' from APPLICATION_TEXT at where at.TEXT_CODE = METHOD.METHOD_TYPE_ID) AS [Heading2] ";
                //END   TT#542-MD-VStuart-Modifing In Use Type Fields for Methods to use Application Text
                sql += @" 	,METHOD.METHOD_NAME AS [Heading3] ";
                sql += @" 	,APPLICATION_USER.USER_NAME AS [Heading4] ";
                sql += @" 	,@severity AS [Heading5] ";
                sql += @" 	, '' '' AS [Heading6] ";
                sql += @" 	, '' '' AS [Heading7] ";
                sql += @" 	, '' '' AS [Heading8] ";
                sql += @" 	, '' '' AS [Heading9] ";
                sql += @"  FROM	STORE_GROUP with (nolock) INNER JOIN ";
                sql += @" 	 METHOD_SIZE_CURVE with (nolock) ON METHOD_SIZE_CURVE.SIZE_CURVES_BY_SG_RID = STORE_GROUP.SG_RID INNER JOIN ";
                sql += @" 	 METHOD ON METHOD.METHOD_RID = METHOD_SIZE_CURVE.METHOD_RID INNER JOIN ";
                sql += @" 	 APPLICATION_USER with (nolock) ON METHOD.USER_RID = APPLICATION_USER.USER_RID ";
                sql += @"  WHERE STORE_GROUP.IS_ACTIVE=1 AND METHOD_SIZE_CURVE.SIZE_CURVES_BY_SG_RID = @inUseRID ";
                sql += @"  ORDER BY [Heading3]')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" --============================================== ";
                sql += @" -- 'Velocity Method Query' - METHOD_VELOCITY ";
                sql += @" -- Enum 38.9 ";
                sql += @" --============================================== ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(38, 9, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT distinct * from ";
                sql += @" (SELECT @severity as Severity, ";
                sql += @" 	STORE_GROUP.SG_ID AS [Heading1] ";
                //BEGIN TT#542-MD-VStuart-Modifing In Use Type Fields for Methods to use Application Text
                //sql += @" 	,''Velocity Method'' AS [Heading2] ";
                sql += @" 	,(SELECT TEXT_VALUE + '' Method'' from APPLICATION_TEXT at where at.TEXT_CODE = METHOD.METHOD_TYPE_ID) AS [Heading2] ";
                //END   TT#542-MD-VStuart-Modifing In Use Type Fields for Methods to use Application Text
                sql += @" 	,METHOD.METHOD_NAME AS [Heading3] ";
                sql += @" 	,APPLICATION_USER.USER_NAME AS [Heading4] ";
                sql += @" 	,@severity AS [Heading5] ";
                sql += @" 	, '' '' AS [Heading6] ";
                sql += @" 	, '' '' AS [Heading7] ";
                sql += @" 	, '' '' AS [Heading8] ";
                sql += @" 	, '' '' AS [Heading9] ";
                sql += @"  FROM	STORE_GROUP with (nolock) INNER JOIN ";
                sql += @" 	 METHOD_VELOCITY with (nolock) ON METHOD_VELOCITY.SG_RID = STORE_GROUP.SG_RID INNER JOIN ";
                sql += @" 	 METHOD ON METHOD.METHOD_RID = METHOD_VELOCITY.METHOD_RID INNER JOIN ";
                sql += @" 	 APPLICATION_USER with (nolock) ON METHOD.USER_RID = APPLICATION_USER.USER_RID ";
                sql += @"  WHERE STORE_GROUP.IS_ACTIVE=1 AND METHOD_VELOCITY.SG_RID = @inUseRID ";
                sql += @"  union ";
                sql += @"  SELECT distinct ";
                sql += @" 	@severity as Severity ";
                sql += @" 	,(select sg.SG_ID from STORE_GROUP sg where sg.SG_RID = STORE_GROUP_LEVEL.SG_RID) AS [Heading1] ";
                sql += @" 	,''Velocity Method'' AS [Heading2] ";
                sql += @" 	,METHOD.METHOD_NAME AS [Heading3] ";
                sql += @" 	,APPLICATION_USER.USER_NAME AS [Heading4] ";
                sql += @" 	,@severity AS [Heading5] ";
                sql += @" 	, '' '' AS [Heading6] ";
                sql += @" 	, '' '' AS [Heading7] ";
                sql += @" 	, '' '' AS [Heading8] ";
                sql += @" 	, '' '' AS [Heading9] ";
                sql += @"  FROM	STORE_GROUP_LEVEL with (nolock) INNER JOIN ";
                sql += @" 	 METHOD_VELOCITY_GROUP_LEVEL with (nolock) ON METHOD_VELOCITY_GROUP_LEVEL.SGL_RID = STORE_GROUP_LEVEL.SGL_RID inner join ";
                sql += @" 	 METHOD ON METHOD.METHOD_RID = METHOD_VELOCITY_GROUP_LEVEL.METHOD_RID inner join ";
                sql += @" 	 APPLICATION_USER with (nolock) ON METHOD.USER_RID = APPLICATION_USER.USER_RID ";
                sql += @"  WHERE STORE_GROUP_LEVEL.IS_ACTIVE=1 AND METHOD_VELOCITY_GROUP_LEVEL.SGL_RID = @inUseRID ";
                sql += @"  union ";
                sql += @"  SELECT distinct ";
                sql += @" 	@severity as Severity ";
                sql += @" 	,(select sg.SG_ID from STORE_GROUP sg where sg.SG_RID = STORE_GROUP_LEVEL.SG_RID) AS [Heading1] ";
                //BEGIN TT#542-MD-VStuart-Modifing In Use Type Fields for Methods to use Application Text
                //sql += @" 	,''Velocity Method'' AS [Heading2] ";
                sql += @" 	,(SELECT TEXT_VALUE + '' Method'' from APPLICATION_TEXT at where at.TEXT_CODE = METHOD.METHOD_TYPE_ID) AS [Heading2] ";
                //END   TT#542-MD-VStuart-Modifing In Use Type Fields for Methods to use Application Text
                sql += @" 	,METHOD.METHOD_NAME AS [Heading3] ";
                sql += @" 	,APPLICATION_USER.USER_NAME AS [Heading4] ";
                sql += @" 	,@severity AS [Heading5] ";
                sql += @" 	, '' '' AS [Heading6] ";
                sql += @" 	, '' '' AS [Heading7] ";
                sql += @" 	, '' '' AS [Heading8] ";
                sql += @" 	, '' '' AS [Heading9] ";
                sql += @"  FROM	STORE_GROUP_LEVEL with (nolock) INNER JOIN ";
                sql += @" 	 METHOD_VELOCITY_MATRIX with (nolock) ON METHOD_VELOCITY_MATRIX.SGL_RID = STORE_GROUP_LEVEL.SGL_RID inner join ";
                sql += @" 	 METHOD ON METHOD.METHOD_RID = METHOD_VELOCITY_MATRIX.METHOD_RID inner join ";
                sql += @" 	 APPLICATION_USER with (nolock) ON METHOD.USER_RID = APPLICATION_USER.USER_RID ";
                sql += @"  WHERE STORE_GROUP_LEVEL.IS_ACTIVE=1 AND METHOD_VELOCITY_MATRIX.SGL_RID = @inUseRID) x ";
                sql += @"  ORDER BY [Heading3]')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" --============================================== ";
                sql += @" -- 'Size Curve - Merchandise Node Query' ";
                sql += @" -- NODE_SIZE_CURVE_CRITERIA_DETAIL ";
                sql += @" -- Enum 38.10 ";
                sql += @" --============================================== ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(38, 10, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT @severity as Severity ";
                sql += @" ,sg.SG_ID AS [Heading1] ";
                sql += @" ,''Size Curve - Merchandise Node'' AS [Heading2] ";
                sql += @" ,(dbo.UDF_MID_GET_NODE_DISPLAY(nscc.HN_RID)) AS [Heading3] ";
                sql += @" , ''System'' AS [Heading4] ";
                sql += @" , @severity AS [Heading5] ";
                sql += @" , '''' AS [Heading6] ";
                sql += @" , '''' AS [Heading7] ";
                sql += @" , '''' AS [Heading8] ";
                sql += @" , '''' AS [Heading9] ";
                sql += @" FROM STORE_GROUP AS sg with (nolock) INNER JOIN ";
                sql += @" NODE_SIZE_CURVE_CRITERIA_DETAIL AS nsccd with (nolock) ON sg.SG_RID = nsccd.SG_RID inner Join ";
                sql += @" NODE_SIZE_CURVE_CRITERIA AS nscc with (nolock) ON nscc.NSCCD_RID = nsccd.NSCCD_RID ";
                sql += @" WHERE sg.IS_ACTIVE=1 AND nsccd.SG_RID = @inUseRID ";
                sql += @" ORDER BY [Heading3]')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @"  --============================================== ";
                sql += @" -- 'Size Out of Stock - Merchandise Node Query' ";
                sql += @" -- NODE_SIZE_OUTOFSTOCK ";
                sql += @" -- Enum 38.11 ";
                sql += @" --============================================== ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(38, 11, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT @severity as Severity ";
                sql += @" ,sg.SG_ID AS [Heading1] ";
                sql += @" ,''Size Out of Stock - Merchandise Node'' AS [Heading2] ";
                sql += @" ,(dbo.UDF_MID_GET_NODE_DISPLAY(nso.HN_RID)) AS [Heading3] ";
                sql += @" , ''System'' AS [Heading4] ";
                sql += @" , @severity AS [Heading5] ";
                sql += @" , '''' AS [Heading6] ";
                sql += @" , '''' AS [Heading7] ";
                sql += @" , '''' AS [Heading8] ";
                sql += @" , '''' AS [Heading9] ";
                sql += @" FROM STORE_GROUP AS sg with (nolock) INNER JOIN ";
                sql += @" NODE_SIZE_OUTOFSTOCK AS nso with (nolock) ON sg.SG_RID = nso.SG_RID ";
                sql += @" WHERE sg.IS_ACTIVE=1 AND nso.SG_RID = @inUseRID ";
                sql += @" ORDER BY [Heading3]')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" --============================================== ";
                sql += @" -- 'Size Constraint Model Query' ";
                sql += @" -- SIZE_CONSTRAINT_MODEL ";
                sql += @" -- Enum 38.12 ";
                sql += @" --============================================== ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(38, 12, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT @severity as Severity, ";
                sql += @" 	STORE_GROUP.SG_ID AS [Heading1] ";
                sql += @" 	,''Size Constraint Model'' AS [Heading2] ";
                sql += @" 	,SIZE_CONSTRAINT_MODEL.SIZE_CONSTRAINT_NAME AS [Heading3] ";
                sql += @" 	,''System'' AS [Heading4] ";
                sql += @" 	,@severity AS [Heading5] ";
                sql += @" 	, '' '' AS [Heading6] ";
                sql += @" 	, '' '' AS [Heading7] ";
                sql += @" 	, '' '' AS [Heading8] ";
                sql += @" 	, '' '' AS [Heading9] ";
                sql += @" FROM	STORE_GROUP with (nolock) INNER JOIN ";
                sql += @" 	SIZE_CONSTRAINT_MODEL with (nolock) ON SIZE_CONSTRAINT_MODEL.SG_RID = STORE_GROUP.SG_RID ";
                sql += @" WHERE	STORE_GROUP.IS_ACTIVE=1 AND SIZE_CONSTRAINT_MODEL.SG_RID = @inUseRID ";
                sql += @" ORDER BY [Heading3]')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" --============================================== ";
                sql += @" -- 'Options Query' - SYSTEM_OPTIONS ";
                sql += @" -- Enum 38.13 ";
                sql += @" --============================================== ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(38, 13, 'Reference', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT @severity as Severity, ";
                sql += @" 	STORE_GROUP.SG_ID AS [Heading1] ";
                sql += @" 	,''Options'' AS [Heading2] ";
                sql += @" 	,''System Options'' AS [Heading3] ";
                sql += @" 	,''System'' AS [Heading4] ";
                sql += @" 	,@severity AS [Heading5] ";
                sql += @" 	, '' '' AS [Heading6] ";
                sql += @" 	, '' '' AS [Heading7] ";
                sql += @" 	, '' '' AS [Heading8] ";
                sql += @" 	, '' '' AS [Heading9] ";
                sql += @" FROM	STORE_GROUP with (nolock), SYSTEM_OPTIONS with (nolock) ";
                sql += @" WHERE	STORE_GROUP.IS_ACTIVE=1 AND STORE_GROUP.SG_RID = @inUseRID ";
                sql += @" 	and (SYSTEM_OPTIONS.DEFAULT_ALLOC_SG_RID = @inUseRID ";
                sql += @" 	or SYSTEM_OPTIONS.DEFAULT_OTS_SG_RID = @inUseRID) ";
                sql += @" ORDER BY [Heading3]')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" --============================================== ";
                sql += @" -- 'Allocation Selection Query' - USER_ALLOCATION ";
                sql += @" -- Enum 38.14 ";
                sql += @" --============================================== ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(38, 14, 'Reference', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT @severity as Severity, ";
                sql += @" 	STORE_GROUP.SG_ID AS [Heading1] ";
                sql += @" 	, ''Allocation Selection'' AS [Heading2] ";
                sql += @" 	, ''Allocation Selection'' AS [Heading3] ";
                sql += @" 	, APPLICATION_USER.USER_NAME AS [Heading4] ";
                sql += @" 	, @severity AS [Heading5] ";
                sql += @" 	, '' '' AS [Heading6] ";
                sql += @" 	, '' '' AS [Heading7] ";
                sql += @" 	, '' '' AS [Heading8] ";
                sql += @" 	, '' '' AS [Heading9] ";
                sql += @"  FROM	STORE_GROUP with (nolock) INNER JOIN ";
                sql += @" 	 USER_ALLOCATION with (nolock) ON USER_ALLOCATION.SG_RID = STORE_GROUP.SG_RID inner join ";
                sql += @" 	 APPLICATION_USER with (nolock) ON USER_ALLOCATION.USER_RID = APPLICATION_USER.USER_RID ";
                sql += @"  WHERE STORE_GROUP.IS_ACTIVE=1 AND USER_ALLOCATION.SG_RID = @inUseRID ";
                sql += @"  ORDER BY [Heading3]')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" --============================================== ";
                sql += @" -- 'Assortment Selection Query' - USER_ASSORTMENT ";
                sql += @" -- Enum 38.15 ";
                sql += @" --============================================== ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(38, 15, 'Reference', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT @severity as Severity, ";
                sql += @" 	STORE_GROUP.SG_ID AS [Heading1] ";
                sql += @" 	, ''Assortment Selection'' AS [Heading2] ";
                sql += @" 	, ''Assortment Selection'' AS [Heading3] ";
                sql += @" 	, APPLICATION_USER.USER_NAME AS [Heading4] ";
                sql += @" 	, @severity AS [Heading5] ";
                sql += @" 	, '' '' AS [Heading6] ";
                sql += @" 	, '' '' AS [Heading7] ";
                sql += @" 	, '' '' AS [Heading8] ";
                sql += @" 	, '' '' AS [Heading9] ";
                sql += @"  FROM	STORE_GROUP with (nolock) INNER JOIN ";
                sql += @" 	 USER_ASSORTMENT with (nolock) ON USER_ASSORTMENT.SG_RID = STORE_GROUP.SG_RID inner join ";
                sql += @" 	 APPLICATION_USER with (nolock) ON USER_ASSORTMENT.USER_RID = APPLICATION_USER.USER_RID ";
                sql += @"  WHERE STORE_GROUP.IS_ACTIVE=1 AND USER_ASSORTMENT.SG_RID = @inUseRID ";
                sql += @"  ORDER BY [Heading3]')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" --============================================== ";
                sql += @" -- 'OTS Plan Selection Query' - USER_PLAN ";
                sql += @" -- Enum 38.16 ";
                sql += @" --============================================== ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(38, 16, 'Reference', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT @severity as Severity, ";
                sql += @" 	STORE_GROUP.SG_ID AS [Heading1] ";
                sql += @" 	, ''OTS Plan Selection'' AS [Heading2] ";
                sql += @" 	, ''OTS Plan Selection'' AS [Heading3] ";
                sql += @" 	, APPLICATION_USER.USER_NAME AS [Heading4] ";
                sql += @" 	, @severity AS [Heading5] ";
                sql += @" 	, '' '' AS [Heading6] ";
                sql += @" 	, '' '' AS [Heading7] ";
                sql += @" 	, '' '' AS [Heading8] ";
                sql += @" 	, '' '' AS [Heading9] ";
                sql += @" FROM	STORE_GROUP with (nolock) INNER JOIN ";
                sql += @" 	USER_PLAN with (nolock) ON USER_PLAN.SG_RID = STORE_GROUP.SG_RID inner join ";
                sql += @" 	APPLICATION_USER with (nolock) ON USER_PLAN.USER_RID = APPLICATION_USER.USER_RID ";
                sql += @" WHERE	STORE_GROUP.IS_ACTIVE=1 AND USER_PLAN.SG_RID = @inUseRID ";
                sql += @" ORDER BY [Heading3]')) ";
                _dba.ExecuteNonQuery(sql);

                //BEGIN TT#591-MD-VStuart-Attribute and Set In Use by Filter is not displayed in correct columns
                //Begin TT#1170-MD -jsobek -Remove Binary database objects and normalize the Filter definitions
                //sql = @" /*==========================================*/ ";
                //sql += @" /* FILTER in use for STORE_GROUP (ATTIBUTE) */ ";
                //sql += @" -- Enum 38.17 ";
                //sql += @" /*==========================================*/ ";
                //sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                //sql += @" VALUES	(38, 17, 'In Use', ";
                //sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                //sql += @" SELECT @severity as Severity ";
                //sql += @" 	, sg.SG_ID as Header1 ";
                //sql += @" 	, (select TEXT_VALUE from APPLICATION_TEXT with (nolock) where TEXT_CODE = 900181) as Header2 ";
                //sql += @" 	, sf.STORE_FILTER_NAME as Heading3 ";
                //sql += @" 	, au.USER_NAME as Header4 ";
                //sql += @" 	, @severity AS Header5 ";
                //sql += @" 	, '' '' as Heading6 ";
                //sql += @" 	, '' '' AS Heading7 ";
                //sql += @" 	, '' '' AS Heading8 ";
                //sql += @" 	, '' '' AS Heading9 ";
                //sql += @" from IN_USE_FILTER_XREF t with (nolock) ";
                //sql += @" 	join STORE_FILTER sf with (nolock) on sf.STORE_FILTER_RID = t.FILTER_RID ";
                //sql += @" 	join STORE_GROUP sg with (nolock) on sg.SG_RID = t.PROFILE_TYPE_RID ";
                //sql += @" 	join APPLICATION_USER au with (nolock) on au.USER_RID = sf.USER_RID ";
                //sql += @" where t.PROFILE_TYPE_RID = @inUseRID ";
                //sql += @" ORDER BY Heading3')) ";
                sql = @" /*==========================================*/ ";
                sql += @" /* Store Filter in use for STORE_GROUP (ATTRIBUTE) */ ";
                sql += @" -- Enum 38.17 ";
                sql += @" /*==========================================*/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(38, 17, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT @severity as Severity ";
                sql += @" 	, sg.SG_ID as Header1 ";
                sql += @" 	, (select TEXT_VALUE from APPLICATION_TEXT with (nolock) where TEXT_CODE = 900181) as Header2 ";
                sql += @" 	, f.FILTER_NAME as Heading3 ";
                sql += @" 	, au.USER_NAME as Header4 ";
                sql += @" 	, @severity AS Header5 ";
                sql += @" 	, '' '' as Heading6 ";
                sql += @" 	, '' '' AS Heading7 ";
                sql += @" 	, '' '' AS Heading8 ";
                sql += @" 	, '' '' AS Heading9 ";
                sql += @" from FILTER_CONDITION fc with (nolock) ";
                sql += @" 	join FILTER f with (nolock) on f.FILTER_RID = fc.FILTER_RID ";
                sql += @" 	join STORE_GROUP sg with (nolock) on sg.SG_RID = fc.FIELD_INDEX AND sg.IS_ACTIVE=1 ";
                sql += @" 	join APPLICATION_USER au with (nolock) on au.USER_RID = f.USER_RID ";
                sql += @" where fc.ELEMENT_GROUP_TYPE_INDEX=22 AND fc.FIELD_INDEX = @inUseRID ";
                sql += @" ORDER BY Heading3')) ";
                //End TT#1170-MD -jsobek -Remove Binary database objects and normalize the Filter definitions
                _dba.ExecuteNonQuery(sql);
                //END  TT#591-MD-VStuart-Attribute and Set In Use by Filter is not displayed in correct columns

                //BEGIN TT#3813-VStuart-Object Reference Error when saving Store Profile-MID
//                sql = @" --=================================
//                    -- 'Store Group' 
//                    -- Enum 38.18
//                    -- This query identifies Store Groups still in use by Store Characteristics.
//                    --=================================
//                        INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT)
//                        VALUES (38, 18, 'Reference', 
//                        [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9)
//                        SELECT  @severity as Severity,
//	                    ''Store Group'' AS Heading1,
//	                    ''Store Characteristic'' AS Heading2,
//	                    scg.SCG_ID AS Heading3,
//	                    '' '' AS Heading4,
//	                    APPLICATION_USER.USER_FULLNAME AS Heading5,
//                        @severity AS Reference,
//	                    '' '' AS Heading7,
//	                    '' '' AS Heading8,
//	                    '' '' AS Heading9
//                    FROM STORE_DYNAMIC_GROUP_DESC AS sdgd
//                    INNER JOIN STORE_GROUP AS sg ON sdgd.SG_RID = sg.SG_RID
//                    INNER JOIN STORE_CHAR_GROUP AS scg ON sdgd.SDGD_CHAR_ID = scg.SCG_RID
//                    INNER JOIN APPLICATION_USER ON sg.USER_RID = APPLICATION_USER.USER_RID
//                    WHERE (sg.SG_RID = @inUseRID )')) ";
//                _dba.ExecuteNonQuery(sql);
//                sql = @" --=================================
//                    -- 'Store Group' 
//                    -- Enum 38.18
//                    -- This query identifies Store Groups still in use by Store Characteristics.
//                    --=================================
//                        INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT)
//                        VALUES (38, 18, 'Reference', 
//                        [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9)
//                        SELECT  @severity as Severity,
//	                    ''Store Group'' AS Heading1,
//	                    ''Store Characteristic'' AS Heading2,
//	                    (SELECT scg.SCG_ID FROM STORE_CHAR_GROUP scg WHERE scg.SCG_RID=@inUseRID) AS Heading3,
//	                    '' '' AS Heading4,
//	                    APPLICATION_USER.USER_FULLNAME AS Heading5,
//                        @severity AS Reference,
//	                    '' '' AS Heading7,
//	                    '' '' AS Heading8,
//	                    '' '' AS Heading9
//                    FROM STORE_GROUP AS sg    
//                    INNER JOIN FILTER f ON f.FILTER_RID=sg.FILTER_RID
//                    INNER JOIN APPLICATION_USER ON sg.USER_RID = APPLICATION_USER.USER_RID
//                    WHERE sg.IS_ACTIVE=1 AND (sg.SG_RID = @inUseRID ) ";
//                sql += @"AND f.FILTER_RID IN ";
//                sql += @"( ";
//                sql += @"   SELECT DISTINCT fc.FILTER_RID ";
//                sql += @"   FROM FILTER_CONDITION_LIST_VALUES lv WITH (NOLOCK) ";
//                sql += @"   INNER JOIN FILTER_CONDITION fc WITH (NOLOCK) ON fc.CONDITION_RID = lv.CONDITION_RID ";
//                sql += @"   INNER JOIN STORE_CHAR sc WITH (NOLOCK) ON sc.SC_RID = lv.LIST_VALUE_INDEX AND lv.LIST_VALUE_TYPE_INDEX = 5 AND sc.SCG_RID=@inUseRID";
//                sql += @" UNION ";
//                sql += @"   SELECT DISTINCT fc.FILTER_RID ";
//                sql += @"   FROM FILTER_CONDITION fc WITH (NOLOCK) ";
//                sql += @"   WHERE fc.ELEMENT_GROUP_TYPE_INDEX = 9 AND fc.FIELD_INDEX=@inUseRID ";
//                sql += @") ";
//                sql += @" 	')) ";
//                _dba.ExecuteNonQuery(sql);
                //END TT#3813-VStuart-Object Reference Error when saving Store Profile-MID

                // Begin TT#1705-MD - stodd - "In Use" is not functioning for DC Carton Rounding
                sql = @" --========================================================== ";
                sql += @" -- 'Options Query' - SYSTEM_OPTIONS - DC Carton Rounding";
                sql += @" -- Enum 38.19 ";
                sql += @" --========================================================= ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(38, 19, 'Reference', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT @severity as Severity, ";
                sql += @" 	STORE_GROUP.SG_ID AS [Heading1] ";
                sql += @" 	,''Options'' AS [Heading2] ";
                sql += @" 	,''System Options'' AS [Heading3] ";
                sql += @" 	,''System'' AS [Heading4] ";
                sql += @" 	,@severity AS [Heading5] ";
                sql += @" 	, '' '' AS [Heading6] ";
                sql += @" 	, '' '' AS [Heading7] ";
                sql += @" 	, '' '' AS [Heading8] ";
                sql += @" 	, '' '' AS [Heading9] ";
                sql += @" FROM	STORE_GROUP with (nolock), SYSTEM_OPTIONS with (nolock) ";
                sql += @" WHERE	STORE_GROUP.SG_RID = @inUseRID ";
                sql += @" 	and SYSTEM_OPTIONS.DC_CARTON_ROUNDING_SG_RID = @inUseRID ";
                sql += @" ORDER BY [Heading3]')) ";
                _dba.ExecuteNonQuery(sql);
                // End TT#1705-MD - stodd - "In Use" is not functioning for DC Carton Rounding

                // Begin TT#2131-MD - JSmith - Halo Integration
                sql = @" --============================================== ";
                sql += @" -- 'Attribute Query' - METHOD_PLANNING_EXTRACT ";
                sql += @" -- Enum 38.20 ";
                sql += @" --============================================== ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(38, 20, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT @severity as Severity, ";
                sql += @" 	STORE_GROUP.SG_ID AS [Heading1] ";
                sql += @" 	,(SELECT TEXT_VALUE + '' Method'' from APPLICATION_TEXT at where at.TEXT_CODE = METHOD.METHOD_TYPE_ID) AS [Heading2] ";
                sql += @" 	,METHOD.METHOD_NAME AS [Heading3] ";
                sql += @" 	,APPLICATION_USER.USER_NAME AS [Heading4] ";
                sql += @" 	,@severity AS [Heading5] ";
                sql += @" 	, '' '' AS [Heading6] ";
                sql += @" 	, '' '' AS [Heading7] ";
                sql += @" 	, '' '' AS [Heading8] ";
                sql += @" 	, '' '' AS [Heading9] ";
                sql += @"  FROM	STORE_GROUP with (nolock) INNER JOIN ";
                sql += @" 	 METHOD_PLANNING_EXTRACT with (nolock) ON METHOD_PLANNING_EXTRACT.ATTRIBUTE_RID = STORE_GROUP.SG_RID INNER JOIN ";
                sql += @" 	 METHOD ON METHOD.METHOD_RID = METHOD_PLANNING_EXTRACT.METHOD_RID INNER JOIN ";
                sql += @" 	 APPLICATION_USER with (nolock) ON METHOD.USER_RID = APPLICATION_USER.USER_RID ";
                sql += @"  WHERE STORE_GROUP.IS_ACTIVE=1 AND METHOD_PLANNING_EXTRACT.ATTRIBUTE_RID = @inUseRID ";
                sql += @"  ORDER BY [Heading3]')) ";
                _dba.ExecuteNonQuery(sql);
                // End TT#2131-MD - JSmith - Halo Integration

                sql = @" /*================================*/ ";
                sql += @" /*  ASSORTMENT_MATRIX_DETAIL      */ ";
                sql += @" /*  Enum 39.1                 	  */ ";
                sql += @" /*================================*/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(39, 1, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT distinct ";
                sql += @" 	 @severity as Severity ";
                sql += @" 	 ,STORE_GROUP_LEVEL.SGL_ID AS [Heading1] ";
                sql += @" 	 ,(select sg.SG_ID from STORE_GROUP sg where sg.SG_RID = STORE_GROUP_LEVEL.SG_RID) AS [Heading2] ";
                sql += @" 	 ,''Assortment'' AS [Heading3] ";
                sql += @" 	 ,HEADER.HDR_ID AS [Heading4] ";
                sql += @" 	 ,''System'' AS [Heading5] ";
                sql += @" 	 ,@severity AS [Heading6] ";
                sql += @" 	 , '' '' AS [Heading7] ";
                sql += @" 	 , '' '' AS [Heading8] ";
                sql += @" 	 , '' '' AS [Heading9] ";
                sql += @"  FROM	STORE_GROUP_LEVEL with (nolock) INNER JOIN ";
                sql += @" 	 ASSORTMENT_MATRIX_DETAIL with (nolock) ON ASSORTMENT_MATRIX_DETAIL.SGL_RID = STORE_GROUP_LEVEL.SGL_RID inner join ";
                sql += @" 	 HEADER with (nolock) ON HEADER.HDR_RID = ASSORTMENT_MATRIX_DETAIL.HDR_RID ";
                sql += @"  WHERE STORE_GROUP_LEVEL.IS_ACTIVE=1 AND ASSORTMENT_MATRIX_DETAIL.SGL_RID = @inUseRID ";
                sql += @" 	ORDER BY [Heading4]')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /*================================*/ ";
                sql += @" /*  ASSORTMENT_STYLE_CLOSED       */ ";
                sql += @" /*  Enum 39.2                 	  */ ";
                sql += @" /*================================*/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(39, 2, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT distinct ";
                sql += @" 	 @severity as Severity ";
                sql += @" 	 ,STORE_GROUP_LEVEL.SGL_ID AS [Heading1] ";
                sql += @" 	 ,(select sg.SG_ID from STORE_GROUP sg where sg.SG_RID = STORE_GROUP_LEVEL.SG_RID) AS [Heading2] ";
                sql += @" 	 ,''Assortment'' AS [Heading3] ";
                sql += @" 	 ,HEADER.HDR_ID AS [Heading4] ";
                sql += @" 	 ,''System'' AS [Heading5] ";
                sql += @" 	 ,@severity AS [Heading6] ";
                sql += @" 	 , '' '' AS [Heading7] ";
                sql += @" 	 , '' '' AS [Heading8] ";
                sql += @" 	 , '' '' AS [Heading9] ";
                sql += @"  FROM	STORE_GROUP_LEVEL with (nolock) INNER JOIN ";
                sql += @" 	 ASSORTMENT_STYLE_CLOSED with (nolock) ON ASSORTMENT_STYLE_CLOSED.SGL_RID = STORE_GROUP_LEVEL.SGL_RID inner join ";
                sql += @" 	 HEADER with (nolock) ON HEADER.HDR_RID = ASSORTMENT_STYLE_CLOSED.HDR_RID ";
                sql += @"  WHERE STORE_GROUP_LEVEL.IS_ACTIVE=1 AND ASSORTMENT_STYLE_CLOSED.SGL_RID = @inUseRID ";
                sql += @" 	ORDER BY [Heading4]')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /*================================*/ ";
                sql += @" /*  CHAIN_SET_PERCENT_SET         */ ";
                sql += @" /*  Enum 39.3                 	  */ ";
                sql += @" /*================================*/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(39, 3, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT ";
                sql += @" 	@severity as Severity ";
                sql += @" 	,STORE_GROUP_LEVEL.SGL_ID AS [Heading1] ";
                sql += @" 	,(select sg.SG_ID from STORE_GROUP sg where sg.SG_RID = STORE_GROUP_LEVEL.SG_RID) AS [Heading2] ";
                sql += @" 	,''Chain Set % - Merchandise Node'' AS [Heading3] ";
                sql += @" 	,(select ";
                sql += @" 		case hn.HN_TYPE ";
                sql += @" 			when 800203 then cn.STYLE_NODE_ID + ''\'' + cc.COLOR_CODE_ID ";
                sql += @" 			when 800204 then sn.STYLE_NODE_ID + ''\'' + sn.COLOR_NODE_ID + ''\'' + sc.SIZE_CODE_ID ";
                sql += @" 			else bn.BN_ID ";
                sql += @" 		end ";
                sql += @" 	from HIERARCHY_NODE hn with (nolock) ";
                sql += @" 	left outer join BASE_NODE bn with (nolock) on bn.HN_RID = hn.HN_RID ";
                sql += @" 	left outer join COLOR_NODE cn with (nolock) on cn.HN_RID = hn.HN_RID ";
                sql += @" 	left outer join COLOR_CODE cc with (nolock) on cc.COLOR_CODE_RID = cn.COLOR_CODE_RID ";
                sql += @" 	left outer join SIZE_NODE sn with (nolock) on sn.HN_RID = hn.HN_RID ";
                sql += @" 	left outer join SIZE_CODE sc with (nolock) on sc.SIZE_CODE_RID = sn.SIZE_CODE_RID ";
                sql += @" 	where  hn.HN_RID = HIERARCHY_NODE.HN_RID) ";
                sql += @" 	AS [Heading4] ";
                sql += @" 	,''System'' AS [Heading5] ";
                sql += @" 	,@severity AS [Heading6] ";
                sql += @" 	, '' '' AS [Heading7] ";
                sql += @" 	, '' '' AS [Heading8] ";
                sql += @" 	, '' '' AS [Heading9] ";
                sql += @"  FROM	STORE_GROUP_LEVEL with (nolock) INNER JOIN ";
                sql += @" 	 CHAIN_SET_PERCENT_SET with (nolock) ON CHAIN_SET_PERCENT_SET.SGL_RID = STORE_GROUP_LEVEL.SGL_RID inner join ";
                sql += @" 	 HIERARCHY_NODE with (nolock) ON CHAIN_SET_PERCENT_SET.HN_RID = HIERARCHY_NODE.HN_RID ";
                sql += @"  WHERE STORE_GROUP_LEVEL.IS_ACTIVE=1 AND CHAIN_SET_PERCENT_SET.SGL_RID = @inUseRID ";
                sql += @" 	 ORDER BY [Heading4]')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /*================================*/ ";
                sql += @" /*  GROUP_LEVEL_BASIS             */ ";
                sql += @" /*  Enum 39.4                 	  */ ";
                sql += @" /*================================*/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(39, 4, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT distinct ";
                sql += @" 	@severity as Severity ";
                sql += @" 	,STORE_GROUP_LEVEL.SGL_ID AS [Heading1] ";
                sql += @" 	,(select sg.SG_ID from STORE_GROUP sg where sg.SG_RID = STORE_GROUP_LEVEL.SG_RID) AS [Heading2] ";
                //BEGIN TT#542-MD-VStuart-Modifing In Use Type Fields for Methods to use Application Text
                //sql += @" 	,''Forecast Method'' AS [Heading3] ";
                sql += @" 	,(SELECT TEXT_VALUE + '' Method'' from APPLICATION_TEXT at where at.TEXT_CODE = METHOD.METHOD_TYPE_ID) AS [Heading3] ";
                //END   TT#542-MD-VStuart-Modifing In Use Type Fields for Methods to use Application Text
                sql += @" 	,METHOD.METHOD_NAME AS [Heading4] ";
                sql += @" 	,APPLICATION_USER.USER_NAME AS [Heading5] ";
                sql += @" 	,@severity AS [Heading6] ";
                sql += @" 	, '' '' AS [Heading7] ";
                sql += @" 	, '' '' AS [Heading8] ";
                sql += @" 	, '' '' AS [Heading9] ";
                sql += @"  FROM	STORE_GROUP_LEVEL with (nolock) INNER JOIN ";
                sql += @" 	 GROUP_LEVEL_BASIS with (nolock) ON GROUP_LEVEL_BASIS.SGL_RID = STORE_GROUP_LEVEL.SGL_RID inner join ";
                sql += @" 	 METHOD with (nolock) ON METHOD.METHOD_RID = GROUP_LEVEL_BASIS.METHOD_RID inner join ";
                sql += @" 	 APPLICATION_USER with (nolock) ON METHOD.USER_RID = APPLICATION_USER.USER_RID ";
                sql += @"  WHERE STORE_GROUP_LEVEL.IS_ACTIVE=1 AND GROUP_LEVEL_BASIS.SGL_RID = @inUseRID ";
                sql += @" 	ORDER BY [Heading4]')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /*================================*/ ";
                sql += @" /*  GROUP_LEVEL_FUNCTION          */ ";
                sql += @" /*  Enum 39.5                 	  */ ";
                sql += @" /*================================*/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(39, 5, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT distinct ";
                sql += @" 	 @severity as Severity ";
                sql += @" 	 ,STORE_GROUP_LEVEL.SGL_ID AS [Heading1] ";
                sql += @" 	 ,(select sg.SG_ID from STORE_GROUP sg where sg.SG_RID = STORE_GROUP_LEVEL.SG_RID) AS [Heading2] ";
                //BEGIN TT#542-MD-VStuart-Modifing In Use Type Fields for Methods to use Application Text
                //sql += @" 	 ,''Forecast Method'' AS [Heading3] ";
                sql += @" 	,(SELECT TEXT_VALUE + '' Method'' from APPLICATION_TEXT at where at.TEXT_CODE = METHOD.METHOD_TYPE_ID) AS [Heading3] ";
                //END   TT#542-MD-VStuart-Modifing In Use Type Fields for Methods to use Application Text
                sql += @" 	 ,METHOD.METHOD_NAME AS [Heading4] ";
                sql += @" 	 ,APPLICATION_USER.USER_NAME AS [Heading5] ";
                sql += @" 	 ,@severity AS [Heading6] ";
                sql += @" 	 , '' '' AS [Heading7] ";
                sql += @" 	 , '' '' AS [Heading8] ";
                sql += @" 	 , '' '' AS [Heading9] ";
                sql += @"  FROM	STORE_GROUP_LEVEL with (nolock) INNER JOIN ";
                sql += @" 	 GROUP_LEVEL_FUNCTION with (nolock) ON GROUP_LEVEL_FUNCTION.SGL_RID = STORE_GROUP_LEVEL.SGL_RID inner join ";
                sql += @" 	 METHOD ON METHOD.METHOD_RID = GROUP_LEVEL_FUNCTION.METHOD_RID inner join ";
                sql += @" 	 APPLICATION_USER with (nolock) ON METHOD.USER_RID = APPLICATION_USER.USER_RID ";
                sql += @"  WHERE STORE_GROUP_LEVEL.IS_ACTIVE=1 AND GROUP_LEVEL_FUNCTION.SGL_RID = @inUseRID ";
                sql += @" 	ORDER BY [Heading4]')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /*================================*/ ";
                sql += @" /*  GROUP_LEVEL_NODE_FUNCTION     */ ";
                sql += @" /*  Enum 39.6                 	  */ ";
                sql += @" /*================================*/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(39, 6, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT distinct ";
                sql += @" 	@severity as Severity ";
                sql += @" 	,STORE_GROUP_LEVEL.SGL_ID AS [Heading1] ";
                sql += @" 	,(select sg.SG_ID from STORE_GROUP sg where sg.SG_RID = STORE_GROUP_LEVEL.SG_RID) AS [Heading2] ";
                //BEGIN TT#542-MD-VStuart-Modifing In Use Type Fields for Methods to use Application Text
                //sql += @" 	,''Forecast Method'' AS [Heading3] ";
                sql += @" 	,(SELECT TEXT_VALUE + '' Method'' from APPLICATION_TEXT at where at.TEXT_CODE = METHOD.METHOD_TYPE_ID) AS [Heading3] ";
                //END   TT#542-MD-VStuart-Modifing In Use Type Fields for Methods to use Application Text
                sql += @" 	,METHOD.METHOD_NAME AS [Heading4] ";
                sql += @" 	,APPLICATION_USER.USER_NAME AS [Heading5] ";
                sql += @" 	,@severity AS [Heading6] ";
                sql += @" 	, '' '' AS [Heading7] ";
                sql += @" 	, '' '' AS [Heading8] ";
                sql += @" 	, '' '' AS [Heading9] ";
                sql += @"  FROM	STORE_GROUP_LEVEL with (nolock) INNER JOIN ";
                sql += @" 	 GROUP_LEVEL_NODE_FUNCTION with (nolock) ON GROUP_LEVEL_NODE_FUNCTION.SGL_RID = STORE_GROUP_LEVEL.SGL_RID inner join ";
                sql += @" 	 METHOD with (nolock) ON METHOD.METHOD_RID = GROUP_LEVEL_NODE_FUNCTION.METHOD_RID inner join ";
                sql += @" 	 APPLICATION_USER with (nolock) ON METHOD.USER_RID = APPLICATION_USER.USER_RID ";
                sql += @"  WHERE STORE_GROUP_LEVEL.IS_ACTIVE=1 AND GROUP_LEVEL_NODE_FUNCTION.SGL_RID = @inUseRID ";
                sql += @" 	 ORDER BY [Heading4]')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /*================================*/ ";
                sql += @" /*  HEADER_STORE_GRADE_VALUES     */ ";
                sql += @" /*  Enum 39.7                 	  */ ";
                sql += @" /*================================*/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(39, 7, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT distinct ";
                sql += @" 	 @severity as Severity ";
                sql += @" 	 ,STORE_GROUP_LEVEL.SGL_ID AS [Heading1] ";
                sql += @" 	 ,(select sg.SG_ID from STORE_GROUP sg where sg.SG_RID = STORE_GROUP_LEVEL.SG_RID) AS [Heading2] ";
                sql += @" 	 ,''Header Store Grade Values'' AS [Heading3] ";
                sql += @" 	 ,HEADER.HDR_ID AS [Heading4] ";
                sql += @" 	 ,''System'' AS [Heading5] ";
                sql += @" 	 ,@severity AS [Heading6] ";
                sql += @" 	 , '' '' AS [Heading7] ";
                sql += @" 	 , '' '' AS [Heading8] ";
                sql += @" 	 , '' '' AS [Heading9] ";
                sql += @"  FROM	STORE_GROUP_LEVEL with (nolock) INNER JOIN ";
                sql += @" 	 HEADER_STORE_GRADE_VALUES with (nolock) ON HEADER_STORE_GRADE_VALUES.SGL_RID = STORE_GROUP_LEVEL.SGL_RID inner join ";
                sql += @" 	 HEADER ON HEADER.HDR_RID = HEADER_STORE_GRADE_VALUES.HDR_RID ";
                sql += @"  WHERE STORE_GROUP_LEVEL.IS_ACTIVE=1 AND HEADER_STORE_GRADE_VALUES.SGL_RID = @inUseRID ";
                sql += @" 	ORDER BY [Heading4]')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /*================================*/ ";
                sql += @" /*  METHOD_COPY_BASIS_DETAIL      */ ";
                sql += @" /*  Enum 39.8                 	  */ ";
                sql += @" /*================================*/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(39, 8, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT distinct ";
                sql += @" 	 @severity as Severity ";
                sql += @" 	 ,STORE_GROUP_LEVEL.SGL_ID AS [Heading1] ";
                sql += @" 	 ,(select sg.SG_ID from STORE_GROUP sg where sg.SG_RID = STORE_GROUP_LEVEL.SG_RID) AS [Heading2] ";
                //BEGIN TT#542-MD-VStuart-Modifing In Use Type Fields for Methods to use Application Text
                //sql += @" 	 ,''Forecast Copy'' AS [Heading3] ";
                sql += @" 	,(SELECT TEXT_VALUE + '' Method'' from APPLICATION_TEXT at where at.TEXT_CODE = METHOD.METHOD_TYPE_ID) AS [Heading3] ";
                //END   TT#542-MD-VStuart-Modifing In Use Type Fields for Methods to use Application Text
                sql += @" 	 ,METHOD.METHOD_NAME AS [Heading4] ";
                sql += @" 	 ,APPLICATION_USER.USER_NAME AS [Heading5] ";
                sql += @" 	 ,@severity AS [Heading6] ";
                sql += @" 	 , '' '' AS [Heading7] ";
                sql += @" 	 , '' '' AS [Heading8] ";
                sql += @" 	 , '' '' AS [Heading9] ";
                sql += @"  FROM	STORE_GROUP_LEVEL with (nolock) INNER JOIN ";
                sql += @" 	 METHOD_COPY_BASIS_DETAIL with (nolock) ON METHOD_COPY_BASIS_DETAIL.SGL_RID = STORE_GROUP_LEVEL.SGL_RID inner join ";
                sql += @" 	 METHOD with (nolock) ON METHOD.METHOD_RID = METHOD_COPY_BASIS_DETAIL.METHOD_RID inner join ";
                sql += @" 	 APPLICATION_USER with (nolock) ON METHOD.USER_RID = APPLICATION_USER.USER_RID ";
                sql += @"  WHERE STORE_GROUP_LEVEL.IS_ACTIVE=1 AND METHOD_COPY_BASIS_DETAIL.SGL_RID = @inUseRID ";
                sql += @" 	ORDER BY [Heading4]')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /*================================*/ ";
                sql += @" /*  METHOD_COPY_GROUP_LEVEL       */ ";
                sql += @" /*  Enum 39.9                 	  */ ";
                sql += @" /*================================*/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(39, 9, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT distinct ";
                sql += @" 	 @severity as Severity ";
                sql += @" 	 ,STORE_GROUP_LEVEL.SGL_ID AS [Heading1] ";
                sql += @" 	 ,(select sg.SG_ID from STORE_GROUP sg where sg.SG_RID = STORE_GROUP_LEVEL.SG_RID) AS [Heading2] ";
                //BEGIN TT#542-MD-VStuart-Modifing In Use Type Fields for Methods to use Application Text
                //sql += @" 	 ,''Forecast Copy'' AS [Heading3] ";
                sql += @" 	,(SELECT TEXT_VALUE + '' Method'' from APPLICATION_TEXT at where at.TEXT_CODE = METHOD.METHOD_TYPE_ID) AS [Heading3] ";
                //END   TT#542-MD-VStuart-Modifing In Use Type Fields for Methods to use Application Text
                sql += @" 	 ,METHOD.METHOD_NAME AS [Heading4] ";
                sql += @" 	 ,APPLICATION_USER.USER_NAME AS [Heading5] ";
                sql += @" 	 ,@severity AS [Heading6] ";
                sql += @" 	 , '' '' AS [Heading7] ";
                sql += @" 	 , '' '' AS [Heading8] ";
                sql += @" 	 , '' '' AS [Heading9] ";
                sql += @"  FROM	STORE_GROUP_LEVEL with (nolock) INNER JOIN ";
                sql += @" 	 METHOD_COPY_GROUP_LEVEL with (nolock) ON METHOD_COPY_GROUP_LEVEL.SGL_RID = STORE_GROUP_LEVEL.SGL_RID inner join ";
                sql += @" 	 METHOD with (nolock) ON METHOD.METHOD_RID = METHOD_COPY_GROUP_LEVEL.METHOD_RID inner join ";
                sql += @" 	 APPLICATION_USER with (nolock) ON METHOD.USER_RID = APPLICATION_USER.USER_RID ";
                sql += @"  WHERE STORE_GROUP_LEVEL.IS_ACTIVE=1 AND METHOD_COPY_GROUP_LEVEL.SGL_RID = @inUseRID ";
                sql += @" 	 ORDER BY [Heading4]')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /*==================================*/ ";
                sql += @" /*  METHOD_COPY_GLOBAL_LOCK_GRP_LVL */ ";
                sql += @" /*  Enum 39.10                 	    */ ";
                sql += @" /*==================================*/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(39, 10, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT distinct ";
                sql += @" 	 @severity as Severity ";
                sql += @" 	 ,STORE_GROUP_LEVEL.SGL_ID AS [Heading1] ";
                sql += @" 	 ,(select sg.SG_ID from STORE_GROUP sg where sg.SG_RID = STORE_GROUP_LEVEL.SG_RID) AS [Heading2] ";
                //BEGIN TT#542-MD-VStuart-Modifing In Use Type Fields for Methods to use Application Text
                //sql += @" 	 ,''Global Lock Method'' AS [Heading3] ";
                sql += @" 	,(SELECT TEXT_VALUE + '' Method'' from APPLICATION_TEXT at where at.TEXT_CODE = METHOD.METHOD_TYPE_ID) AS [Heading3] ";
                //END   TT#542-MD-VStuart-Modifing In Use Type Fields for Methods to use Application Text
                sql += @" 	 ,METHOD.METHOD_NAME AS [Heading4] ";
                sql += @" 	 ,APPLICATION_USER.USER_NAME AS [Heading5] ";
                sql += @" 	 ,@severity AS [Heading6] ";
                sql += @" 	 , '' '' AS [Heading7] ";
                sql += @" 	 , '' '' AS [Heading8] ";
                sql += @" 	 , '' '' AS [Heading9] ";
                sql += @"  FROM	STORE_GROUP_LEVEL with (nolock) INNER JOIN ";
                sql += @" 	 METHOD_GLOBAL_LOCK_GRP_LVL with (nolock) ON METHOD_GLOBAL_LOCK_GRP_LVL.SGL_RID = STORE_GROUP_LEVEL.SGL_RID inner join ";
                sql += @" 	 METHOD with (nolock) ON METHOD.METHOD_RID = METHOD_GLOBAL_LOCK_GRP_LVL.METHOD_RID inner join ";
                sql += @" 	 APPLICATION_USER with (nolock) ON METHOD.USER_RID = APPLICATION_USER.USER_RID ";
                sql += @"  WHERE STORE_GROUP_LEVEL.IS_ACTIVE=1 AND METHOD_GLOBAL_LOCK_GRP_LVL.SGL_RID = @inUseRID ";
                sql += @" 	ORDER BY [Heading4]')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @"  /*================================*/ ";
                sql += @" /*  METHOD_COPY_GLOBAL_UNLOCK_GRP_LVL*/ ";
                sql += @" /*  Enum 39.11                 	  */ ";
                sql += @" /*================================*/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(39, 11, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT distinct ";
                sql += @" 	 @severity as Severity ";
                sql += @" 	 ,STORE_GROUP_LEVEL.SGL_ID AS [Heading1] ";
                sql += @" 	 ,(select sg.SG_ID from STORE_GROUP sg where sg.SG_RID = STORE_GROUP_LEVEL.SG_RID) AS [Heading2] ";
                //BEGIN TT#542-MD-VStuart-Modifing In Use Type Fields for Methods to use Application Text
                //sql += @" 	 ,''Global Unlock Method'' AS [Heading3] ";
                sql += @" 	,(SELECT TEXT_VALUE + '' Method'' from APPLICATION_TEXT at where at.TEXT_CODE = METHOD.METHOD_TYPE_ID) AS [Heading3] ";
                //END   TT#542-MD-VStuart-Modifing In Use Type Fields for Methods to use Application Text
                sql += @" 	 ,METHOD.METHOD_NAME AS [Heading4] ";
                sql += @" 	 ,APPLICATION_USER.USER_NAME AS [Heading5] ";
                sql += @" 	 ,@severity AS [Heading6] ";
                sql += @" 	 , '' '' AS [Heading7] ";
                sql += @" 	 , '' '' AS [Heading8] ";
                sql += @" 	 , '' '' AS [Heading9] ";
                sql += @"  FROM	STORE_GROUP_LEVEL with (nolock) INNER JOIN ";
                sql += @" 	 METHOD_GLOBAL_UNLOCK_GRP_LVL with (nolock) ON METHOD_GLOBAL_UNLOCK_GRP_LVL.SGL_RID = STORE_GROUP_LEVEL.SGL_RID inner join ";
                sql += @" 	 METHOD with (nolock) ON METHOD.METHOD_RID = METHOD_GLOBAL_UNLOCK_GRP_LVL.METHOD_RID inner join ";
                sql += @" 	 APPLICATION_USER with (nolock) ON METHOD.USER_RID = APPLICATION_USER.USER_RID ";
                sql += @"  WHERE STORE_GROUP_LEVEL.IS_ACTIVE=1 AND METHOD_GLOBAL_UNLOCK_GRP_LVL.SGL_RID = @inUseRID ";
                sql += @" 	ORDER BY [Heading4]')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /*================================*/ ";
                sql += @" /*  METHOD_MOD_SALES_MATRIX       */ ";
                sql += @" /*  Enum 39.12                 	  */ ";
                sql += @" /*================================*/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(39, 12, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT distinct ";
                sql += @" 	 @severity as Severity ";
                sql += @" 	 ,STORE_GROUP_LEVEL.SGL_ID AS [Heading1] ";
                sql += @" 	 ,(select sg.SG_ID from STORE_GROUP sg where sg.SG_RID = STORE_GROUP_LEVEL.SG_RID) AS [Heading2] ";
                //BEGIN TT#542-MD-VStuart-Modifing In Use Type Fields for Methods to use Application Text
                //BEGIN TT#493-MD-VStuart-Modify Sales Method does not display
                //sql += @" 	 ,''Sales Matrix Method'' AS [Heading3] ";
                //sql += @" 	 ,''Modify Sales Method'' AS [Heading3] ";
                //END TT#493-MD-VStuart-Modify Sales Method does not display
                sql += @" 	,(SELECT TEXT_VALUE + '' Method'' from APPLICATION_TEXT at where at.TEXT_CODE = METHOD.METHOD_TYPE_ID) AS [Heading3] ";
                //END   TT#542-MD-VStuart-Modifing In Use Type Fields for Methods to use Application Text
                sql += @" 	 ,METHOD.METHOD_NAME AS [Heading4] ";
                sql += @" 	 ,APPLICATION_USER.USER_NAME AS [Heading5] ";
                sql += @" 	 ,@severity AS [Heading6] ";
                sql += @" 	 , '' '' AS [Heading7] ";
                sql += @" 	 , '' '' AS [Heading8] ";
                sql += @" 	 , '' '' AS [Heading9] ";
                sql += @"  FROM	STORE_GROUP_LEVEL with (nolock) INNER JOIN ";
                sql += @" 	 METHOD_MOD_SALES_MATRIX with (nolock) ON METHOD_MOD_SALES_MATRIX.SGL_RID = STORE_GROUP_LEVEL.SGL_RID inner join ";
                sql += @" 	 METHOD with (nolock) ON METHOD.METHOD_RID = METHOD_MOD_SALES_MATRIX.METHOD_RID inner join ";
                sql += @" 	 APPLICATION_USER with (nolock) ON METHOD.USER_RID = APPLICATION_USER.USER_RID ";
                sql += @"  WHERE STORE_GROUP_LEVEL.IS_ACTIVE=1 AND METHOD_MOD_SALES_MATRIX.SGL_RID = @inUseRID ";
                sql += @" 	ORDER BY [Heading4]')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /*================================*/ ";
                sql += @" /*  METHOD_OVERRIDE_CAPACITY       */ ";
                sql += @" /*  Enum 39.13                 	  */ ";
                sql += @" /*================================*/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(39, 13, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT distinct ";
                sql += @" 	@severity as Severity ";
                sql += @" 	,STORE_GROUP_LEVEL.SGL_ID AS [Heading1] ";
                sql += @" 	,(select sg.SG_ID from STORE_GROUP sg where sg.SG_RID = STORE_GROUP_LEVEL.SG_RID) AS [Heading2] ";
                //BEGIN TT#542-MD-VStuart-Modifing In Use Type Fields for Methods to use Application Text
                //sql += @" 	,''Override Method'' AS [Heading3] ";
                sql += @" 	,(SELECT TEXT_VALUE + '' Method'' from APPLICATION_TEXT at where at.TEXT_CODE = METHOD.METHOD_TYPE_ID) AS [Heading3] ";
                //END   TT#542-MD-VStuart-Modifing In Use Type Fields for Methods to use Application Text
                sql += @" 	,METHOD.METHOD_NAME AS [Heading4] ";
                sql += @" 	,APPLICATION_USER.USER_NAME AS [Heading5] ";
                sql += @" 	,@severity AS [Heading6] ";
                sql += @" 	, '' '' AS [Heading7] ";
                sql += @" 	, '' '' AS [Heading8] ";
                sql += @" 	, '' '' AS [Heading9] ";
                sql += @"  FROM	STORE_GROUP_LEVEL with (nolock) INNER JOIN ";
                sql += @" 	 METHOD_OVERRIDE_CAPACITY with (nolock) ON METHOD_OVERRIDE_CAPACITY.SGL_RID = STORE_GROUP_LEVEL.SGL_RID inner join ";
                sql += @" 	 METHOD with (nolock) ON METHOD.METHOD_RID = METHOD_OVERRIDE_CAPACITY.METHOD_RID inner join ";
                sql += @" 	 APPLICATION_USER with (nolock) ON METHOD.USER_RID = APPLICATION_USER.USER_RID ";
                sql += @"  WHERE STORE_GROUP_LEVEL.IS_ACTIVE=1 AND METHOD_OVERRIDE_CAPACITY.SGL_RID= @inUseRID ";
                sql += @" 	ORDER BY [Heading4]')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @"  /*================================*/ ";
                sql += @" /*  METHOD_OVERRIDE_STORE_GRADES_VALUES    */ ";
                sql += @" /*  Enum 39.14                 	  */ ";
                sql += @" /*================================*/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(39, 14, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT distinct ";
                sql += @" 	@severity as Severity ";
                sql += @" 	,STORE_GROUP_LEVEL.SGL_ID AS [Heading1] ";
                sql += @" 	,(select sg.SG_ID from STORE_GROUP sg where sg.SG_RID = STORE_GROUP_LEVEL.SG_RID) AS [Heading2] ";
                //BEGIN TT#542-MD-VStuart-Modifing In Use Type Fields for Methods to use Application Text
                //sql += @" 	,''Override Method'' AS [Heading3] ";
                sql += @" 	,(SELECT TEXT_VALUE + '' Method'' from APPLICATION_TEXT at where at.TEXT_CODE = METHOD.METHOD_TYPE_ID) AS [Heading3] ";
                //END   TT#542-MD-VStuart-Modifing In Use Type Fields for Methods to use Application Text
                sql += @" 	,METHOD.METHOD_NAME AS [Heading4] ";
                sql += @" 	,APPLICATION_USER.USER_NAME AS [Heading5] ";
                sql += @" 	,@severity AS [Heading6] ";
                sql += @" 	, '' '' AS [Heading7] ";
                sql += @" 	, '' '' AS [Heading8] ";
                sql += @" 	, '' '' AS [Heading9] ";
                sql += @"  FROM	STORE_GROUP_LEVEL with (nolock) INNER JOIN ";
                sql += @" 	 METHOD_OVERRIDE_STORE_GRADES_VALUES with (nolock) ON METHOD_OVERRIDE_STORE_GRADES_VALUES.SGL_RID = STORE_GROUP_LEVEL.SGL_RID inner join ";
                sql += @" 	 METHOD with (nolock) ON METHOD.METHOD_RID = METHOD_OVERRIDE_STORE_GRADES_VALUES.METHOD_RID inner join ";
                sql += @" 	 APPLICATION_USER with (nolock) ON METHOD.USER_RID = APPLICATION_USER.USER_RID ";
                sql += @"  WHERE STORE_GROUP_LEVEL.IS_ACTIVE=1 AND METHOD_OVERRIDE_STORE_GRADES_VALUES.SGL_RID = @inUseRID ";
                sql += @" 	ORDER BY [Heading4]')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /*================================*/ ";
                sql += @" /*  METHOD_RULE                   */ ";
                sql += @" /*  Enum 39.15                 	  */ ";
                sql += @" /*================================*/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(39, 15, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT distinct ";
                sql += @" 	@severity as Severity ";
                sql += @" 	,STORE_GROUP_LEVEL.SGL_ID AS [Heading1] ";
                sql += @" 	,(select sg.SG_ID from STORE_GROUP sg where sg.SG_RID = STORE_GROUP_LEVEL.SG_RID) AS [Heading2] ";
                //BEGIN TT#542-MD-VStuart-Modifing In Use Type Fields for Methods to use Application Text
                //sql += @" 	,''Rule Method'' AS [Heading3] ";
                sql += @" 	,(SELECT TEXT_VALUE + '' Method'' from APPLICATION_TEXT at where at.TEXT_CODE = METHOD.METHOD_TYPE_ID) AS [Heading3] ";
                //END   TT#542-MD-VStuart-Modifing In Use Type Fields for Methods to use Application Text
                sql += @" 	,METHOD.METHOD_NAME AS [Heading4] ";
                sql += @" 	,APPLICATION_USER.USER_NAME AS [Heading5] ";
                sql += @" 	,@severity AS [Heading6] ";
                sql += @" 	, '' '' AS [Heading7] ";
                sql += @" 	, '' '' AS [Heading8] ";
                sql += @" 	, '' '' AS [Heading9] ";
                sql += @"  FROM	STORE_GROUP_LEVEL with (nolock) INNER JOIN ";
                sql += @" 	 METHOD_RULE with (nolock) ON METHOD_RULE.SGL_RID = STORE_GROUP_LEVEL.SGL_RID inner join ";
                sql += @" 	 METHOD with (nolock) ON METHOD.METHOD_RID = METHOD_RULE.METHOD_RID inner join ";
                sql += @" 	 APPLICATION_USER with (nolock) ON METHOD.USER_RID = APPLICATION_USER.USER_RID ";
                sql += @"  WHERE STORE_GROUP_LEVEL.IS_ACTIVE=1 AND METHOD_RULE.SGL_RID = @inUseRID ";
                sql += @" 	ORDER BY [Heading4]')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @"  /*================================*/ ";
                sql += @" /*  METHOD_VELOCITY_GROUP_LEVEL                   */ ";
                sql += @" /*  Enum 39.16                 	  */ ";
                sql += @" /*================================*/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(39, 16, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT distinct ";
                sql += @" 	@severity as Severity ";
                sql += @" 	,STORE_GROUP_LEVEL.SGL_ID AS [Heading1] ";
                sql += @" 	,(select sg.SG_ID from STORE_GROUP sg where sg.SG_RID = STORE_GROUP_LEVEL.SG_RID) AS [Heading2] ";
                //BEGIN TT#542-MD-VStuart-Modifing In Use Type Fields for Methods to use Application Text
                //sql += @" 	,''Velocity Method'' AS [Heading3] ";
                sql += @" 	,(SELECT TEXT_VALUE + '' Method'' from APPLICATION_TEXT at where at.TEXT_CODE = METHOD.METHOD_TYPE_ID) AS [Heading3] ";
                //END   TT#542-MD-VStuart-Modifing In Use Type Fields for Methods to use Application Text
                sql += @" 	,METHOD.METHOD_NAME AS [Heading4] ";
                sql += @" 	,APPLICATION_USER.USER_NAME AS [Heading5] ";
                sql += @" 	,@severity AS [Heading6] ";
                sql += @" 	, '' '' AS [Heading7] ";
                sql += @" 	, '' '' AS [Heading8] ";
                sql += @" 	, '' '' AS [Heading9] ";
                sql += @"  FROM	STORE_GROUP_LEVEL with (nolock) INNER JOIN ";
                sql += @" 	 METHOD_VELOCITY_GROUP_LEVEL with (nolock) ON METHOD_VELOCITY_GROUP_LEVEL.SGL_RID = STORE_GROUP_LEVEL.SGL_RID inner join ";
                sql += @" 	 METHOD with (nolock) ON METHOD.METHOD_RID = METHOD_VELOCITY_GROUP_LEVEL.METHOD_RID inner join ";
                sql += @" 	 APPLICATION_USER with (nolock) ON METHOD.USER_RID = APPLICATION_USER.USER_RID ";
                sql += @"  WHERE STORE_GROUP_LEVEL.IS_ACTIVE=1 AND METHOD_VELOCITY_GROUP_LEVEL.SGL_RID = @inUseRID ";
                sql += @" 	ORDER BY [Heading4]')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /*================================*/ ";
                sql += @" /*  METHOD_VELOCITY_MATRIX         */ ";
                sql += @" /*  Enum 39.17                 	  */ ";
                sql += @" /*================================*/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(39, 17, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT distinct ";
                sql += @" 	@severity as Severity ";
                sql += @" 	,STORE_GROUP_LEVEL.SGL_ID AS [Heading1] ";
                sql += @" 	,(select sg.SG_ID from STORE_GROUP sg where sg.SG_RID = STORE_GROUP_LEVEL.SG_RID) AS [Heading2] ";
                //BEGIN TT#542-MD-VStuart-Modifing In Use Type Fields for Methods to use Application Text
                //sql += @" 	,''Velocity Method'' AS [Heading3] ";
                sql += @" 	,(SELECT TEXT_VALUE + '' Method'' from APPLICATION_TEXT at where at.TEXT_CODE = METHOD.METHOD_TYPE_ID) AS [Heading3] ";
                //END   TT#542-MD-VStuart-Modifing In Use Type Fields for Methods to use Application Text
                sql += @" 	,METHOD.METHOD_NAME AS [Heading4] ";
                sql += @" 	,APPLICATION_USER.USER_NAME AS [Heading5] ";
                sql += @" 	,@severity AS [Heading6] ";
                sql += @" 	, '' '' AS [Heading7] ";
                sql += @" 	, '' '' AS [Heading8] ";
                sql += @" 	, '' '' AS [Heading9] ";
                sql += @"  FROM	STORE_GROUP_LEVEL with (nolock) INNER JOIN ";
                sql += @" 	 METHOD_VELOCITY_MATRIX with (nolock) ON METHOD_VELOCITY_MATRIX.SGL_RID = STORE_GROUP_LEVEL.SGL_RID inner join ";
                sql += @" 	 METHOD with (nolock) ON METHOD.METHOD_RID = METHOD_VELOCITY_MATRIX.METHOD_RID inner join ";
                sql += @" 	 APPLICATION_USER with (nolock) ON METHOD.USER_RID = APPLICATION_USER.USER_RID ";
                sql += @"  WHERE STORE_GROUP_LEVEL.IS_ACTIVE=1 AND METHOD_VELOCITY_MATRIX.SGL_RID = @inUseRID ";
                sql += @" 	ORDER BY [Heading4]')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @"  /*================================*/ ";
                sql += @" /*  NODE_SIZE_OUTOFSTOCK_GRPLVL   */ ";
                sql += @" /*  Enum 39.18                 	  */ ";
                sql += @" /*================================*/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(39, 18, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT distinct ";
                sql += @" 	 @severity as Severity ";
                sql += @" 	 ,STORE_GROUP_LEVEL.SGL_ID AS [Heading1] ";
                sql += @" 	 ,(select sg.SG_ID from STORE_GROUP sg where sg.SG_RID = STORE_GROUP_LEVEL.SG_RID) AS [Heading2] ";
                sql += @" 	 ,''Merchandise Node'' AS [Heading3] ";
                sql += @" 	 ,(dbo.UDF_MID_GET_NODE_DISPLAY(HIERARCHY_NODE.HN_RID)) AS [Heading4] ";
                sql += @" 	 ,''System'' AS [Heading5] ";
                sql += @" 	 ,@severity AS [Heading6] ";
                sql += @" 	 , '' '' AS [Heading7] ";
                sql += @" 	 , '' '' AS [Heading8] ";
                sql += @" 	 , '' '' AS [Heading9] ";
                sql += @"  FROM	STORE_GROUP_LEVEL with (nolock) INNER JOIN ";
                sql += @" 	 NODE_SIZE_OUTOFSTOCK_GRPLVL with (nolock) ON NODE_SIZE_OUTOFSTOCK_GRPLVL.SGL_RID = STORE_GROUP_LEVEL.SGL_RID inner join ";
                sql += @" 	 HIERARCHY_NODE with (nolock) ON HIERARCHY_NODE.HN_RID = NODE_SIZE_OUTOFSTOCK_GRPLVL.HN_RID ";
                sql += @"  WHERE STORE_GROUP_LEVEL.IS_ACTIVE=1 AND NODE_SIZE_OUTOFSTOCK_GRPLVL.SGL_RID = @inUseRID ";
                sql += @" 	 ORDER BY [Heading4]')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @"  /*================================*/ ";
                sql += @" /*  NODE_SIZE_OUTOFSTOCK_GRPLVL   */ ";
                sql += @" /*  Enum 39.19                 	  */ ";
                sql += @" /*================================*/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(39, 19, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT distinct ";
                sql += @" 	 @severity as Severity ";
                sql += @" 	 ,STORE_GROUP_LEVEL.SGL_ID AS [Heading1] ";
                sql += @" 	 ,(select sg.SG_ID from STORE_GROUP sg where sg.SG_RID = STORE_GROUP_LEVEL.SG_RID) AS [Heading2] ";
                sql += @" 	 ,''Merchandise Node'' AS [Heading3] ";
                sql += @" 	 ,(dbo.UDF_MID_GET_NODE_DISPLAY(HIERARCHY_NODE.HN_RID)) AS [Heading4] ";
                sql += @" 	 ,''System'' AS [Heading5] ";
                sql += @" 	 ,@severity AS [Heading6] ";
                sql += @" 	 , '' '' AS [Heading7] ";
                sql += @" 	 , '' '' AS [Heading8] ";
                sql += @" 	 , '' '' AS [Heading9] ";
                sql += @"  FROM	STORE_GROUP_LEVEL with (nolock) INNER JOIN ";
                sql += @" 	 NODE_SIZE_OUTOFSTOCK_QUANTITY with (nolock) ON NODE_SIZE_OUTOFSTOCK_QUANTITY.SGL_RID = STORE_GROUP_LEVEL.SGL_RID inner join ";
                sql += @" 	 HIERARCHY_NODE with (nolock) ON HIERARCHY_NODE.HN_RID = NODE_SIZE_OUTOFSTOCK_QUANTITY.HN_RID ";
                sql += @"  WHERE STORE_GROUP_LEVEL.IS_ACTIVE=1 AND NODE_SIZE_OUTOFSTOCK_QUANTITY.SGL_RID = @inUseRID ";
                sql += @" 	ORDER BY [Heading4]')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @"  /*================================*/ ";
                sql += @" /*  NODE_STOCK_MIN_MAX              */ ";
                sql += @" /*  Enum 39.20                 	  */ ";
                sql += @" /*================================*/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(39, 20, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT distinct ";
                sql += @" 	@severity as Severity ";
                sql += @" 	,STORE_GROUP_LEVEL.SGL_ID AS [Heading1] ";
                sql += @" 	,(select sg.SG_ID from STORE_GROUP sg where sg.SG_RID = STORE_GROUP_LEVEL.SG_RID) AS [Heading2] ";
                sql += @" 	,''Merchandise Node'' AS [Heading3] ";
                sql += @" 	,(dbo.UDF_MID_GET_NODE_DISPLAY(HIERARCHY_NODE.HN_RID)) AS [Heading4] ";
                sql += @" 	,''System'' AS [Heading5] ";
                sql += @" 	,@severity AS [Heading6] ";
                sql += @" 	, '' '' AS [Heading7] ";
                sql += @" 	, '' '' AS [Heading8] ";
                sql += @" 	, '' '' AS [Heading9] ";
                sql += @"  FROM	STORE_GROUP_LEVEL with (nolock) INNER JOIN ";
                sql += @" 	 NODE_STOCK_MIN_MAX with (nolock) ON NODE_STOCK_MIN_MAX.SGL_RID = STORE_GROUP_LEVEL.SGL_RID inner join ";
                sql += @" 	 HIERARCHY_NODE with (nolock) ON HIERARCHY_NODE.HN_RID = NODE_STOCK_MIN_MAX.HN_RID ";
                sql += @"  WHERE STORE_GROUP_LEVEL.IS_ACTIVE=1 AND NODE_STOCK_MIN_MAX.SGL_RID = @inUseRID ";
                sql += @" 	ORDER BY [Heading4]')) ";
                _dba.ExecuteNonQuery(sql);

                //Begin TT#1517-MD -jsobek -Store Service Optimization -unused table
                //sql = @" /*================================*/ ";
                //sql += @" /*  SECURITY_USER_STORE_GRP_LEVEL  */ ";
                //sql += @" /*  Enum 39.21                 	  */ ";
                //sql += @" /*================================*/ ";
                //sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                //sql += @" VALUES	(39, 21, 'In Use', ";
                //sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                //sql += @" SELECT distinct ";
                //sql += @" 	 @severity as Severity ";
                //sql += @" 	 ,STORE_GROUP_LEVEL.SGL_ID AS [Heading1] ";
                //sql += @" 	 ,(select sg.SG_ID from STORE_GROUP sg where sg.SG_RID = STORE_GROUP_LEVEL.SG_RID) AS [Heading2] ";
                //sql += @" 	 ,''Security'' AS [Heading3] ";
                //sql += @" 	 ,(select TEXT_VALUE from APPLICATION_TEXT at where at.TEXT_CODE = SECURITY_USER_FUNCTION.FUNC_ID) AS [Heading4] ";
                //sql += @" 	 ,APPLICATION_USER.USER_NAME AS [Heading5] ";
                //sql += @" 	 ,@severity AS [Heading6] ";
                //sql += @" 	 , '' '' AS [Heading7] ";
                //sql += @" 	 , '' '' AS [Heading8] ";
                //sql += @" 	 , '' '' AS [Heading9] ";
                //sql += @"  FROM	STORE_GROUP_LEVEL with (nolock) INNER JOIN ";
                //sql += @" 	 SECURITY_USER_STORE_GRP_LEVEL with (nolock) ON SECURITY_USER_STORE_GRP_LEVEL.SGL_RID = STORE_GROUP_LEVEL.SGL_RID inner join ";
                //sql += @" 	 SECURITY_USER_FUNCTION with (nolock) ON SECURITY_USER_FUNCTION.USER_RID = SECURITY_USER_STORE_GRP_LEVEL.USER_RID inner join ";
                //sql += @" 	 APPLICATION_USER with (nolock) ON SECURITY_USER_STORE_GRP_LEVEL.USER_RID = APPLICATION_USER.USER_RID ";
                //sql += @"  WHERE STORE_GROUP_LEVEL.IS_ACTIVE=1 AND SECURITY_USER_STORE_GRP_LEVEL.SGL_RID > = @inUseRID ";
                //sql += @" 	ORDER BY [Heading4]')) ";
                //_dba.ExecuteNonQuery(sql);

              
                //sql = @" /*================================*/ ";
                //sql += @" /*  SECURITY_GROUP_STORE_GRP_LEVEL  */ ";
                //sql += @" /*  Enum 39.22                 	  */ ";
                //sql += @" /*================================*/ ";
                //sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                //sql += @" VALUES	(39, 22, 'In Use', ";
                //sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                //sql += @" SELECT distinct ";
                //sql += @" 	@severity as Severity ";
                //sql += @" 	,STORE_GROUP_LEVEL.SGL_ID AS [Heading1] ";
                //sql += @" 	,(select sg.SG_ID from STORE_GROUP sg where sg.SG_RID = STORE_GROUP_LEVEL.SG_RID) AS [Heading2] ";
                //sql += @" 	,''Security'' AS [Heading3] ";
                //sql += @" 	,(select TEXT_VALUE from APPLICATION_TEXT at where at.TEXT_CODE = SECURITY_GROUP_FUNCTION.FUNC_ID) AS [Heading4] ";
                //sql += @" 	,''System'' AS [Heading5] ";
                //sql += @" 	,@severity AS [Heading6] ";
                //sql += @" 	, '' '' AS [Heading7] ";
                //sql += @" 	, '' '' AS [Heading8] ";
                //sql += @" 	, '' '' AS [Heading9] ";
                //sql += @"  FROM	STORE_GROUP_LEVEL with (nolock) INNER JOIN ";
                //sql += @" 	 SECURITY_GROUP_STORE_GRP_LEVEL with (nolock) ON SECURITY_GROUP_STORE_GRP_LEVEL.SGL_RID = STORE_GROUP_LEVEL.SGL_RID inner join ";
                //sql += @" 	 SECURITY_GROUP_FUNCTION with (nolock) ON SECURITY_GROUP_FUNCTION.GROUP_RID = SECURITY_GROUP_STORE_GRP_LEVEL.GROUP_RID ";
                //sql += @"  WHERE STORE_GROUP_LEVEL.IS_ACTIVE=1 AND SECURITY_GROUP_STORE_GRP_LEVEL.SGL_RID = @inUseRID ";
                //sql += @" 	ORDER BY [Heading4]')) ";
                //_dba.ExecuteNonQuery(sql);
                //End TT#1517-MD -jsobek -Store Service Optimization -unused table

                sql = @" /*================================*/ ";
                sql += @" /*  SIZE_CONSTRAINT_GRPLVL        */ ";
                sql += @" /*  Enum 39.23                 	  */ ";
                sql += @" /*================================*/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(39, 23, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT distinct ";
                sql += @" 	@severity as Severity ";
                sql += @" 	,STORE_GROUP_LEVEL.SGL_ID AS [Heading1] ";
                sql += @" 	,(select sg.SG_ID from STORE_GROUP sg where sg.SG_RID = STORE_GROUP_LEVEL.SG_RID) AS [Heading2] ";
                sql += @" 	,''Size Constraint Model'' AS [Heading3] ";
                sql += @" 	,SIZE_CONSTRAINT_MODEL.SIZE_CONSTRAINT_NAME AS [Heading4] ";
                sql += @" 	,''System'' AS [Heading5] ";
                sql += @" 	,@severity AS [Heading6] ";
                sql += @" 	, '' '' AS [Heading7] ";
                sql += @" 	, '' '' AS [Heading8] ";
                sql += @" 	, '' '' AS [Heading9] ";
                sql += @"  FROM	STORE_GROUP_LEVEL with (nolock) INNER JOIN ";
                sql += @" 	 SIZE_CONSTRAINT_GRPLVL with (nolock) ON SIZE_CONSTRAINT_GRPLVL.SGL_RID = STORE_GROUP_LEVEL.SGL_RID inner join ";
                sql += @" 	 SIZE_CONSTRAINT_MODEL with (nolock) ON SIZE_CONSTRAINT_MODEL.SIZE_CONSTRAINT_RID = SIZE_CONSTRAINT_GRPLVL.SIZE_CONSTRAINT_RID ";
                sql += @"  WHERE STORE_GROUP_LEVEL.IS_ACTIVE=1 AND SIZE_CONSTRAINT_GRPLVL.SGL_RID = @inUseRID ";
                sql += @" 	ORDER BY [Heading4]')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @"  /*================================*/ ";
                sql += @" /*  SIZE_CONSTRAINT_MINMAX        */ ";
                sql += @" /*  Enum 39.24                 	  */ ";
                sql += @" /*================================*/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(39, 24, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT distinct ";
                sql += @" 	 @severity as Severity ";
                sql += @" 	 ,STORE_GROUP_LEVEL.SGL_ID AS [Heading1] ";
                sql += @" 	 ,(select sg.SG_ID from STORE_GROUP sg where sg.SG_RID = STORE_GROUP_LEVEL.SG_RID) AS [Heading2] ";
                sql += @" 	 ,''Size Constraint Model'' AS [Heading3] ";
                sql += @" 	 ,SIZE_CONSTRAINT_MODEL.SIZE_CONSTRAINT_NAME AS [Heading4] ";
                sql += @" 	 ,''System'' AS [Heading5] ";
                sql += @" 	 ,@severity AS [Heading6] ";
                sql += @" 	 , '' '' AS [Heading7] ";
                sql += @" 	 , '' '' AS [Heading8] ";
                sql += @" 	 , '' '' AS [Heading9] ";
                sql += @"  FROM	STORE_GROUP_LEVEL with (nolock) INNER JOIN ";
                sql += @" 	 SIZE_CONSTRAINT_MINMAX with (nolock) ON SIZE_CONSTRAINT_MINMAX.SGL_RID = STORE_GROUP_LEVEL.SGL_RID inner join ";
                sql += @" 	 SIZE_CONSTRAINT_MODEL with (nolock) ON SIZE_CONSTRAINT_MODEL.SIZE_CONSTRAINT_RID = SIZE_CONSTRAINT_MINMAX.SIZE_CONSTRAINT_RID ";
                sql += @"  WHERE STORE_GROUP_LEVEL.IS_ACTIVE=1 AND SIZE_CONSTRAINT_MINMAX.SGL_RID = @inUseRID ";
                sql += @" 	ORDER BY [Heading4]')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /*================================*/ ";
                sql += @" /*  SIZE_MTH_RULE_COLOR_SIZE      */ ";
                sql += @" /*  Enum 39.25                 	  */ ";
                sql += @" /*================================*/ ";
                sql += @"  INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(39, 25, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT distinct ";
                sql += @" 	 @severity as Severity ";
                sql += @" 	 ,STORE_GROUP_LEVEL.SGL_ID AS [Heading1] ";
                sql += @" 	 ,(select sg.SG_ID from STORE_GROUP sg where sg.SG_RID = STORE_GROUP_LEVEL.SG_RID) AS [Heading2] ";
                sql += @" 	 ,(select TEXT_VALUE from APPLICATION_TEXT at where at.TEXT_CODE = METHOD.METHOD_TYPE_ID) + '' Method'' AS [Heading3] ";
                sql += @" 	 ,METHOD.METHOD_NAME AS [Heading4] ";
                sql += @" 	 ,APPLICATION_USER.USER_NAME AS [Heading5] ";
                sql += @" 	 ,@severity AS [Heading6] ";
                sql += @" 	 , '' '' AS [Heading7] ";
                sql += @" 	 , '' '' AS [Heading8] ";
                sql += @" 	 , '' '' AS [Heading9] ";
                sql += @"  FROM	STORE_GROUP_LEVEL with (nolock) INNER JOIN ";
                sql += @" 	 SIZE_MTH_RULE_COLOR_SIZE with (nolock) ON SIZE_MTH_RULE_COLOR_SIZE.SGL_RID = STORE_GROUP_LEVEL.SGL_RID inner join ";
                sql += @" 	 METHOD with (nolock) ON METHOD.METHOD_RID = SIZE_MTH_RULE_COLOR_SIZE.METHOD_RID inner join ";
                sql += @" 	 APPLICATION_USER with (nolock) ON METHOD.USER_RID = APPLICATION_USER.USER_RID ";
                sql += @"  WHERE STORE_GROUP_LEVEL.IS_ACTIVE=1 AND SIZE_MTH_RULE_COLOR_SIZE.SGL_RID = @inUseRID ";
                sql += @" 	ORDER BY [Heading4]')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /*================================*/ ";
                sql += @" /*  SIZE_MTH_RULE_GRPLVL          */ ";
                sql += @" /*  Enum 39.26                 	  */ ";
                sql += @" /*================================*/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(39, 26, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT distinct ";
                sql += @" 	 @severity as Severity ";
                sql += @" 	 ,STORE_GROUP_LEVEL.SGL_ID AS [Heading1] ";
                sql += @" 	 ,(select sg.SG_ID from STORE_GROUP sg where sg.SG_RID = STORE_GROUP_LEVEL.SG_RID) AS [Heading2] ";
                sql += @" 	 ,(select TEXT_VALUE from APPLICATION_TEXT at where at.TEXT_CODE = METHOD.METHOD_TYPE_ID) + '' Method'' AS [Heading3] ";
                sql += @" 	 ,METHOD.METHOD_NAME AS [Heading4] ";
                sql += @" 	 ,APPLICATION_USER.USER_NAME AS [Heading5] ";
                sql += @" 	 ,@severity AS [Heading6] ";
                sql += @" 	 , '' '' AS [Heading7] ";
                sql += @" 	 , '' '' AS [Heading8] ";
                sql += @" 	 , '' '' AS [Heading9] ";
                sql += @"  FROM	STORE_GROUP_LEVEL with (nolock) INNER JOIN ";
                sql += @" 	 SIZE_MTH_RULE_GRPLVL with (nolock) ON SIZE_MTH_RULE_GRPLVL.SGL_RID = STORE_GROUP_LEVEL.SGL_RID inner join ";
                sql += @" 	 METHOD with (nolock) ON METHOD.METHOD_RID = SIZE_MTH_RULE_GRPLVL.METHOD_RID inner join ";
                sql += @" 	 APPLICATION_USER with (nolock) ON METHOD.USER_RID = APPLICATION_USER.USER_RID ";
                sql += @"  WHERE STORE_GROUP_LEVEL.IS_ACTIVE=1 AND SIZE_MTH_RULE_GRPLVL.SGL_RID = @inUseRID ";
                sql += @" 	ORDER BY [Heading4]')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /*================================*/ ";
                sql += @" /*  STOCK_MIN_MAX          */ ";
                sql += @" /*  Enum 39.27                 	  */ ";
                sql += @" /*================================*/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(39, 27, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT distinct ";
                sql += @" 	 @severity as Severity ";
                sql += @" 	 ,STORE_GROUP_LEVEL.SGL_ID AS [Heading1] ";
                sql += @" 	 ,(select sg.SG_ID from STORE_GROUP sg where sg.SG_RID = STORE_GROUP_LEVEL.SG_RID) AS [Heading2] ";
                sql += @" 	 ,(select TEXT_VALUE from APPLICATION_TEXT at where at.TEXT_CODE = METHOD.METHOD_TYPE_ID) + '' Method'' AS [Heading3] ";
                sql += @" 	 ,METHOD.METHOD_NAME AS [Heading4] ";
                sql += @" 	 ,APPLICATION_USER.USER_NAME AS [Heading5] ";
                sql += @" 	 ,@severity AS [Heading6] ";
                sql += @" 	 , '' '' AS [Heading7] ";
                sql += @" 	 , '' '' AS [Heading8] ";
                sql += @" 	 , '' '' AS [Heading9] ";
                sql += @"  FROM	STORE_GROUP_LEVEL with (nolock) INNER JOIN ";
                sql += @" 	 STOCK_MIN_MAX with (nolock) ON STOCK_MIN_MAX.SGL_RID = STORE_GROUP_LEVEL.SGL_RID inner join ";
                sql += @" 	 METHOD with (nolock) ON METHOD.METHOD_RID = STOCK_MIN_MAX.METHOD_RID inner join ";
                sql += @" 	 APPLICATION_USER with (nolock) ON METHOD.USER_RID = APPLICATION_USER.USER_RID ";
                sql += @"  WHERE STORE_GROUP_LEVEL.IS_ACTIVE=1 AND STOCK_MIN_MAX.SGL_RID = @inUseRID ";
                sql += @" 	 ORDER BY [Heading4]')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @"  /*================================*/ ";
                sql += @" /*  TREND_CAPS	   					*/ ";
                sql += @" /*  Enum 39.28                 	  */ ";
                sql += @" /*================================*/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(39, 28, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT distinct ";
                sql += @" 	 @severity as Severity ";
                sql += @" 	 ,STORE_GROUP_LEVEL.SGL_ID AS [Heading1] ";
                sql += @" 	 ,(select sg.SG_ID from STORE_GROUP sg where sg.SG_RID = STORE_GROUP_LEVEL.SG_RID) AS [Heading2] ";
                sql += @" 	 ,(select TEXT_VALUE from APPLICATION_TEXT at where at.TEXT_CODE = METHOD.METHOD_TYPE_ID) + '' Method'' AS [Heading3] ";
                sql += @" 	 ,METHOD.METHOD_NAME AS [Heading4] ";
                sql += @" 	 ,APPLICATION_USER.USER_NAME AS [Heading5] ";
                sql += @" 	 ,@severity AS [Heading6] ";
                sql += @" 	 , '' '' AS [Heading7] ";
                sql += @" 	 , '' '' AS [Heading8] ";
                sql += @" 	 , '' '' AS [Heading9] ";
                sql += @"  FROM	STORE_GROUP_LEVEL with (nolock) INNER JOIN ";
                sql += @" 	 TREND_CAPS with (nolock) ON TREND_CAPS.SGL_RID = STORE_GROUP_LEVEL.SGL_RID inner join ";
                sql += @" 	 METHOD with (nolock) ON METHOD.METHOD_RID = TREND_CAPS.METHOD_RID inner join ";
                sql += @" 	 APPLICATION_USER with (nolock) ON METHOD.USER_RID = APPLICATION_USER.USER_RID ";
                sql += @"  WHERE STORE_GROUP_LEVEL.IS_ACTIVE=1 AND TREND_CAPS.SGL_RID = @inUseRID ";
                sql += @" 	ORDER BY [Heading4]')) ";
                _dba.ExecuteNonQuery(sql);

                //BEGIN TT#3195-M-VStuart-In Use is not picking up the Filter XREF information-MID
                //BEGIN TT#591-MD-VStuart-Attribute and Set In Use by Filter is not displayed in correct columns
                //Begin TT#1170-MD -jsobek -Remove Binary database objects and normalize the Filter definitions
                //sql = @" /*====================================================*/ ";
                //sql += @" /* FILTER in use for STORE_GROUP_LEVEL (ATTIBUTE SET) */ ";
                //sql += @" /*  Enum 39.29                     	                */ ";
                //sql += @" /*====================================================*/ ";
                //sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                //sql += @" VALUES	(39, 29, 'In Use', ";
                //sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                //sql += @" SELECT @severity as Severity ";
                //sql += @" 	,sgl.SGL_ID as Header1 ";
                //sql += @" 	,STORE_GROUP.SG_ID as Header2 ";
                //sql += @" 	,(select TEXT_VALUE from APPLICATION_TEXT with (nolock) where TEXT_CODE = 900181) as Header3 ";
                //sql += @" 	,sf.STORE_FILTER_NAME as Heading4 ";
                //sql += @" 	,au.USER_NAME as Header5 ";
                //sql += @" 	,@severity AS Header6 ";
                //sql += @" 	,'' '' AS Heading7 ";
                //sql += @" 	,'' '' AS Heading8 ";
                //sql += @" 	,'' '' AS Heading9 ";
                //sql += @" FROM	IN_USE_FILTER_XREF AS t WITH (nolock) INNER JOIN ";
                //sql += @" 		STORE_FILTER AS sf WITH (nolock) ON sf.STORE_FILTER_RID = t.FILTER_RID INNER JOIN ";
                //sql += @" 		STORE_GROUP_LEVEL AS sgl WITH (nolock) ON sgl.SGL_RID = t.PROFILE_TYPE_RID INNER JOIN ";
                //sql += @" 		APPLICATION_USER AS au WITH (nolock) ON au.USER_RID = sf.USER_RID INNER JOIN ";
                ////sql += @" 		STORE_GROUP ON sgl.SG_RID = STORE_GROUP.SG_RID AND au.USER_RID = STORE_GROUP.USER_RID ";
                //sql += @" 		STORE_GROUP ON sgl.SG_RID = STORE_GROUP.SG_RID ";
                //sql += @" where t.PROFILE_TYPE_RID = @inUseRID ";
                //sql += @" 	and t.PROFILE_TYPE = 39')) ";
                sql = @" /*====================================================*/ ";
                sql += @" /* Store Filters in use for STORE_GROUP_LEVEL (ATTIBUTE SET) */ ";
                sql += @" /*  Enum 39.29                     	                */ ";
                sql += @" /*====================================================*/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(39, 29, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT @severity as Severity ";
                sql += @" 	,sgl.SGL_ID as Header1 ";
                sql += @" 	,sg.SG_ID as Header2 ";
                sql += @" 	,(select TEXT_VALUE from APPLICATION_TEXT with (nolock) where TEXT_CODE = 900181) as Header3 ";
                sql += @" 	,f.FILTER_NAME as Heading4 ";
                sql += @" 	,au.USER_NAME as Header5 ";
                sql += @" 	,@severity AS Header6 ";
                sql += @" 	,'' '' AS Heading7 ";
                sql += @" 	,'' '' AS Heading8 ";
                sql += @" 	,'' '' AS Heading9 ";
                sql += @" FROM FILTER f WITH (NOLOCK) ";
                sql += @" 		INNER JOIN STORE_GROUP_LEVEL sgl WITH (NOLOCK) ON sgl.SGL_RID=@inUseRID AND sgl.IS_ACTIVE=1 ";
                sql += @" 		INNER JOIN STORE_GROUP sg WITH (NOLOCK) ON sgl.SG_RID = sg.SG_RID AND sg.IS_ACTIVE=1 ";
                sql += @" 		INNER JOIN APPLICATION_USER au WITH (NOLOCK) ON au.USER_RID = f.USER_RID ";
                sql += @" WHERE f.FILTER_TYPE=0 AND f.FILTER_RID IN ";
                sql += @" ( ";
                sql += @"       SELECT DISTINCT fc.FILTER_RID ";
                sql += @"       FROM FILTER_CONDITION_LIST_VALUES lv WITH (NOLOCK) ";
                sql += @"       INNER JOIN FILTER_CONDITION fc WITH (NOLOCK) ON fc.CONDITION_RID = lv.CONDITION_RID ";
                sql += @"       WHERE lv.LIST_VALUE_TYPE_INDEX = 9 ";
                sql += @"       AND lv.LIST_VALUE_INDEX = @inUseRID ";
                sql += @" ) ";
                sql += @" 	')) ";
                //End TT#1170-MD -jsobek -Remove Binary database objects and normalize the Filter definitions
                _dba.ExecuteNonQuery(sql);
                //END  TT#591-MD-VStuart-Attribute and Set In Use by Filter is not displayed in correct columns
                //END TT#3195-M-VStuart-In Use is not picking up the Filter XREF information-MID

                sql = @" --================================= ";
                sql += @" -- 'Task List-Job' ";
                sql += @" -- Enum 46 ";
                sql += @" --================================= ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES        (46, 1, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT  @severity as Severity, ";
                sql += @" 	tl.TASKLIST_NAME AS Heading1, ";
                sql += @" 	''Task List-Job'' AS Heading2, ";
                sql += @" 	j.JOB_NAME AS Heading3, ";
                sql += @" 	au.USER_NAME AS Heading4, ";
                sql += @" 	@severity AS Heading5 ";
                sql += @" 	, '' '' AS [Heading6] ";
                sql += @" 	, '' '' AS [Heading7] ";
                sql += @" 	, '' '' AS [Heading8] ";
                sql += @" 	, '' '' AS [Heading9] ";
                sql += @" FROM	TASKLIST AS tl with (nolock) INNER JOIN ";
                sql += @" 		JOB_TASKLIST_JOIN AS jtj WITH (nolock) ON tl.TASKLIST_RID = jtj.TASKLIST_RID INNER JOIN ";
                sql += @" 		JOB AS j WITH (nolock) ON j.JOB_RID = jtj.JOB_RID INNER JOIN ";
                sql += @" 		APPLICATION_USER AS au WITH (nolock) ON au.USER_RID = j.CREATED_BY_USER_RID ";
                sql += @"   where  (j.SYSTEM_GENERATED_IND = ''0'') AND (tl.SYSTEM_GENERATED_IND = ''0'') ";
                sql += @" 		AND tl.TASKLIST_RID = @inUseRID')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" --================================= ";
                sql += @" -- 'Task List-Job' ";
                sql += @" -- Enum 48 ";
                sql += @" --================================= ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES        (48, 1, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT	@severity as Severity, ";
                sql += @"       j.JOB_NAME AS Heading1, ";
                sql += @" 	''Job-Special Request Job'' AS Heading2, ";
                sql += @" 	srj.SPECIAL_REQ_NAME AS Heading3, ";
                sql += @" 	''System'' AS Heading4, ";
                sql += @" 	@severity AS Heading5 ";
                sql += @" 	, '' '' AS [Heading6] ";
                sql += @" 	, '' '' AS [Heading7] ";
                sql += @" 	, '' '' AS [Heading8] ";
                sql += @" 	, '' '' AS [Heading9] ";
                sql += @" FROM	JOB AS j with (nolock) INNER JOIN ";
                sql += @" 	SPECIAL_REQUEST_JOB_JOIN AS srjj WITH (nolock) ON srjj.JOB_RID = j.JOB_RID INNER JOIN ";
                sql += @" 	SPECIAL_REQUEST_JOB AS srj WITH (nolock) ON srj.SPECIAL_REQ_RID = srjj.SPECIAL_REQ_RID ";
                sql += @" WHERE	(j.JOB_RID = @inUseRID)')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" --================================= ";
                sql += @" -- 'OTS Workflow-Task List' ";
                sql += @" -- Enum 55.1 ";
                sql += @" --================================= ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES       ( 55, 1, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT	@severity as Severity, ";
                sql += @" w.WORKFLOW_NAME AS Heading1, ";
                sql += @" 	''OTS Workflow-Task List'' AS Heading2, ";
                sql += @" 	tl.TASKLIST_NAME AS Heading3, ";
                sql += @" 	au.USER_NAME AS Heading4, ";
                sql += @" 	@severity AS Heading5 ";
                sql += @" 	, '' '' AS [Heading6] ";
                sql += @" 	, '' '' AS [Heading7] ";
                sql += @" 	, '' '' AS [Heading8] ";
                sql += @" 	, '' '' AS [Heading9] ";
                sql += @" FROM	TASK_FORECAST_DETAIL AS tfd WITH (nolock) INNER JOIN ";
                sql += @" 		TASKLIST AS tl with (nolock) ON tl.TASKLIST_RID = tfd.TASKLIST_RID INNER JOIN ";
                sql += @" 		WORKFLOW AS w WITH (nolock) ON w.WORKFLOW_RID = tfd.WORKFLOW_RID INNER JOIN ";
                sql += @" 		APPLICATION_USER AS au WITH (nolock) ON au.USER_RID = tl.USER_RID ";
                sql += @" WHERE	(tl.SYSTEM_GENERATED_IND = ''0'') ";
                sql += @" 		AND	w.WORKFLOW_RID = @inUseRID')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" --================================= ";
                sql += @" -- 'Allocation Workflow-Task LIst' ";
                sql += @" -- Enum 55.2 ";
                sql += @" --================================= ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES       ( 55, 2, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT	@severity as Severity, ";
                sql += @" w.WORKFLOW_NAME AS Heading1, ";
                sql += @" 	''Allocation Workflow-Task LIst'' AS Heading2, ";
                sql += @" 	tl.TASKLIST_NAME AS Heading3, ";
                sql += @" 	au.USER_NAME AS Heading4, ";
                sql += @" 	@severity AS Heading5 ";
                sql += @" 	, '' '' AS [Heading6] ";
                sql += @" 	, '' '' AS [Heading7] ";
                sql += @" 	, '' '' AS [Heading8] ";
                sql += @" 	, '' '' AS [Heading9] ";
                sql += @" FROM TASK_ALLOCATE_DETAIL AS tad WITH (nolock) INNER JOIN ";
                sql += @"   TASKLIST AS tl with (nolock) ON tl.TASKLIST_RID = tad.TASKLIST_RID INNER JOIN ";
                sql += @"   WORKFLOW AS w WITH (nolock) ON w.WORKFLOW_RID = tad.WORKFLOW_RID INNER JOIN ";
                sql += @"   APPLICATION_USER AS au WITH (nolock) ON au.USER_RID = tl.USER_RID ";
                sql += @" WHERE	(tl.SYSTEM_GENERATED_IND = ''0'') ";
                sql += @" 		AND	(w.WORKFLOW_RID = @inUseRID)')) ";
                _dba.ExecuteNonQuery(sql);

                //BEGIN TT#4455-VSuart-Unable to delete workflow even though nothing on In Use-MID
                sql = @" --================================= ";
                sql += @" -- 'Workflow-Header' ";
                sql += @" -- Enum 55.3 ";
                sql += @" --================================= ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES ( 55, 3, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT @severity as Severity, ";
                sql += @"   ''Workflow-Header'' AS Heading1, ";
                sql += @"   w.WORKFLOW_NAME AS Heading2, ";
                sql += @" 	h.HDR_ID AS Heading3, ";
                sql += @" 	au.USER_NAME AS Heading4, ";
                sql += @" 	@severity AS Heading5 ";
                sql += @" 	, '' '' AS [Heading6] ";
                sql += @" 	, '' '' AS [Heading7] ";
                sql += @" 	, '' '' AS [Heading8] ";
                sql += @" 	, '' '' AS [Heading9] ";
                sql += @" FROM HEADER AS h ";
                sql += @"   INNER JOIN WORKFLOW AS w with (nolock) ON h.WORKFLOW_RID = w.WORKFLOW_RID ";
                sql += @"   INNER JOIN APPLICATION_USER au with (nolock) ON w.WORKFLOW_USER_RID = au.USER_RID ";
                sql += @" WHERE (h.WORKFLOW_RID <> 1) ";
                sql += @" 		AND	(h.WORKFLOW_RID = @inUseRID)')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" --================================= ";
                sql += @" -- 'API Workflow-Header' ";
                sql += @" -- Enum 55.4 ";
                sql += @" --================================= ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES ( 55, 4, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT @severity as Severity, ";
                sql += @"   ''API Workflow-Header'' AS Heading1, ";
                sql += @"   w2.WORKFLOW_NAME AS Heading2, ";
                sql += @" 	h.HDR_ID AS Heading3, ";
                sql += @" 	au.USER_NAME AS Heading4, ";
                sql += @" 	@severity AS Heading5 ";
                sql += @" 	, '' '' AS [Heading6] ";
                sql += @" 	, '' '' AS [Heading7] ";
                sql += @" 	, '' '' AS [Heading8] ";
                sql += @" 	, '' '' AS [Heading9] ";
                sql += @" FROM HEADER AS h ";
                sql += @"   INNER JOIN WORKFLOW AS w2 with (nolock) ON h.WORKFLOW_RID = w2.WORKFLOW_RID ";
                sql += @"   INNER JOIN APPLICATION_USER au with (nolock) ON w2.WORKFLOW_USER_RID = au.USER_RID ";
                sql += @" WHERE (h.API_WORKFLOW_RID > 1) ";
                sql += @" 		AND	(h.API_WORKFLOW_RID = @inUseRID)')) ";
                _dba.ExecuteNonQuery(sql);
                //END TT#4455-VSuart-Unable to delete workflow even though nothing on In Use-MID

                sql = @" /*************************** ";
                sql += @" OverrideLowLevelModel = 57 ";
                sql += @" Queries ";
                sql += @" ****************************/ ";
                sql += @" /**************************** ";
                sql += @" Node Prperties - Size Curve ";
                sql += @" In Use ";
                sql += @" -- Enum 57.1 ";
                sql += @" *****************************/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES       ( 57, 1, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT	@severity as Severity, ";
                sql += @" oll.NAME as Header1, ";
                sql += @" ''Node Properties - Size Curve'' as Header2, ";
                sql += @" ph.PH_ID AS Hierarchy, ";
                sql += @" dbo.UDF_MID_GET_NODE_DISPLAY (nsc.HN_RID) AS Node, ";
                sql += @" au.USER_NAME as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @"  from NODE_SIZE_CURVE_CRITERIA_DETAIL nscd with (nolock) ";
                sql += @" join OVERRIDE_LL_MODEL_HEADER oll with (nolock) on nscd.OLL_RID = oll.OLL_RID ";
                sql += @" join NODE_SIZE_CURVE_CRITERIA nsc with (nolock) on nsc.NSCCD_RID = nscd.NSCCD_RID ";
                sql += @" join HIERARCHY_NODE hn with (nolock) on hn.HN_RID = nsc.HN_RID ";
                sql += @" join PRODUCT_HIERARCHY ph with (nolock) on ph.PH_RID = hn.HOME_PH_RID ";
                sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = 4 ";
                sql += @" where oll.OLL_RID = @inUseRID')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /******************** ";
                sql += @" Size Curve Method ";
                sql += @" In Use ";
                sql += @" -- Enum 57.2 ";
                sql += @" ********************/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES       ( 57, 2, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT	@severity as Severity, ";
                sql += @" oll.NAME as Header1, ";
                sql += @" ''Method Size Curve'' as Header2, ";
                sql += @" m.METHOD_NAME as Heading3, ";
                sql += @" m.METHOD_DESCRIPTION as Heading4, ";
                sql += @" au.USER_NAME as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @"  from METHOD_SIZE_CURVE_MRCH_BAS_DET msc with (nolock) ";
                sql += @" join OVERRIDE_LL_MODEL_HEADER oll with (nolock) on msc.OLL_RID = oll.OLL_RID ";
                sql += @" join METHOD m with (nolock) on m.METHOD_RID = msc.METHOD_RID ";
                sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = m.USER_RID ";
                sql += @" where oll.OLL_RID = @inUseRID')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /********************** ";
                sql += @" OTS Forecast Method ";
                sql += @" In Use ";
                sql += @" -- Enum 57.3 ";
                sql += @" **********************/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES       ( 57, 3, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT	@severity as Severity, ";
                sql += @" oll.NAME as Header1, ";
                sql += @" ''Method OTS Forecast'' as Header2, ";
                sql += @" m.METHOD_NAME as Heading3, ";
                sql += @" m.METHOD_DESCRIPTION as Heading4, ";
                sql += @" au.USER_NAME as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @"  from OTS_PLAN op with (nolock) ";
                sql += @" join OVERRIDE_LL_MODEL_HEADER oll with (nolock) on op.OLL_RID = oll.OLL_RID ";
                sql += @" join METHOD m with (nolock) on m.METHOD_RID = op.METHOD_RID ";
                sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = m.USER_RID ";
                sql += @" where oll.OLL_RID = @inUseRID')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /************************ ";
                sql += @" Matrix Balance Method ";
                sql += @" In Use ";
                sql += @" -- Enum 57.4 ";
                sql += @" ************************/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES       ( 57, 4, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT	@severity as Severity, ";
                sql += @" oll.NAME as Header1, ";
                sql += @" ''Method Matrix'' as Header2, ";
                sql += @" m.METHOD_NAME as Heading3, ";
                sql += @" m.METHOD_DESCRIPTION as Heading4, ";
                sql += @" au.USER_NAME as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @"  from METHOD_MATRIX mm with (nolock) ";
                sql += @" join OVERRIDE_LL_MODEL_HEADER oll with (nolock) on mm.OLL_RID = oll.OLL_RID ";
                sql += @" join METHOD m with (nolock) on m.METHOD_RID = mm.METHOD_RID ";
                sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = m.USER_RID ";
                sql += @" where oll.OLL_RID = @inUseRID')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /*********************** ";
                sql += @" Forecast Spread Method ";
                sql += @" In Use ";
                sql += @" -- Enum 57.5 ";
                sql += @" ***********************/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES       ( 57, 5, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT	@severity as Severity, ";
                sql += @" oll.NAME as Header1, ";
                sql += @" ''Method Forecast Spread'' as Header2, ";
                sql += @" m.METHOD_NAME as Heading3, ";
                sql += @" m.METHOD_DESCRIPTION as Heading4, ";
                sql += @" au.USER_NAME as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @"  from METHOD_SPREAD_FORECAST msf with (nolock) ";
                sql += @" join OVERRIDE_LL_MODEL_HEADER oll with (nolock) on msf.OLL_RID = oll.OLL_RID ";
                sql += @" join METHOD m with (nolock) on m.METHOD_RID = msf.METHOD_RID ";
                sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = m.USER_RID ";
                sql += @" where oll.OLL_RID = @inUseRID')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /**************************************** ";
                sql += @" Copy Forecast Method (Store and Chain) ";
                sql += @" In Use ";
                sql += @" -- Enum 57.6 ";
                sql += @" ****************************************/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES       ( 57, 6, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT	@severity as Severity, ";
                sql += @" oll.NAME as Header1, ";
                sql += @" 	CASE ";
                sql += @" 	  When m.METHOD_TYPE_ID = 802129 ";
                sql += @" 	  Then ''Copy Chain Forecast Method'' ";
                sql += @" 	  Else ''Copy Store Forecast Method'' ";
                sql += @" 	End as Header2, ";
                sql += @" m.METHOD_NAME as Heading3, ";
                sql += @" m.METHOD_DESCRIPTION as Heading4, ";
                sql += @" au.USER_NAME as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @"  from METHOD_COPY_FORECAST mcf with (nolock) ";
                sql += @" join OVERRIDE_LL_MODEL_HEADER oll with (nolock) on mcf.OLL_RID = oll.OLL_RID ";
                sql += @" join METHOD m with (nolock) on m.METHOD_RID = mcf.METHOD_RID ";
                sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = m.USER_RID ";
                sql += @" where oll.OLL_RID = @inUseRID')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /***************** ";
                sql += @" Export Method ";
                sql += @" In Use ";
                sql += @" -- Enum 57.7 ";
                sql += @" *****************/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES       ( 57, 7, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT	@severity as Severity, ";
                sql += @" oll.NAME as Header1, ";
                sql += @" ''Method Export'' as Header2, ";
                sql += @" m.METHOD_NAME as Heading3, ";
                sql += @" m.METHOD_DESCRIPTION as Heading4, ";
                sql += @" au.USER_NAME as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @"  from METHOD_EXPORT me with (nolock) ";
                sql += @" join OVERRIDE_LL_MODEL_HEADER oll with (nolock) on me.OLL_RID = oll.OLL_RID ";
                sql += @" join METHOD m with (nolock) on m.METHOD_RID = me.METHOD_RID ";
                sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = m.USER_RID ";
                sql += @" where oll.OLL_RID = @inUseRID')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /******************* ";
                sql += @" Global Lock Method ";
                sql += @" In Use ";
                sql += @" -- Enum 57.8 ";
                sql += @" ********************/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES       ( 57, 8, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT	@severity as Severity, ";
                sql += @" oll.NAME as Header1, ";
                sql += @" ''Method Global Lock'' as Header2, ";
                sql += @" m.METHOD_NAME as Heading3, ";
                sql += @" m.METHOD_DESCRIPTION as Heading4, ";
                sql += @" au.USER_NAME as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @"  from METHOD_GLOBAL_LOCK mgl with (nolock) ";
                sql += @" join OVERRIDE_LL_MODEL_HEADER oll with (nolock) on mgl.OLL_RID = oll.OLL_RID ";
                sql += @" join METHOD m with (nolock) on m.METHOD_RID = mgl.METHOD_RID ";
                sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = m.USER_RID ";
                sql += @" where oll.OLL_RID = @inUseRID')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /********************** ";
                sql += @" Global Unlock Method ";
                sql += @" In Use ";
                sql += @" -- Enum 57.9 ";
                sql += @" **********************/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES       ( 57, 9, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT	@severity as Severity, ";
                sql += @" oll.NAME as Header1, ";
                sql += @" ''Method Global Unlock'' as Header2, ";
                sql += @" m.METHOD_NAME as Heading3, ";
                sql += @" m.METHOD_DESCRIPTION as Heading4, ";
                sql += @" au.USER_NAME as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @"  from METHOD_GLOBAL_UNLOCK mgu with (nolock) ";
                sql += @" join OVERRIDE_LL_MODEL_HEADER oll with (nolock) on mgu.OLL_RID = oll.OLL_RID ";
                sql += @" join METHOD m with (nolock) on m.METHOD_RID = mgu.METHOD_RID ";
                sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = m.USER_RID ";
                sql += @" where oll.OLL_RID = @inUseRID')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /******************************* ";
                sql += @" OTS Forecast Review Selection ";
                sql += @" Reference ";
                sql += @" -- Enum 57.10 ";
                sql += @" *******************************/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES       ( 57, 10, 'Reference', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT	@severity as Severity, ";
                sql += @" oll.NAME as Header1, ";
                sql += @" ''OTS Forecast Selection'' as Header2, ";
                sql += @" au.USER_FULLNAME as Heading3, ";
                sql += @" au.USER_DESCRIPTION as Heading4, ";
                sql += @" au.USER_NAME as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @"  from USER_PLAN up with (nolock) ";
                sql += @" join OVERRIDE_LL_MODEL_HEADER oll with (nolock) on up.OLL_RID = oll.OLL_RID ";
                sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = up.USER_RID ";
                sql += @" where oll.OLL_RID = @inUseRID')) ";
                _dba.ExecuteNonQuery(sql);

                // Begin TT#2131-MD - JSmith - Halo Integration
                sql = @" /***************** ";
                sql += @" METHOD_PLANNING_EXTRACT ";
                sql += @" In Use ";
                sql += @" -- Enum 57.11 ";
                sql += @" *****************/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES       ( 57, 11, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT	@severity as Severity, ";
                sql += @" oll.NAME as Header1, ";
                sql += @" ''Method Export'' as Header2, ";
                sql += @" m.METHOD_NAME as Heading3, ";
                sql += @" m.METHOD_DESCRIPTION as Heading4, ";
                sql += @" au.USER_NAME as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @"  from METHOD_PLANNING_EXTRACT mpe with (nolock) ";
                sql += @" join OVERRIDE_LL_MODEL_HEADER oll with (nolock) on mpe.OLL_RID = oll.OLL_RID ";
                sql += @" join METHOD m with (nolock) on m.METHOD_RID = mpe.METHOD_RID ";
                sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = m.USER_RID ";
                sql += @" where oll.OLL_RID = @inUseRID')) ";
                _dba.ExecuteNonQuery(sql);
                // End TT#2131-MD - JSmith - Halo Integration

                sql = @" --================================= ";
                sql += @" -- 'OTS Forecast Method-Workflow' ";
                sql += @" -- Enum 83.1 ";
                sql += @" --================================= ";
                sql = @" INSERT INTO DETAIL_INFO  (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES        (83, 1, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT	@severity as Severity, ";
                sql += @"        m.METHOD_NAME AS Header1, ";
                sql += @" 		Case w.WORKFLOW_TYPE_ID ";
                sql += @" 			WHEN ''800825'' THEN ''Forecast Workflow'' ";
                sql += @" 			WHEN ''800826'' THEN ''Allocation Workflow'' ";
                sql += @" 			WHEN ''800827'' THEN ''Assortment Workflow'' ";
                sql += @" 			ELSE ''Workflow'' ";
                sql += @" 		END AS Header2, ";
                sql += @" 	w.WORKFLOW_NAME AS Header3, ";
                sql += @" 	w.WORKFLOW_DESCRIPTION AS Header4, ";
                sql += @" 	au.USER_NAME AS Header5, ";
                sql += @" 	@severity AS Header6 ";
                sql += @" 	, '' '' AS [Heading7] ";
                sql += @" 	, '' '' AS [Heading8] ";
                sql += @" 	, '' '' AS [Heading9] ";
                sql += @" FROM	WORKFLOW_STEP_OTSPLAN AS wso WITH (nolock) INNER JOIN ";
                sql += @" 	WORKFLOW AS w WITH (nolock) ON w.WORKFLOW_RID = wso.WORKFLOW_RID INNER JOIN ";
                sql += @" 	METHOD AS m WITH (nolock) ON m.METHOD_RID = wso.METHOD_RID INNER JOIN ";
                sql += @" 	APPLICATION_USER AS au WITH (nolock) ON au.USER_RID = w.WORKFLOW_USER_RID ";
                sql += @" WHERE	(wso.ACTION_METHOD_TYPE = 802100) ";
                sql += @" 	AND m.METHOD_RID = @inUseRID')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" --================================= ";
                sql += @" -- 'OTS Forecast Method-Task List' ";
                sql += @" -- Enum 83.2 ";
                sql += @" --================================= ";
                sql = @" INSERT INTO DETAIL_INFO  (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES        (83, 2, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT	@severity as Severity, ";
                sql += @"         m.METHOD_NAME AS Header1, ";
                sql += @" 		''Task List'' AS Header2, ";
                sql += @" 		tl.TASKLIST_NAME AS Header3, ";
                sql += @" 		'''' AS Heading4, ";
                sql += @" 		au.USER_NAME AS Header5, ";
                sql += @" 		@severity AS Header6, ";
                sql += @" 		'' '' AS Heading7, ";
                sql += @" 		'' '' AS Heading8, ";
                sql += @" 		'' '' AS Heading9 ";
                sql += @" FROM	APPLICATION_USER AS au WITH (nolock) INNER JOIN ";
                sql += @"         TASKLIST AS tl with (nolock) ON au.USER_RID = tl.USER_RID INNER JOIN ";
                sql += @"         TASK_FORECAST_DETAIL AS tfd with (nolock) ON tl.TASKLIST_RID = tfd.TASKLIST_RID INNER JOIN ";
                sql += @"         METHOD AS m WITH (nolock) ON tfd.METHOD_RID = m.METHOD_RID ";
                sql += @" WHERE	(tl.SYSTEM_GENERATED_IND = ''0'') ";
                sql += @" 		AND	(m.METHOD_RID = @inUseRID)')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" --================================= ";
                sql += @" -- 'Matrix Balance Method-Workflow' ";
                sql += @" -- Enum 84.1 ";
                sql += @" --================================= ";
                sql = @" INSERT INTO DETAIL_INFO  (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES        (84, 1, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT	@severity as Severity, ";
                sql += @"         m.METHOD_NAME AS Header1, ";
                sql += @" 		Case w.WORKFLOW_TYPE_ID ";
                sql += @" 			WHEN ''800825'' THEN ''Forecast Workflow'' ";
                sql += @" 			WHEN ''800826'' THEN ''Allocation Workflow'' ";
                sql += @" 			WHEN ''800827'' THEN ''Assortment Workflow'' ";
                sql += @" 			ELSE ''Workflow'' ";
                sql += @" 		END AS Header2, ";
                sql += @" 	w.WORKFLOW_NAME AS Header3, ";
                sql += @" 	w.WORKFLOW_DESCRIPTION AS Header4, ";
                sql += @" 	au.USER_NAME AS Header5, ";
                sql += @" 	@severity AS Header6 ";
                sql += @" 	, '' '' AS [Heading7] ";
                sql += @" 	, '' '' AS [Heading8] ";
                sql += @" 	, '' '' AS [Heading9] ";
                sql += @" FROM	WORKFLOW_STEP_OTSPLAN AS wso WITH (nolock) INNER JOIN ";
                sql += @" 	WORKFLOW AS w WITH (nolock) ON w.WORKFLOW_RID = wso.WORKFLOW_RID INNER JOIN ";
                sql += @" 	METHOD AS m WITH (nolock) ON m.METHOD_RID = wso.METHOD_RID INNER JOIN ";
                sql += @" 	APPLICATION_USER AS au WITH (nolock) ON au.USER_RID = w.WORKFLOW_USER_RID ";
                sql += @" WHERE	(wso.ACTION_METHOD_TYPE = 802101) ";
                sql += @" 	AND m.METHOD_RID = @inUseRID')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" --================================= ";
                sql += @" -- 'Matrix Balance Method-Task List' ";
                sql += @" -- Enum 84.2 ";
                sql += @" --================================= ";
                sql = @" INSERT INTO DETAIL_INFO  (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES        (84, 2, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT	@severity as Severity, ";
                sql += @"         m.METHOD_NAME AS Header1, ";
                sql += @" 		''Task List'' AS Header2, ";
                sql += @" 		tl.TASKLIST_NAME AS Header3, ";
                sql += @" 		'''' AS Heading4, ";
                sql += @" 		au.USER_NAME AS Header5, ";
                sql += @" 		@severity AS Header6, ";
                sql += @" 		'' '' AS Heading7, ";
                sql += @" 		'' '' AS Heading8, ";
                sql += @" 		'' '' AS Heading9 ";
                sql += @" FROM	APPLICATION_USER AS au WITH (nolock) INNER JOIN ";
                sql += @"         TASKLIST AS tl with (nolock) ON au.USER_RID = tl.USER_RID INNER JOIN ";
                sql += @"         TASK_FORECAST_DETAIL AS tfd with (nolock) ON tl.TASKLIST_RID = tfd.TASKLIST_RID INNER JOIN ";
                sql += @"         METHOD AS m WITH (nolock) ON tfd.METHOD_RID = m.METHOD_RID ";
                sql += @" WHERE	(tl.SYSTEM_GENERATED_IND = ''0'') ";
                sql += @" 		AND	(tfd.METHOD_RID =  @inUseRID)')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" --================================= ";
                sql += @" -- 'Modify Sales Method-Workflow' ";
                sql += @" -- Enum 85.1 ";
                sql += @" --================================= ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES        (85, 1, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT	@severity as Severity, ";
                sql += @" m.METHOD_NAME AS Header1, ";
                sql += @" 		Case w.WORKFLOW_TYPE_ID ";
                sql += @" 			WHEN ''800825'' THEN ''Forecast Workflow'' ";
                sql += @" 			WHEN ''800826'' THEN ''Allocation Workflow'' ";
                sql += @" 			WHEN ''800827'' THEN ''Assortment Workflow'' ";
                sql += @" 			ELSE ''Workflow'' ";
                sql += @" 		END AS Header2, ";
                sql += @" 	w.WORKFLOW_NAME AS Header3, ";
                sql += @" 	w.WORKFLOW_DESCRIPTION AS Header4, ";
                sql += @" 	au.USER_NAME AS Header5, ";
                sql += @" 	@severity AS Header6 ";
                sql += @" 	, '' '' AS [Heading7] ";
                sql += @" 	, '' '' AS [Heading8] ";
                sql += @" 	, '' '' AS [Heading9] ";
                sql += @" FROM	WORKFLOW_STEP_OTSPLAN AS wso WITH (nolock) INNER JOIN ";
                sql += @" 	WORKFLOW AS w WITH (nolock) ON w.WORKFLOW_RID = wso.WORKFLOW_RID INNER JOIN ";
                sql += @" 	METHOD AS m WITH (nolock) ON m.METHOD_RID = wso.METHOD_RID INNER JOIN ";
                sql += @" 	APPLICATION_USER AS au WITH (nolock) ON au.USER_RID = w.WORKFLOW_USER_RID ";
                sql += @" WHERE	(wso.ACTION_METHOD_TYPE = 802132) ";
                sql += @" 	AND m.METHOD_RID = @inUseRID')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" --================================= ";
                sql += @" -- 'Modify Sales Method-Task List' ";
                sql += @" -- Enum 85.2 ";
                sql += @" --================================= ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES        (85, 2, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT	@severity as Severity, ";
                sql += @" m.METHOD_NAME AS Header1, ";
                sql += @" 		''Task List'' AS Header2, ";
                sql += @" 		tl.TASKLIST_NAME AS Header3, ";
                sql += @" 		'''' AS Header4, ";
                sql += @" 		au.USER_NAME AS Header5, ";
                sql += @" 		@severity AS Header6, ";
                sql += @" 		'' '' AS Heading7, ";
                sql += @" 		'' '' AS Heading8, ";
                sql += @" 		'' '' AS Heading9 ";
                sql += @" FROM	TASK_FORECAST_DETAIL with (nolock) INNER JOIN ";
                sql += @"         METHOD AS m WITH (nolock) ON TASK_FORECAST_DETAIL.METHOD_RID = m.METHOD_RID INNER JOIN ";
                sql += @"         TASKLIST AS tl with (nolock) INNER JOIN ";
                sql += @"         APPLICATION_USER AS au WITH (nolock) ";
                sql += @" 		ON tl.USER_RID = au.USER_RID ";
                sql += @" 		ON TASK_FORECAST_DETAIL.TASKLIST_RID = tl.TASKLIST_RID ";
                sql += @" WHERE	(tl.SYSTEM_GENERATED_IND = ''0'') ";
                sql += @" 		AND	(m.METHOD_RID = @inUseRID)')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" --================================= ";
                sql += @" -- 'Forecast Spread Method-Workflow' ";
                sql += @" -- Enum 86.1 ";
                sql += @" --================================= ";
                sql = @" INSERT INTO DETAIL_INFO  (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES        (86, 1, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT @severity as Severity, ";
                sql += @" m.METHOD_NAME AS Header1, ";
                sql += @" 		Case w.WORKFLOW_TYPE_ID ";
                sql += @" 			WHEN ''800825'' THEN ''Forecast Workflow'' ";
                sql += @" 			WHEN ''800826'' THEN ''Allocation Workflow'' ";
                sql += @" 			WHEN ''800827'' THEN ''Assortment Workflow'' ";
                sql += @" 			ELSE ''Workflow'' ";
                sql += @" 		END AS Header2, ";
                sql += @" 	w.WORKFLOW_NAME AS Header3, ";
                sql += @" 	w.WORKFLOW_DESCRIPTION AS Header4, ";
                sql += @" 	au.USER_NAME AS Header5, ";
                sql += @" 	@severity AS Header6 ";
                sql += @" 	, '' '' AS [Heading7] ";
                sql += @" 	, '' '' AS [Heading8] ";
                sql += @" 	, '' '' AS [Heading9] ";
                sql += @" FROM WORKFLOW_STEP_OTSPLAN AS wso WITH (nolock) INNER JOIN ";
                sql += @"    WORKFLOW AS w WITH (nolock) ON w.WORKFLOW_RID = wso.WORKFLOW_RID INNER JOIN ";
                sql += @"    METHOD AS m WITH (nolock) ON m.METHOD_RID = wso.METHOD_RID INNER JOIN ";
                sql += @"    APPLICATION_USER AS au WITH (nolock) ON au.USER_RID = w.WORKFLOW_USER_RID ";
                sql += @" WHERE (wso.ACTION_METHOD_TYPE = 802128) ";
                sql += @"   AND m.METHOD_RID = @inUseRID')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" --================================= ";
                sql += @" -- 'Forecast Spread Method-Task List' ";
                sql += @" -- Enum 86.2 ";
                sql += @" --================================= ";
                sql = @" INSERT INTO DETAIL_INFO  (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES        (86, 2, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT	@severity as Severity, ";
                sql += @"         m.METHOD_NAME AS Heading1, ";
                sql += @" 		''Forecast Spread Method-Task List'' AS Heading2, ";
                sql += @" 		TASKLIST.TASKLIST_NAME AS Heading3, ";
                sql += @" 		'''' AS Heading4, ";
                sql += @" 		au.USER_NAME AS Heading5, ";
                sql += @" 		@severity AS Heading6, ";
                sql += @" 		'' '' AS Heading7, ";
                sql += @" 		'' '' AS Heading8, ";
                sql += @" 		'' '' AS Heading9 ";
                sql += @" FROM	TASKLIST with (nolock) INNER JOIN ";
                sql += @"         APPLICATION_USER AS au WITH (nolock) ON TASKLIST.USER_RID = au.USER_RID INNER JOIN ";
                sql += @"         METHOD AS m WITH (nolock) INNER JOIN ";
                sql += @"         TASK_FORECAST_DETAIL with (nolock) ON m.METHOD_RID = TASK_FORECAST_DETAIL.METHOD_RID ON ";
                sql += @"         TASKLIST.TASKLIST_RID = TASK_FORECAST_DETAIL.TASKLIST_RID ";
                sql += @" WHERE	(TASKLIST.SYSTEM_GENERATED_IND = ''0'') ";
                sql += @" 		AND	(m.METHOD_RID = @inUseRID)')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" --================================= ";
                sql += @" -- 'Copy Chain Forecast Method-Workflow' ";
                sql += @" -- Enum 87.1 ";
                sql += @" --================================= ";
                sql = @" INSERT INTO DETAIL_INFO  (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES        (87, 1, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT	@severity as Severity, ";
                sql += @"         m.METHOD_NAME AS Header1, ";
                sql += @" 		Case w.WORKFLOW_TYPE_ID ";
                sql += @" 			WHEN ''800825'' THEN ''Forecast Workflow'' ";
                sql += @" 			WHEN ''800826'' THEN ''Allocation Workflow'' ";
                sql += @" 			WHEN ''800827'' THEN ''Assortment Workflow'' ";
                sql += @" 			ELSE ''Workflow'' ";
                sql += @" 		END AS Header2, ";
                sql += @" 		w.WORKFLOW_NAME AS Header3, ";
                sql += @" 		w.WORKFLOW_DESCRIPTION AS Header4, ";
                sql += @" 		au.USER_NAME AS Header5, ";
                sql += @" 		@severity AS Header6 ";
                sql += @" 		, '' '' AS [Heading7] ";
                sql += @" 		, '' '' AS [Heading8] ";
                sql += @" 		, '' '' AS [Heading9] ";
                sql += @" FROM WORKFLOW_STEP_OTSPLAN AS wso WITH (nolock) INNER JOIN ";
                sql += @" 		WORKFLOW AS w WITH (nolock) ON w.WORKFLOW_RID = wso.WORKFLOW_RID INNER JOIN ";
                sql += @" 		METHOD AS m WITH (nolock) ON m.METHOD_RID = wso.METHOD_RID INNER JOIN ";
                sql += @" 		APPLICATION_USER AS au WITH (nolock) ON au.USER_RID = w.WORKFLOW_USER_RID ";
                sql += @" WHERE		(wso.ACTION_METHOD_TYPE = 802129) ";
                sql += @"   AND m.METHOD_RID = @inUseRID')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" --================================= ";
                sql += @" -- 'Copy Chain Forecast Method-Task List' ";
                sql += @" -- Enum 87.2 ";
                sql += @" --================================= ";
                sql = @" INSERT INTO DETAIL_INFO  (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES        (87, 2, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT	@severity as Severity, ";
                sql += @"         m.METHOD_NAME AS Heading1, ";
                sql += @" 		''Task List'' AS Heading2, ";
                sql += @" 		tl.TASKLIST_NAME AS Heading3, ";
                sql += @" 		'''' AS Heading4, ";
                sql += @" 		au.USER_NAME AS Heading5, ";
                sql += @" 		@severity AS Heading6, ";
                sql += @" 		'' '' AS Heading7, ";
                sql += @" 		'' '' AS Heading8, ";
                sql += @" 		'' '' AS Heading9 ";
                sql += @" FROM	TASKLIST tl with (nolock) INNER JOIN ";
                sql += @" 		APPLICATION_USER AS au WITH (nolock) ON tl.USER_RID = au.USER_RID INNER JOIN ";
                sql += @" 		METHOD AS m WITH (nolock) INNER JOIN ";
                sql += @" 		TASK_FORECAST_DETAIL with (nolock) ";
                sql += @" 		ON m.METHOD_RID = TASK_FORECAST_DETAIL.METHOD_RID ";
                sql += @" 		ON tl.TASKLIST_RID = TASK_FORECAST_DETAIL.TASKLIST_RID ";
                sql += @" WHERE	(tl.SYSTEM_GENERATED_IND = ''0'') ";
                sql += @" 		AND	(m.METHOD_RID =  @inUseRID)')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" --================================= ";
                sql += @" -- 'Copy Store Forecast Method-Workflow' ";
                sql += @" -- Enum 88.1 ";
                sql += @" --================================= ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES        (88, 1, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT @severity as Severity, ";
                sql += @"         m.METHOD_NAME AS Header1, ";
                sql += @" 		Case w.WORKFLOW_TYPE_ID ";
                sql += @" 			WHEN ''800825'' THEN ''Forecast Workflow'' ";
                sql += @" 			WHEN ''800826'' THEN ''Allocation Workflow'' ";
                sql += @" 			WHEN ''800827'' THEN ''Assortment Workflow'' ";
                sql += @" 			ELSE ''Workflow'' ";
                sql += @" 		END AS Header2, ";
                sql += @" 		w.WORKFLOW_NAME AS Header3, ";
                sql += @" 		w.WORKFLOW_DESCRIPTION AS Header4, ";
                sql += @" 		au.USER_NAME AS Header5, ";
                sql += @" 		@severity AS Header6 ";
                sql += @" 		, '' '' AS [Heading7] ";
                sql += @" 		, '' '' AS [Heading8] ";
                sql += @" 		, '' '' AS [Heading9] ";
                sql += @" FROM WORKFLOW_STEP_OTSPLAN AS wso WITH (nolock) INNER JOIN ";
                sql += @"    WORKFLOW AS w WITH (nolock) ON w.WORKFLOW_RID = wso.WORKFLOW_RID INNER JOIN ";
                sql += @"    METHOD AS m WITH (nolock) ON m.METHOD_RID = wso.METHOD_RID INNER JOIN ";
                sql += @"    APPLICATION_USER AS au WITH (nolock) ON au.USER_RID = w.WORKFLOW_USER_RID ";
                sql += @" WHERE (wso.ACTION_METHOD_TYPE = 802130) ";
                sql += @"   AND m.METHOD_RID = @inUseRID')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" --================================= ";
                sql += @" -- 'Copy Store Forecast Method-Workflow' ";
                sql += @" -- Enum 88.2 ";
                sql += @" --================================= ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES        (88, 2, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT	@severity as Severity, ";
                sql += @"         m.METHOD_NAME AS Header1, ";
                sql += @" 		''Task List'' AS Heading2, ";
                sql += @" 		TASKLIST.TASKLIST_NAME AS Header3, ";
                sql += @" 		'''' AS Heading4, ";
                sql += @" 		au.USER_NAME AS Header5, ";
                sql += @" 		@severity AS Header6, ";
                sql += @" 		'' '' AS Heading7, ";
                sql += @" 		'' '' AS Heading8, ";
                sql += @" 		'' '' AS Heading9 ";
                sql += @" FROM	TASKLIST with (nolock) INNER JOIN ";
                sql += @"         APPLICATION_USER AS au WITH (nolock) ON TASKLIST.USER_RID = au.USER_RID INNER JOIN ";
                sql += @"         METHOD AS m WITH (nolock) INNER JOIN ";
                sql += @"         TASK_FORECAST_DETAIL with (nolock) ";
                sql += @" 			ON m.METHOD_RID = TASK_FORECAST_DETAIL.METHOD_RID ";
                sql += @" 			ON TASKLIST.TASKLIST_RID = TASK_FORECAST_DETAIL.TASKLIST_RID ";
                sql += @" WHERE	(TASKLIST.SYSTEM_GENERATED_IND = ''0'') ";
                sql += @" 		AND	(m.METHOD_RID =  @inUseRID)')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" --================================= ";
                sql += @" -- 'Export Method Workflow' ";
                sql += @" -- Enum 89.1 ";
                sql += @" -- Export	= 802136 ";
                sql += @" --================================= ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES        (89, 1, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT @severity as Severity, ";
                sql += @"        m.METHOD_NAME as Method, ";
                sql += @" 		Case w.WORKFLOW_TYPE_ID ";
                sql += @" 			WHEN ''800825'' THEN ''Forecast Workflow'' ";
                sql += @" 			WHEN ''800826'' THEN ''Allocation Workflow'' ";
                sql += @" 			WHEN ''800827'' THEN ''Assortment Workflow'' ";
                sql += @" 			ELSE ''Workflow'' ";
                sql += @" 		END AS Type, ";
                sql += @" 	w.WORKFLOW_NAME as Workflow, ";
                sql += @" 	w.WORKFLOW_DESCRIPTION as Description, ";
                sql += @" 	au.USER_NAME as UserID, ";
                sql += @" 	@severity as Fred ";
                sql += @" 	, '' '' AS [Heading7] ";
                sql += @" 	, '' '' AS [Heading8] ";
                sql += @" 	, '' '' AS [Heading9] ";
                sql += @" from WORKFLOW_STEP_OTSPLAN wso with (nolock) ";
                sql += @" 	join WORKFLOW w with (nolock) ";
                sql += @" 	on w.WORKFLOW_RID = wso.WORKFLOW_RID ";
                sql += @" 	join METHOD m with (nolock) ";
                sql += @" 	on m.METHOD_RID = wso.METHOD_RID ";
                sql += @" 	join APPLICATION_USER au with (nolock) ";
                sql += @" 	on au.USER_RID = w.WORKFLOW_USER_RID ";
                //BEGIN TT#3140-M-VStuart-Users Global Unlock methods appear In Use by all other users-ANFUser
                //sql += @" where (wso.ACTION_METHOD_TYPE = 802136) -- Export ";
                sql += @" where (wso.ACTION_METHOD_TYPE = 802136) ";
                //END TT#3140-M-VStuart-Users Global Unlock methods appear In Use by all other users-ANFUser
                sql += @" 	AND m.METHOD_RID = @inUseRID')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" --==================================== ";
                sql += @" -- 'Export Method Workflow-Task List' ";
                sql += @" -- Enum 89.2 ";
                sql += @" --==================================== ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES        (89, 2, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT	@severity as Severity, ";
                sql += @"         m.METHOD_NAME AS Header1, ";
                sql += @" 		''Task List'' AS Header2, ";
                sql += @" 		TASKLIST.TASKLIST_NAME AS Header3, ";
                sql += @" 		'''' AS Heading4, ";
                sql += @" 		au.USER_NAME AS Header5, ";
                sql += @" 		@severity AS Header6, ";
                sql += @" 		'' '' AS Heading7, ";
                sql += @" 		'' '' AS Heading8, ";
                sql += @" 		'' '' AS Heading9 ";
                sql += @" FROM	TASKLIST with (nolock) INNER JOIN ";
                sql += @"         APPLICATION_USER AS au WITH (nolock) ON TASKLIST.USER_RID = au.USER_RID INNER JOIN ";
                sql += @"         METHOD AS m WITH (nolock) INNER JOIN ";
                sql += @"         TASK_FORECAST_DETAIL with (nolock) ";
                sql += @" 			ON m.METHOD_RID = TASK_FORECAST_DETAIL.METHOD_RID ";
                sql += @" 			ON TASKLIST.TASKLIST_RID = TASK_FORECAST_DETAIL.TASKLIST_RID ";
                sql += @" WHERE	(TASKLIST.SYSTEM_GENERATED_IND = ''0'') ";
                sql += @" 		AND	(m.METHOD_RID = @inUseRID)')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" --================================= ";
                sql += @" -- 'Global Unlock Method-Workflow' ";
                sql += @" -- Enum 90.1 ";
                sql += @" -- GlobalUnlock = 802137 ";
                sql += @" --================================= ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES        (90, 1, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT @severity as Severity, ";
                sql += @"        m.METHOD_NAME as Method, ";
                sql += @" 		Case w.WORKFLOW_TYPE_ID ";
                sql += @" 			WHEN ''800825'' THEN ''Forecast Workflow'' ";
                sql += @" 			WHEN ''800826'' THEN ''Allocation Workflow'' ";
                sql += @" 			WHEN ''800827'' THEN ''Assortment Workflow'' ";
                sql += @" 			ELSE ''Workflow'' ";
                sql += @" 		END AS Type, ";
                sql += @" 	w.WORKFLOW_NAME as Workflow, ";
                sql += @" 	w.WORKFLOW_DESCRIPTION as Description, ";
                sql += @" 	au.USER_NAME as UserID, ";
                sql += @" 	@severity as Fred ";
                sql += @" 	, '' '' AS [Heading7] ";
                sql += @" 	, '' '' AS [Heading8] ";
                sql += @" 	, '' '' AS [Heading9] ";
                sql += @" from WORKFLOW_STEP_OTSPLAN wso with (nolock) ";
                sql += @" 	join WORKFLOW w with (nolock) ";
                sql += @" 	on w.WORKFLOW_RID = wso.WORKFLOW_RID ";
                sql += @" 	join METHOD m with (nolock) ";
                sql += @" 	on m.METHOD_RID = wso.METHOD_RID ";
                sql += @" 	join APPLICATION_USER au with (nolock) ";
                sql += @" 	on au.USER_RID = w.WORKFLOW_USER_RID ";
                //BEGIN TT#3140-M-VStuart-Users Global Unlock methods appear In Use by all other users-ANFUser
                //sql += @" where wso.ACTION_METHOD_TYPE = 802137 -- GlobalUnlock = 802137 ";
                sql += @" where wso.ACTION_METHOD_TYPE = 802137 ";
                //END TT#3140-M-VStuart-Users Global Unlock methods appear In Use by all other users-ANFUser
                sql += @" 	AND m.METHOD_RID = @inUseRID')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" --================================= ";
                sql += @" -- 'Global Unlock Method-TaskList' ";
                sql += @" -- Enum 90.2 ";
                sql += @" --================================= ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES        (90, 2, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT @severity as Severity, ";
                sql += @"        m.METHOD_NAME AS Header1, ";
                sql += @" 		''Task List'' AS Header2, ";
                sql += @" 		tl.TASKLIST_NAME AS Header3, ";
                sql += @" 		'''' AS Heading4, ";
                sql += @" 		au.USER_NAME AS Header5, ";
                sql += @" 		@severity AS Header6, ";
                sql += @" 		'' '' AS Heading7, ";
                sql += @" 		'' '' AS Heading8, ";
                sql += @" 		'' '' AS Heading9 ";
                sql += @" FROM	APPLICATION_USER AS au WITH (nolock) INNER JOIN ";
                sql += @"         TASKLIST AS tl with (nolock) ON au.USER_RID = tl.USER_RID INNER JOIN ";
                sql += @"         TASK_FORECAST_DETAIL AS tfd with (nolock) ON tl.TASKLIST_RID = tfd.TASKLIST_RID INNER JOIN ";
                sql += @"         METHOD AS m WITH (nolock) ON tfd.METHOD_RID = m.METHOD_RID ";
                sql += @"  AND tfd.METHOD_RID = @inUseRID')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" --================================= ";
                sql += @" -- 'Rollup Method-Workflow' ";
                sql += @" -- Enum 91.1 ";
                sql += @" -- Rollup = 802139 ";
                sql += @" --================================= ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES        (91, 1, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT @severity as Severity, ";
                sql += @"        m.METHOD_NAME as Method, ";
                sql += @" 		Case w.WORKFLOW_TYPE_ID ";
                sql += @" 			WHEN ''800825'' THEN ''Forecast Workflow'' ";
                sql += @" 			WHEN ''800826'' THEN ''Allocation Workflow'' ";
                sql += @" 			WHEN ''800827'' THEN ''Assortment Workflow'' ";
                sql += @" 			ELSE ''Workflow'' ";
                sql += @" 		END AS Type, ";
                sql += @" 	w.WORKFLOW_NAME as Workflow, ";
                sql += @" 	w.WORKFLOW_DESCRIPTION as Description, ";
                sql += @" 	au.USER_NAME as UserID, ";
                sql += @" 	@severity as Fred ";
                sql += @" 	, '' '' AS [Heading7] ";
                sql += @" 	, '' '' AS [Heading8] ";
                sql += @" 	, '' '' AS [Heading9] ";
                sql += @" from WORKFLOW_STEP_OTSPLAN wso with (nolock) ";
                sql += @"   join WORKFLOW w with (nolock) ";
                sql += @"    on w.WORKFLOW_RID = wso.WORKFLOW_RID ";
                sql += @"   join METHOD m with (nolock) ";
                sql += @"    on m.METHOD_RID = wso.METHOD_RID ";
                sql += @"   join APPLICATION_USER au with (nolock) ";
                sql += @"    on au.USER_RID = w.WORKFLOW_USER_RID ";
                sql += @" where ";
                //BEGIN TT#3140-M-VStuart-Users Global Unlock methods appear In Use by all other users-ANFUser
                //sql += @"   (wso.ACTION_METHOD_TYPE = 802139) -- Rollup = 802139 ";
                sql += @"   (wso.ACTION_METHOD_TYPE = 802139) ";
                //END TT#3140-M-VStuart-Users Global Unlock methods appear In Use by all other users-ANFUser
                sql += @"   AND m.METHOD_RID = @inUseRID')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" --================================= ";
                sql += @" -- 'Rollup Method-TaskList' ";
                sql += @" -- Enum 91.2 ";
                sql += @" --================================= ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES        (91, 2, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT @severity as Severity, ";
                sql += @"        m.METHOD_NAME AS Header1, ";
                sql += @" 		''Task List'' AS Header2, ";
                sql += @" 		tl.TASKLIST_NAME AS Header3, ";
                sql += @" 		'''' AS Heading4, ";
                sql += @" 		au.USER_NAME AS Header5, ";
                sql += @" 		@severity AS Header6, ";
                sql += @" 		'' '' AS Heading7, ";
                sql += @" 		'' '' AS Heading8, ";
                sql += @" 		'' '' AS Heading9 ";
                sql += @" FROM	APPLICATION_USER AS au WITH (nolock) INNER JOIN ";
                sql += @"         TASKLIST AS tl with (nolock) ON au.USER_RID = tl.USER_RID INNER JOIN ";
                sql += @"         TASK_FORECAST_DETAIL AS tfd with (nolock) ON tl.TASKLIST_RID = tfd.TASKLIST_RID INNER JOIN ";
                sql += @"         METHOD AS m WITH (nolock) ON tfd.METHOD_RID = m.METHOD_RID ";
                sql += @" AND tfd.METHOD_RID = @inUseRID')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" --============================= ";
                sql += @" -- 'General Allocation Method-Workflow' ";
                sql += @" -- Enum 92 ";
                sql += @" --============================= ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES        (92, 1, 'In Use', ";
                sql += @"   [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @"   SELECT @severity as Severity, ";
                sql += @"   m.METHOD_NAME AS Header1, ";
                sql += @" 		Case w.WORKFLOW_TYPE_ID ";
                sql += @" 			WHEN ''800825'' THEN ''Forecast Workflow'' ";
                sql += @" 			WHEN ''800826'' THEN ''Allocation Workflow'' ";
                sql += @" 			WHEN ''800827'' THEN ''Assortment Workflow'' ";
                sql += @" 			ELSE ''Workflow'' ";
                sql += @" 		END AS Header2, ";
                sql += @"   w.WORKFLOW_NAME AS Header3, ";
                sql += @"   w.WORKFLOW_DESCRIPTION AS Header4, ";
                sql += @"   au.USER_NAME AS Header5, ";
                sql += @"   @severity AS Header6 ";
                sql += @" 		, '' '' AS [Heading7] ";
                sql += @" 		, '' '' AS [Heading8] ";
                sql += @" 		, '' '' AS [Heading9] ";
                sql += @" FROM WORKFLOW_STEP_ALLOCATION AS wsa WITH (nolock) INNER JOIN ";
                sql += @"   WORKFLOW AS w WITH (nolock) ON w.WORKFLOW_RID = wsa.WORKFLOW_RID INNER JOIN ";
                sql += @"   METHOD AS m WITH (nolock) ON m.METHOD_RID = wsa.METHOD_RID INNER JOIN ";
                sql += @"   APPLICATION_USER AS au WITH (nolock) ON au.USER_RID = w.WORKFLOW_USER_RID ";
                sql += @" WHERE (wsa.ACTION_METHOD_TYPE = 802102) ";
                sql += @"   AND m.METHOD_RID = @inUseRID')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" --============================= ";
                sql += @" -- 'MethodAllocationOverride' ";
                sql += @" -- Enum 93 ";
                sql += @" --============================= ";
                sql = @" INSERT INTO DETAIL_INFO  (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES        (93, 1, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT @severity as Severity, ";
                sql += @" m.METHOD_NAME as Method, ";
                sql += @" 		Case w.WORKFLOW_TYPE_ID ";
                sql += @" 			WHEN ''800825'' THEN ''Forecast Workflow'' ";
                sql += @" 			WHEN ''800826'' THEN ''Allocation Workflow'' ";
                sql += @" 			WHEN ''800827'' THEN ''Assortment Workflow'' ";
                sql += @" 			ELSE ''Workflow'' ";
                sql += @" 		END AS Type, ";
                sql += @" 		w.WORKFLOW_NAME as Workflow, ";
                sql += @" 		w.WORKFLOW_DESCRIPTION as Description, ";
                sql += @" 		au.USER_NAME as UserID, ";
                sql += @" 		@severity as Fred ";
                sql += @" 		, '' '' AS [Heading7] ";
                sql += @" 		, '' '' AS [Heading8] ";
                sql += @" 		, '' '' AS [Heading9] ";
                sql += @" from WORKFLOW_STEP_ALLOCATION wsa WITH (nolock) ";
                sql += @"   join WORKFLOW w WITH (nolock) ";
                sql += @"    on w.WORKFLOW_RID = wsa.WORKFLOW_RID ";
                sql += @"   join METHOD m WITH (nolock) ";
                sql += @"    on m.METHOD_RID = wsa.METHOD_RID ";
                sql += @"   join APPLICATION_USER au WITH (nolock) ";
                sql += @"    on au.USER_RID = w.WORKFLOW_USER_RID ";
                sql += @" where ";
                sql += @"   wsa.ACTION_METHOD_TYPE = 802103 ";
                sql += @"   AND m.METHOD_RID = @inUseRID')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" --============================= ";
                sql += @" -- 'MethodRule' ";
                sql += @" -- Enum 94 ";
                sql += @" --============================= ";
                sql = @" INSERT INTO DETAIL_INFO  (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES        (94, 1, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT @severity as Severity, ";
                sql += @" m.METHOD_NAME as Method, ";
                sql += @" 		Case w.WORKFLOW_TYPE_ID ";
                sql += @" 			WHEN ''800825'' THEN ''Forecast Workflow'' ";
                sql += @" 			WHEN ''800826'' THEN ''Allocation Workflow'' ";
                sql += @" 			WHEN ''800827'' THEN ''Assortment Workflow'' ";
                sql += @" 			ELSE ''Workflow'' ";
                sql += @" 		END AS Type, ";
                sql += @" 	w.WORKFLOW_NAME as Workflow, ";
                sql += @" 	w.WORKFLOW_DESCRIPTION as Description, ";
                sql += @" 	au.USER_NAME as UserID, ";
                sql += @" 	@severity as Fred ";
                sql += @" 	, '' '' AS [Heading7] ";
                sql += @" 	, '' '' AS [Heading8] ";
                sql += @" 	, '' '' AS [Heading9] ";
                sql += @" from WORKFLOW_STEP_ALLOCATION wsa WITH (nolock) ";
                sql += @" 	join WORKFLOW w WITH (nolock) ";
                sql += @" 	on w.WORKFLOW_RID = wsa.WORKFLOW_RID ";
                sql += @" 	join METHOD m WITH (nolock) ";
                sql += @" 	on m.METHOD_RID = wsa.METHOD_RID ";
                sql += @" 	join APPLICATION_USER au WITH (nolock) ";
                sql += @" 	on au.USER_RID = w.WORKFLOW_USER_RID ";
                sql += @" where wsa.ACTION_METHOD_TYPE = 802105 ";
                sql += @" 	AND m.METHOD_RID = @inUseRID')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" --============================= ";
                sql += @" -- 'Velocity Method-Workflow' ";
                sql += @" -- Enum 95 ";
                sql += @" --============================= ";
                sql = @" INSERT INTO DETAIL_INFO  (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES        (95, 1, 'In Use', ";
                sql += @" 	[dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" 	SELECT @severity as Severity, ";
                sql += @" 	m.METHOD_NAME AS Header1, ";
                sql += @" 		Case w.WORKFLOW_TYPE_ID ";
                sql += @" 			WHEN ''800825'' THEN ''Forecast Workflow'' ";
                sql += @" 			WHEN ''800826'' THEN ''Allocation Workflow'' ";
                sql += @" 			WHEN ''800827'' THEN ''Assortment Workflow'' ";
                sql += @" 			ELSE ''Workflow'' ";
                sql += @" 		END AS Header2, ";
                sql += @" 		w.WORKFLOW_NAME AS Header3, ";
                sql += @" 		w.WORKFLOW_DESCRIPTION AS Header4, ";
                sql += @" 		au.USER_NAME AS Header5, ";
                sql += @" 		@severity AS Header6 ";
                sql += @" 		, '' '' AS [Heading7] ";
                sql += @" 		, '' '' AS [Heading8] ";
                sql += @" 		, '' '' AS [Heading9] ";
                sql += @" FROM	WORKFLOW_STEP_ALLOCATION AS wsa WITH (nolock) INNER JOIN ";
                sql += @" 		WORKFLOW AS w WITH (nolock) ON w.WORKFLOW_RID = wsa.WORKFLOW_RID INNER JOIN ";
                sql += @" 		METHOD AS m WITH (nolock) ON m.METHOD_RID = wsa.METHOD_RID INNER JOIN ";
                sql += @" 		APPLICATION_USER AS au WITH (nolock) ON au.USER_RID = w.WORKFLOW_USER_RID ";
                sql += @" WHERE	(wsa.ACTION_METHOD_TYPE =  802104) ";
                sql += @" 		AND m.METHOD_RID = @inUseRID')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" --================================= ";
                sql += @" -- 'MethodSizeNeedAllocation' ";
                sql += @" -- Enum 96 ";
                sql += @" --================================= ";
                sql = @" INSERT INTO DETAIL_INFO  (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES        (96, 1, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT @severity as Severity, ";
                sql += @" m.METHOD_NAME AS Header1, ";
                sql += @" 		Case w.WORKFLOW_TYPE_ID ";
                sql += @" 			WHEN ''800825'' THEN ''Forecast Workflow'' ";
                sql += @" 			WHEN ''800826'' THEN ''Allocation Workflow'' ";
                sql += @" 			WHEN ''800827'' THEN ''Assortment Workflow'' ";
                sql += @" 			ELSE ''Workflow'' ";
                sql += @" 		END AS Header2, ";
                sql += @" 	w.WORKFLOW_NAME AS Header3, ";
                sql += @" 	w.WORKFLOW_DESCRIPTION AS Header4, ";
                sql += @" 	au.USER_NAME AS Header5, ";
                sql += @" 	@severity AS Header6 ";
                sql += @" 	, '' '' AS [Heading7] ";
                sql += @" 	, '' '' AS [Heading8] ";
                sql += @" 	, '' '' AS [Heading9] ";
                sql += @" FROM WORKFLOW_STEP_ALLOCATION AS wsa WITH (nolock) INNER JOIN ";
                sql += @" 	WORKFLOW AS w WITH (nolock) ON w.WORKFLOW_RID = wsa.WORKFLOW_RID INNER JOIN ";
                sql += @" 	METHOD AS m WITH (nolock) ON m.METHOD_RID = wsa.METHOD_RID INNER JOIN ";
                sql += @" 	APPLICATION_USER AS au WITH (nolock) ON au.USER_RID = w.WORKFLOW_USER_RID ";
                sql += @" WHERE (wsa.ACTION_METHOD_TYPE =  802109) ";
                sql += @" 	AND m.METHOD_RID = @inUseRID')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" --================================= ";
                sql += @" -- 'MethodFillSizeHolesAllocation' ";
                sql += @" -- Enum 97 ";
                sql += @" --================================= ";
                sql = @" INSERT INTO DETAIL_INFO  (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES        (97, 1, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT @severity as Severity, ";
                sql += @" m.METHOD_NAME AS Header1, ";
                sql += @" 		Case w.WORKFLOW_TYPE_ID ";
                sql += @" 			WHEN ''800825'' THEN ''Forecast Workflow'' ";
                sql += @" 			WHEN ''800826'' THEN ''Allocation Workflow'' ";
                sql += @" 			WHEN ''800827'' THEN ''Assortment Workflow'' ";
                sql += @" 			ELSE ''Workflow'' ";
                sql += @" 		END AS Header2, ";
                sql += @" 	w.WORKFLOW_NAME AS Header3, ";
                sql += @" 	w.WORKFLOW_DESCRIPTION AS Header4, ";
                sql += @" 	au.USER_NAME AS Header5, ";
                sql += @" 	@severity AS Header6 ";
                sql += @" 	, '' '' AS [Heading7] ";
                sql += @" 	, '' '' AS [Heading8] ";
                sql += @" 	, '' '' AS [Heading9] ";
                sql += @" FROM WORKFLOW_STEP_ALLOCATION AS wsa WITH (nolock) INNER JOIN ";
                sql += @"   WORKFLOW AS w WITH (nolock) ON w.WORKFLOW_RID = wsa.WORKFLOW_RID INNER JOIN ";
                sql += @"   METHOD AS m WITH (nolock) ON m.METHOD_RID = wsa.METHOD_RID INNER JOIN ";
                sql += @"   APPLICATION_USER AS au WITH (nolock) ON au.USER_RID = w.WORKFLOW_USER_RID ";
                sql += @" WHERE (wsa.ACTION_METHOD_TYPE =  802106) ";
                sql += @"   AND m.METHOD_RID = @inUseRID')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" --================================= ";
                sql += @" -- 'MethodBasisSizeAllocation' ";
                sql += @" -- Enum 98 ";
                sql += @" --================================= ";
                sql = @" INSERT INTO DETAIL_INFO  (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES        (98, 1, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT @severity as Severity, ";
                sql += @" m.METHOD_NAME AS Header1, ";
                sql += @" 		Case w.WORKFLOW_TYPE_ID ";
                sql += @" 			WHEN ''800825'' THEN ''Forecast Workflow'' ";
                sql += @" 			WHEN ''800826'' THEN ''Allocation Workflow'' ";
                sql += @" 			WHEN ''800827'' THEN ''Assortment Workflow'' ";
                sql += @" 			ELSE ''Workflow'' ";
                sql += @" 		END AS Header2, ";
                sql += @" 	w.WORKFLOW_NAME AS Header3, ";
                sql += @" 	w.WORKFLOW_DESCRIPTION AS Header4, ";
                sql += @" 	au.USER_NAME AS Header5, ";
                sql += @" 	@severity AS Header6 ";
                sql += @" 	, '' '' AS [Heading7] ";
                sql += @" 	, '' '' AS [Heading8] ";
                sql += @" 	, '' '' AS [Heading9] ";
                sql += @" FROM WORKFLOW_STEP_ALLOCATION AS wsa WITH (nolock) INNER JOIN ";
                sql += @" 	WORKFLOW AS w WITH (nolock) ON w.WORKFLOW_RID = wsa.WORKFLOW_RID INNER JOIN ";
                sql += @" 	METHOD AS m WITH (nolock) ON m.METHOD_RID = wsa.METHOD_RID INNER JOIN ";
                sql += @" 	APPLICATION_USER AS au WITH (nolock) ON au.USER_RID = w.WORKFLOW_USER_RID ";
                sql += @" WHERE (wsa.ACTION_METHOD_TYPE = 802107) ";
                sql += @" 	AND m.METHOD_RID = @inUseRID')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" --================================= ";
                sql += @" -- 'MethodSizeCurve' ";
                sql += @" -- Enum 119.1 ";
                sql += @" --================================= ";
                sql = @" INSERT INTO DETAIL_INFO  (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES        (119, 1, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT @severity as Severity, ";
                sql += @" m.METHOD_NAME AS Header1, ";
                sql += @" 		Case w.WORKFLOW_TYPE_ID ";
                sql += @" 			WHEN ''800825'' THEN ''Forecast Workflow'' ";
                sql += @" 			WHEN ''800826'' THEN ''Allocation Workflow'' ";
                sql += @" 			WHEN ''800827'' THEN ''Assortment Workflow'' ";
                sql += @" 			ELSE ''Workflow'' ";
                sql += @" 		END AS Header2, ";
                sql += @" 	w.WORKFLOW_NAME AS Header3, ";
                sql += @" 	w.WORKFLOW_DESCRIPTION AS Header4, ";
                sql += @" 	au.USER_NAME AS Header5, ";
                sql += @" 	@severity AS Header6 ";
                sql += @" 	, '' '' AS [Heading7] ";
                sql += @" 	, '' '' AS [Heading8] ";
                sql += @" 	, '' '' AS [Heading9] ";
                sql += @" FROM WORKFLOW_STEP_ALLOCATION AS wsa WITH (nolock) INNER JOIN ";
                sql += @" 	WORKFLOW AS w WITH (nolock) ON w.WORKFLOW_RID = wsa.WORKFLOW_RID INNER JOIN ";
                sql += @" 	METHOD AS m WITH (nolock) ON m.METHOD_RID = wsa.METHOD_RID INNER JOIN ";
                sql += @" 	APPLICATION_USER AS au WITH (nolock) ON au.USER_RID = w.WORKFLOW_USER_RID ";
                sql += @" WHERE (wsa.ACTION_METHOD_TYPE =  802140) ";
                sql += @" 	AND m.METHOD_RID = @inUseRID')) ";
                _dba.ExecuteNonQuery(sql);

                //BEGIN TT#608-MD-VStuart-Deleting Size Curve Method referenced in Tasklist
                sql = @" --================================= ";
                sql += @" -- 'MethodSizeCurve' ";
                sql += @" -- Enum 119.2 ";
                sql += @" --================================= ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES        (119, 2, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT @severity as Severity, ";
                sql += @"        m.METHOD_NAME AS Header1, ";
                sql += @"         ''Task List'' AS Header2, ";
                sql += @"         tl.TASKLIST_NAME AS Header3, ";
                sql += @"         '''' AS Heading4, ";
                sql += @"         au.USER_NAME AS Header5, ";
                sql += @"         @severity AS Header6, ";
                sql += @"         '' '' AS Heading7, ";
                sql += @"         '' '' AS Heading8, ";
                sql += @"         '' '' AS Heading9 ";
                sql += @" FROM    APPLICATION_USER AS au WITH (nolock) INNER JOIN ";
                sql += @"         TASKLIST AS tl with (nolock) ON au.USER_RID = tl.USER_RID INNER JOIN ";
                sql += @"         TASK_SIZE_CURVE_GENERATE AS tscg with (nolock) ON tl.TASKLIST_RID = tscg.TASKLIST_RID INNER JOIN ";
                sql += @"         METHOD AS m WITH (nolock) ON tscg.METHOD_RID = m.METHOD_RID ";
                sql += @" AND tscg.METHOD_RID = @inUseRID')) ";
                _dba.ExecuteNonQuery(sql);
                //END  TT#608-MD-VStuart-Deleting Size Curve Method referenced in Tasklist

                sql = @" --============================= ";
                sql += @" -- 'MethodBuildPacks' ";
                sql += @" -- Enum 122 ";
                sql += @" --============================= ";
                sql = @" INSERT INTO DETAIL_INFO  (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES        (122, 1, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT @severity as Severity, ";
                sql += @" m.METHOD_NAME AS Header1, ";
                sql += @" 		Case w.WORKFLOW_TYPE_ID ";
                sql += @" 			WHEN ''800825'' THEN ''Forecast Workflow'' ";
                sql += @" 			WHEN ''800826'' THEN ''Allocation Workflow'' ";
                sql += @" 			WHEN ''800827'' THEN ''Assortment Workflow'' ";
                sql += @" 			ELSE ''Workflow'' ";
                sql += @" 		END AS Header2, ";
                sql += @" 	w.WORKFLOW_NAME AS Header3, ";
                sql += @" 	w.WORKFLOW_DESCRIPTION AS Header4, ";
                sql += @" 	au.USER_NAME AS Header5, ";
                sql += @" 	@severity AS Header6 ";
                sql += @" 	, '' '' AS [Heading7] ";
                sql += @" 	, '' '' AS [Heading8] ";
                sql += @" 	, '' '' AS [Heading9] ";
                sql += @" FROM WORKFLOW_STEP_ALLOCATION AS wsa WITH (nolock) INNER JOIN ";
                sql += @"   WORKFLOW AS w WITH (nolock) ON w.WORKFLOW_RID = wsa.WORKFLOW_RID INNER JOIN ";
                sql += @"   METHOD AS m WITH (nolock) ON m.METHOD_RID = wsa.METHOD_RID INNER JOIN ";
                sql += @"   APPLICATION_USER AS au WITH (nolock) ON au.USER_RID = w.WORKFLOW_USER_RID ";
                sql += @" WHERE (wsa.ACTION_METHOD_TYPE =  802141) ";
                sql += @"   AND m.METHOD_RID = @inUseRID')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" --================================= ";
                sql += @" -- 'Global Lock Method-Workflow' ";
                sql += @" -- Enum 130 ";
                sql += @" --================================= ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES        (130, 1, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT @severity as Severity, ";
                sql += @"        m.METHOD_NAME as Method, ";
                sql += @" 		Case w.WORKFLOW_TYPE_ID ";
                sql += @" 			WHEN ''800825'' THEN ''Forecast Workflow'' ";
                sql += @" 			WHEN ''800826'' THEN ''Allocation Workflow'' ";
                sql += @" 			WHEN ''800827'' THEN ''Assortment Workflow'' ";
                sql += @" 			ELSE ''Workflow'' ";
                sql += @" 		END AS Type, ";
                sql += @"   w.WORKFLOW_NAME as Workflow, ";
                sql += @"   w.WORKFLOW_DESCRIPTION as Description, ";
                sql += @"   au.USER_NAME as UserID, ";
                sql += @"   @severity as Fred ";
                sql += @" 	, '' '' AS [Heading7] ";
                sql += @" 	, '' '' AS [Heading8] ";
                sql += @" 	, '' '' AS [Heading9] ";
                sql += @" from WORKFLOW_STEP_OTSPLAN wso with (nolock) ";
                sql += @"   join WORKFLOW w with (nolock) ";
                sql += @"    on w.WORKFLOW_RID = wso.WORKFLOW_RID ";
                sql += @"   join METHOD m with (nolock) ";
                sql += @"    on m.METHOD_RID = wso.METHOD_RID ";
                sql += @"   join APPLICATION_USER au with (nolock) ";
                sql += @"    on au.USER_RID = w.WORKFLOW_USER_RID ";
                sql += @" where ";
                sql += @"   (wso.ACTION_METHOD_TYPE = 802138) ";
                sql += @"   AND m.METHOD_RID = @inUseRID')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" --================================= ";
                sql += @" -- 'Global Lock Method-TaskList' ";
                sql += @" -- Enum 130.2 ";
                sql += @" --================================= ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES        (130, 2, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT @severity as Severity, ";
                sql += @"        m.METHOD_NAME AS Header1, ";
                sql += @" 		''Task List'' AS Header2, ";
                sql += @" 		tl.TASKLIST_NAME AS Header3, ";
                sql += @" 		'''' AS Heading4, ";
                sql += @" 		au.USER_NAME AS Header5, ";
                sql += @" 		@severity AS Header6, ";
                sql += @" 		'' '' AS Heading7, ";
                sql += @" 		'' '' AS Heading8, ";
                sql += @" 		'' '' AS Heading9 ";
                sql += @" FROM	APPLICATION_USER AS au WITH (nolock) INNER JOIN ";
                sql += @"         TASKLIST AS tl with (nolock) ON au.USER_RID = tl.USER_RID INNER JOIN ";
                sql += @"         TASK_FORECAST_DETAIL AS tfd with (nolock) ON tl.TASKLIST_RID = tfd.TASKLIST_RID INNER JOIN ";
                sql += @"         METHOD AS m WITH (nolock) ON tfd.METHOD_RID = m.METHOD_RID ";
                sql += @" AND tfd.METHOD_RID = @inUseRID')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /*================================*/ ";
                sql += @" /*  Eligibility ";
                sql += @" 	Node Properties - Eligibility ";
                sql += @" 	EligibilityModel = 164 ";
                sql += @" 	Enum 164.1					  */ ";
                sql += @" /*================================*/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(164, 1, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT Distinct @severity as Severity, ";
                sql += @"     em.EM_ID as Header1, ";
                sql += @" 	''Node Properties - Store Eligiblity'' as Header2, ";
                sql += @" 	ph.PH_ID AS Header3, ";
                sql += @" 	dbo.UDF_MID_GET_NODE_DISPLAY (se.HN_RID) AS Header4, ";
                sql += @" 	au.USER_NAME as Header5, ";
                sql += @" 	@severity AS Header6, ";
                sql += @" 	'' '' AS Heading7, ";
                sql += @" 	'' '' AS Heading8, ";
                sql += @" 	'' '' AS Heading9 ";
                sql += @" from STORE_ELIGIBILITY se with (nolock) ";
                sql += @" 	join ELIGIBILITY_MODEL em with (nolock) on se.EM_RID = em.EM_RID ";
                sql += @" 	join HIERARCHY_NODE hn with (nolock) on hn.HN_RID = se.HN_RID ";
                sql += @" 	join PRODUCT_HIERARCHY ph with (nolock) on ph.PH_RID = hn.HOME_PH_RID ";
                sql += @" 	join APPLICATION_USER au with (nolock) on au.USER_RID = 4 ";
                sql += @" where em.EM_RID = @inUseRID')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /*================================*/ ";
                sql += @" /*  Stock Modifier ";
                sql += @" 	Node Properties - Eligibility ";
                sql += @"     StockModifierModel = 165 ";
                sql += @" 	Enum 165.1					  */ ";
                sql += @" /*================================*/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(165, 1, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT Distinct @severity as Severity, ";
                sql += @"     smm.STKMOD_ID as Header1, ";
                sql += @" 	''Node Properties - Store Eligiblity'' as Header2, ";
                sql += @" 	ph.PH_ID AS Header3, ";
                sql += @" 	dbo.UDF_MID_GET_NODE_DISPLAY (se.HN_RID) AS Header4, ";
                sql += @" 	au.USER_NAME as Header5, ";
                sql += @" 	@severity AS Header6, ";
                sql += @" 	'' '' AS Heading7, ";
                sql += @" 	'' '' AS Heading8, ";
                sql += @" 	'' '' AS Heading9 ";
                sql += @" from STORE_ELIGIBILITY se with (nolock) ";
                sql += @" 	join STOCK_MODIFIER_MODEL smm with (nolock) on se.STKMOD_RID = smm.STKMOD_RID ";
                sql += @" 	join HIERARCHY_NODE hn with (nolock) on hn.HN_RID = se.HN_RID ";
                sql += @" 	join PRODUCT_HIERARCHY ph with (nolock) on ph.PH_RID = hn.HOME_PH_RID ";
                sql += @" 	join APPLICATION_USER au with (nolock) on au.USER_RID = 4 ";
                sql += @" where smm.STKMOD_RID =  @inUseRID')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /*================================*/ ";
                sql += @" /*  Sales Modifier ";
                sql += @" 	Node Properties - Eligibility ";
                sql += @"     SalesModifierModel = 166 ";
                sql += @" 	Enum 166.1					  */ ";
                sql += @" /*================================*/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(166, 1, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT Distinct @severity as Severity, ";
                sql += @"  slmm.SLSMOD_ID as Header1, ";
                sql += @" ''Node Properties - Store Eligiblity'' as Header2, ";
                sql += @" ph.PH_ID AS Hierarchy, ";
                sql += @" dbo.UDF_MID_GET_NODE_DISPLAY (se.HN_RID) AS Node, ";
                sql += @" au.USER_NAME as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @"  from STORE_ELIGIBILITY se with (nolock) ";
                sql += @" join SALES_MODIFIER_MODEL slmm with (nolock) on se.SLSMOD_RID = slmm.SLSMOD_RID ";
                sql += @" join HIERARCHY_NODE hn with (nolock) on hn.HN_RID = se.HN_RID ";
                sql += @" join PRODUCT_HIERARCHY ph with (nolock) on ph.PH_RID = hn.HOME_PH_RID ";
                sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = 4 ";
                sql += @" where slmm.SLSMOD_RID =  @inUseRID')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /*================================*/ ";
                sql += @" /*  Size Group ";
                sql += @" 	Enum 202					  */ ";
                sql += @" /*================================*/ ";

                sql += @" /*================================*/ ";
                sql += @" /*  HEADER					  */ ";
                sql += @" /*================================*/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(202, 1, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT Distinct @severity as Severity, ";
                sql += @"  sg.SIZE_GROUP_NAME AS [Heading1] ";
                sql += @"  ,''Header'' AS [Heading2] ";
                sql += @"  ,h.HDR_ID AS [Heading3] ";
                sql += @"  , '' '' AS [Heading4] ";
                sql += @"  ,''System'' AS [Heading5] ";
                sql += @"  ,@severity AS [Heading6] ";
                sql += @"  , '' '' AS [Heading7] ";
                sql += @"  , '' '' AS [Heading8] ";
                sql += @"  , '' '' AS [Heading9] ";
                sql += @"  FROM SIZE_GROUP sg with (nolock) ";
                sql += @"  INNER JOIN HEADER h with (nolock) ON h.SIZE_GROUP_RID = sg.SIZE_GROUP_RID ";
                sql += @"  WHERE sg.SIZE_GROUP_RID = @inUseRID ";
                sql += @"  ORDER BY [Heading3]')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /*================================*/ ";
                sql += @" /*  SIZE_CURVE_GROUP					  */ ";
                sql += @" /*================================*/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(202, 2, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT Distinct @severity as Severity ";
                sql += @"  ,sg.SIZE_GROUP_NAME AS [Heading1] ";
                sql += @"  ,''Size Curve'' AS [Heading2] ";
                sql += @"  ,scg.SIZE_CURVE_GROUP_NAME AS [Heading3] ";
                sql += @"   , '' '' AS [Heading4] ";
                sql += @"  ,''System'' AS [Heading5] ";
                sql += @"  ,@severity AS [Heading6] ";
                sql += @"  , '' '' AS [Heading7] ";
                sql += @"  , '' '' AS [Heading8] ";
                sql += @"  , '' '' AS [Heading9] ";
                sql += @"  FROM SIZE_GROUP sg with (nolock) ";
                sql += @"  INNER JOIN SIZE_CURVE_GROUP scg with (nolock) ON scg.DEFINED_SIZE_GROUP_RID = sg.SIZE_GROUP_RID ";
                sql += @"  WHERE sg.SIZE_GROUP_RID = @inUseRID ";
                sql += @"  ORDER BY [Heading3]')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /*================================*/ ";
                sql += @" /*  NODE_SIZE_CURVE_CRITERIA_DETAIL  */ ";
                sql += @" /*================================*/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(202, 3, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT distinct * from ";
                sql += @" (SELECT @severity as Severity ";
                sql += @"  ,sg.SIZE_GROUP_NAME AS [Heading1] ";
                sql += @"  ,''Hierarchy Node'' AS [Heading2] ";
                sql += @"  ,dbo.UDF_MID_GET_NODE_DISPLAY (nscc.HN_RID) AS [Heading3] ";
                sql += @"   , '' '' AS [Heading4] ";
                sql += @"  ,''System'' AS [Heading5] ";
                sql += @"  ,@severity AS [Heading6] ";
                sql += @"  , '' '' AS [Heading7] ";
                sql += @"  , '' '' AS [Heading8] ";
                sql += @"  , '' '' AS [Heading9] ";
                sql += @"  FROM SIZE_GROUP sg with (nolock) ";
                sql += @"  INNER JOIN NODE_SIZE_CURVE_CRITERIA_DETAIL nsccd with (nolock) ON nsccd.SIZE_GROUP_RID = sg.SIZE_GROUP_RID ";
                sql += @"  inner join NODE_SIZE_CURVE_CRITERIA nscc with (nolock) ON nscc.NSCCD_RID = nsccd.NSCCD_RID ";
                sql += @"  WHERE sg.SIZE_GROUP_RID = @inUseRID ";
                sql += @"  union ";
                sql += @"  SELECT Distinct @severity as Severity ";
                sql += @"  ,sg.SIZE_GROUP_NAME AS [Heading1] ";
                sql += @"  ,''Hierarchy Node'' AS [Heading2] ";
                sql += @"  ,dbo.UDF_MID_GET_NODE_DISPLAY (nsccdflt.HN_RID) AS [Heading3] ";
                sql += @"   , '' '' AS [Heading4] ";
                sql += @"  ,''System'' AS [Heading5] ";
                sql += @"  ,@severity AS [Heading6] ";
                sql += @"  , '' '' AS [Heading7] ";
                sql += @"  , '' '' AS [Heading8] ";
                sql += @"  , '' '' AS [Heading9] ";
                sql += @"  FROM SIZE_GROUP sg with (nolock) ";
                sql += @"  INNER JOIN NODE_SIZE_CURVE_CRITERIA_DETAIL nsccd with (nolock) ON nsccd.SIZE_GROUP_RID = sg.SIZE_GROUP_RID ";
                sql += @"  inner join NODE_SIZE_CURVE_CRITERIA_DEFAULT nsccdflt with (nolock) ON nsccdflt.NSCCD_RID = nsccd.NSCCD_RID ";
                sql += @"  WHERE sg.SIZE_GROUP_RID = @inUseRID) x ";
                sql += @"  order by [Heading3]')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /*================================*/ ";
                sql += @" /*  NODE_SIZE_OUTOFSTOCK  */ ";
                sql += @" /*================================*/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(202, 4, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT distinct @severity as Severity ";
                sql += @"  ,sg.SIZE_GROUP_NAME AS [Heading1] ";
                sql += @"  ,''Hierarchy Node'' AS [Heading2] ";
                sql += @"  ,dbo.UDF_MID_GET_NODE_DISPLAY (nsoos.HN_RID) AS [Heading3] ";
                sql += @"   , '' '' AS [Heading4] ";
                sql += @"  ,''System'' AS [Heading5] ";
                sql += @"  ,@severity AS [Heading6] ";
                sql += @"  , '' '' AS [Heading7] ";
                sql += @"  , '' '' AS [Heading8] ";
                sql += @"  , '' '' AS [Heading9] ";
                sql += @"  FROM SIZE_GROUP sg with (nolock) ";
                sql += @"  INNER JOIN NODE_SIZE_OUTOFSTOCK nsoos with (nolock) ON nsoos.SIZE_GROUP_RID = sg.SIZE_GROUP_RID ";
                sql += @"   WHERE sg.SIZE_GROUP_RID = @inUseRID ";
                sql += @"   order by [Heading3]')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /*================================*/ ";
                sql += @" /*  METHOD_FILL_SIZE_HOLES  */ ";
                sql += @" /*================================*/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(202, 5, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT distinct @severity as Severity, ";
                sql += @"  sg.SIZE_GROUP_NAME  as Header1, ";
                sql += @" ''Method Fill Sizes'' as Header2, ";
                sql += @" m.METHOD_NAME as Heading3, ";
                sql += @" m.METHOD_DESCRIPTION as Heading4, ";
                sql += @" au.USER_NAME as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @"  from METHOD_FILL_SIZE_HOLES mfs ";
                sql += @" join SIZE_GROUP sg on sg.SIZE_GROUP_RID = mfs.SIZE_GROUP_RID ";
                sql += @" join METHOD m with (nolock) on m.METHOD_RID = mfs.METHOD_RID ";
                sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = m.USER_RID ";
                sql += @" where sg.SIZE_GROUP_RID =  @inUseRID ";
                sql += @"  ORDER BY [Heading3]')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /*================================*/ ";
                sql += @" /*  METHOD_SIZE_BASIS_ALLOCATION  */ ";
                sql += @" /*================================*/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(202, 6, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT distinct @severity as Severity, ";
                sql += @"  sg.SIZE_GROUP_NAME  as Header1, ";
                sql += @" ''Method Basis Size'' as Header2, ";
                sql += @" m.METHOD_NAME as Heading3, ";
                sql += @" m.METHOD_DESCRIPTION as Heading4, ";
                sql += @" au.USER_NAME as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @"  from METHOD_SIZE_BASIS_ALLOCATION msba ";
                sql += @" join SIZE_GROUP sg on sg.SIZE_GROUP_RID = msba.SIZE_GROUP_RID ";
                sql += @" join METHOD m with (nolock) on m.METHOD_RID = msba.METHOD_RID ";
                sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = m.USER_RID ";
                sql += @" where sg.SIZE_GROUP_RID =  @inUseRID ";
                sql += @"  ORDER BY [Heading3]')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /*================================*/ ";
                sql += @" /*  METHOD_SIZE_NEED  */ ";
                sql += @" /*================================*/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(202, 7, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT distinct @severity as Severity, ";
                sql += @"  sg.SIZE_GROUP_NAME  as Header1, ";
                sql += @" ''Method Size Need'' as Header2, ";
                sql += @" m.METHOD_NAME as Heading3, ";
                sql += @" m.METHOD_DESCRIPTION as Heading4, ";
                sql += @" au.USER_NAME as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @"  from METHOD_SIZE_NEED msn ";
                sql += @" join SIZE_GROUP sg on sg.SIZE_GROUP_RID = msn.SIZE_GROUP_RID ";
                sql += @" join METHOD m with (nolock) on m.METHOD_RID = msn.METHOD_RID ";
                sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = m.USER_RID ";
                sql += @" where sg.SIZE_GROUP_RID = @inUseRID ";
                sql += @"  ORDER BY [Heading3]')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /*================================*/ ";
                sql += @" /*  METHOD_SIZE_CURVE  */ ";
                sql += @" /*================================*/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(202, 8, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT distinct @severity as Severity, ";
                sql += @"  sg.SIZE_GROUP_NAME  as Header1, ";
                sql += @" ''Method Size Curve'' as Header2, ";
                sql += @" m.METHOD_NAME as Heading3, ";
                sql += @" m.METHOD_DESCRIPTION as Heading4, ";
                sql += @" au.USER_NAME as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @"  from METHOD_SIZE_CURVE msc ";
                sql += @" join SIZE_GROUP sg on sg.SIZE_GROUP_RID = msc.SIZE_GROUP_RID ";
                sql += @" join METHOD m with (nolock) on m.METHOD_RID = msc.METHOD_RID ";
                sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = m.USER_RID ";
                sql += @" where sg.SIZE_GROUP_RID = @inUseRID ";
                sql += @"  ORDER BY [Heading3]')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /*================================*/ ";
                sql += @" /*  METHOD_BLD_PACKS  */ ";
                sql += @" /*================================*/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(202, 9, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT distinct @severity as Severity, ";
                sql += @" sg.SIZE_GROUP_NAME  as Header1, ";
                sql += @" ''Method Build Packs'' as Header2, ";
                sql += @" m.METHOD_NAME as Heading3, ";
                sql += @" m.METHOD_DESCRIPTION as Heading4, ";
                sql += @" au.USER_NAME as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @"  from METHOD_BLD_PACKS mbp ";
                sql += @" join SIZE_GROUP sg on sg.SIZE_GROUP_RID = mbp.SIZE_GROUP_RID ";
                sql += @" join METHOD m with (nolock) on m.METHOD_RID = mbp.METHOD_RID ";
                sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = m.USER_RID ";
                sql += @" where sg.SIZE_GROUP_RID = @inUseRID ";
                sql += @"  ORDER BY [Heading3]')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /*================================*/ ";
                sql += @" /*  SIZE_CONSTRAINT_MODEL  */ ";
                sql += @" /*================================*/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(202, 10, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT distinct @severity as Severity, ";
                sql += @" sg.SIZE_GROUP_NAME  as Header1, ";
                sql += @" ''Size Constraints Model'' as Header2, ";
                sql += @" scm.SIZE_CONSTRAINT_NAME as Heading3, ";
                sql += @" '' '' as Heading4, ";
                sql += @" au.USER_NAME as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @"  from SIZE_CONSTRAINT_MODEL scm ";
                sql += @" join SIZE_GROUP sg on sg.SIZE_GROUP_RID = scm.SIZE_GROUP_RID ";
                sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = 4 ";
                sql += @" where sg.SIZE_GROUP_RID = @inUseRID ";
                sql += @"  ORDER BY [Heading3]')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /*================================*/ ";
                sql += @" /*  Size Curve Group ";
                sql += @" 	Enum 221					  */ ";
                sql += @" /*================================*/ ";
                sql += @" /*================================*/ ";
                sql += @" /*  Header  */ ";
                sql += @" /*================================*/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(221, 1, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT distinct * from ";
                sql += @" (SELECT top 1 @severity as Severity, ";
                sql += @" scg.SIZE_CURVE_GROUP_NAME  as Header1, ";
                sql += @" ''Headers'' as Header2, ";
                sql += @" '' '' as Heading3, ";
                sql += @" '' '' as Heading4, ";
                sql += @" au.USER_NAME as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @"  from HEADER_BULK_COLOR_SIZE_NEED hbcsn ";
                sql += @" join SIZE_CURVE_GROUP scg on scg.SIZE_CURVE_GROUP_RID = hbcsn.SIZE_CURVE_GROUP_RID ";
                sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = 4 ";
                sql += @" where scg.SIZE_CURVE_GROUP_RID = @inUseRID ";
                sql += @"  union ";
                sql += @"  SELECT top 1 @severity as Severity, ";
                sql += @" scg.SIZE_CURVE_GROUP_NAME  as Header1, ";
                sql += @" ''Headers'' as Header2, ";
                sql += @" '' '' as Heading3, ";
                sql += @" '' '' as Heading4, ";
                sql += @" au.USER_NAME as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @"  from HEADER_SIZE_NEED hsn ";
                sql += @" join SIZE_CURVE_GROUP scg on scg.SIZE_CURVE_GROUP_RID = hsn.SIZE_CURVE_GROUP_RID ";
                sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = 4 ";
                sql += @" where scg.SIZE_CURVE_GROUP_RID = @inUseRID) x')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /*================================*/ ";
                sql += @" /*  METHOD_FILL_SIZE_HOLES  */ ";
                sql += @" /*================================*/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(221, 2, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT distinct @severity as Severity, ";
                sql += @"  scg.SIZE_CURVE_GROUP_NAME  as Header1, ";
                sql += @" ''Method Fill Sizes'' as Header2, ";
                sql += @" m.METHOD_NAME as Heading3, ";
                sql += @" m.METHOD_DESCRIPTION as Heading4, ";
                sql += @" au.USER_NAME as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @"  from METHOD_FILL_SIZE_HOLES mfs with (nolock) ";
                sql += @" join SIZE_CURVE_GROUP scg with (nolock) on scg.SIZE_CURVE_GROUP_RID = mfs.SIZE_CURVE_GROUP_RID ";
                sql += @" join METHOD m with (nolock) on m.METHOD_RID = mfs.METHOD_RID ";
                sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = m.USER_RID ";
                sql += @" where scg.SIZE_CURVE_GROUP_RID =  @inUseRID ";
                sql += @"  ORDER BY [Heading3]')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /*================================*/ ";
                sql += @" /*  METHOD_SIZE_BASIS_ALLOCATION  */ ";
                sql += @" /*================================*/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(221, 3, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT distinct @severity as Severity, ";
                sql += @"  scg.SIZE_CURVE_GROUP_NAME  as Header1, ";
                sql += @" ''Method Basis Size'' as Header2, ";
                sql += @" m.METHOD_NAME as Heading3, ";
                sql += @" m.METHOD_DESCRIPTION as Heading4, ";
                sql += @" au.USER_NAME as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @"  from METHOD_SIZE_BASIS_ALLOCATION msba with (nolock) ";
                sql += @" join SIZE_CURVE_GROUP scg with (nolock) on scg.SIZE_CURVE_GROUP_RID = msba.SIZE_CURVE_GROUP_RID ";
                sql += @" join METHOD m with (nolock) on m.METHOD_RID = msba.METHOD_RID ";
                sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = m.USER_RID ";
                sql += @" where scg.SIZE_CURVE_GROUP_RID =  @inUseRID ";
                sql += @"  ORDER BY [Heading3]')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /*================================*/ ";
                sql += @" /*  METHOD_SIZE_NEED  */ ";
                sql += @" /*================================*/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(221, 4, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT distinct * from ";
                sql += @" (SELECT distinct @severity as Severity, ";
                sql += @"  scg.SIZE_CURVE_GROUP_NAME  as Header1, ";
                sql += @" ''Method Size Need'' as Header2, ";
                sql += @" m.METHOD_NAME as Heading3, ";
                sql += @" m.METHOD_DESCRIPTION as Heading4, ";
                sql += @" au.USER_NAME as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @"  from METHOD_SIZE_NEED msn with (nolock) ";
                sql += @" join SIZE_CURVE_GROUP scg with (nolock) on scg.SIZE_CURVE_GROUP_RID = msn.SIZE_CURVE_GROUP_RID ";
                sql += @" join METHOD m with (nolock) on m.METHOD_RID = msn.METHOD_RID ";
                sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = m.USER_RID ";
                sql += @" where scg.SIZE_CURVE_GROUP_RID =  @inUseRID ";
                sql += @" union ";
                sql += @" SELECT distinct @severity as Severity, ";
                sql += @"  scg.SIZE_CURVE_GROUP_NAME  as Header1, ";
                sql += @" ''Method Size Need'' as Header2, ";
                sql += @" m.METHOD_NAME as Heading3, ";
                sql += @" m.METHOD_DESCRIPTION as Heading4, ";
                sql += @" au.USER_NAME as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @"  from METHOD_SIZE_NEED_ALLOCATION msna with (nolock) ";
                sql += @" join SIZE_CURVE_GROUP scg with (nolock) on scg.SIZE_CURVE_GROUP_RID = msna.SIZE_CURVE_GROUP_RID ";
                sql += @" join METHOD m with (nolock) on m.METHOD_RID = msna.METHOD_RID ";
                sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = m.USER_RID ";
                sql += @" where scg.SIZE_CURVE_GROUP_RID =  @inUseRID) x ";
                sql += @" ORDER BY [Heading3]')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /*================================*/ ";
                sql += @" /*  METHOD_SIZE_CURVE  */ ";
                sql += @" /*================================*/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(221, 5, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT distinct @severity as Severity, ";
                sql += @"  scg.SIZE_CURVE_GROUP_NAME  as Header1, ";
                sql += @" ''Method Size Curve'' as Header2, ";
                sql += @" m.METHOD_NAME as Heading3, ";
                sql += @" m.METHOD_DESCRIPTION as Heading4, ";
                sql += @" au.USER_NAME as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @"  from METHOD_SIZE_CURVE_CRVE_BAS_DET msc with (nolock) ";
                sql += @" join SIZE_CURVE_GROUP scg with (nolock) on scg.SIZE_CURVE_GROUP_RID = msc.SIZE_CURVE_GROUP_RID ";
                sql += @" join METHOD m with (nolock) on m.METHOD_RID = msc.METHOD_RID ";
                sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = m.USER_RID ";
                sql += @" where scg.SIZE_CURVE_GROUP_RID =  @inUseRID ";
                sql += @" ORDER BY [Heading3]')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /*================================*/ ";
                sql += @" /*  METHOD_BLD_PACKS  */ ";
                sql += @" /*================================*/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(221, 6, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT distinct @severity as Severity, ";
                sql += @"  scg.SIZE_CURVE_GROUP_NAME  as Header1, ";
                sql += @" ''Method Build Packs'' as Header2, ";
                sql += @" m.METHOD_NAME as Heading3, ";
                sql += @" m.METHOD_DESCRIPTION as Heading4, ";
                sql += @" au.USER_NAME as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @"  from METHOD_BLD_PACKS mbp with (nolock) ";
                sql += @" join SIZE_CURVE_GROUP scg with (nolock) on scg.SIZE_CURVE_GROUP_RID = mbp.SIZE_CURVE_GROUP_RID ";
                sql += @" join METHOD m with (nolock) on m.METHOD_RID = mbp.METHOD_RID ";
                sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = m.USER_RID ";
                sql += @" where scg.SIZE_CURVE_GROUP_RID =  @inUseRID ";
                sql += @" ORDER BY [Heading3]')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /*================================*/ ";
                sql += @" /*  SIZE_CONSTRAINT_MODEL  */ ";
                sql += @" /*================================*/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(221, 7, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT distinct @severity as Severity, ";
                sql += @"  scg.SIZE_CURVE_GROUP_NAME  as Heading1, ";
                sql += @" ''Size Constraints Model'' as Heading2, ";
                sql += @" scm.SIZE_CONSTRAINT_NAME as Heading3, ";
                sql += @" '' '' AS Heading4, ";
                sql += @" au.USER_NAME as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @"  from SIZE_CONSTRAINT_MODEL scm with (nolock) ";
                sql += @" join SIZE_CURVE_GROUP scg with (nolock) on scg.SIZE_CURVE_GROUP_RID = scm.SIZE_CURVE_GROUP_RID ";
                sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = 4 ";
                sql += @" where scg.SIZE_CURVE_GROUP_RID =  @inUseRID ";
                sql += @" ORDER BY [Heading3]')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /*================================*/ ";
                sql += @" /*  Size Constraints Model ";
                sql += @" 	Enum 241.1					  */ ";
                sql += @" /*================================*/ ";
                sql += @" /*================================*/ ";
                sql += @" /*  Header  */ ";
                sql += @" /*================================*/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(241, 1, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT distinct * from ";
                sql += @" (SELECT top 1 @severity as Severity, ";
                sql += @" scm.SIZE_CONSTRAINT_NAME  as Header1, ";
                sql += @" ''Headers'' as Header2, ";
                sql += @" '' '' as Heading3, ";
                sql += @" '' '' as Heading4, ";
                sql += @" au.USER_NAME as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @"  from HEADER_BULK_COLOR_SIZE_NEED hbcsn ";
                sql += @" join SIZE_CONSTRAINT_MODEL scm on scm.SIZE_CONSTRAINT_RID = hbcsn.SIZE_CONSTRAINT_RID ";
                sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = 4 ";
                sql += @" where hbcsn.SIZE_CONSTRAINT_RID = @inUseRID ";
                sql += @"  union ";
                sql += @"  SELECT top 1 @severity as Severity, ";
                sql += @" scm.SIZE_CONSTRAINT_NAME  as Header1, ";
                sql += @" ''Headers'' as Header2, ";
                sql += @" '' '' as Heading3, ";
                sql += @" '' '' as Heading4, ";
                sql += @" au.USER_NAME as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @"  from HEADER_SIZE_NEED hsn ";
                sql += @" join SIZE_CONSTRAINT_MODEL scm on scm.SIZE_CONSTRAINT_RID = hsn.SIZE_CONSTRAINT_RID ";
                sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = 4 ";
                sql += @" where hsn.SIZE_CONSTRAINT_RID = @inUseRID) x')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /*================================*/ ";
                sql += @" /*  METHOD_FILL_SIZE_HOLES  */ ";
                sql += @" /*================================*/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(241, 2, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT distinct @severity as Severity, ";
                sql += @"  scm.SIZE_CONSTRAINT_NAME  as Header1, ";
                sql += @" ''Method Fill Sizes'' as Header2, ";
                sql += @" m.METHOD_NAME as Heading3, ";
                sql += @" m.METHOD_DESCRIPTION as Heading4, ";
                sql += @" au.USER_NAME as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @"  from METHOD_FILL_SIZE_HOLES mfs with (nolock) ";
                sql += @" join SIZE_CONSTRAINT_MODEL scm on scm.SIZE_CONSTRAINT_RID = mfs.SIZE_CONSTRAINT_RID ";
                sql += @" join METHOD m with (nolock) on m.METHOD_RID = mfs.METHOD_RID ";
                sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = m.USER_RID ";
                sql += @" where mfs.SIZE_CONSTRAINT_RID = @inUseRID ";
                sql += @"  ORDER BY [Heading3]')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /*================================*/ ";
                sql += @" /*  METHOD_SIZE_BASIS_ALLOCATION  */ ";
                sql += @" /*================================*/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(241, 3, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT distinct @severity as Severity, ";
                sql += @"  scm.SIZE_CONSTRAINT_NAME  as Header1, ";
                sql += @" ''Method Basis Size'' as Header2, ";
                sql += @" m.METHOD_NAME as Heading3, ";
                sql += @" m.METHOD_DESCRIPTION as Heading4, ";
                sql += @" au.USER_NAME as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @"  from METHOD_SIZE_BASIS_ALLOCATION msba with (nolock) ";
                sql += @" join SIZE_CONSTRAINT_MODEL scm on scm.SIZE_CONSTRAINT_RID = msba.SIZE_CONSTRAINT_RID ";
                sql += @" join METHOD m with (nolock) on m.METHOD_RID = msba.METHOD_RID ";
                sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = m.USER_RID ";
                sql += @" where msba.SIZE_CONSTRAINT_RID = @inUseRID ";
                sql += @"  ORDER BY [Heading3]')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /*================================*/ ";
                sql += @" /*  METHOD_SIZE_NEED  */ ";
                sql += @" /*================================*/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(241, 4, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT distinct * from ";
                sql += @" ( ";
                sql += @" SELECT distinct @severity as Severity, ";
                sql += @"  scm.SIZE_CONSTRAINT_NAME  as Header1, ";
                sql += @" ''Method Size Need'' as Header2, ";
                sql += @" m.METHOD_NAME as Heading3, ";
                sql += @" m.METHOD_DESCRIPTION as Heading4, ";
                sql += @" au.USER_NAME as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @"  from METHOD_SIZE_NEED msn with (nolock) ";
                sql += @" join SIZE_CONSTRAINT_MODEL scm on scm.SIZE_CONSTRAINT_RID = msn.SIZE_CONSTRAINT_RID ";
                sql += @" join METHOD m with (nolock) on m.METHOD_RID = msn.METHOD_RID ";
                sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = m.USER_RID ";
                sql += @" where msn.SIZE_CONSTRAINT_RID = @inUseRID ";
                sql += @" union ";
                sql += @" SELECT distinct @severity as Severity, ";
                sql += @"  scm.SIZE_CONSTRAINT_NAME  as Header1, ";
                sql += @" ''Method Size Need'' as Header2, ";
                sql += @" m.METHOD_NAME as Heading3, ";
                sql += @" m.METHOD_DESCRIPTION as Heading4, ";
                sql += @" au.USER_NAME as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @"  from METHOD_SIZE_NEED_ALLOCATION msna with (nolock) ";
                sql += @" join SIZE_CONSTRAINT_MODEL scm with (nolock) on scm.SIZE_CURVE_GROUP_RID = msna.SIZE_CURVE_GROUP_RID ";
                sql += @" join METHOD m with (nolock) on m.METHOD_RID = msna.METHOD_RID ";
                sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = m.USER_RID ";
                sql += @" where scm.SIZE_CURVE_GROUP_RID =  @inUseRID) x ";
                sql += @" ORDER BY [Heading3]')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /*================================*/ ";
                sql += @" /*  Size Alternates Model ";
                sql += @" 	Enum 243.1					  */ ";
                sql += @" /*================================*/ ";
                sql += @" /*================================*/ ";
                sql += @" /*  Header  */ ";
                sql += @" /*================================*/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(243, 1, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT distinct * from ";
                sql += @" (SELECT top 1 @severity as Severity, ";
                sql += @" sam.SIZE_ALTERNATE_NAME  as Header1, ";
                sql += @" ''Headers'' as Header2, ";
                sql += @" '' '' as Heading3, ";
                sql += @" '' '' as Heading4, ";
                sql += @" au.USER_NAME as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @"  from HEADER_BULK_COLOR_SIZE_NEED hbcsn ";
                sql += @" join SIZE_ALTERNATE_MODEL sam on sam.SIZE_ALTERNATE_RID = hbcsn.SIZE_ALTERNATE_RID ";
                sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = 4 ";
                sql += @" where hbcsn.SIZE_ALTERNATE_RID = @inUseRID ";
                sql += @"  union ";
                sql += @"  SELECT top 1 @severity as Severity, ";
                sql += @" sam.SIZE_ALTERNATE_NAME  as Header1, ";
                sql += @" ''Headers'' as Header2, ";
                sql += @" '' '' as Heading3, ";
                sql += @" '' '' as Heading4, ";
                sql += @" au.USER_NAME as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @"  from HEADER_SIZE_NEED hsn ";
                sql += @" join SIZE_ALTERNATE_MODEL sam on sam.SIZE_ALTERNATE_RID = hsn.SIZE_ALTERNATE_RID ";
                sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = 4 ";
                sql += @" where hsn.SIZE_ALTERNATE_RID = @inUseRID) x')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /*================================*/ ";
                sql += @" /*  METHOD_FILL_SIZE_HOLES  */ ";
                sql += @" /*================================*/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(243, 2, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT distinct @severity as Severity, ";
                sql += @"  sam.SIZE_ALTERNATE_NAME  as Header1, ";
                sql += @" ''Method Fill Sizes'' as Header2, ";
                sql += @" m.METHOD_NAME as Heading3, ";
                sql += @" m.METHOD_DESCRIPTION as Heading4, ";
                sql += @" au.USER_NAME as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @"  from METHOD_FILL_SIZE_HOLES mfs with (nolock) ";
                sql += @" join SIZE_ALTERNATE_MODEL sam on sam.SIZE_ALTERNATE_RID = mfs.SIZE_ALTERNATE_RID ";
                sql += @" join METHOD m with (nolock) on m.METHOD_RID = mfs.METHOD_RID ";
                sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = m.USER_RID ";
                sql += @" where mfs.SIZE_ALTERNATE_RID = @inUseRID ";
                sql += @"  ORDER BY [Heading3]')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /*================================*/ ";
                sql += @" /*  METHOD_SIZE_NEED  */ ";
                sql += @" /*================================*/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(243, 3, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT distinct @severity as Severity, ";
                sql += @"  sam.SIZE_ALTERNATE_NAME  as Header1, ";
                sql += @" ''Method Size Need'' as Header2, ";
                sql += @" m.METHOD_NAME as Heading3, ";
                sql += @" m.METHOD_DESCRIPTION as Heading4, ";
                sql += @" au.USER_NAME as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @"  from METHOD_SIZE_NEED msn with (nolock) ";
                sql += @" join SIZE_ALTERNATE_MODEL sam on sam.SIZE_ALTERNATE_RID = msn.SIZE_ALTERNATE_RID ";
                sql += @" join METHOD m with (nolock) on m.METHOD_RID = msn.METHOD_RID ";
                sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = m.USER_RID ";
                sql += @" where msn.SIZE_ALTERNATE_RID = @inUseRID ";
                sql += @" ORDER BY [Heading3]')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /*================================*/ ";
                sql += @" /*  FWOS Override ";
                sql += @" 	Node Properties - Eligibility ";
                sql += @" 	FWOSModifierModel = 255 ";
                sql += @" 	Enum 255.1					  */ ";
                sql += @" /*================================*/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(255, 1, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT Distinct @severity as Severity, ";
                sql += @" fmm.FWOSMOD_ID as Header1, ";
                sql += @" ''Node Properties - Store Eligiblity'' as Header2, ";
                sql += @" ph.PH_ID AS Hierarchy, ";
                sql += @" dbo.UDF_MID_GET_NODE_DISPLAY (se.HN_RID) AS Node, ";
                sql += @" au.USER_NAME as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @"  from STORE_ELIGIBILITY se with (nolock) ";
                sql += @" join FWOS_MODIFIER_MODEL fmm with (nolock) on se.FWOSMOD_RID = fmm.FWOSMOD_RID ";
                sql += @" join HIERARCHY_NODE hn with (nolock) on hn.HN_RID = se.HN_RID ";
                sql += @" join PRODUCT_HIERARCHY ph with (nolock) on ph.PH_RID = hn.HOME_PH_RID ";
                sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = 4 ";
                sql += @" where fmm.FWOSMOD_RID =  @inUseRID')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /*================================*/ ";
                sql += @" /*  FWOS Max ";
                sql += @" 	Node Properties - Eligibility ";
                sql += @" 	FWOSMaxModel = 256 ";
                sql += @" 	Enum 256.1					  */ ";
                sql += @" /*================================*/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(256, 1, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT Distinct @severity as Severity, ";
                sql += @"      fmax.FWOSMAX_ID as Header1, ";
                sql += @" 	''Node Properties - VSW'' as Header2, ";
                sql += @" 	ph.PH_ID AS Header3, ";
                sql += @" 	dbo.UDF_MID_GET_NODE_DISPLAY (imo.HN_RID) AS Header4, ";
                sql += @" 	au.USER_NAME as Header5, ";
                sql += @" 	@severity AS Header6, ";
                sql += @" 	'' '' AS Heading7, ";
                sql += @" 	'' '' AS Heading8, ";
                sql += @" 	'' '' AS Heading9 ";
                sql += @" from NODE_IMO imo with (nolock) ";
                sql += @" 	join FWOS_MAX_MODEL fmax with (nolock) on imo.IMO_FWOS_MAX_RID = fmax.FWOSMAX_RID ";
                sql += @" 	join HIERARCHY_NODE hn with (nolock) on hn.HN_RID = imo.HN_RID ";
                sql += @" 	join PRODUCT_HIERARCHY ph with (nolock) on ph.PH_RID = hn.HOME_PH_RID ";
                sql += @" 	join APPLICATION_USER au with (nolock) on au.USER_RID = 4 ";
                sql += @" where fmax.FWOSMAX_RID =  @inUseRID')) ";
                _dba.ExecuteNonQuery(sql);

                //Begin TT#1517-MD -jsobek -Store Service Optimization -302.1 and 302.2 are now replaced with 302.3
                //sql = @" --================================= ";
                //sql += @" -- 'Store Characteristics' ";
                //sql += @" -- Enum 302.1 ";
                //sql += @" --================================= ";
                //sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                //sql += @" VALUES (302, 1, 'In Use', ";
                //sql += @"        [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                //sql += @" 		SELECT @severity as Severity, ";
                //sql += @" 		STORE_CHAR_GROUP.SCG_ID AS Item, ";
                //sql += @" 		''Attribute Set'' AS [Type], ";
                //sql += @" 		STORE_GROUP.SG_ID AS [Attribute], ";
                //sql += @" 		STORE_GROUP_LEVEL.SGL_ID AS [Attribute Set], ";
                //sql += @" 		APPLICATION_USER.USER_NAME AS [User ID], ";
                //sql += @" 		@severity AS [In Use] ";
                //sql += @" 		, '' '' AS [Heading7] ";
                //sql += @" 		, '' '' AS [Heading8] ";
                //sql += @" 		, '' '' AS [Heading9] ";
                //sql += @" FROM	STORE_GROUP_LEVEL_STATEMENT with (nolock) INNER JOIN ";
                //sql += @" 		STORE_CHAR_GROUP with (nolock) ON STORE_GROUP_LEVEL_STATEMENT.SGLS_CHAR_ID = STORE_CHAR_GROUP.SCG_RID INNER JOIN ";
                //sql += @" 		STORE_GROUP_LEVEL with (nolock) ON STORE_GROUP_LEVEL_STATEMENT.SGL_RID = STORE_GROUP_LEVEL.SGL_RID INNER JOIN ";
                //sql += @" 		STORE_GROUP with (nolock) ON STORE_GROUP_LEVEL.SG_RID = STORE_GROUP.SG_RID INNER JOIN ";
                //sql += @" 		APPLICATION_USER with (nolock) ON STORE_GROUP.USER_RID = APPLICATION_USER.USER_RID ";
                //sql += @" WHERE	(STORE_GROUP_LEVEL_STATEMENT.SGLS_CHAR_IND = 1) and STORE_CHAR_GROUP.SCG_RID = @inUseRID ";
                //sql += @" ORDER BY [Attribute], [Attribute Set]')) ";
                //_dba.ExecuteNonQuery(sql);
               

                //BEGIN TT#3813-VStuart-Object Reference Error when saving Store Profile-MID
//                sql = @" --=================================
//                    -- 'Store Characteristics' 
//                    -- Enum 302.2 
//                    -- This query identifies Store Groups still in use by Store Characteristics.
//                    --=================================
//                    INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT)
//                    VALUES (302, 2, 'In Use', 
//                    [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9)
//                    SELECT  @severity as Severity,
//	                    STORE_CHAR_GROUP.SCG_ID AS Heading1,
//	                    ''Store Group'' AS Heading2,
//	                    STORE_GROUP.SG_ID AS Heading3,
//	                    '' '' AS Heading4,
//	                    APPLICATION_USER.USER_FULLNAME AS Heading5,
//	                    @severity AS Reference,
//	                    '' '' AS Heading7,
//	                    '' '' AS Heading8,
//	                    '' '' AS Heading9
//                    FROM STORE_CHAR_GROUP
//                    INNER JOIN STORE_DYNAMIC_GROUP_DESC ON STORE_CHAR_GROUP.SCG_RID = STORE_DYNAMIC_GROUP_DESC.SDGD_CHAR_ID
//                    INNER JOIN STORE_GROUP ON STORE_DYNAMIC_GROUP_DESC.SG_RID = STORE_GROUP.SG_RID
//                    INNER JOIN APPLICATION_USER ON STORE_GROUP.USER_RID = APPLICATION_USER.USER_RID
//                    WHERE (STORE_CHAR_GROUP.SCG_RID = @inUseRID )')) ";
//                _dba.ExecuteNonQuery(sql);

//                sql = @" --=================================
//                    -- 'Store Characteristics' 
//                    -- Enum 302.3 - New
//                    -- This query identifies Store Characteristics 
//                    -- that are in use by its Store Characteristics Values.
//                    --=================================
//                    INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT)
//                    VALUES (302, 3, 'In Use', 
//                    [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9)
//                    SELECT DISTINCT  @severity as Severity,
//	                    STORE_CHAR_GROUP.SCG_ID AS Heading1,
//	                    ''Store Char Value'' AS Heading2,
//                        STORE_CHAR_GROUP.SCG_ID AS Heading3,
//                        STORE_CHAR.TEXT_VALUE AS Heading4,
//	                    ''Global'' AS Heading5,
//	                    ''In Use'' AS [In Use],
//	                    '' '' AS Heading7,
//	                    '' '' AS Heading8,
//	                    '' '' AS Heading9
//                    FROM STORE_CHAR_GROUP
//                    INNER JOIN STORE_CHAR ON STORE_CHAR_GROUP.SCG_RID = STORE_CHAR.SCG_RID
//                    inner join STORE_GROUP_LEVEL_STATEMENT sgls on sgls.SGLS_CHAR_ID = STORE_CHAR_GROUP.SCG_RID 
//                    and sgls.SGLS_VALUE = STORE_CHAR.SC_RID
//                    WHERE (STORE_CHAR_GROUP.SCG_RID = @inUseRID )')) ";
//                _dba.ExecuteNonQuery(sql);
                //END TT#3813-VStuart-Object Reference Error when saving Store Profile-MID
                //End TT#1517-MD -jsobek -Store Service Optimization

                //Begin TT#4304 -jsobek -Store Characteristic In Use not being reported on Store Filters
                sql = @" /*====================================================*/ ";
                sql += @" /* FILTER in use for Store Characteristic Group (SCG_RIDS) */ ";
                sql += @" /*  Enum 302.3                     	                */ ";
                sql += @" /*====================================================*/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(302, 3, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @"SELECT @severity as Severity,";
                sql += @"(SELECT scg.SCG_ID FROM STORE_CHAR_GROUP scg WITH (NOLOCK) WHERE scg.SCG_RID=@inUseRID) as Heading1, ";
                sql += @" ''Filter'' as Heading2, ";
                sql += @" f.FILTER_NAME as Heading3, ";
                sql += @" au.USER_NAME as Heading4, ";
                sql += @" @severity as Header5 ";
                sql += @", '' '' AS Header6 ";
                sql += @", '' '' AS Heading7 ";
                sql += @", '' '' AS Heading8 ";
                sql += @", '' ''  AS Heading9 ";
                sql += @"FROM FILTER f  ";
                sql += @"INNER JOIN APPLICATION_USER au  ON au.USER_RID = f.OWNER_USER_RID ";
                sql += @"WHERE f.FILTER_RID IN ";
                sql += @"( ";
                sql += @"   SELECT DISTINCT fc.FILTER_RID ";
                sql += @"   FROM FILTER_CONDITION_LIST_VALUES lv WITH (NOLOCK) ";
                sql += @"   INNER JOIN FILTER_CONDITION fc WITH (NOLOCK) ON fc.CONDITION_RID = lv.CONDITION_RID ";
                sql += @"   INNER JOIN STORE_CHAR sc WITH (NOLOCK) ON sc.SC_RID = lv.LIST_VALUE_INDEX AND lv.LIST_VALUE_TYPE_INDEX = 5 AND sc.SCG_RID=@inUseRID";
                sql += @" UNION ";
                sql += @"   SELECT DISTINCT fc.FILTER_RID ";
                sql += @"   FROM FILTER_CONDITION fc WITH (NOLOCK) ";
                sql += @"   WHERE fc.ELEMENT_GROUP_TYPE_INDEX = 9 AND fc.FIELD_INDEX=@inUseRID ";
                // Begin TT#1847-MD - JSmith - Removing a Store Characteristic when In Use receives an Database Error
                //sql += @" UNION --Dynamic sets based on store characterisitcs ";
                sql += @" UNION /* Dynamic sets based on store characterisitcs */ ";
                // End TT#1847-MD - JSmith - Removing a Store Characteristic when In Use receives an Database Error
                sql += @"   SELECT DISTINCT fc.FILTER_RID ";
                sql += @"   FROM FILTER_CONDITION fc WITH (NOLOCK) ";
                sql += @"   WHERE fc.ELEMENT_GROUP_TYPE_INDEX = 44 AND fc.OPERATOR_INDEX = @inUseRID ";
                sql += @") ";
                sql += @" 	')) ";
                _dba.ExecuteNonQuery(sql);
                //End TT#4304 -jsobek -Store Characteristic In Use not being reported on Store Filters

                // Begin TT#1966-MD - JSmith - DC Fulfillment
                sql = @" /*====================================================*/ ";
                sql += @" /* METHOD_DC_FULFILLMENT in use for Store Characteristic Group (SCG_RIDS) */ ";
                sql += @" /*  Enum 302.4                     	                */ ";
                sql += @" /*====================================================*/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(302, 4, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'declare @type varchar(100); ";

                sql += @" SELECT @type = TEXT_VALUE from APPLICATION_TEXT with (nolock) where TEXT_CODE = 200093; ";

                sql += @"INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT distinct @severity as Severity, ";
                sql += @" scg.SCG_ID as Header1, ";
                sql += @" @type as Header2, ";
                sql += @" m.METHOD_NAME as Heading3, ";
                sql += @" au.USER_NAME as Heading4, ";
                sql += @" @severity as Header5, ";
                sql += @" '' '' AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @" from METHOD_DC_FULFILLMENT_STORE_ORDER t with (nolock) ";
                sql += @" join METHOD m with (nolock) on m.METHOD_RID = t.METHOD_RID ";
                sql += @" join STORE_CHAR_GROUP scg with (nolock) on scg.SCG_RID = t.SCG_RID ";
                sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = m.USER_RID ";
                sql += @" where t.SCG_RID = @inUseRID')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /*====================================================*/ ";
                sql += @" /* Global Options in use for Store Characteristic Group (SCG_RIDS) */ ";
                sql += @" /*  Enum 302.5                     	                */ ";
                sql += @" /*====================================================*/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(302, 5, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'declare @type varchar(100); ";

                sql += @"INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT distinct @severity as Severity, ";
                sql += @" scg.SCG_ID as Header1, ";
                sql += @" ''System Options'' as Header2, ";
                sql += @" ''DC Fulfillment Defaults'' as Heading3, ";
                sql += @" ''System'' as Heading4, ";
                sql += @" @severity as Header5, ";
                sql += @" '' '' AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @" from SYSTEM_OPTIONS_DC_FULFILLMENT_STORE_ORDER t with (nolock) ";
                sql += @" join STORE_CHAR_GROUP scg with (nolock) on scg.SCG_RID = t.SCG_RID ";
                sql += @" where t.SCG_RID = @inUseRID')) ";
                _dba.ExecuteNonQuery(sql);
                // End TT#1966-MD - JSmith - DC Fulfillment


                //Begin TT#1517-MD -jsobek -Store Service Optimization - 305.1 is now replaced by 305.3
                //BEGIN TT#643-MD-VStuart-Need Queries for Store Characteristic Values
//                sql = @" --=========================================
//                         -- 'Store Characteristics'
//                         -- Enum 305.1
//                         -- This query shows if the selected store
//                         -- characteristic value is used by any
//                         -- store attribute set.
//                         --========================================
//                        INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT)
//                        VALUES (305, 1, 'In Use', 
//                        [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9)
//                        SELECT DISTINCT @severity as Severity,
//			                CASE STORE_CHAR_GROUP.SCG_TYPE
//			                    WHEN 0 THEN CAST(sc.TEXT_VALUE AS varchar(50))
//			                    WHEN 1 THEN CAST(sc.DATE_VALUE AS varchar(50))
//			                    WHEN 2 THEN CAST(sc.NUMBER_VALUE AS varchar(50))
//			                    WHEN 3 THEN CAST(sc.DOLLAR_VALUE AS varchar(50))
//			                END AS CHARACTERISTICS,
//			                ''Attribute Set'' AS TYPE,
//			                STORE_GROUP.SG_ID AS Attribute,
//			                STORE_GROUP_LEVEL.SGL_ID AS [Attribute Set], 
//                            '' '' AS [Store],
//				            APPLICATION_USER.USER_NAME AS [User],
//			                @severity AS Reference,
//			                '' '' AS Heading8,
//			                '' '' AS Heading9
//                        FROM STORE_CHAR AS sc
//                            INNER JOIN STORE_CHAR_GROUP WITH (nolock) ON sc.SCG_RID = STORE_CHAR_GROUP.SCG_RID
//                            INNER JOIN STORE_GROUP_LEVEL_STATEMENT WITH (nolock)
//                            INNER JOIN APPLICATION_USER WITH (nolock)
//                            INNER JOIN STORE_GROUP_LEVEL WITH (nolock)
//                            INNER JOIN STORE_GROUP WITH (nolock) ON STORE_GROUP_LEVEL.SG_RID = STORE_GROUP.SG_RID 
//                            ON APPLICATION_USER.USER_RID = STORE_GROUP.USER_RID 
//                            ON STORE_GROUP_LEVEL_STATEMENT.SGL_RID = STORE_GROUP_LEVEL.SGL_RID 
//                            ON sc.SC_RID IN
//                              (SELECT num
//			                FROM dbo.UDF_MID_SPLIT_CSV_INT(STORE_GROUP_LEVEL_STATEMENT.SGLS_VALUE, '',''))
//			            WHERE (STORE_GROUP_LEVEL_STATEMENT.SGLS_CHAR_IND = ''1'') 
//			            AND (sc.SC_RID = @inUseRID )')) ";
//                _dba.ExecuteNonQuery(sql);
                //END   TT#643-MD-VStuart-Need Queries for Store Characteristic Values

                //BEGIN TT#643-MD-VStuart-Need Queries for Store Characteristic Values
                sql = @" --======================================================
					    -- Visualize version of Enum 305.2
					    -- Reference (not IN Use) to a store
					    -- This query shows what store characteristic values
					    -- are assigned to what stores.
					    --======================================================
                    INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT)
                    VALUES (305, 2, 'Reference', 
                    [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9)
                    SELECT DISTINCT @severity as Severity,
				            CASE STORE_CHAR_GROUP.SCG_TYPE
				                WHEN 0 THEN CAST(sc.TEXT_VALUE AS varchar(50))
				                WHEN 1 THEN CAST(sc.DATE_VALUE AS varchar(50))
				                WHEN 2 THEN CAST(sc.NUMBER_VALUE AS varchar(50))
				                WHEN 3 THEN CAST(sc.DOLLAR_VALUE AS varchar(50))
				            END AS CHARACTERISTICS,
						        ''Store'' AS TYPE,
						        '' '' AS [Attribute],
					            '' '' AS [Attribute Set],
					            s.ST_ID + '' '' + s.STORE_NAME AS [Store],
						        '' ''  AS [User],
					            @severity AS Reference,
					            '' '' AS Heading8,
					            '' '' AS Heading9
					FROM   STORE_CHAR AS sc
		                INNER JOIN STORE_CHAR_JOIN AS scj
		                        ON sc.SC_RID = scj.SC_RID
		                INNER JOIN STORES AS s
		                        ON s.ST_RID = scj.ST_RID		         
		                INNER JOIN STORE_CHAR_GROUP WITH (nolock) ON sc.SCG_RID = STORE_CHAR_GROUP.SCG_RID
					WHERE ( sc.SC_RID = @inUseRID )')) ";
                _dba.ExecuteNonQuery(sql);
                //END   TT#643-MD-VStuart-Need Queries for Store Characteristic Values
                //End TT#1517-MD -jsobek -Store Service Optimization

                //Begin TT#4304 -jsobek -Store Characteristic In Use not being reported on Store Filters
                sql = @" /*====================================================*/ ";
                sql += @" /* FILTER in use for Store Characteristic Values (SC_RIDS) */ ";
                sql += @" /*  Enum 305.3                     	                */ ";
                sql += @" /*====================================================*/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(305, 3, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @"SELECT @severity as Severity,";
                //sql += @"(SELECT TOP 1 scg.SCG_ID FROM STORE_CHAR_GROUP scg WITH (NOLOCK) INNER JOIN STORE_CHAR sc ON sc.SCG_RID=scg.SCG_RID WHERE sc.SC_RID=@inUseRID) + ''-'' + CONVERT(varchar, @inUseRid) as Heading1, ";
                sql += @" (SELECT CASE scg.SCG_TYPE ";
				sql += @" WHEN 0 THEN CAST(sc.TEXT_VALUE AS varchar(50)) ";
				sql += @" WHEN 1 THEN CAST(sc.DATE_VALUE AS varchar(50)) ";
				sql += @" WHEN 2 THEN CAST(sc.NUMBER_VALUE AS varchar(50)) ";
                sql += @" WHEN 3 THEN CAST(sc.DOLLAR_VALUE AS varchar(50)) END ";
                sql += @"FROM STORE_CHAR_GROUP scg WITH (NOLOCK) INNER JOIN STORE_CHAR sc WITH (NOLOCK) ON sc.SCG_RID=scg.SCG_RID WHERE sc.SC_RID=@inUseRID) ";
                sql += @" AS Heading1, ";
                sql += @" ''Filter'' as Heading2, ";
                sql += @" f.FILTER_NAME as Heading3, ";
                sql += @" '' '' as Heading4, ";
                sql += @" '' '' as Header5 ";
                sql += @", au.USER_NAME AS Header6 ";
                sql += @", @severity AS Heading7 ";
                sql += @", '' '' AS Heading8 ";
                sql += @", '' ''  AS Heading9 ";
                sql += @"FROM FILTER f  ";
                sql += @"INNER JOIN APPLICATION_USER au  ON au.USER_RID = f.OWNER_USER_RID ";
                sql += @"WHERE f.FILTER_RID IN ";
                sql += @"( ";
                sql += @"   SELECT DISTINCT fc.FILTER_RID ";
                sql += @"   FROM FILTER_CONDITION_LIST_VALUES lv WITH (NOLOCK) ";
                sql += @"   INNER JOIN FILTER_CONDITION fc WITH (NOLOCK) ON fc.CONDITION_RID = lv.CONDITION_RID ";
                sql += @"   WHERE lv.LIST_VALUE_INDEX=@inUseRID AND lv.LIST_VALUE_TYPE_INDEX = 5";
                sql += @" UNION ";
                sql += @"   SELECT DISTINCT fc.FILTER_RID ";
                sql += @"   FROM FILTER_CONDITION fc WITH (NOLOCK) ";
                sql += @"   INNER JOIN STORE_CHAR_GROUP scg WITH (NOLOCK) ON scg.SCG_RID=fc.FIELD_INDEX AND fc.ELEMENT_GROUP_TYPE_INDEX=9 AND fc.LIST_VALUE_CONSTANT_INDEX=1 ";
                sql += @"   INNER JOIN STORE_CHAR sc WITH (NOLOCK) ON sc.SCG_RID = scg.SCG_RID AND sc.SC_RID = @inUseRID ";
                sql += @") ";
                sql += @" 	')) ";
                _dba.ExecuteNonQuery(sql);
                //End TT#4304 -jsobek -Store Characteristic In Use not being reported on Store Filters

                //BEGIN TT#729-MD-VStuart-In Use 4 Size Curve Criteria with Curve Name in Node Properties
                sql = @" --======================================================
                    -- SizeCurveCriteria = 284.1
                    -- METHOD_SIZE_NEED
                    --======================================================
                    INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT)
                    VALUES (284, 1, 'In Use', 
                    [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9)
                    SELECT @severity as Severity,
                    nsccd.CURVE_NAME as Header1, 
                    (SELECT TEXT_VALUE from APPLICATION_TEXT with (nolock) where TEXT_CODE = 200045) as Header2, 
                        m.METHOD_NAME as Method, 
                        m.METHOD_DESCRIPTION as [Description], 
                        au.USER_NAME as [User], 
                        @severity AS [Reference]
                        ,'' '' AS Heading7 
                        ,'' '' AS Heading8 
                        ,'' '' AS Heading9 
                    from METHOD_SIZE_NEED msn with (nolock) 
                        join NODE_SIZE_CURVE_CRITERIA_DETAIL nsccd with (nolock) on nsccd.NSCCD_RID = msn.GENCURVE_NSCCD_RID 
                        join METHOD m with (nolock) on m.METHOD_RID = msn.METHOD_RID 
                        join APPLICATION_USER au with (nolock) on au.USER_RID = m.USER_RID 
                    where nsccd.NSCCD_RID = @inUseRID')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" --======================================================
                    -- SizeCurveCriteria = 284.2
                    -- METHOD_FILL_SIZE_HOLES
                    --======================================================
                    INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT)
                    VALUES (284, 2, 'In Use', 
                    [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9)
                    SELECT @severity as Severity,
                    nsccd.CURVE_NAME as Header1, 
                    (SELECT TEXT_VALUE from APPLICATION_TEXT with (nolock) where TEXT_CODE = 200018) as Header2, 
                    m.METHOD_NAME as Heading3, 
                    m.METHOD_DESCRIPTION as Heading4, 
                    au.USER_NAME as Header5, 
                    @severity AS Header6
                    ,'' '' AS Heading7
                    ,'' '' AS Heading8
                    ,'' '' AS Heading9 
                    from METHOD_FILL_SIZE_HOLES fsh with (nolock) 
                    join NODE_SIZE_CURVE_CRITERIA_DETAIL nsccd with (nolock) on nsccd.NSCCD_RID = fsh.GENCURVE_NSCCD_RID 
                    join METHOD m with (nolock) on m.METHOD_RID = fsh.METHOD_RID 
                    join APPLICATION_USER au with (nolock) on au.USER_RID = m.USER_RID 
                    where nsccd.NSCCD_RID = @inUseRID')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" --======================================================
                    -- SizeCurveCriteria = 284.3
                    -- METHOD_SIZE_BASIS_ALLOCATION
                    --======================================================
                    INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT)
                    VALUES (284, 3, 'In Use', 
                    [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9)
                    SELECT @severity as Severity,
                    nsccd.CURVE_NAME as Header1, 
                    (SELECT TEXT_VALUE from APPLICATION_TEXT with (nolock) where TEXT_CODE = 200042) as Header2, 
                    m.METHOD_NAME as Heading3, 
                    m.METHOD_DESCRIPTION as Heading4, 
                    au.USER_NAME as Header5, 
                    @severity AS Header6
                    ,'' '' AS Heading7
                    ,'' '' AS Heading8
                    ,'' '' AS Heading9 
                    from METHOD_SIZE_BASIS_ALLOCATION sba with (nolock) 
                    join NODE_SIZE_CURVE_CRITERIA_DETAIL nsccd with (nolock) on nsccd.NSCCD_RID = sba.GENCURVE_NSCCD_RID 
                    join METHOD m with (nolock) on m.METHOD_RID = sba.METHOD_RID 
                    join APPLICATION_USER au with (nolock) on au.USER_RID = m.USER_RID 
                    where nsccd.NSCCD_RID = @inUseRID')) ";
                _dba.ExecuteNonQuery(sql);
                //END   TT#729-MD-VStuart-In Use 4 Size Curve Criteria with Curve Name in Node Properties

                //BEGIN TT#3509-VStuart-Cannot delete OTS Plan Version-ANFUser
                sql = @" /********************************************** ";
                sql += @" CHAIN_FORECAST_WEEK   - FORECAST_VERSION ";
                sql += @" Enum: 143.1 - Version ";
                sql += @" ***********************************************/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES  (143, 1, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'declare @nodeID varchar(200), @type varchar(100); ";

                sql += @" select @nodeID = DESCRIPTION from FORECAST_VERSION where FV_RID = @inUseRID; ";

                sql += @" SELECT @type = ''Chain Forecast''; ";

                sql += @"INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT distinct * from ";
                sql += @" (SELECT top 1 @severity as Severity, ";
                sql += @" @nodeID as Header1, ";
                sql += @" @type as Header2, ";
                sql += @" '' '' as Heading3, ";
                sql += @" '' '' as Heading4, ";
                sql += @" '' '' as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @" from CHAIN_FORECAST_WEEK_LOCK t with (nolock) ";
                sql += @" where t.FV_RID = @inUseRID ";
                sql += @" union ";
                sql += @" SELECT top 1 @severity as Severity, ";
                sql += @" @nodeID as Header1, ";
                sql += @" @type as Header2, ";
                sql += @" '' '' as Heading3, ";
                sql += @" '' '' as Heading4, ";
                sql += @" '' '' as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @" from VW_CHAIN_FORECAST_WEEK t with (nolock) ";
                sql += @" where t.FV_RID = @inUseRID) x')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /********************************************** ";
                sql += @" METHOD COPY CHAIN - FORECAST_VERSION ";
                sql += @" Enum: 143.2 ";
                sql += @" ***********************************************/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES  (143, 2, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'declare @nodeID varchar(200), @type varchar(100); ";

                sql += @" select @nodeID = DESCRIPTION from FORECAST_VERSION where FV_RID = @inUseRID; ";

                sql += @" SELECT @type = TEXT_VALUE from APPLICATION_TEXT with (nolock) where TEXT_CODE = 200058; ";

                sql += @"INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT distinct * from ";
                sql += @" (SELECT distinct @severity as Severity, ";
                sql += @" @nodeID as Header1, ";
                sql += @" @type as Header2, ";
                sql += @" m.METHOD_NAME as Heading3, ";
                sql += @" m.METHOD_DESCRIPTION as Heading4, ";
                sql += @" au.USER_NAME as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @" from METHOD_COPY_BASIS_DETAIL t with (nolock) ";
                sql += @" join METHOD_COPY_FORECAST cf with (nolock) on cf.METHOD_RID = t.METHOD_RID ";
                sql += @" join METHOD m with (nolock) on m.METHOD_RID = t.METHOD_RID ";
                sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = m.USER_RID ";
                sql += @" where cf.FV_RID = @inUseRID ";
                sql += @"   and  cf.PLAN_TYPE = 0 ";
                sql += @" union ";
                sql += @" SELECT distinct @severity as Severity, ";
                sql += @" @nodeID as Header1, ";
                sql += @" @type as Header2, ";
                sql += @" m.METHOD_NAME as Heading3, ";
                sql += @" m.METHOD_DESCRIPTION as Heading4, ";
                sql += @" au.USER_NAME as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @" from METHOD_COPY_BASIS_DETAIL t with (nolock) ";
                sql += @" join METHOD_COPY_FORECAST cf with (nolock) on cf.METHOD_RID = t.METHOD_RID ";
                sql += @" join METHOD m with (nolock) on m.METHOD_RID = t.METHOD_RID ";
                sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = m.USER_RID ";
                sql += @" where t.FV_RID = @inUseRID ";
                sql += @"   and  cf.PLAN_TYPE = 0) x')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /********************************************** ";
                sql += @" OTS_PLAN_METHOD - HN_RID ";
                sql += @" Enum: 143.5, 20 and 21 ";
                sql += @" ***********************************************/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(143, 5, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'declare @nodeID varchar(200), @type varchar(100); ";

                sql += @" select @nodeID = DESCRIPTION from FORECAST_VERSION where FV_RID = @inUseRID; ";

                sql += @" SELECT @type = TEXT_VALUE from APPLICATION_TEXT with (nolock) where TEXT_CODE = 200017; ";

                sql += @"INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT distinct * from ";

                sql += @" (SELECT @severity as Severity, ";
                sql += @" @nodeID as Header1, ";
                sql += @" @type as Header2, ";
                sql += @" m.METHOD_NAME as Heading3, ";
                sql += @" m.METHOD_DESCRIPTION as Heading4, ";
                sql += @" au.USER_NAME as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @" from GROUP_LEVEL_BASIS t with (nolock) ";
                sql += @" join METHOD m with (nolock) on m.METHOD_RID = t.METHOD_RID ";
                sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = m.USER_RID ";
                sql += @" where t.FV_RID = @inUseRID ";
                sql += @" union ";

                sql += @" SELECT @severity as Severity, ";
                sql += @" @nodeID as Header1, ";
                sql += @" @type as Header2, ";
                sql += @" m.METHOD_NAME as Heading3, ";
                sql += @" m.METHOD_DESCRIPTION as Heading4, ";
                sql += @" au.USER_NAME as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @" from OTS_PLAN t with (nolock) ";
                sql += @" join METHOD m with (nolock) on m.METHOD_RID = t.METHOD_RID ";
                sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = m.USER_RID ";
                sql += @" where t.CHAIN_FV_RID = @inUseRID ";
                sql += @" union ";

                sql += @" SELECT @severity as Severity, ";
                sql += @" @nodeID as Header1, ";
                sql += @" @type as Header2, ";
                sql += @" m.METHOD_NAME as Heading3, ";
                sql += @" m.METHOD_DESCRIPTION as Heading4, ";
                sql += @" au.USER_NAME as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @" from OTS_PLAN t with (nolock) ";
                sql += @" join METHOD m with (nolock) on m.METHOD_RID = t.METHOD_RID ";
                sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = m.USER_RID ";
                sql += @" where t.PLAN_FV_RID = @inUseRID) x')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /********************************************** ";
                sql += @" METHOD_COPY_BASIS_DETAIL - FORECAST_VERSION ";
                sql += @" Enum: 143.6 ";
                sql += @" ***********************************************/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES  (143, 6, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'declare @nodeID varchar(200), @type varchar(100); ";

                sql += @" select @nodeID = DESCRIPTION from FORECAST_VERSION where FV_RID = @inUseRID; ";

                sql += @" SELECT @type = TEXT_VALUE from APPLICATION_TEXT with (nolock) where TEXT_CODE = 200059; ";

                sql += @"INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT distinct * from ";
                sql += @" (SELECT distinct @severity as Severity, ";
                sql += @" @nodeID as Header1, ";
                sql += @" @type as Header2, ";
                sql += @" m.METHOD_NAME as Heading3, ";
                sql += @" m.METHOD_DESCRIPTION as Heading4, ";
                sql += @" au.USER_NAME as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @" from METHOD_COPY_BASIS_DETAIL t with (nolock) ";
                sql += @" join METHOD_COPY_FORECAST cf with (nolock) on cf.METHOD_RID = t.METHOD_RID ";
                sql += @" join METHOD m with (nolock) on m.METHOD_RID = t.METHOD_RID ";
                sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = m.USER_RID ";
                sql += @" where cf.FV_RID = @inUseRID ";
                sql += @"   and  cf.PLAN_TYPE = 1 ";
                sql += @" union ";
                sql += @" SELECT distinct @severity as Severity, ";
                sql += @" @nodeID as Header1, ";
                sql += @" @type as Header2, ";
                sql += @" m.METHOD_NAME as Heading3, ";
                sql += @" m.METHOD_DESCRIPTION as Heading4, ";
                sql += @" au.USER_NAME as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @" from METHOD_COPY_BASIS_DETAIL t with (nolock) ";
                sql += @" join METHOD_COPY_FORECAST cf with (nolock) on cf.METHOD_RID = t.METHOD_RID ";
                sql += @" join METHOD m with (nolock) on m.METHOD_RID = t.METHOD_RID ";
                sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = m.USER_RID ";
                sql += @" where t.FV_RID = @inUseRID ";
                sql += @"   and  cf.PLAN_TYPE = 1) x')) ";
                _dba.ExecuteNonQuery(sql);

                sql += @" --============================================== ";
                sql += @" -- 'Store Filter Query - Method Copy Forecast' ";
                sql += @" -- Enum 143.7 ";
                sql += @" --============================================== ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(143, 7, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT @severity as Severity, ";
                sql += @"     f.STORE_FILTER_NAME  as Header1, ";
                sql += @" 	CASE ";
                sql += @" 	  When m.METHOD_TYPE_ID = 802129 ";
                sql += @" 	  Then ''Copy Chain Forecast Method'' ";
                sql += @" 	  Else ''Copy Store Forecast Method'' ";
                sql += @" 	End as Header2, ";
                sql += @" 	m.METHOD_NAME as Heading3, ";
                sql += @" 	m.METHOD_DESCRIPTION as Heading4, ";
                sql += @" 	au.USER_NAME as Header5, ";
                sql += @" 	@severity AS Header6, ";
                sql += @" 	'' '' AS Heading7, ";
                sql += @" 	'' '' AS Heading8, ";
                sql += @" 	'' '' AS Heading9 ";
                sql += @" from METHOD_COPY_FORECAST mcf  with (nolock) ";
                sql += @" 	join STORE_FILTER f with (nolock) on f.STORE_FILTER_RID = mcf.STORE_FILTER_RID ";
                sql += @" 	join METHOD m with (nolock) on m.METHOD_RID = mcf.METHOD_RID ";
                sql += @" 	join APPLICATION_USER au with (nolock) on au.USER_RID = m.USER_RID ";
                sql += @" where mcf.FV_RID = @inUseRID')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /********************************************** ";
                sql += @" METHOD_EXPORT - FV_RID ";
                sql += @" Enum: 143.8 ";
                sql += @" ***********************************************/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(143, 8, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'declare @nodeID varchar(200), @type varchar(100); ";

                sql += @" select @nodeID = DESCRIPTION from FORECAST_VERSION where FV_RID = @inUseRID; ";

                sql += @" SELECT @type = TEXT_VALUE from APPLICATION_TEXT with (nolock) where TEXT_CODE = 200067; ";

                sql += @"INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT distinct @severity as Severity, ";
                sql += @" @nodeID as Header1, ";
                sql += @" @type as Header2, ";
                sql += @" m.METHOD_NAME as Heading3, ";
                sql += @" m.METHOD_DESCRIPTION as Heading4, ";
                sql += @" au.USER_NAME as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @" from METHOD_EXPORT t with (nolock) ";
                sql += @" join METHOD m with (nolock) on m.METHOD_RID = t.METHOD_RID ";
                sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = m.USER_RID ";
                sql += @" where t.FV_RID = @inUseRID')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /********************************************** ";
                sql += @" METHOD_GLOBAL_LOCK - FV_RID ";
                sql += @" Enum: 143.9 ";
                sql += @" ***********************************************/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(143, 9, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'declare @nodeID varchar(200), @type varchar(100); ";

                sql += @" select @nodeID = DESCRIPTION from FORECAST_VERSION where FV_RID = @inUseRID; ";

                sql += @" SELECT @type = TEXT_VALUE from APPLICATION_TEXT with (nolock) where TEXT_CODE = 200085; ";

                sql += @"INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT distinct @severity as Severity, ";
                sql += @" @nodeID as Header1, ";
                sql += @" @type as Header2, ";
                sql += @" m.METHOD_NAME as Heading3, ";
                sql += @" m.METHOD_DESCRIPTION as Heading4, ";
                sql += @" au.USER_NAME as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @" from METHOD_GLOBAL_LOCK t with (nolock) ";
                sql += @" join METHOD m with (nolock) on m.METHOD_RID = t.METHOD_RID ";
                sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = m.USER_RID ";
                sql += @" where t.FV_RID = @inUseRID')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /********************************************** ";
                sql += @" METHOD_GLOBAL_UNLOCK - FV_RID ";
                sql += @" Enum: 143.10 ";
                sql += @" ***********************************************/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(143, 10, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'declare @nodeID varchar(200), @type varchar(100); ";

                sql += @" select @nodeID = DESCRIPTION from FORECAST_VERSION where FV_RID = @inUseRID; ";

                sql += @" SELECT @type = TEXT_VALUE from APPLICATION_TEXT with (nolock) where TEXT_CODE = 200077; ";

                sql += @"INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT distinct @severity as Severity, ";
                sql += @" @nodeID as Header1, ";
                sql += @" @type as Header2, ";
                sql += @" m.METHOD_NAME as Heading3, ";
                sql += @" m.METHOD_DESCRIPTION as Heading4, ";
                sql += @" au.USER_NAME as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @" from METHOD_GLOBAL_UNLOCK t with (nolock) ";
                sql += @" join METHOD m with (nolock) on m.METHOD_RID = t.METHOD_RID ";
                sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = m.USER_RID ";
                sql += @" where t.FV_RID = @inUseRID')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /********************************************** ";
                sql += @" METHOD_MATRIX - HIGH_LEVEL_FV_RID ";
                sql += @" Enum: 143.11 ";
                sql += @" ***********************************************/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(143, 11, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'declare @nodeID varchar(200), @type varchar(100); ";

                sql += @" select @nodeID = DESCRIPTION from FORECAST_VERSION where FV_RID = @inUseRID; ";

                sql += @" SELECT @type = TEXT_VALUE from APPLICATION_TEXT with (nolock) where TEXT_CODE = 200054; ";

                sql += @"INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT distinct @severity as Severity, ";
                sql += @" @nodeID as Header1, ";
                sql += @" @type as Header2, ";
                sql += @" m.METHOD_NAME as Heading3, ";
                sql += @" m.METHOD_DESCRIPTION as Heading4, ";
                sql += @" au.USER_NAME as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @" from METHOD_MATRIX t with (nolock) ";
                sql += @" join METHOD m with (nolock) on m.METHOD_RID = t.METHOD_RID ";
                sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = m.USER_RID ";
                sql += @" where t.HIGH_LEVEL_FV_RID = @inUseRID')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /********************************************** ";
                sql += @" METHOD_MATRIX - LOW_LEVEL_FV_RID ";
                sql += @" Enum: 143.12 ";
                sql += @" ***********************************************/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(143, 12, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'declare @nodeID varchar(200), @type varchar(100); ";

                sql += @" select @nodeID = DESCRIPTION from FORECAST_VERSION where FV_RID = @inUseRID; ";

                sql += @" SELECT @type = TEXT_VALUE from APPLICATION_TEXT with (nolock) where TEXT_CODE = 200054; ";

                sql += @"INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT distinct @severity as Severity, ";
                sql += @" @nodeID as Header1, ";
                sql += @" @type as Header2, ";
                sql += @" m.METHOD_NAME as Heading3, ";
                sql += @" m.METHOD_DESCRIPTION as Heading4, ";
                sql += @" au.USER_NAME as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @" from METHOD_MATRIX t with (nolock) ";
                sql += @" join METHOD m with (nolock) on m.METHOD_RID = t.METHOD_RID ";
                sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = m.USER_RID ";
                sql += @" where t.LOW_LEVEL_FV_RID = @inUseRID')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /********************************************** ";
                sql += @" METHOD_ROLLUP - FV_RID ";
                sql += @" Enum: 143.14 ";
                sql += @" ***********************************************/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(143, 14, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'declare @nodeID varchar(200), @type varchar(100); ";

                sql += @" select @nodeID = DESCRIPTION from FORECAST_VERSION where FV_RID = @inUseRID; ";

                sql += @" SELECT @type = TEXT_VALUE from APPLICATION_TEXT with (nolock) where TEXT_CODE = 200079; ";

                sql += @"INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT distinct @severity as Severity, ";
                sql += @" @nodeID as Header1, ";
                sql += @" @type as Header2, ";
                sql += @" m.METHOD_NAME as Heading3, ";
                sql += @" m.METHOD_DESCRIPTION as Heading4, ";
                sql += @" au.USER_NAME as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @" from METHOD_ROLLUP t with (nolock) ";
                sql += @" join METHOD m with (nolock) on m.METHOD_RID = t.METHOD_RID ";
                sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = m.USER_RID ";
                sql += @" where t.FV_RID = @inUseRID')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /********************************************** ";
                sql += @" METHOD_SIZE_CURVE_MRCH_BAS_DET - FV_RID ";
                sql += @" Enum: 143.15 ";
                sql += @" ***********************************************/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(143, 15, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'declare @nodeID varchar(200), @type varchar(100); ";

                sql += @" select @nodeID = DESCRIPTION from FORECAST_VERSION where FV_RID = @inUseRID; ";

                sql += @" SELECT @type = TEXT_VALUE from APPLICATION_TEXT with (nolock) where TEXT_CODE = 200082; ";

                sql += @"INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT distinct @severity as Severity, ";
                sql += @" @nodeID as Header1, ";
                sql += @" @type as Header2, ";
                sql += @" m.METHOD_NAME as Heading3, ";
                sql += @" m.METHOD_DESCRIPTION as Heading4, ";
                sql += @" au.USER_NAME as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @" from METHOD_SIZE_CURVE_MRCH_BAS_DET t with (nolock) ";
                sql += @" join METHOD m with (nolock) on m.METHOD_RID = t.METHOD_RID ";
                sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = m.USER_RID ";
                sql += @" where t.FV_RID = @inUseRID')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /********************************************** ";
                sql += @" METHOD_SPREAD_FORECAST - FV_RID ";
                sql += @" Enum: 143.17 ";
                sql += @" ***********************************************/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(143, 17, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'declare @nodeID varchar(200), @type varchar(100); ";

                sql += @" select @nodeID = DESCRIPTION from FORECAST_VERSION where FV_RID = @inUseRID; ";

                sql += @" SELECT @type = TEXT_VALUE from APPLICATION_TEXT with (nolock) where TEXT_CODE = 200060; ";

                sql += @"INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT distinct @severity as Severity, ";
                sql += @" @nodeID as Header1, ";
                sql += @" @type as Header2, ";
                sql += @" m.METHOD_NAME as Heading3, ";
                sql += @" m.METHOD_DESCRIPTION as Heading4, ";
                sql += @" au.USER_NAME as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @" from METHOD_SPREAD_FORECAST t with (nolock) ";
                sql += @" join METHOD m with (nolock) on m.METHOD_RID = t.METHOD_RID ";
                sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = m.USER_RID ";
                sql += @" where t.FV_RID = @inUseRID')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /********************************************** ";
                sql += @" METHOD_VELOCITY_BASIS - BASIS_FV_RID ";
                sql += @" Enum: 143.18 ";
                sql += @" ***********************************************/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(143, 18, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'declare @nodeID varchar(200), @type varchar(100); ";

                sql += @" select @nodeID = DESCRIPTION from FORECAST_VERSION where FV_RID = @inUseRID; ";

                sql += @" SELECT @type = TEXT_VALUE from APPLICATION_TEXT with (nolock) where TEXT_CODE = 200020; ";

                sql += @"INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT distinct * from ";
                sql += @" (SELECT distinct @severity as Severity, ";
                sql += @" @nodeID as Header1, ";
                sql += @" @type as Header2, ";
                sql += @" m.METHOD_NAME as Heading3, ";
                sql += @" m.METHOD_DESCRIPTION as Heading4, ";
                sql += @" au.USER_NAME as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @" from METHOD_VELOCITY_BASIS t with (nolock) ";
                sql += @" join METHOD m with (nolock) on m.METHOD_RID = t.METHOD_RID ";
                sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = m.USER_RID ";
                sql += @" where t.BASIS_HN_RID = @inUseRID) x')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /********************************************** ";
                sql += @" OVERRIDE LL MODEL - VERSION_RID ";
                sql += @" Enum: 143.22 ";
                sql += @" ***********************************************/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(143, 22, 'Reference', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'declare @nodeID varchar(200), @type varchar(100); ";

                sql += @" select @nodeID = DESCRIPTION from FORECAST_VERSION where FV_RID = @inUseRID; ";

                sql += @" SELECT @type = ''Override Low Level Model''; ";

                sql += @"INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT distinct * from ";
                sql += @" (SELECT @severity as Severity, ";
                sql += @" @nodeID as Header1, ";
                sql += @" @type as Header2, ";
                sql += @" h.NAME as Heading3, ";
                sql += @" '' '' as Heading4, ";
                sql += @" ''System'' as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @" from OVERRIDE_LL_MODEL_DETAIL t with (nolock) ";
                sql += @" join OVERRIDE_LL_MODEL_HEADER h with (nolock) on h.OLL_RID = t.OLL_RID ";
                sql += @" where t.VERSION_RID = @inUseRID) x')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /********************************************** ";
                sql += @" SECURITY - FORECAST_VERSION ";
                sql += @" Enum: 143.24 ";
                sql += @" ***********************************************/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES  (143, 24, 'Reference', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'declare @nodeID varchar(200), @type varchar(100); ";

                sql += @" select @nodeID = DESCRIPTION from FORECAST_VERSION where FV_RID = @inUseRID; ";

                sql += @" SELECT @type = TEXT_VALUE from APPLICATION_TEXT with (nolock) where TEXT_CODE = 900061; ";

                sql += @"INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT distinct * from ";
                sql += @" (SELECT distinct @severity as Severity, ";
                sql += @" @nodeID as Header1, ";
                sql += @" @type as Header2, ";
                sql += @" '' '' as Heading3, ";
                sql += @" '' '' as Heading4, ";
                sql += @" ug.GROUP_NAME as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @" from SECURITY_GROUP_VERSION t with (nolock) ";
                sql += @" join USER_GROUP ug with (nolock) on ug.GROUP_RID = ug.GROUP_RID ";
                sql += @" where t.FV_RID = @inUseRID ";
                sql += @" union ";
                sql += @" SELECT distinct @severity as Severity, ";
                sql += @" @nodeID as Header1, ";
                sql += @" @type as Header2, ";
                sql += @" '' '' as Heading3, ";
                sql += @" '' '' as Heading4, ";
                sql += @" au.USER_NAME as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @" from SECURITY_USER_VERSION t with (nolock) ";
                sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = t.USER_RID ";
                sql += @" where t.FV_RID = @inUseRID) x')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /********************************************** ";
                sql += @" STORE_FORECAST_WEEK - HN_RID ";
                sql += @" Enum: 143.27-37 ";
                sql += @" ***********************************************/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(143, 27, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'declare @nodeID varchar(200), @type varchar(100); ";

                sql += @" select @nodeID = DESCRIPTION from FORECAST_VERSION where FV_RID = @inUseRID; ";

                sql += @" SELECT @type = ''Store Forecast''; ";

                sql += @"INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT distinct * from ";
                sql += @" (SELECT top 1 @severity as Severity, ";
                sql += @" @nodeID as Header1, ";
                sql += @" @type as Header2, ";
                sql += @" '' '' as Heading3, ";
                sql += @" '' '' as Heading4, ";
                sql += @" '' '' as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @" from STORE_FORECAST_WEEK_LOCK t with (nolock) ";
                sql += @" where t.FV_RID = @inUseRID ";
                sql += @" union ";
                sql += @" SELECT top 1 @severity as Severity, ";
                sql += @" @nodeID as Header1, ";
                sql += @" @type as Header2, ";
                sql += @" '' '' as Heading3, ";
                sql += @" '' '' as Heading4, ";
                sql += @" '' '' as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @" from VW_STORE_FORECAST_WEEK t with (nolock) ";
                sql += @" where t.FV_RID = @inUseRID) x')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /********************************************** ";
                sql += @" TASK_FORECAST - FV_RID ";
                sql += @" Enum: 143.38 and 39 ";
                sql += @" ***********************************************/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(143, 38, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'declare @nodeID varchar(200), @type varchar(100); ";

                sql += @" select @nodeID = DESCRIPTION from FORECAST_VERSION where FV_RID = @inUseRID; ";

                sql += @" SELECT @type = TEXT_VALUE + '' Tasklist'' from APPLICATION_TEXT with (nolock) where TEXT_CODE = 800410; ";

                sql += @"INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT distinct * from ";
                sql += @" (SELECT distinct @severity as Severity, ";
                sql += @" @nodeID as Header1, ";
                sql += @" @type as Header2, ";
                sql += @" tl.TASKLIST_NAME as Heading3, ";
                sql += @" '' '' as Heading4, ";
                sql += @" au.USER_NAME as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @" from TASK_FORECAST t with (nolock) ";
                sql += @" join TASKLIST tl with (nolock) on tl.TASKLIST_RID = t.TASKLIST_RID ";
                sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = tl.USER_RID ";
                sql += @" where t.FV_RID = @inUseRID ";
                sql += @" union ";

                sql += @" SELECT distinct @severity as Severity, ";
                sql += @" @nodeID as Header1, ";
                sql += @" @type as Header2, ";
                sql += @" tl.TASKLIST_NAME as Heading3, ";
                sql += @" '' '' as Heading4, ";
                sql += @" au.USER_NAME as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @" from TASK_FORECAST_BALANCE t with (nolock) ";
                sql += @" join TASKLIST tl with (nolock) on tl.TASKLIST_RID = t.TASKLIST_RID ";
                sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = tl.USER_RID ";
                sql += @" where t.FV_RID = @inUseRID) x')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /********************************************** ";
                sql += @" TASK_ROLLUP - FV_RID ";
                sql += @" Enum: 143.40 ";
                sql += @" ***********************************************/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(143, 40, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'declare @nodeID varchar(200), @type varchar(100); ";

                sql += @" select @nodeID = DESCRIPTION from FORECAST_VERSION where FV_RID = @inUseRID; ";

                sql += @" SELECT @type = TEXT_VALUE + '' Tasklist'' from APPLICATION_TEXT with (nolock) where TEXT_CODE = 800411; ";

                sql += @"INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT distinct @severity as Severity, ";
                sql += @" @nodeID as Header1, ";
                sql += @" @type as Header2, ";
                sql += @" tl.TASKLIST_NAME as Heading3, ";
                sql += @" '' '' as Heading4, ";
                sql += @" au.USER_NAME as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @" from TASK_ROLLUP t with (nolock) ";
                sql += @" join TASKLIST tl with (nolock) on tl.TASKLIST_RID = t.TASKLIST_RID ";
                sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = tl.USER_RID ";
                sql += @" where t.FV_RID = @inUseRID')) ";
                _dba.ExecuteNonQuery(sql);


                sql = @" /********************************************** ";
                sql += @" USER_ALLOCATION - FV_RID ";
                sql += @" Enum: 143.41 ";
                sql += @" ***********************************************/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(143, 41, 'Reference', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'declare @nodeID varchar(200), @type varchar(100); ";
                sql += @" select @nodeID = DESCRIPTION from FORECAST_VERSION where FV_RID = @inUseRID; ";

                sql += @" SELECT @type = ''Allocation Selection Criteria''; ";

                sql += @"INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT distinct * from ";
                sql += @" (SELECT @severity as Severity, ";
                sql += @" @nodeID as Header1, ";
                sql += @" @type as Header2, ";
                sql += @" '' '' as Heading3, ";
                sql += @" '' '' as Heading4, ";
                sql += @" au.USER_NAME as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @" from USER_ALLOCATION_BASIS t with (nolock) ";
                sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = t.USER_RID ";
                sql += @" where t.BASIS_FV_RID = @inUseRID ) x')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /********************************************** ";
                sql += @" USER_ASSORTMENT_BASIS - FV_RID ";
                sql += @" Enum: 143.42 ";
                sql += @" ***********************************************/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(143, 42, 'Reference', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'declare @nodeID varchar(200), @type varchar(100); ";
                sql += @" select @nodeID = DESCRIPTION from FORECAST_VERSION where FV_RID = @inUseRID; ";

                sql += @" SELECT @type = ''Assortment Selection Criteria''; ";

                sql += @"INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT @severity as Severity, ";
                sql += @" @nodeID as Header1, ";
                sql += @" @type as Header2, ";
                sql += @" '' '' as Heading3, ";
                sql += @" '' '' as Heading4, ";
                sql += @" au.USER_NAME as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @" from USER_ASSORTMENT_BASIS t with (nolock) ";
                sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = t.USER_RID ";
                sql += @" where t.FV_RID = @inUseRID')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /********************************************** ";
                sql += @" USER_PLAN - CHAIN_HN_RID ";
                sql += @" Enum: 143.44, 45 and 46 ";
                sql += @" ***********************************************/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(143, 44, 'Reference', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'declare @nodeID varchar(200), @type varchar(100); ";

                sql += @" select @nodeID = DESCRIPTION from FORECAST_VERSION where FV_RID = @inUseRID; ";

                sql += @" SELECT @type = ''OTS Forecast Selection Criteria''; ";

                sql += @"INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT distinct * from ";
                sql += @" (SELECT @severity as Severity, ";
                sql += @" @nodeID as Header1, ";
                sql += @" @type as Header2, ";
                sql += @" '' '' as Heading3, ";
                sql += @" '' '' as Heading4, ";
                sql += @" au.USER_NAME as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @" from USER_PLAN_BASIS_DETAILS t with (nolock) ";
                sql += @" join USER_PLAN up with (nolock) on up.USER_RID = t.USER_RID ";
                sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = t.USER_RID ";
                sql += @" where t.FV_RID = @inUseRID ";
                sql += @" union ";
                sql += @" SELECT @severity as Severity, ";
                sql += @" @nodeID as Header1, ";
                sql += @" @type as Header2, ";
                sql += @" '' '' as Heading3, ";
                sql += @" '' '' as Heading4, ";
                sql += @" au.USER_NAME as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @" from USER_PLAN t with (nolock) ";
                sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = t.USER_RID ";
                sql += @" where t.CHAIN_FV_RID = @inUseRID ";
                sql += @"    or t.LOW_LEVEL_FV_RID = @inUseRID ";
                sql += @"    or t.STORE_FV_RID = @inUseRID) x')) ";
                _dba.ExecuteNonQuery(sql);
                //END  TT#3509-VStuart-Cannot delete OTS Plan Version-ANFUser

                // Begin TT#2053-MD - JSmith - Missing In Use for Forecast Version in Assortment
                sql = @" /********************************************** ";
                sql += @" ASSORTMENT_PROPERTIES_BASIS - FV_RID ";
                sql += @" Enum: 143.45 ";
                sql += @" ***********************************************/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(143, 45, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'declare @nodeID varchar(200), @type varchar(100); ";
                sql += @" select @nodeID = DESCRIPTION from FORECAST_VERSION where FV_RID = @inUseRID; ";

                sql += @" SELECT @type = TEXT_VALUE from APPLICATION_TEXT with (nolock) where TEXT_CODE = 900317; ";

                sql += @"INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT @severity as Severity, ";
                sql += @" @nodeID as Header1, ";
                sql += @" @type as Header2, ";
                sql += @" h.HDR_ID as Heading3, ";
                sql += @" h.HDR_DESC as Heading4, ";
                sql += @" au.USER_NAME as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @" from ASSORTMENT_PROPERTIES_BASIS t with (nolock) ";
                sql += @" join ASSORTMENT_PROPERTIES ap with (nolock) on ap.HDR_RID = t.HDR_RID ";
                sql += @" join HEADER h with (nolock) on h.HDR_RID = t.HDR_RID ";
                sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = ap.USER_RID ";
                sql += @" where t.FV_RID = @inUseRID')) ";
                _dba.ExecuteNonQuery(sql);
                // End TT#2034-MD - JSmith - Missing In Use for Forecast Version in Assortment

                // Begin TT#2131-MD - JSmith - Halo Integration
                sql = @" /********************************************** ";
                sql += @" METHOD_PLANNING_EXTRACT - FV_RID ";
                sql += @" Enum: 143.46 ";
                sql += @" ***********************************************/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(143, 46, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'declare @nodeID varchar(200), @type varchar(100); ";

                sql += @" select @nodeID = DESCRIPTION from FORECAST_VERSION where FV_RID = @inUseRID; ";

                sql += @" SELECT @type = TEXT_VALUE from APPLICATION_TEXT with (nolock) where TEXT_CODE = 200094; ";

                sql += @"INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT distinct @severity as Severity, ";
                sql += @" @nodeID as Header1, ";
                sql += @" @type as Header2, ";
                sql += @" m.METHOD_NAME as Heading3, ";
                sql += @" m.METHOD_DESCRIPTION as Heading4, ";
                sql += @" au.USER_NAME as Header5, ";
                sql += @" @severity AS Header6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @" from METHOD_PLANNING_EXTRACT t with (nolock) ";
                sql += @" join METHOD m with (nolock) on m.METHOD_RID = t.METHOD_RID ";
                sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = m.USER_RID ";
                sql += @" where t.FV_RID = @inUseRID')) ";
                _dba.ExecuteNonQuery(sql);
                // End TT#2131-MD - JSmith - Halo Integration

                //Begin TT#1532-MD -jsobek -Add In Use for Header Characteristics
                //sql = @" --=========================================";
                //sql += @"-- 'Header Characteristic Groups'";
                //         sql += @"-- Enum 233.1";
                //         sql += @"-- This query shows if the selected header characteristic group is used by any filters";
                //         sql += @"--========================================";
                //        sql += @"INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT)";
                //        sql += @"VALUES (233, 1, 'In Use', ";
                //        sql += @"[dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9)";
                //        sql += @"SELECT DISTINCT @severity as Severity,";
                //            sql += @" FROM FILTER f WITH (NOLOCK) ";
                //sql += @" 		INNER JOIN STORE_GROUP_LEVEL sgl WITH (NOLOCK) ON sgl.SGL_RID=@inUseRID ";
                //sql += @" 		INNER JOIN STORE_GROUP sg WITH (NOLOCK) ON sgl.SG_RID = sg.SG_RID ";
                //sql += @" 		INNER JOIN APPLICATION_USER au WITH (NOLOCK) ON au.USER_RID = f.USER_RID ";
                //sql += @" WHERE f.FILTER_RID IN ";
                //sql += @" ( ";
                //sql += @"       SELECT DISTINCT fc.FILTER_RID ";
                //sql += @"       FROM FILTER_CONDITION_LIST_VALUES lv WITH (NOLOCK) ";
                //sql += @"       INNER JOIN FILTER_CONDITION fc WITH (NOLOCK) ON fc.CONDITION_RID = lv.CONDITION_RID ";
                //sql += @"       WHERE lv.LIST_VALUE_TYPE_INDEX = 9 ";
                //sql += @"       AND lv.LIST_VALUE_INDEX = @inUseRID ";
                //sql += @" ) ";
                //        sql += @")) ";

                //BEGIN TT#4672-VStuart-In Use not checking for views-MID
                sql = @" /*====================================================*/ ";
                sql += @" /* FILTER in use for Header Characteristic Group (HCG_RIDS) */ ";
                sql += @" /*  Enum 233.1                     	                */ ";
                sql += @" /*====================================================*/ ";
                sql  = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(233, 1, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT @severity as Severity,";
                sql += @" ''Filter'' as Header1, ";
                sql += @" (SELECT hcg.HCG_ID FROM HEADER_CHAR_GROUP hcg WITH (NOLOCK) WHERE hcg.HCG_RID=@inUseRID) as Heading2 ";
                sql += @", f.FILTER_NAME as Heading3 ";
                sql += @", au.USER_NAME as Heading4 ";
                sql += @", @severity as Heading5 ";
                sql += @", '' '' AS Header6 ";
                sql += @", '' '' AS Heading7 ";
                sql += @", '' '' AS Heading8 ";
                sql += @", '' ''  AS Heading9 ";
                sql += @" FROM FILTER f  ";
                sql += @" INNER JOIN APPLICATION_USER au  ON au.USER_RID = f.OWNER_USER_RID ";
                sql += @" WHERE f.FILTER_RID IN ";
                sql += @" ( ";
                sql += @"   SELECT DISTINCT fc.FILTER_RID ";
                sql += @"   FROM FILTER_CONDITION_LIST_VALUES lv WITH (NOLOCK) ";
                sql += @"   INNER JOIN FILTER_CONDITION fc WITH (NOLOCK) ON fc.CONDITION_RID = lv.CONDITION_RID ";
                sql += @"   INNER JOIN HEADER_CHAR hc WITH (NOLOCK) ON hc.HC_RID = lv.LIST_VALUE_INDEX AND lv.LIST_VALUE_TYPE_INDEX = 6 AND hc.HCG_RID=@inUseRID";
                sql += @" UNION ";
	            sql += @"   SELECT DISTINCT fc.FILTER_RID ";
	            sql += @"   FROM FILTER_CONDITION fc WITH (NOLOCK) ";
                sql += @"   WHERE fc.ELEMENT_GROUP_TYPE_INDEX = 16 AND fc.FIELD_INDEX=@inUseRID ";
                sql += @" ) ";
                sql += @" 	')) ";
                _dba.ExecuteNonQuery(sql);
                //END TT#4672-VStuart-In Use not checking for views-MID

                //BEGIN TT#4672-VStuart-In Use not checking for views-MID
                sql  = @" /*=================================================================*/ ";
                sql += @" /* This query examines Header Characteristics Group-Workspace View.*/ ";
                sql += @" /* Enum 233; HeaderCharGroup = 233.2 		            			 */ ";
                sql += @" /* This query shows if the selected header characteristic  	     */ ";
                sql += @" /* group is in use by any Grid_View? 							     */ ";
                sql += @" /*=================================================================*/ ";
                sql  = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(233, 2, 'Reference', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT @severity as Severity,";
                sql += @" ''Workspace View'' as Heading1, ";
                sql += @" (SELECT hcg.HCG_ID FROM HEADER_CHAR_GROUP hcg WITH (NOLOCK) WHERE hcg.HCG_RID=@inUseRID) as Heading2 ";
                sql += @" ,GRID_VIEW.VIEW_ID as Heading3 ";
                sql += @" ,APPLICATION_USER.USER_NAME as Heading4 ";
                sql += @" ,@severity as Heading5 ";
                sql += @" ,'' '' as Header6 ";
                sql += @" ,'' '' AS Heading7 ";
                sql += @" ,'' '' AS Heading8 ";
                sql += @" ,'' ''  AS Heading9 ";
                sql += @" FROM GRID_VIEW ";
                sql += @" INNER JOIN APPLICATION_USER ON GRID_VIEW.USER_RID = APPLICATION_USER.USER_RID ";
                sql += @" INNER JOIN GRID_VIEW_DETAIL ON GRID_VIEW.VIEW_RID = GRID_VIEW_DETAIL.VIEW_RID ";
                sql += @" INNER JOIN HEADER_CHAR_GROUP ON GRID_VIEW_DETAIL.HCG_RID = HEADER_CHAR_GROUP.HCG_RID ";
                sql += @" WHERE (GRID_VIEW_DETAIL.HCG_RID IS NOT NULL) AND (GRID_VIEW_DETAIL.IS_HIDDEN = 0) AND (GRID_VIEW_DETAIL.HCG_RID = @inUseRID ) ";
                sql += @" 	')) ";
                _dba.ExecuteNonQuery(sql);
                //END TT#4672-VStuart-In Use not checking for views-MID

                //BEGIN TT#4672-VStuart-In Use not checking for views-MID
                sql  = @" --================================================*/ ";
                sql += @" -- This query shows which HCG's are  ";
                sql += @" -- being referenced by which Headers. ";
                sql += @" -- Enum 233: HeaderCharGroup = 233.3 ";
                sql += @" --================================================*/ ";
                sql  = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(233, 3, 'Reference', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT top 1 @severity as Severity,";
                sql += @" ''Header'' as Heading1,  ";
                sql += @" (SELECT hcg.HCG_ID FROM HEADER_CHAR_GROUP hcg WITH (NOLOCK) WHERE hcg.HCG_RID=@inUseRID) as Heading2, ";
                sql += @" HEADER.HDR_ID as Heading3  ";
                sql += @" ,''System'' as Heading4  ";
                sql += @" , @severity as Heading5  ";
                sql += @" ,'' '' as Header6  ";
                sql += @" ,'' '' AS Heading7  ";
                sql += @" ,'' '' AS Heading8  ";
                sql += @" ,'' '' AS Heading9  ";
                sql += @" FROM HEADER ";
                sql += @" INNER JOIN HEADER_GROUP AS hg ON HEADER.HDR_GROUP_RID = hg.HDR_GROUP_RID ";
                sql += @" INNER JOIN HEADER_CHAR_JOIN AS hcj ON HEADER.HDR_RID = hcj.HDR_RID ";
                sql += @" INNER JOIN HEADER_CHAR_GROUP AS hcg ";
                sql += @" INNER JOIN HEADER_CHAR ON hcg.HCG_RID = HEADER_CHAR.HCG_RID ON hcj.HC_RID = HEADER_CHAR.HC_RID ";
                sql += @" WHERE (hcg.HCG_RID = @inUseRID ) ";
                sql += @"  ')) ";
                _dba.ExecuteNonQuery(sql);
                //END TT#4672-VStuart-In Use not checking for views-MID

                //BEGIN TT#4910-VStuart-In Use header characteristic has FK constraint with Method Size Need table-MID
                sql  = @" /*========================================================================*/ ";
                sql += @" /* This query examines Header Characteristics that use Size Need Methods.	*/ ";
                sql += @" /* Enum 233; HeaderCharGroup = 233.4 										*/ ";
                sql += @" /* This query shows if the selected header characteristic group 			*/ ";
                sql += @" /* is in use by any Size Need Method and if so, sets it to 'In Use'. 		*/ ";
                sql += @" /*========================================================================*/ ";
                sql  = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(233, 4, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT @severity as Severity,";
                sql += @" ''Size Need Method'' as Heading1,  ";
                sql += @" (SELECT hcg.HCG_ID FROM HEADER_CHAR_GROUP hcg WITH (NOLOCK) WHERE hcg.HCG_RID=@inUseRID) as Heading2, ";
                sql += @" METHOD.METHOD_NAME AS Heading3 ";
                sql += @" ,APPLICATION_USER.USER_NAME as Heading4 ";
              //sql += @" ,METHOD.METHOD_DESCRIPTION as Headerx ";
                sql += @" ,@severity as Heading5 ";
                sql += @" ,'' '' AS Heading6 ";
                sql += @" ,'' '' AS Heading7 ";
                sql += @" ,'' '' AS Heading8 ";
                sql += @" ,'' ''  AS Heading9 ";
                sql += @" FROM METHOD_SIZE_NEED ";
                sql += @" INNER JOIN METHOD ON METHOD_SIZE_NEED.METHOD_RID = METHOD.METHOD_RID ";
                sql += @" INNER JOIN HEADER_CHAR_GROUP ON METHOD_SIZE_NEED.GENCONSTRAINT_HCG_RID = HEADER_CHAR_GROUP.HCG_RID ";
                sql += @" INNER JOIN APPLICATION_USER ON METHOD.USER_RID = APPLICATION_USER.USER_RID ";
                sql += @" INNER JOIN APPLICATION_TEXT ON METHOD.METHOD_TYPE_ID = APPLICATION_TEXT.TEXT_CODE ";
                sql += @" WHERE (METHOD_SIZE_NEED.GENCONSTRAINT_HCG_RID = @inUseRID ) ";
                sql += @" ')) ";
                _dba.ExecuteNonQuery(sql);
                //END TT#4910-VStuart-In Use header characteristic has FK constraint with Method Size Need table-MID

                //BEGIN TT#4672-VStuart-In Use not checking for views-MID
                sql = @" /*==========================================================*/ ";
                sql += @" /* Header Characteristic Group (HCG_RIDS) In Use by FILTER  */ ";
                sql += @" /* sort condition.										     */ ";
                sql += @" /* Enum 233.5                   	                         */ ";
                sql += @" /*==========================================================*/ ";
                sql  = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(233, 5, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT @severity as Severity, ";
                sql += @" ''Filter'' as Header1, ";
                sql += @" (SELECT hcg.HCG_ID FROM HEADER_CHAR_GROUP hcg WITH (NOLOCK) WHERE hcg.HCG_RID = @inUseRID) as Heading2, ";
                sql += @" f.FILTER_NAME as Heading3 ";
                sql += @", au.USER_NAME as Heading4 ";
                sql += @", @severity as Heading5 ";
                sql += @", '' '' AS Heading6 ";
                sql += @", '' '' AS Heading7 ";
                sql += @", '' '' AS Heading8 ";
                sql += @", '' '' AS Heading9 ";
                sql += @" FROM FILTER f  ";
                sql += @" INNER JOIN APPLICATION_USER au ON au.USER_RID = f.OWNER_USER_RID ";
                sql += @" WHERE f.FILTER_RID IN ";
                sql += @" ( ";
                sql += @"   SELECT DISTINCT fc.FILTER_RID ";
                sql += @"   FROM FILTER_CONDITION_LIST_VALUES lv WITH (NOLOCK) ";
                sql += @"   INNER JOIN FILTER_CONDITION fc WITH (NOLOCK) ON fc.CONDITION_RID = lv.CONDITION_RID ";
                sql += @"   INNER JOIN HEADER_CHAR hc WITH (NOLOCK) ON hc.HC_RID = lv.LIST_VALUE_INDEX AND lv.LIST_VALUE_TYPE_INDEX = 6 AND hc.HCG_RID = @inUseRID ";
                sql += @" UNION ";
                sql += @"   SELECT DISTINCT fc.FILTER_RID ";
                sql += @"   FROM FILTER_CONDITION fc WITH (NOLOCK) ";
                sql += @"   WHERE fc.ELEMENT_GROUP_TYPE_INDEX = 21 AND fc.SORT_BY_FIELD_INDEX = @inUseRID ";
                sql += @" ) ";
                sql += @" 	')) ";
                _dba.ExecuteNonQuery(sql);
                //END TT#4672-VStuart-In Use not checking for views-MID

                // Begin TT#1966-MD - JSmith - DC Fulfillment
                sql = @" /********************************************** ";
                sql += @" Header Characteristic Group (HCG_RIDS) In Use by METHOD_CREATE_MASTER_HEADERS_MERCHANDISE ";
                sql += @" Enum: 233.6 ";
                sql += @" ***********************************************/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(233, 6, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'declare @type varchar(100); ";

                sql += @" SELECT @type = TEXT_VALUE from APPLICATION_TEXT with (nolock) where TEXT_CODE = 200092; ";

                sql += @"INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT distinct @severity as Severity, ";
                sql += @" @type as Header1, ";
                sql += @" hcg.HCG_ID as Header2, ";
                sql += @" m.METHOD_NAME as Heading3, ";
                sql += @" au.USER_NAME as Heading4, ";
                sql += @" @severity as Heading5, ";
                sql += @" '' '' AS Heading6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @" from METHOD_DC_FULFILLMENT t with (nolock) ";
                sql += @" join METHOD m with (nolock) on m.METHOD_RID = t.METHOD_RID ";
                sql += @" join HEADER_CHAR_GROUP hcg with (nolock) on hcg.HCG_RID = t.HCG_RID ";
                sql += @" join APPLICATION_USER au with (nolock) on au.USER_RID = m.USER_RID ";
                sql += @" where t.HCG_RID = @inUseRID')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" /********************************************** ";
                sql += @" Header Characteristic Group (HCG_RIDS) In Use by Global Options ";
                sql += @" Enum: 233.7 ";
                sql += @" ***********************************************/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(233, 7, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'declare @type varchar(100); ";

                sql += @"INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT distinct @severity as Severity, ";
                sql += @" ''System Options'' as Header1, ";
                sql += @" hcg.HCG_ID as Header2, ";
                sql += @" ''DC Fulfillment Defaults'' as Heading3, ";
                sql += @" ''System'' as Heading4, ";
                sql += @" @severity as Heading5, ";
                sql += @" '' '' AS Heading6, ";
                sql += @" '' '' AS Heading7, ";
                sql += @" '' '' AS Heading8, ";
                sql += @" '' '' AS Heading9 ";
                sql += @" from SYSTEM_OPTIONS t with (nolock) ";
                sql += @" join HEADER_CHAR_GROUP hcg with (nolock) on hcg.HCG_RID = t.HCG_RID ";
                sql += @" where t.HCG_RID = @inUseRID')) ";
                _dba.ExecuteNonQuery(sql);
                // End TT#1966-MD - JSmith - DC Fulfillment

                sql = @" /*====================================================*/ ";
                sql += @" /* FILTER in use for Header Characteristic Values (HC_RIDS) */ ";
                sql += @" /*  Enum 234.1                     	                */ ";
                sql += @" /*====================================================*/ ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(234, 1, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @"SELECT @severity as Severity,";
                //sql += @"(SELECT TOP 1 hcg.HCG_ID FROM HEADER_CHAR_GROUP hcg WITH (NOLOCK) INNER JOIN HEADER_CHAR hc WITH (NOLOCK) ON hc.HCG_RID=hcg.HCG_RID WHERE hc.HC_RID=@inUseRID) + '': '' + CONVERT(varchar, @inUseRid) as Heading1, ";
                sql += @" (SELECT CASE hcg.HCG_TYPE ";
                sql += @" WHEN 0 THEN CAST(hc.TEXT_VALUE AS varchar(50)) ";
                sql += @" WHEN 1 THEN CAST(hc.DATE_VALUE AS varchar(50)) ";
                sql += @" WHEN 2 THEN CAST(hc.NUMBER_VALUE AS varchar(50)) ";
                sql += @" WHEN 3 THEN CAST(hc.DOLLAR_VALUE AS varchar(50)) END ";
                sql += @"FROM HEADER_CHAR_GROUP hcg WITH (NOLOCK) INNER JOIN HEADER_CHAR hc WITH (NOLOCK) ON hc.HCG_RID=hcg.HCG_RID WHERE hc.HC_RID=@inUseRID) ";
                sql += @" AS Heading1, ";
                sql += @"f.FILTER_NAME as Heading2, ";
                sql += @" au.USER_NAME as Heading3, ";
                sql += @" @severity as Heading4, ";
                sql += @" '' '' as Header5 ";
                sql += @", '' '' AS Header6 ";
                sql += @", '' '' AS Heading7 ";
                sql += @", '' '' AS Heading8 ";
                sql += @", '' ''  AS Heading9 ";
                sql += @"FROM FILTER f  ";
                sql += @"INNER JOIN APPLICATION_USER au  ON au.USER_RID = f.OWNER_USER_RID ";
                sql += @"WHERE f.FILTER_RID IN ";
                sql += @"( ";
                sql += @"   SELECT DISTINCT fc.FILTER_RID ";
                sql += @"   FROM FILTER_CONDITION_LIST_VALUES lv WITH (NOLOCK) ";
                sql += @"   INNER JOIN FILTER_CONDITION fc WITH (NOLOCK) ON fc.CONDITION_RID = lv.CONDITION_RID ";
                sql += @"   WHERE lv.LIST_VALUE_INDEX=@inUseRID AND lv.LIST_VALUE_TYPE_INDEX = 6";
                sql += @" UNION ";
	            sql += @"   SELECT DISTINCT fc.FILTER_RID ";
	            sql += @"   FROM FILTER_CONDITION fc WITH (NOLOCK) ";
                sql += @"   INNER JOIN HEADER_CHAR_GROUP hcg WITH (NOLOCK) ON hcg.HCG_RID=fc.FIELD_INDEX AND fc.ELEMENT_GROUP_TYPE_INDEX=16 AND fc.LIST_VALUE_CONSTANT_INDEX=1 ";
                sql += @"   INNER JOIN HEADER_CHAR hc WITH (NOLOCK) ON hc.HCG_RID = hcg.HCG_RID AND hc.HC_RID = @inUseRID ";
                sql += @") ";
                sql += @" 	')) ";
                _dba.ExecuteNonQuery(sql);
                //End TT#1532-MD -jsobek -Add In Use for Header Characteristics

                //BEGIN TT#4697-VStuart-Investigate Product Characteristic In Use querys-MID
                ////Begin TT#1532-MD -jsobek -Add In Use for Header Characteristics
                //sql = @" /*====================================================*/ ";
                //sql += @" /* FILTER in use for Product Characteristic */ ";
                //sql += @" /*  Enum 31.1                     	                */ ";
                //sql += @" /*====================================================*/ ";
                //sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                //sql += @" VALUES	(31, 1, 'In Use', ";
                //sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                //sql += @"SELECT @severity as Severity,";
                //sql += @"(SELECT hcg.HCG_ID FROM HIER_CHAR_GROUP hcg WITH (NOLOCK) WHERE hcg.HCG_RID=@inUseRID) as Heading1, ";
                //sql += @"f.FILTER_NAME as Heading2, ";
                //sql += @" au.USER_NAME as Heading3, ";
                //sql += @" @severity as Heading4, ";
                //sql += @" '' '' as Header5 ";
                //sql += @", '' '' AS Header6 ";
                //sql += @", '' '' AS Heading7 ";
                //sql += @", '' '' AS Heading8 ";
                //sql += @", '' ''  AS Heading9 ";
                //sql += @"FROM FILTER f  ";
                //sql += @"INNER JOIN APPLICATION_USER au  ON au.USER_RID = f.OWNER_USER_RID ";
                //sql += @"WHERE f.FILTER_RID IN ";
                //sql += @"( ";
                //sql += @"   SELECT DISTINCT fc.FILTER_RID ";
                //sql += @"   FROM FILTER_CONDITION_LIST_VALUES lv WITH (NOLOCK) ";
                //sql += @"   INNER JOIN FILTER_CONDITION fc WITH (NOLOCK) ON fc.CONDITION_RID = lv.CONDITION_RID ";
                //sql += @"   INNER JOIN HIER_CHAR hc WITH (NOLOCK) ON hc.HC_RID = lv.LIST_VALUE_INDEX AND lv.LIST_VALUE_TYPE_INDEX = 10 AND hc.HCG_RID=@inUseRID";
                //sql += @" UNION ";
                //sql += @"   SELECT DISTINCT fc.FILTER_RID ";
                //sql += @"   FROM FILTER_CONDITION fc WITH (NOLOCK) ";
                //sql += @"   WHERE fc.ELEMENT_GROUP_TYPE_INDEX = 27 AND fc.FIELD_INDEX=@inUseRID";
                //sql += @") ";
                //sql += @" 	')) ";
                //_dba.ExecuteNonQuery(sql);

                //sql = @" /*====================================================*/ ";
                //sql += @" /* FILTER in use for Product Characteristic Values  */ ";
                //sql += @" /*  Enum 32.1                     	                */ ";
                //sql += @" /*====================================================*/ ";
                //sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                //sql += @" VALUES	(32, 1, 'In Use', ";
                //sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                //sql += @"SELECT @severity as Severity,";
                //sql += @" (SELECT hc.HC_ID FROM HIER_CHAR_GROUP hcg WITH (NOLOCK) INNER JOIN HIER_CHAR hc WITH (NOLOCK) ON hc.HCG_RID=hcg.HCG_RID WHERE hc.HC_RID=@inUseRID) AS Heading1,";
                //sql += @"f.FILTER_NAME as Heading2, ";
                //sql += @" au.USER_NAME as Heading3, ";
                //sql += @" @severity as Heading4, ";
                //sql += @" '' '' as Header5 ";
                //sql += @", '' '' AS Header6 ";
                //sql += @", '' '' AS Heading7 ";
                //sql += @", '' '' AS Heading8 ";
                //sql += @", '' ''  AS Heading9 ";
                //sql += @"FROM FILTER f  ";
                //sql += @"INNER JOIN APPLICATION_USER au  ON au.USER_RID = f.OWNER_USER_RID ";
                //sql += @"WHERE f.FILTER_RID IN ";
                //sql += @"( ";
                //sql += @"   SELECT DISTINCT fc.FILTER_RID ";
                //sql += @"   FROM FILTER_CONDITION_LIST_VALUES lv WITH (NOLOCK) ";
                //sql += @"   INNER JOIN FILTER_CONDITION fc WITH (NOLOCK) ON fc.CONDITION_RID = lv.CONDITION_RID ";
                //sql += @"   WHERE lv.LIST_VALUE_INDEX=@inUseRID AND lv.LIST_VALUE_TYPE_INDEX = 10";
                //sql += @" UNION ";
                //sql += @"   SELECT DISTINCT fc.FILTER_RID ";
                //sql += @"   FROM FILTER_CONDITION fc WITH (NOLOCK) ";
                //sql += @"   INNER JOIN HIER_CHAR_GROUP hcg WITH (NOLOCK) ON hcg.HCG_RID=fc.FIELD_INDEX AND fc.ELEMENT_GROUP_TYPE_INDEX=27 AND fc.LIST_VALUE_CONSTANT_INDEX=1 ";
                //sql += @"   INNER JOIN HIER_CHAR hc WITH (NOLOCK) ON hc.HCG_RID = hcg.HCG_RID AND hc.HC_RID = @inUseRID ";
                //sql += @") ";
                //sql += @" 	')) ";
                //_dba.ExecuteNonQuery(sql);
                ////End TT#1531-MD -jsobek -Add In Use for Product Characteristics

                //BEGIN TT#4672-VStuart-In Use not checking for views-MID
                sql = @" /* --=================================================== ";
                sql += @"   This query is for Product Characteristics Group.       ";
                sql += @"   Enum 31.1; ProductCharacteristic = 31                  ";
                sql += @"   This query shows if the selected product characteristic";
                sql += @"   group is in use by any characteristic values?          ";
                sql += @" --=================================================== */ ";
                sql  = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(31, 1, 'Reference', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT @severity as Severity,";
                sql += @" ''Product_Characteristic'' AS Heading1 ";
                sql += @" ,HIER_CHAR_GROUP.HCG_ID AS Heading2 ";
                sql += @" ,HIER_CHAR.HC_ID AS Heading3 ";
                sql += @" , ''System'' AS Heading4 ";
                sql += @" , @severity AS Heading5 ";
                sql += @" ,'' '' AS Heading6 ";
                sql += @" ,'' '' AS Heading7 ";
                sql += @" ,'' '' AS Heading8 ";
                sql += @" ,'' '' AS Heading9 ";
                sql += @" FROM HIER_CHAR_GROUP ";
                sql += @" INNER JOIN HIER_CHAR ON HIER_CHAR_GROUP.HCG_RID = HIER_CHAR.HCG_RID ";
                sql += @" where HIER_CHAR_GROUP.HCG_RID = @inUseRID')) ";
                _dba.ExecuteNonQuery(sql);
                //END TT#4672-VStuart-In Use not checking for views-MID

                sql  = @" /*====================================================*/ ";
                sql += @" /* FILTER in use by Product Characteristic            */ ";
                sql += @" /*  Enum 31.2                     	                */ ";
                sql += @" /*====================================================*/ ";
                sql  = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(31, 2, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT @severity as Severity,";
                sql += @" ''Product_Characteristic'' AS Heading1, ";
                sql += @" (SELECT hcg.HCG_ID FROM HIER_CHAR_GROUP hcg WITH (NOLOCK) WHERE hcg.HCG_RID=@inUseRID) as Heading2, ";
                sql += @" f.FILTER_NAME as Heading3, ";
                sql += @" au.USER_NAME as Heading4, ";
                sql += @" @severity as Heading5 ";
                sql += @", '' '' AS Header6 ";
                sql += @", '' '' AS Heading7 ";
                sql += @", '' '' AS Heading8 ";
                sql += @", '' ''  AS Heading9 ";
                sql += @" FROM FILTER f  ";
                sql += @" INNER JOIN APPLICATION_USER au  ON au.USER_RID = f.OWNER_USER_RID ";
                sql += @" WHERE f.FILTER_RID IN ";
                sql += @" ( ";
                sql += @"   SELECT DISTINCT fc.FILTER_RID ";
                sql += @"   FROM FILTER_CONDITION_LIST_VALUES lv WITH (NOLOCK) ";
                sql += @"   INNER JOIN FILTER_CONDITION fc WITH (NOLOCK) ON fc.CONDITION_RID = lv.CONDITION_RID ";
                sql += @"   INNER JOIN HIER_CHAR hc WITH (NOLOCK) ON hc.HC_RID = lv.LIST_VALUE_INDEX AND lv.LIST_VALUE_TYPE_INDEX = 10 AND hc.HCG_RID=@inUseRID";
                sql += @" UNION ";
                sql += @"   SELECT DISTINCT fc.FILTER_RID ";
                sql += @"   FROM FILTER_CONDITION fc WITH (NOLOCK) ";
                sql += @"   WHERE fc.ELEMENT_GROUP_TYPE_INDEX = 27 AND fc.FIELD_INDEX=@inUseRID";
                sql += @" ) ";
                sql += @" 	')) ";
                _dba.ExecuteNonQuery(sql);

                sql  = @" /*====================================================*/ ";
                sql += @" /* FILTER in use by Product Characteristic Values     */ ";
                sql += @" /*  Enum 32.1                     	                */ ";
                sql += @" /*====================================================*/ ";
                sql =  @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(32, 1, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT @severity as Severity,";
                sql += @" ''Product Characteristic Value'' AS Heading1, ";
                sql += @" (SELECT hc.HC_ID FROM HIER_CHAR_GROUP hcg WITH (NOLOCK) INNER JOIN HIER_CHAR hc WITH (NOLOCK) ON hc.HCG_RID=hcg.HCG_RID WHERE hc.HC_RID=@inUseRID) AS Heading2,";
                sql += @" f.FILTER_NAME as Heading3, ";
                sql += @" au.USER_NAME as Heading4, ";
                sql += @" @severity as Heading5, ";
                sql += @"  '' '' AS Header6 ";
                sql += @", '' '' AS Heading7 ";
                sql += @", '' '' AS Heading8 ";
                sql += @", '' ''  AS Heading9 ";
                sql += @" FROM FILTER f  ";
                sql += @" INNER JOIN APPLICATION_USER au  ON au.USER_RID = f.OWNER_USER_RID ";
                sql += @" WHERE f.FILTER_RID IN ";
                sql += @"( ";
                sql += @"   SELECT DISTINCT fc.FILTER_RID ";
                sql += @"   FROM FILTER_CONDITION_LIST_VALUES lv WITH (NOLOCK) ";
                sql += @"   INNER JOIN FILTER_CONDITION fc WITH (NOLOCK) ON fc.CONDITION_RID = lv.CONDITION_RID ";
                sql += @"   WHERE lv.LIST_VALUE_INDEX=@inUseRID AND lv.LIST_VALUE_TYPE_INDEX = 10";
                sql += @" UNION ";
                sql += @"   SELECT DISTINCT fc.FILTER_RID ";
                sql += @"   FROM FILTER_CONDITION fc WITH (NOLOCK) ";
                sql += @"   INNER JOIN HIER_CHAR_GROUP hcg WITH (NOLOCK) ON hcg.HCG_RID=fc.FIELD_INDEX AND fc.ELEMENT_GROUP_TYPE_INDEX=27 AND fc.LIST_VALUE_CONSTANT_INDEX=1 ";
                sql += @"   INNER JOIN HIER_CHAR hc WITH (NOLOCK) ON hc.HCG_RID = hcg.HCG_RID AND hc.HC_RID = @inUseRID ";
                sql += @") ";
                sql += @" 	')) ";
                _dba.ExecuteNonQuery(sql);
                //END TT#4697-VStuart-Investigate Product Characteristic In Use querys-MID

                //BEGIN TT#4697-VStuart-Investigate Product Characteristic In Use querys-MID
                sql  = @" /*====================================================*/ ";
                sql += @" /* Node in use by Product Characteristic Values       */ ";
                sql += @" /*  Enum 32.2                     	                */ ";
                sql += @" /*====================================================*/ ";
                sql  = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES	(32, 2, 'Reference', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT @severity as Severity";
                sql += @" ,''Product Characteristic Value'' AS Heading1 ";
                sql += @" ,HIER_CHAR.HC_ID AS Heading2 ";
                sql += @" ,BASE_NODE.BN_NAME AS Heading3 ";
                sql += @" ,''System'' as Heading4 ";
                sql += @" , @severity AS Heading5 ";
                sql += @" ,'' '' AS Heading6 ";
                sql += @" ,'' '' AS Heading7 ";
                sql += @" ,'' '' AS Heading8 ";
                sql += @" ,'' '' AS Heading9 ";
                sql += @" FROM HIER_CHAR_JOIN ";
                sql += @" INNER JOIN BASE_NODE ON HIER_CHAR_JOIN.HN_RID = BASE_NODE.HN_RID ";
                sql += @" INNER JOIN HIER_CHAR ON HIER_CHAR_JOIN.HC_RID = HIER_CHAR.HC_RID ";
                sql += @" INNER JOIN HIER_CHAR_GROUP ON HIER_CHAR.HCG_RID = HIER_CHAR_GROUP.HCG_RID ";
                sql += @" WHERE ( HIER_CHAR_JOIN.HC_RID = @inUseRID ) ";
                sql += @" ')) ";
                _dba.ExecuteNonQuery(sql);
                //END TT#4697-VStuart-Investigate Product Characteristic In Use querys-MID

                // Begin TT#1705-MD - stodd - "In Use" is not functioning for DC Carton Rounding
                sql = @" --============================= ";
                sql += @" -- 'DC Carton Rounding Method-Workflow' ";
                sql += @" -- Enum 320 ";
                sql += @" --============================= ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES        (320, 1, 'In Use', ";
                sql += @"   [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @"   SELECT @severity as Severity, ";
                sql += @"   m.METHOD_NAME AS Header1, ";
                sql += @" 		Case w.WORKFLOW_TYPE_ID ";
                sql += @" 			WHEN ''800825'' THEN ''Forecast Workflow'' ";
                sql += @" 			WHEN ''800826'' THEN ''Allocation Workflow'' ";
                sql += @" 			WHEN ''800827'' THEN ''Assortment Workflow'' ";
                sql += @" 			ELSE ''Workflow'' ";
                sql += @" 		END AS Header2, ";
                sql += @"   w.WORKFLOW_NAME AS Header3, ";
                sql += @"   w.WORKFLOW_DESCRIPTION AS Header4, ";
                sql += @"   au.USER_NAME AS Header5, ";
                sql += @"   @severity AS Header6 ";
                sql += @" 		, '' '' AS [Heading7] ";
                sql += @" 		, '' '' AS [Heading8] ";
                sql += @" 		, '' '' AS [Heading9] ";
                sql += @" FROM WORKFLOW_STEP_ALLOCATION AS wsa WITH (nolock) INNER JOIN ";
                sql += @"   WORKFLOW AS w WITH (nolock) ON w.WORKFLOW_RID = wsa.WORKFLOW_RID INNER JOIN ";
                sql += @"   METHOD AS m WITH (nolock) ON m.METHOD_RID = wsa.METHOD_RID INNER JOIN ";
                sql += @"   APPLICATION_USER AS au WITH (nolock) ON au.USER_RID = w.WORKFLOW_USER_RID ";
                sql += @" WHERE (wsa.ACTION_METHOD_TYPE = 802166) ";
                sql += @"   AND m.METHOD_RID = @inUseRID')) ";
                _dba.ExecuteNonQuery(sql);
                // End TT#1705-MD - stodd - "In Use" is not functioning for DC Carton Rounding

                // Begin TT#1966-MD - JSmith - DC Fulfillment
                sql = @" --============================= ";
                sql += @" -- 'Create Master Headers Method-Workflow' ";
                sql += @" -- Enum 331 ";
                sql += @" --============================= ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES        (331, 1, 'In Use', ";
                sql += @"   [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @"   SELECT @severity as Severity, ";
                sql += @"   m.METHOD_NAME AS Header1, ";
                sql += @" 		Case w.WORKFLOW_TYPE_ID ";
                sql += @" 			WHEN ''800825'' THEN ''Forecast Workflow'' ";
                sql += @" 			WHEN ''800826'' THEN ''Allocation Workflow'' ";
                sql += @" 			WHEN ''800827'' THEN ''Assortment Workflow'' ";
                sql += @" 			ELSE ''Workflow'' ";
                sql += @" 		END AS Header2, ";
                sql += @"   w.WORKFLOW_NAME AS Header3, ";
                sql += @"   w.WORKFLOW_DESCRIPTION AS Header4, ";
                sql += @"   au.USER_NAME AS Header5, ";
                sql += @"   @severity AS Header6 ";
                sql += @" 		, '' '' AS [Heading7] ";
                sql += @" 		, '' '' AS [Heading8] ";
                sql += @" 		, '' '' AS [Heading9] ";
                sql += @" FROM WORKFLOW_STEP_ALLOCATION AS wsa WITH (nolock) INNER JOIN ";
                sql += @"   WORKFLOW AS w WITH (nolock) ON w.WORKFLOW_RID = wsa.WORKFLOW_RID INNER JOIN ";
                sql += @"   METHOD AS m WITH (nolock) ON m.METHOD_RID = wsa.METHOD_RID INNER JOIN ";
                sql += @"   APPLICATION_USER AS au WITH (nolock) ON au.USER_RID = w.WORKFLOW_USER_RID ";
                sql += @" WHERE (wsa.ACTION_METHOD_TYPE = 802167) ";
                sql += @"   AND m.METHOD_RID = @inUseRID')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" --============================= ";
                sql += @" -- 'DC Fulfillment Method-Workflow' ";
                sql += @" -- Enum 334 ";
                sql += @" --============================= ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES        (334, 1, 'In Use', ";
                sql += @"   [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @"   SELECT @severity as Severity, ";
                sql += @"   m.METHOD_NAME AS Header1, ";
                sql += @" 		Case w.WORKFLOW_TYPE_ID ";
                sql += @" 			WHEN ''800825'' THEN ''Forecast Workflow'' ";
                sql += @" 			WHEN ''800826'' THEN ''Allocation Workflow'' ";
                sql += @" 			WHEN ''800827'' THEN ''Assortment Workflow'' ";
                sql += @" 			ELSE ''Workflow'' ";
                sql += @" 		END AS Header2, ";
                sql += @"   w.WORKFLOW_NAME AS Header3, ";
                sql += @"   w.WORKFLOW_DESCRIPTION AS Header4, ";
                sql += @"   au.USER_NAME AS Header5, ";
                sql += @"   @severity AS Header6 ";
                sql += @" 		, '' '' AS [Heading7] ";
                sql += @" 		, '' '' AS [Heading8] ";
                sql += @" 		, '' '' AS [Heading9] ";
                sql += @" FROM WORKFLOW_STEP_ALLOCATION AS wsa WITH (nolock) INNER JOIN ";
                sql += @"   WORKFLOW AS w WITH (nolock) ON w.WORKFLOW_RID = wsa.WORKFLOW_RID INNER JOIN ";
                sql += @"   METHOD AS m WITH (nolock) ON m.METHOD_RID = wsa.METHOD_RID INNER JOIN ";
                sql += @"   APPLICATION_USER AS au WITH (nolock) ON au.USER_RID = w.WORKFLOW_USER_RID ";
                sql += @" WHERE (wsa.ACTION_METHOD_TYPE = 802168) ";
                sql += @"   AND m.METHOD_RID = @inUseRID')) ";
                _dba.ExecuteNonQuery(sql);
                // End TT#1966-MD - JSmith - DC Fulfillment

                // Begin TT#2135-MD - JSmith - Planning Extract Method - Workflow
                sql = @" --================================= ";
                sql += @" -- 'Planning Extract Method Workflow' ";
                sql += @" -- Enum 339.1 ";
                sql += @" -- Extract	= 802169 ";
                sql += @" --================================= ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES        (339, 1, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT @severity as Severity, ";
                sql += @"        m.METHOD_NAME as Method, ";
                sql += @" 		Case w.WORKFLOW_TYPE_ID ";
                sql += @" 			WHEN ''800825'' THEN ''Forecast Workflow'' ";
                sql += @" 			WHEN ''800826'' THEN ''Allocation Workflow'' ";
                sql += @" 			WHEN ''800827'' THEN ''Assortment Workflow'' ";
                sql += @" 			ELSE ''Workflow'' ";
                sql += @" 		END AS Type, ";
                sql += @" 	w.WORKFLOW_NAME as Workflow, ";
                sql += @" 	w.WORKFLOW_DESCRIPTION as Description, ";
                sql += @" 	au.USER_NAME as UserID, ";
                sql += @" 	@severity as Fred ";
                sql += @" 	, '' '' AS [Heading7] ";
                sql += @" 	, '' '' AS [Heading8] ";
                sql += @" 	, '' '' AS [Heading9] ";
                sql += @" FROM WORKFLOW_STEP_OTSPLAN AS wsa WITH (nolock) INNER JOIN ";
                sql += @"   WORKFLOW AS w WITH (nolock) ON w.WORKFLOW_RID = wsa.WORKFLOW_RID INNER JOIN ";
                sql += @"   METHOD AS m WITH (nolock) ON m.METHOD_RID = wsa.METHOD_RID INNER JOIN ";
                sql += @"   APPLICATION_USER AS au WITH (nolock) ON au.USER_RID = w.WORKFLOW_USER_RID ";
                sql += @" WHERE (wsa.ACTION_METHOD_TYPE = 802169) ";
                sql += @"   AND m.METHOD_RID = @inUseRID')) ";
                _dba.ExecuteNonQuery(sql);

                sql = @" --================================= ";
                sql += @" -- 'Planning Extract Method-Task List' ";
                sql += @" -- Enum 339.2 ";
                sql += @" --================================= ";
                sql = @" INSERT INTO DETAIL_INFO (APPLICATION_LABEL_TYPE, SEQUENCE, SEVERITY, REFERENCE_TEXT) ";
                sql += @" VALUES        (339, 2, 'In Use', ";
                sql += @" [dbo].[UDF_MID_ENC_DEC](" + cEncryptKey + @",'INSERT INTO #TEMP (Severity, Header1, Header2, Header3, Header4, Header5, Header6, Header7, Header8, Header9) ";
                sql += @" SELECT	@severity as Severity, ";
                sql += @" m.METHOD_NAME AS Header1, ";
                sql += @" 		''Task List'' AS Header2, ";
                sql += @" 		tl.TASKLIST_NAME AS Header3, ";
                sql += @" 		'''' AS Header4, ";
                sql += @" 		au.USER_NAME AS Header5, ";
                sql += @" 		@severity AS Header6, ";
                sql += @" 		'' '' AS Heading7, ";
                sql += @" 		'' '' AS Heading8, ";
                sql += @" 		'' '' AS Heading9 ";
                sql += @" FROM	TASK_FORECAST_DETAIL with (nolock) INNER JOIN ";
                sql += @"         METHOD AS m WITH (nolock) ON TASK_FORECAST_DETAIL.METHOD_RID = m.METHOD_RID INNER JOIN ";
                sql += @"         TASKLIST AS tl with (nolock) INNER JOIN ";
                sql += @"         APPLICATION_USER AS au WITH (nolock) ";
                sql += @" 		ON tl.USER_RID = au.USER_RID ";
                sql += @" 		ON TASK_FORECAST_DETAIL.TASKLIST_RID = tl.TASKLIST_RID ";
                sql += @" WHERE	(tl.SYSTEM_GENERATED_IND = ''0'') ";
                sql += @" 		AND	(m.METHOD_RID = @inUseRID)')) ";
                _dba.ExecuteNonQuery(sql);
                // End TT#2135-MD - JSmith - Planning Extract Method - Workflow

                _dba.CommitData();
            }
            catch (Exception exc)
            {
                aMessageQueue.Enqueue("UNEXPECTED EXCEPTION: " + exc.ToString());
                throw;
            }
            finally
            {
                if (_dba != null)
                {
                    _dba.CloseUpdateConnection();
                }
            }
        }
    }
    //End TT#110-MD - JSmith - In Use Tool

    class RebuildHeaderFilterSP //: ICustomConversion
    {
        //=======
        // FIELDS
        //=======

        private DatabaseAccess _dba;


        //=============
        // CONSTRUCTORS
        //=============

        public RebuildHeaderFilterSP()
        {
            _dba = new DatabaseAccess();
        }

        //=============
        // METHODS
        //=============

        public void Execute()
        {
            try
            {
                FilterData filterData = new FilterData();
                DataTable dtHeaderFilters = filterData.ReadFiltersForType(filterTypes.HeaderFilter);
                DataTable dtAssortmentFilters = filterData.ReadFiltersForType(filterTypes.AssortmentFilter);

                //Delete the procedures
                foreach (DataRow drFilter in dtHeaderFilters.Rows)
                {
                    int filterRID = (int)drFilter["FILTER_RID"];
                    filterData.RemoveFilterProcedure(filterRID, filterTypes.HeaderFilter);

                    filter f = filterDataHelper.LoadExistingFilter(filterRID);
                    filterEngineSQL.CreateOrUpdateSqlForFilter(f);
                }
                foreach (DataRow drFilter in dtAssortmentFilters.Rows)
                {
                    int filterRID = (int)drFilter["FILTER_RID"];
                    filterData.RemoveFilterProcedure(filterRID, filterTypes.AssortmentFilter);

                    filter f = filterDataHelper.LoadExistingFilter(filterRID);
                    filterEngineSQL.CreateOrUpdateSqlForFilter(f);
                }

    
               
            }
            catch (Exception err)
            {
                string message = err.ToString();
                throw;
            }
        }
    }

    //Begin TT#1486-MD -jsobek -Store Filters - Insert samples
    class InsertSampleFilters //: ICustomConversion
    {
        //=======
        // FIELDS
        //=======

        private DatabaseAccess _dba;


        //=============
        // CONSTRUCTORS
        //=============

        public InsertSampleFilters()
        {
            _dba = new DatabaseAccess();
        }

        //=============
        // METHODS
        //=============

        public void Execute()
        {
            try
            {
                _dba.OpenUpdateConnection();
                _dba.ExecuteStoredProcedure("MID_FILTER_INSERT_STORE_SAMPLES", null);
                _dba.CommitData();
                _dba.CloseUpdateConnection();
            }
            catch (Exception err)
            {
                string message = err.ToString();
                throw;
            }
        }
    }
    //End TT#1486-MD -jsobek -Store Filters - Insert samples

    //Begin TT#1517-MD -jsobek -Store Service Optimization
    class InsertAllStoresAttribute //: ICustomConversion
    {
        //=======
        // FIELDS
        //=======

        private DatabaseAccess _dba;


        //=============
        // CONSTRUCTORS
        //=============

        public InsertAllStoresAttribute()
        {
            _dba = new DatabaseAccess();
        }

        //=============
        // METHODS
        //=============

        public void Execute()
        {
            try
            {
                //_dba.OpenUpdateConnection();
                //_dba.ExecuteStoredProcedure("MID_FILTER_INSERT_STORE_SAMPLES", null);
                //_dba.CommitData();
                //_dba.CloseUpdateConnection();


                FilterData filterData = new FilterData();
                int allStoresFilterRID = filterData.InsertFilterForAllStoresAttribute();
                StoreGroupMaint groupData = new StoreGroupMaint();
                groupData.StoreGroup_InsertAllStoresAttribute(allStoresFilterRID); //Separate insert for group so we can designate the SG_RID and the SGL_RID (both are 1)
                filter allStoresFilter = filterDataHelper.LoadExistingFilter(allStoresFilterRID);
                StoreMgmt.StoreGroup_AddOrUpdate(allStoresFilter, false, false);
            }
            catch (Exception err)
            {
                string message = err.ToString();
                throw;
            }
        }
    }


    class RefreshAttributeFilters //: ICustomConversion
    {
        //=======
        // FIELDS
        //=======

       
        //=============
        // CONSTRUCTORS
        //=============

        public RefreshAttributeFilters()
        {
            
        }

        //=============
        // METHODS
        //=============

        public void Execute()
        {
            try
            {
                SessionSponsor sponsor = new SessionSponsor();
                IMessageCallback messageCallback = new BatchMessageCallback();
                SessionAddressBlock SAB = new SessionAddressBlock(messageCallback, sponsor);

				// =========================
				// Register callback channel
				// =========================
                 System.Runtime.Remoting.Channels.IChannel channel = SAB.OpenCallbackChannel();


                 DoStartServices();	// TT#1627-MD - stodd - attribute set filter conversion


				// ===============
				// Create Sessions
				// ===============
                 SAB.CreateSessions((int)eServerType.Client | (int)eServerType.Application | (int)eServerType.Hierarchy | (int)eServerType.Store, false);	// TT#1627-MD - stodd - attribute set filter
                // ===================
                // Initialize sessions
                // ===================
                //SAB.ApplicationServerSession.Initialize();

                //SAB.HierarchyServerSession.Initialize();

	            int userRid = Include.AdministratorUserRID;
				string tasklistName = "Unknown";
				//if (taskListRow != null)
				//{
				//    userRid = Convert.ToInt32(taskListRow["USER_RID"], CultureInfo.CurrentUICulture);
				//    tasklistName = taskListRow["TASKLIST_NAME"].ToString();
				//}
				//else
				//{
				//    EventLog.WriteEntry(eventLogID, "Invalid tasklist RID:" + _taskListRid.ToString(), EventLogEntryType.Error);
				//    System.Console.Write("Invalid tasklist RID:" + _taskListRid.ToString());
				//    errorFound = true;
				//    return Convert.ToInt32(eMIDMessageLevel.Severe, CultureInfo.CurrentUICulture);
				//}

				eSecurityAuthenticate authentication = SAB.ClientServerSession.UserLogin(userRid, eProcesses.specialRequest);

                SAB.ClientServerSession.Initialize();
                //SAB.HierarchyServerSession.Initialize();  // TT#1905 - JSmith - Versioning_Test Interfaced after interface in a new store to a dynamic set when process the alloc override receve severe error.
                SAB.ApplicationServerSession.Initialize();
                
                SAB.StoreServerSession.Initialize();

                // Begin TT#1905 - JSmith - Versioning_Test Interfaced after interface in a new store to a dynamic set when process the alloc override receve severe error.
                // StoreServerSession must be initialized before HierarchyServerSession 
                SAB.HierarchyServerSession.Initialize();
                // End TT#1905 - JSmith - Versioning_Test Interfaced after interface in a new store to a dynamic set when process the alloc override receve severe error.


                // Begin TT#1861-MD - JSmith - Serialization error accessing the Audit
                //StoreMgmt.LoadInitialStoresAndGroups(SAB);
                StoreMgmt.LoadInitialStoresAndGroups(SAB, SAB.ClientServerSession);
                // End TT#1861-MD - JSmith - Serialization error accessing the Audit

                StoreMgmt.ProgressBarOptions pOpt = new StoreMgmt.ProgressBarOptions();
                pOpt.useProgressBar = false; //do not show a UI progress bar
                StoreMgmt.StoreGroupJoin_FirstTimeInit();	// TT#1517-MD - stodd - new sets not getting added to database
                StoreMgmt.StoreGroups_Refresh(pOpt);
            }
            catch (Exception err)
            {
                string message = err.ToString();
                throw;
            }
			// Begin TT#1627-MD - stodd - attribute set filter conversion
            finally
            {
                DoStopServices();
            }
			// End TT#1627-MD - stodd - attribute set filter conversion

        }

		// Begin TT#1627-MD - stodd - attribute set filter conversion
        public bool DoStartServices()
        {
            bool bSuccessful = true;
            ArrayList alServices;
            try
            {
                //this.Cursor = Cursors.WaitCursor;
                alServices = new ArrayList();
                //string ServiceLabel;
                //log.AddLogEntry("User has requested to start the services", eErrorType.message);
                //frame.SetStatusMessage("Starting the services ");
                //System.Threading.Thread.Sleep(2000);

                alServices.Add("MIDRetailControlService");
                alServices.Add("MIDRetailStoreService");
                alServices.Add("MIDRetailHierarchyService");
                alServices.Add("MIDRetailSchedulerService");

                foreach (string ServiceName in alServices)
                {
                    //ServiceLabel = (string)Service.Key;
                    //string ServiceName = (string)Service.Value;
                    if (!StartService(ServiceName))
                    {
                        bSuccessful = false;
                        break;
                    }
                }
                //frame.SetStatusMessage("Start issued for all services ");
            }
            catch { throw; }
            finally
            {
                //this.Cursor = Cursors.Default;
            }
            return bSuccessful;
        }

        public bool StartService(string ServiceName)
        {
            bool started = false;
            try
            {
                //SetStatusMessage("Starting service " + ServiceName);

                // Check whether the service is started.

                ServiceController sc = new ServiceController(ServiceName);

                if (sc.Status == ServiceControllerStatus.Stopped)
                {
                    // Start the service if the current status is stopped.
                    try
                    {
                        // Start the service, and wait until its status is "Running".
                        sc.Start();
                        sc.WaitForStatus(ServiceControllerStatus.Running, new TimeSpan(2, 10, 0));
                        started = true;

                        // Display the current service status.
                        //ucInstallationLog1.AddLogEntry(ServiceName + " successfully started.", eErrorType.message);
                    }
                    catch (System.ServiceProcess.TimeoutException)
                    {
                        //ucInstallationLog1.AddLogEntry("Service " + ServiceName + " did not start in a timely manner. Check Event Viewer", eErrorType.error);
                    }
                    catch (InvalidOperationException)
                    {
                        //ucInstallationLog1.AddLogEntry("Could not start service " + ServiceName, eErrorType.error);
                    }
                }
                else if (sc.Status == ServiceControllerStatus.Running)
                {
                    started = true;
                    //ucInstallationLog1.AddLogEntry(ServiceName + " is already running.", eErrorType.message);
                }
            }
            catch (InvalidOperationException)
            {
                started = true;
                //ucInstallationLog1.AddLogEntry(ServiceName + " not found.", eErrorType.error);
            }

            return started;
        }

        public bool DoStopServices()
        {
            bool bSuccessful = true;
            ArrayList alServices;
            string ServiceLabel;
            try
            {
                alServices = new ArrayList();

                alServices.Add("MIDRetailSchedulerService");
                alServices.Add("MIDRetailStoreService");
                alServices.Add("MIDRetailHierarchyService");
                alServices.Add("MIDRetailControlService");


                foreach (string ServiceName in alServices)
                {
                    //string ServiceName = (string)Service.Value;
                    StopService(ServiceName, false);
                    //string location = (string)htServicesLocation[ServiceName];
                    //int count = 0;
                    //while (frame.IsFileLocked(location))
                    //{
                    //    ++count;
                    //    if (count > 10)
                    //    {
                    //        break;
                    //    }
                    //    System.Threading.Thread.Sleep(5000);
                    //}
                    //frame.ProgressBarIncrementValue(1);
                }
                //frame.SetStatusMessage("Stop issued for all services ");

            }
            catch { throw; }
            finally
            {
                //this.Cursor = Cursors.Default;
            }
            return bSuccessful;
        }

        public bool StopService(string ServiceName, bool newInstall)
        {
            bool stopped = false;
            try
            {
                //SetStatusMessage("Stopping service " + ServiceName);
                // Check whether the service is running.

                ServiceController sc = new ServiceController(ServiceName);

                if (sc.Status == ServiceControllerStatus.Running)
                {
                    // Stop the service if the current status is running.
                    try
                    {
                        // Start the service, and wait until its status is "Running".
                        sc.Stop();
                        while (sc.Status != ServiceControllerStatus.Stopped)
                        {
                            sc.WaitForStatus(ServiceControllerStatus.Stopped, new TimeSpan(0, 10, 0));
                            //Thread.Sleep(5000);
                        }
                        stopped = true;

                        // Display the current service status.
                        //ucInstallationLog1.AddLogEntry(ServiceName + " successfully stopped.", eErrorType.message);
                    }
                    catch (System.ServiceProcess.TimeoutException)
                    {
                        //ucInstallationLog1.AddLogEntry("Service " + ServiceName + " did not stop in a timely manner. Check Event Viewer", eErrorType.error);
                    }
                    catch (InvalidOperationException)
                    {
                        //ucInstallationLog1.AddLogEntry("Could not stop service " + ServiceName, eErrorType.error);
                    }
                }
                else if (sc.Status == ServiceControllerStatus.Stopped)
                {
                    stopped = true;
                   // ucInstallationLog1.AddLogEntry(ServiceName + " is already stopped.", eErrorType.message);
                }
            }
            catch (InvalidOperationException)
            {
                stopped = true;
                if (!newInstall)
                {
                    //ucInstallationLog1.AddLogEntry(ServiceName + " not found.", eErrorType.error);
                }
            }

            return stopped;
        }
		// End TT#1627-MD - stodd - attribute set filter conversion
    }
    //End TT#1517-MD -jsobek -Store Service Optimization
}
